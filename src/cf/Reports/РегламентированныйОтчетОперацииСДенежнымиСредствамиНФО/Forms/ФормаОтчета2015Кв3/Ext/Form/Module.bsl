&НаСервере
Перем СохраненныеДанныеОтчета;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обход ошибки платформы Параметр сеанса отсутствует или удален.
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.мВерсияФормы = "01/10/2015";
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_0", Новый Цвет(255, 255, 192));
	мСтруктураЦветовРаскраски.Вставить("_3", Новый Цвет(230, 240, 220));
	мСтруктураЦветовРаскраски.Вставить("_4", Новый Цвет(192, 220, 192));
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",
		Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеМассивДопФайлов",
		ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор));
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеМассивИменУдаленныхДопФайлов",
		ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор));
	
	ДатаПодписи = ТекущаяДатаСеанса();
	
	Инициализация(Параметры.БезОткрытияФормы);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы111");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы112");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы113");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы114");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы115");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы116");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы121");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы122");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы130");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы211");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы212");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы213");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы214");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы215");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы220");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы900");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("мТипАдреса");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели");
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеМассивДопФайлов");
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеМассивИменУдаленныхДопФайлов");
	СтруктураРеквизитовФормы.Вставить("СоставДополнительныхФайловИзменен", Ложь);
	СтруктураРеквизитовФормы.Вставить("ПредельныйРазмерФайлаВыгрузки", 10 * 1024 * 1024);
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет",
		Документы.РегламентированныйОтчет.ПустаяСсылка());
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

#Область Инициализация

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный";
	
	// Очистка для случая повторного запуска инициализации,
	// например, при загрузке отчета из файла выгрузки.
	ТабличныйДокумент.Очистить();
	
	ТабличныйДокумент.Вывести(Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы,
		".Форма.") - 1), 7)].ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы,
		"ФормаОтчета")) + "_" + СтруктураРеквизитовФормы.НаимТекущегоРаздела));
	
	ИнициализироватьМногострочныеЧасти();
	
	ИнициализироватьОбычныеРазделы();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	СтруктураРеквизитовФормы.ВидДокумента = 0;
	НомерКорректировки = 1;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			ВосстановитьСохраненныеДанные();
		Иначе
			СтруктураРеквизитовФормы.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			СтруктураРеквизитовФормы.мТипАдреса = ТипАдресаПоУмолчанию();
			ТабличныйДокумент.Области.ОснованиеНаправленияОтчетности.Значение = "Первичное направление отчетности";
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
		КонецЕсли;
		Модифицированность = Истина;
	Иначе
		ВосстановитьСохраненныеДанные();
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
			Модифицированность = Истина;
		КонецЕсли;
		Если НЕ БезОткрытияФормы И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
			ЗаблокироватьДанныеДляРедактирования(
				СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьСведенияОПоказателяхОтчета();
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	ЗаполнитьПериодОтчета();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
		ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		Если ТабличныйДокумент.Области.КодОснВидаДеятельности.Значение <> "120" Тогда
			ТабличныйДокумент.Области.ВидДеятельностиНФО.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;
	
	ОтобразитьНомерКорректировки(ЭтаФорма);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	НомерКорректировки = ?(СтруктураРеквизитовФормы.ВидДокумента = 0, 0, НомерКорректировки);
	ТабличныйДокумент.Области.НомерКорректировки.Значение = Строка(НомерКорректировки);
	ЗаполнитьДатуВЯчейках(ЭтаФорма);
	
	РегламентированнаяОтчетность.ДобавитьКнопкуПрисоединенныеФайлы(ЭтаФорма);
	
	РегламентированнаяОтчетностьКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "УдалитьБанкРоссии");
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПриИнициализации(ЭтотОбъект,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногострочныеЧасти()
	
	// Идентификаторы многострочных групп.
	СтруктураРеквизитовФормы.мИдГруппы111 = "П11100";
	СтруктураРеквизитовФормы.мИдГруппы112 = "П11200";
	СтруктураРеквизитовФормы.мИдГруппы113 = "П11300";
	СтруктураРеквизитовФормы.мИдГруппы114 = "П11400";
	СтруктураРеквизитовФормы.мИдГруппы115 = "П11500";
	СтруктураРеквизитовФормы.мИдГруппы116 = "П11600";
	СтруктураРеквизитовФормы.мИдГруппы121 = "П12100";
	СтруктураРеквизитовФормы.мИдГруппы122 = "П12200";
	СтруктураРеквизитовФормы.мИдГруппы130 = "П13000";
	СтруктураРеквизитовФормы.мИдГруппы211 = "П21100";
	СтруктураРеквизитовФормы.мИдГруппы212 = "П21200";
	СтруктураРеквизитовФормы.мИдГруппы213 = "П21300";
	СтруктураРеквизитовФормы.мИдГруппы214 = "П21400";
	СтруктураРеквизитовФормы.мИдГруппы215 = "П21500";
	СтруктураРеквизитовФормы.мИдГруппы220 = "П22000";
	СтруктураРеквизитовФормы.мИдГруппы900 = "П90000";// мн. группа для доп. файлов
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 6;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы = 8;
	
	// Структура с описанием свойств каждой группы в отдельности.
	СтруктураМногострочныхЧастей = Новый Структура;
	
	// Группа П11100.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1110001");
	ИменаГраф.Добавить("П1110002");
	ИменаГраф.Добавить("П1110003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы111, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П11200.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1120001");
	ИменаГраф.Добавить("П1120002");
	ИменаГраф.Добавить("П1120003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы112, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П11300.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1130001");
	ИменаГраф.Добавить("П1130002");
	ИменаГраф.Добавить("П1130003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы113, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П11400.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1140001");
	ИменаГраф.Добавить("П1140002");
	ИменаГраф.Добавить("П1140003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы114, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П11500.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1150001");
	ИменаГраф.Добавить("П1150002");
	ИменаГраф.Добавить("П1150003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы115, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П11600.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1160001");
	ИменаГраф.Добавить("П1160002");
	ИменаГраф.Добавить("П1160003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы116, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П12100.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1210001");
	ИменаГраф.Добавить("П1210002");
	ИменаГраф.Добавить("П1210003");
	ИменаГраф.Добавить("П1210004");
	ИменаГраф.Добавить("П1210005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы121, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П12200.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1220001");
	ИменаГраф.Добавить("П1220002");
	ИменаГраф.Добавить("П1220003");
	ИменаГраф.Добавить("П1220004");
	ИменаГраф.Добавить("П1220005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы122, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П13000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П1300001");
	ИменаГраф.Добавить("П1300002");
	ИменаГраф.Добавить("П1300003");
	ИменаГраф.Добавить("П1300004");
	ИменаГраф.Добавить("П1300005");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы130, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П21100.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П2110001");
	ИменаГраф.Добавить("П2110002");
	ИменаГраф.Добавить("П2110003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы211, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П21200.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П2120001");
	ИменаГраф.Добавить("П2120002");
	ИменаГраф.Добавить("П2120003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы212, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П21300.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П2130001");
	ИменаГраф.Добавить("П2130002");
	ИменаГраф.Добавить("П2130003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы213, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П21400.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П2140001");
	ИменаГраф.Добавить("П2140002");
	ИменаГраф.Добавить("П2140003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы214, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П21500.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П2150001");
	ИменаГраф.Добавить("П2150002");
	ИменаГраф.Добавить("П2150003");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы215, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П22000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П2200001");
	ИменаГраф.Добавить("П2200002");
	ИменаГраф.Добавить("П2200003");
	ИменаГраф.Добавить("П2200004");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы220, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 1, 0, ИменаПодчиненныхГрупп));
	
	// Группа П90000.
	ИменаГраф = Новый Массив;
	ИменаГраф.Добавить("П9000001");
	ИменаПодчиненныхГрупп = Новый Массив;
	СтруктураМногострочныхЧастей.Вставить(
		СтруктураРеквизитовФормы.мИдГруппы900, Новый Структура(
		"ИменаГраф,ИсхКолСтрок,УровеньПодчинения,ИменаПодчиненныхГрупп",
		ИменаГраф, 0, 0, ИменаПодчиненныхГрупп));
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = СтруктураМногострочныхЧастей;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьМногоуровневыеРазделы()
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	мСтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	ИменаПодчиненныхРазделов = Новый Массив;
	ИменаПодчиненныхРазделов.Добавить("Раздел11");
	ИменаПодчиненныхРазделов.Добавить("Раздел12");
	ИменаПодчиненныхРазделов.Добавить("Раздел13");
	СтруктураРаздела.Вставить("ИменаПодчиненныхРазделов", ИменаПодчиненныхРазделов);
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураРаздела.Вставить("НаимСтраницы", "Операции по счетам");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы111);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы112);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы113);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы114);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы115);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы116);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел1");
	СтруктураРаздела.Вставить("Многостраничность");
	СтруктураРаздела.Вставить("НаимГруппыСтраниц", "Раздел 1.1");
	СтруктураРаздела.Вставить("НаимСтраницы", "Виды и суммы операций");
	СтруктураРаздела.Вставить("Подчиненность");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел11", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы121);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы122);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел1");
	СтруктураРаздела.Вставить("НаимГруппыСтраниц", "Раздел 1.2");
	СтруктураРаздела.Вставить("Подчиненность");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел12", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы130);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	СтруктураРаздела.Вставить("ИмяГлавногоРаздела", "Раздел1");
	СтруктураРаздела.Вставить("НаимГруппыСтраниц", "Раздел 1.3");
	СтруктураРаздела.Вставить("Подчиненность");
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел13", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы211);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы212);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы213);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы214);
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы215);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел21", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы220);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("Раздел22", СтруктураРаздела);
	
	СтруктураРаздела = Новый Структура;
	ИменаГруппМнЧ = Новый Массив;
	ИменаГруппМнЧ.Добавить(СтруктураРеквизитовФормы.мИдГруппы900);
	СтруктураРаздела.Вставить("ИменаГруппМнЧ", ИменаГруппМнЧ);
	мСтруктураМногоуровневыхРазделов.Вставить("ДопФайлы", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	СохрТаблДокумент = Новый ТабличныйДокумент;
	СохрТаблДокумент.Вывести(ТабличныйДокумент);
	
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(Элем.Ключ);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(Элем.Ключ, ТекВетка);
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТаблДокумент);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПодчиненныеРазделы(Знач ИмяРаздела, Ветка)
	
	Если мСтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = мСтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяПодчРаздела);
			
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяПодчРаздела, ПодчВетка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьОбычныеРазделы()
	
	СтруктураДанныхТитульный = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОПоказателяхОтчета()
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",              СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	АвтозаполняемыеПоказатели
		= РегламентированнаяОтчетностьПереопределяемый.ПолучитьСведенияОПоказателяхОтчета(
		Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7),
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета);
	
	Если АвтозаполняемыеПоказатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Показатель Из АвтозаполняемыеПоказатели Цикл
		Если Показатель.Значение[0] Тогда
			СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", АвтозаполняемыеПоказатели);
	
КонецПроцедуры

&НаСервере
Функция ТипАдресаПоУмолчанию()
	
	Результат = "АдрПочт";
	
	Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
		Адреса.АдрФакт = "";
	Иначе
		Адреса.АдрФакт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрФакт);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
		Адреса.АдрЮР = "";
	Иначе
		Адреса.АдрЮР = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрЮР);
	КонецЕсли;
	
	Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
		Адреса.АдрПочт = "";
	Иначе
		Адреса.АдрПочт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрПочт);
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(Адреса.АдрПочт) Тогда
		Результат = "АдрПочт";
	ИначеЕсли НЕ ПустаяСтрока(Адреса.АдрФакт) Тогда
		Результат = "АдрФакт";
	ИначеЕсли НЕ ПустаяСтрока(Адреса.АдрЮР) Тогда
		Результат = "АдрЮР";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() Экспорт
	
	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Титульный";
	СтрокаУровня1.Представление            = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел1";
	СтрокаУровня1.Представление            = "Раздел 1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел21";
	СтрокаУровня1.Представление            = "Раздел 2.1";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Раздел22";
	СтрокаУровня1.Представление            = "Раздел 2.2";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ДопФайлы";
	СтрокаУровня1.Представление            = "Дополнительные файлы";
	СтрокаУровня1.ОриентацияСтраницы       = "Портрет";
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 2;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСпискиВыбора()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("СпискиВыбора2015Кв3");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,,
				МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	//Титульный.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "КодОснВидаДеятельности", 3, ,
		"Выбор кода основного вида деятельности", КоллекцияСписковВыбора["КодыВидовДеятельности"]);
	
	//Раздел 1.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П1110001", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П1120001", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П1130001", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П1140001", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П1150001", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П1160001", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций1"]);
	
	//Раздел 1.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П1210002", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций1"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П1220002", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций1"]);
	
	//Раздел 1.3.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П1300002", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций1"]);
	
	//Раздел 2.1.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П2110001", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П2120001", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П2130001", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П2140001", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций2"]);
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П2150001", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций2"]);
	
	//Раздел 2.2.
	РегламентированнаяОтчетность.ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "П2200002", 5, ,
		"Выбор кода вида операции", КоллекцияСписковВыбора["КодыВидовОпераций2"]);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(
		НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодОтчета()
	
	ТабличныйДокумент.Области.ОтчетМесяц.Значение = Формат(
		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=""ММММ""");
	
	ТабличныйДокумент.Области.ОтчетГод.Значение = Формат(
		Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧГ=");
	
КонецПроцедуры

#КонецОбласти

#Область СохранениеДанныхОтчета

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Вариант = СтруктураРеквизитовФормы.ВидДокумента * НомерКорректировки;
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, , Автосохранение, Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	Если Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		НаименованиеТекущегоРаздела = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	Иначе
		НаименованиеТекущегоРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением( , ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаименованиеТекущегоРаздела);
	
	ВидДокументаНомерКорректировкиИзменен = Неопределено;
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Отчет с видом %1 уже существует.
			|Сохранить отчет с таким же видом?'"), ?(Вариант = 0, """Первичный""", """Корректирующий/" + Вариант + """"));
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки", Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = ДополнительныеПараметры.ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, Вариант, ВыполняемоеОповещение, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки)
	
	Если ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидОтчета", Вариант);
		
		ФормаВопроса = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("ВопросПриИзмененииВидаДокументаНомераКорректировки", ПараметрыФормы);
		ФормаВопроса.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ДополнительныеПараметры = Новый Структура("Автосохранение, Вариант, ВыполняемоеОповещение", Автосохранение, Вариант, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВопроса.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВопроса.Открыть();
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Ложь, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	Вариант = ДополнительныеПараметры.Вариант;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если КодВозврата = КодВозвратаДиалога.Да
		ИЛИ КодВозврата = КодВозвратаДиалога.Нет Тогда
		ВидДокументаНомерКорректировкиИзменен = ?(КодВозврата = КодВозвратаДиалога.Да, Истина, Ложь);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ВидДокументаНомерКорректировкиИзменен Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Автосохранение", Автосохранение);
		ДопПараметры.Вставить("Вариант", Вариант);
		ДопПараметры.Вставить("ВыполняемоеОповещение", ВыполняемоеОповещение);
		Оповещение = Новый ОписаниеОповещения("ВопросПриИзмененииВидаДокументаЗавершениеПослеВыполненияПроверки", ЭтотОбъект, ДопПараметры);
		
		Если ДокументооборотСКОКлиентСервер.ПодсистемаУдалитьЦБСуществует() Тогда
			МодульДокументооборотСБанкомРоссииКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УдалитьДокументооборотСБанкомРоссииКлиент");
			МодульДокументооборотСБанкомРоссииКлиент.ПроверитьВозможностьВыполненияОперации(Оповещение, ЭтаФорма);
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, ВидДокументаНомерКорректировкиИзменен, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаДокументаЗавершениеПослеВыполненияПроверки(Результат, ВходящийКонтекст) Экспорт
	
	Если Результат.Выполнено И Результат.ВыполнениеРазрешено Тогда
		Автосохранение = ВходящийКонтекст.Автосохранение;
		Вариант = ВходящийКонтекст.Вариант;
		ВыполняемоеОповещение = ВходящийКонтекст.ВыполняемоеОповещение;
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
		РезультатСохранения = Сохранить(Автосохранение, , Вариант, Истина, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	ИначеЕсли НЕ Результат.Выполнено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'При проверке доступа к интернет-поддержке пользователя возникла неизвестная ошибка.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(КодИФНС = "не применимо", ПодобныйОтчетСуществует, Вариант, ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки, Автосохранение, НаимТекРаздела)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма, КодИФНС)
	   И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма, КодИФНС) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено) ИЛИ (СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> СтруктураРеквизитовФормы.мВариант)) Тогда
		
		Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
			
		ИначеЕсли Вариант <> СтруктураРеквизитовФормы.мВариант Тогда
			
			ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПодобныйОтчетСуществует
	 ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение, КодИФНС, Вариант, , НаимТекРаздела);
	
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь, КодИФНС = "не применимо", Вариант, ВидДокументаНомерКорректировкиИзменен = Неопределено, НаимТекРаздела) Экспорт
	
	ДанныеДляРазблокирования = Неопределено;
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы Тогда
			ДанныеДляРазблокирования = Новый Структура("Ключ,ИдФормы",
			СтруктураРеквизитовФормы.мСохраненныйДок, ЭтаФорма.УникальныйИдентификатор);
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(
		ЭтаФорма, КодИФНС, Автосохранение, Вариант, ВидДокументаНомерКорректировкиИзменен,
		СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета           = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета       = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), СтрНайти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;
	СтруктураРеквизитовФормы.мСохраненныйДок.Вид                      = Вариант;
	СтруктураРеквизитовФормы.мСохраненныйДок.ПредставлениеВида        = РегламентированнаяОтчетность.ПредставлениеВидаДокумента(СтруктураРеквизитовФормы.мСохраненныйДок.Вид);
	СтруктураРеквизитовФормы.мВариант                                 = Вариант;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела);
	
	ПоказателиОтчета = Новый Структура();
	ПоказателиОтчета.Вставить("ПолеТабличногоДокументаТитульный", СтруктураДанныхТитульный);
	
	СписокСохранения = Новый Структура();
	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Вставить("ТипАдреса", СтруктураРеквизитовФормы.мТипАдреса);
	
	// Вставляем данные многоуровневых разделов.
	ДанныеМногоуровневыхРазделов = Новый Структура;
	Для каждого Элем Из мСтруктураМногоуровневыхРазделов Цикл
		СтруктураРаздела = Элем.Значение;
		Если НЕ СтруктураРаздела.Свойство("Подчиненность") Тогда
			ДанныеМногоуровневыхРазделов.Вставить(Элем.Ключ, ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]));
		КонецЕсли;
	КонецЦикла;
	СписокСохранения.Вставить("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов);
	
	МассивДопФайлов = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеМассивДопФайлов"]);
	Если МассивДопФайлов.Количество() > 0 Тогда
		МассивИменДопФайлов = Новый Массив;
		Для каждого СтруктураХранения Из МассивДопФайлов Цикл
			МассивИменДопФайлов.Добавить(СтруктураХранения["Имя"]);
		КонецЦикла;
		СписокСохранения.Вставить("МассивИменДопФайлов", МассивИменДопФайлов);
	КонецЕсли;
	
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПередЗаписьюНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
		РегламентированнаяОтчетность.СохранитьСтатусОтправкиРеглОтчета(ЭтаФорма);
		СохранитьДанныеДополнительныхФайлов();
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"),
				РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	СохранитьДеревоСтраницОтчета(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	// ПроцессыОбработкиДокументов
	//
	РегламентированнаяОтчетность.ПослеЗаписиНаСервере(ЭтотОбъект,
		СтруктураРеквизитовФормы.мСохраненныйДок, Новый Структура);
	//
	// ПроцессыОбработкиДокументов
	
	Модифицированность = Ложь;
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Если НЕ СтруктураРеквизитовФормы.мБезОткрытияФормы
		И НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		ЗаблокироватьДанныеДляРедактирования(СтруктураРеквизитовФормы.мСохраненныйДок, , ЭтаФорма.УникальныйИдентификатор);
	КонецЕсли;
	
	Если ДанныеДляРазблокирования <> Неопределено Тогда
		РазблокироватьДанныеДляРедактирования(ДанныеДляРазблокирования.Ключ, ДанныеДляРазблокирования.ИдФормы);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеДополнительныхФайлов()
	
	Если СтруктураРеквизитовФормы.СоставДополнительныхФайловИзменен
	 ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда
		
		МассивИменУдаленныхДопФайлов = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеМассивИменУдаленныхДопФайлов"]);
		Для каждого ИмяУдФайла Из МассивИменУдаленныхДопФайлов Цикл
			ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
			ЗаписьРегистраСведений.ВидДополнительногоФайла = ИмяУдФайла;
			ЗаписьРегистраСведений.Удалить();
		КонецЦикла;
		
		МассивДопФайлов = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеМассивДопФайлов"]);
		Для каждого СтруктураХранения Из МассивДопФайлов Цикл
			ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
			ЗаписьРегистраСведений.ВидДополнительногоФайла = СтруктураХранения["Имя"];
			ЗаписьРегистраСведений.СодержимоеФайла = Новый ХранилищеЗначения(
				ПолучитьИзВременногоХранилища(СтруктураХранения["Адрес"]));
			ЗаписьРегистраСведений.ИмяФайла = СтруктураХранения["Имя"];
			ЗаписьРегистраСведений.Размер = СтруктураХранения["Размер"];
			ЗаписьРегистраСведений.Записать();
		КонецЦикла;
		
		СтруктураРеквизитовФормы.СоставДополнительныхФайловИзменен = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоСтраницОтчета(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище.
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВосстановлениеСохраненныхДанныхОтчета

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногоуровневыхРазделов;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	// В случае, если формы была скопирована по F9, то проверим, не изменилась ли организация.
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	ДатаПодписи = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	Комментарий	= СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;
	
	СписокСохранения = СохраненныеДанныеОтчета();
	
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета );
	
	Если СписокСохранения.Свойство("ДанныеМногоуровневыхРазделов", ДанныеМногоуровневыхРазделов) Тогда
		Для Каждого ЭлементСтруктуры Из ДанныеМногоуровневыхРазделов Цикл
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ЭлементСтруктуры.Ключ]
				= ПоместитьВоВременноеХранилище(ЭлементСтруктуры.Значение, УникальныйИдентификатор);
		КонецЦикла;
	КонецЕсли;
	
	СписокСохранения.Свойство("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	Если СтруктураРеквизитовФормы.мАвтоВыборКодов = Неопределено Тогда
		СтруктураРеквизитовФормы.мАвтоВыборКодов = Ложь;
	КонецЕсли;
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("ТипАдреса", СтруктураРеквизитовФормы.мТипАдреса);
	Если СтруктураРеквизитовФормы.мТипАдреса = Неопределено
		ИЛИ ПустаяСтрока(СтруктураРеквизитовФормы.мТипАдреса)
		ИЛИ СтрНайти("АдрФакт, АдрЮР, АдрПочт", СтруктураРеквизитовФормы.мТипАдреса) = 0 Тогда
		СтруктураРеквизитовФормы.мТипАдреса = ТипАдресаПоУмолчанию();
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураДанныхТитульный = ПоказателиОтчета["ПолеТабличногоДокументаТитульный"];
	
	ИмяТекРаздела = "Титульный";
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Обл = ТабличныйДокумент.Области[ЭлСтруктуры.Ключ];
		Если Обл <> Неопределено Тогда
			Обл.Значение = ЭлСтруктуры.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтруктураДанныхТитульный.Свойство("ОснованиеНаправленияОтчетности") Тогда
		СтруктураДанныхТитульный.Вставить("ОснованиеНаправленияОтчетности", "Первичное направление отчетности");
		ТабличныйДокумент.Области["ОснованиеНаправленияОтчетности"].Значение = "Первичное направление отчетности";
	КонецЕсли;
	Если НЕ СтруктураДанныхТитульный.Свойство("ВидДеятельностиНФО") Тогда
		СтруктураДанныхТитульный.Вставить("ВидДеятельностиНФО", "");
		ТабличныйДокумент.Области["ВидДеятельностиНФО"].Значение = "";
	КонецЕсли;
	Если НЕ СтруктураДанныхТитульный.Свойство("АдресЭлектроннойПочты") Тогда
		СтруктураДанныхТитульный.Вставить("АдресЭлектроннойПочты", "");
		ТабличныйДокумент.Области["АдресЭлектроннойПочты"].Значение = "";
	КонецЕсли;
	Если НЕ СтруктураДанныхТитульный.Свойство("Примечание") Тогда
		СтруктураДанныхТитульный.Вставить("Примечание", "");
		ТабличныйДокумент.Области["Примечание"].Значение = "";
	КонецЕсли;
	
	Если СписокСохранения.Свойство("МассивИменДопФайлов") Тогда
		ВосстановитьДанныеДополнительныхФайлов(СписокСохранения["МассивИменДопФайлов"]);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
КонецПроцедуры

&НаСервере
Функция СохраненныеДанныеОтчета()
	
	Если СохраненныеДанныеОтчета = Неопределено Тогда
		СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьДанныеДополнительныхФайлов(МассивИменДопФайлов)
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок <> Неопределено Тогда
		
		МассивДопФайлов = Новый Массив;
		
		Для каждого ИмяДопФайла Из МассивИменДопФайлов Цикл
			ЗаписьРегистраСведений = РегистрыСведений.ДополнительныеФайлыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.РегламентированныйОтчет = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
			ЗаписьРегистраСведений.ВидДополнительногоФайла = ИмяДопФайла;
			ЗаписьРегистраСведений.Прочитать();
			
			СтруктураХранения = Новый Структура("Имя,Адрес,Размер",
				ЗаписьРегистраСведений.ИмяФайла, ПоместитьВоВременноеХранилище(
				ЗаписьРегистраСведений.СодержимоеФайла.Получить(), Новый УникальныйИдентификатор),
				ЗаписьРегистраСведений.Размер);
			
			МассивДопФайлов.Добавить(СтруктураХранения);
			
		КонецЦикла;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеМассивДопФайлов",
			ПоместитьВоВременноеХранилище(МассивДопФайлов, УникальныйИдентификатор));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийВТабличномДокументе

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Если СтрЧислоВхождений(Область.Имя, "ДобавитьСтроку") = 1 И Область.Текст <> "" Тогда
		ДобавитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтроку") = 1 И Область.Текст <> "" Тогда
		УдалитьСтроку("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "ДобавитьСтраницу") > 0 И Область.Текст <> "" Тогда
		ДобавитьСтраницу("");
	ИначеЕсли СтрЧислоВхождений(Область.Имя, "УдалитьСтраницу") > 0 И Область.Текст <> "" Тогда
		УдалитьСтраницу("");
	КонецЕсли;
	
	Если Лев(Область.Имя, 8) = "П9000001" Тогда
		СтандартнаяОбработка = Ложь;
		СохранитьНаДискФайл(Область.Имя);
		Возврат;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(
		ЭтаФорма, Область, СтандартнаяОбработка) И Область.Имя <> "ОргПочтАдрес" Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПоказателейСКодамиСтран = "П1210001|П1220001|П1300001|П2200001";
	ИменаПоказателейСКодамиВалют = "Валюта|П1210003|П1220003|П1300003";
	
	Если Область.Имя = "ОснованиеНаправленияОтчетности" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОснованияНапрОтч = Новый СписокЗначений;
		ОснованияНапрОтч.Добавить("Первичное направление отчетности");
		ОснованияНапрОтч.Добавить("Направление уточненных данных");
		ОснованияНапрОтч.Добавить("Направление в связи с полученным Предписанием Банка России");
		Оп = Новый ОписаниеОповещения("ВыбратьИзСпискаОснованиеНаправленияОтчетностиЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(Оп, ОснованияНапрОтч);
		
		Возврат;
		
	ИначеЕсли Область.Имя = "ВидДеятельностиНФО" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВидыДеятельностиНФО = Новый СписокЗначений;
		ВидыДеятельностиНФО.Добавить("", "<Пустое значение>");
		ВидыДеятельностиНФО.Добавить("Кредитный потребительский кооператив");
		ВидыДеятельностиНФО.Добавить("Сельскохозяйственный кредитный потребительский кооператив");
		Оп = Новый ОписаниеОповещения("ВыбратьИзСпискаВидДеятельностиНФОЗавершение", ЭтотОбъект);
		ПоказатьВыборИзСписка(Оп, ВидыДеятельностиНФО);
		
		Возврат;
		
	ИначеЕсли СтрНайти(ИменаПоказателейСКодамиСтран, Лев(Область.Имя, 8)) > 0 Тогда
		
		СформироватьТаблицуКодовСтран();
		ТекстПриВыборе = "Выбор кода страны";
		ВвестиПоказатель(Элемент, Область, Лев(Область.Имя, 8), Ложь, ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	ИначеЕсли Область.Имя = "ОргПочтАдрес" Тогда
		
		Адреса = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			СтруктураРеквизитовФормы.Организация, ДатаПодписи, "АдрФакт, АдрЮР, АдрПочт");
		
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрФакт, ",", "")) Тогда
			Адреса.АдрФакт = "";
		Иначе
			Адреса.АдрФакт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрФакт);
		КонецЕсли;
			
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрЮР, ",", "")) Тогда
			Адреса.АдрЮР = "";
		Иначе
			Адреса.АдрЮР = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрЮР);
		КонецЕсли;
			
		Если ПустаяСтрока(СтрЗаменить(Адреса.АдрПочт, ",", "")) Тогда
			Адреса.АдрПочт = "";
		Иначе
			Адреса.АдрПочт = РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(Адреса.АдрПочт);
		КонецЕсли;
		
		ТЗВыбора.Очистить();
		
		НовСтр = ТЗВыбора.Добавить();
		НовСтр.Код = "Пустое значение";
		НовСтр.Название = "Адрес не указывается";
		
		Если ЗначениеЗаполнено(Адреса.АдрПочт) Тогда
			НовСтр = ТЗВыбора.Добавить();
			НовСтр.Код = "Почтовый адрес";
			НовСтр.Название = Адреса.АдрПочт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Адреса.АдрФакт) Тогда
			НовСтр = ТЗВыбора.Добавить();
			НовСтр.Код = "Фактический адрес";
			НовСтр.Название = Адреса.АдрФакт;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Адреса.АдрЮР) Тогда
			НовСтр = ТЗВыбора.Добавить();
			НовСтр.Код = "Юридический адрес";
			НовСтр.Название = Адреса.АдрЮР;
		КонецЕсли;
		
		Если ТЗВыбора.Количество() = 1 Тогда
			ПоказатьПредупреждение(,НСтр("ru='В контактной информации не указаны адреса организации.'"));
			Возврат;
		КонецЕсли;
		
		ПоискЗначение = ?(ПустаяСтрока(Область.Значение), "Адрес не указывается", Область.Значение);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок",           "Выберите адрес");
		ПараметрыФормы.Вставить("ТаблицаЗначений",     ТЗВыбора);
		ПараметрыФормы.Вставить("СтруктураДляПоиска",  Новый Структура("Название", ПоискЗначение));
		ПараметрыФормы.Вставить("НаимКолонкиКод",      "Тип адреса");
		ПараметрыФормы.Вставить("НаимКолонкиНазвание", "Адрес");
		
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборАдресаОрганизацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли СтрНайти(ИменаПоказателейСКодамиВалют, Лев(Область.Имя, 8)) > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ФормаВыбора = ПолучитьФорму(
			"Справочник.Валюты.ФормаВыбора", Новый Структура("РежимВыбора", Истина), ЭтаФорма);
		ФормаВыбора.Заголовок = "Выбор валюты";
		ДополнительныеПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуВыбораВалютыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбора.Открыть();
		
	ИначеЕсли Область.Имя = "КодыИныхВидовДеятельности" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокКодовВД = Новый СписокЗначений;
		СписокКодовВД.Добавить("020", "020 - управляющая компания инвестиционного фонда, паевого инвестиционного фонда и негосударственного пенсионного фонда");
		СписокКодовВД.Добавить("090", "090 - страховая организация (за исключением страховых медицинских организаций, осуществляющих деятельность исключительно в сфере обязательного медицинского страхования), страховой брокер, общество взаимного страхования");
		СписокКодовВД.Добавить("100", "100 - негосударственный пенсионный фонд");
		СписокКодовВД.Добавить("110", "110 - микрофинансовая организация");
		СписокКодовВД.Добавить("120", "120 - кредитный потребительский кооператив, в том числе сельскохозяйственный кредитный потребительский кооператив");
		СписокКодовВД.Добавить("180", "180 - ломбард");
		СписокКодовВД.Добавить("000", "000 - иные виды деятельности");
		
		ЭлемСписка = СписокКодовВД.НайтиПоЗначению(ТабличныйДокумент.Области.Найти("КодОснВидаДеятельности").Значение);
		Если ЭлемСписка <> Неопределено Тогда
			СписокКодовВД.Удалить(ЭлемСписка);
		КонецЕсли;
		
		МассивКодовВыбранныхИныхВД = СтрРазделить(Область.Значение, ", ", Ложь);
		Для каждого ЗначМассива Из МассивКодовВыбранныхИныхВД Цикл
			ЭлемСписка = СписокКодовВД.НайтиПоЗначению(ЗначМассива);
			Если ЭлемСписка <> Неопределено Тогда
				ЭлемСписка.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", СписокКодовВД);
		
		ФормаВыбораВидовДеятельности = ПолучитьФорму(
			"Отчет.РегламентированныйОтчетОперацииСДенежнымиСредствамиНФО.Форма.ФормаВыбораВидовДеятельности", ПараметрыФормы);
		
		ДопПараметры = Новый Структура("Область", Область);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводВидовДеятельностиЗавершение", ЭтотОбъект, ДопПараметры);
		
		ФормаВыбораВидовДеятельности.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
		ФормаВыбораВидовДеятельности.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаВыбораВидовДеятельности.Открыть();
		
	Иначе
		ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, Область.Имя);
		
		Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
			КодПоказателя = ПараметрВводаПоля.Показатель;
			КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
			
			Если ПараметрВводаПоля.Показатель = "КодОснВидаДеятельности" Тогда
				МассивКодовВыбранныхИныхВД = СтрРазделить(ТабличныйДокумент.Области.Найти("КодыИныхВидовДеятельности").Значение, ", ", Ложь);
				Для каждого ЗначМассива Из МассивКодовВыбранныхИныхВД Цикл
					МассивСтрок = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначМассива));
					Если МассивСтрок.Количество() > 0 Тогда
						ТЗВыбора.Удалить(ТЗВыбора.Индекс(МассивСтрок[0]));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	ИмяПоказателя = Область.Имя;
	ЗначПоказателя = Область.Значение;
	
	Если ИмяПоказателя = "ДатаПодписи" Тогда
		ДатаПодписи = Область.Значение;
		ЗаполнитьСведенияОбОрганизацииНаСервере(Истина);
		Модифицированность = Истина;
	ИначеЕсли ИмяПоказателя = "НомерКорректировки" Тогда
		ОписаниеТипа = Новый ОписаниеТипов("Число");
		НомерКорректировки = ОписаниеТипа.ПривестиЗначение(Область.Значение);
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		Область.Значение = Строка(НомерКорректировки);
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрВводаПоля = РегламентированнаяОтчетностьКлиентСервер.НайтиСвойстваПоказателя(ЭтаФорма, ИмяПоказателя);
	
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		ЭлТЗВыбора = ТЗВыбора.НайтиСтроки(Новый Структура("Код", ЗначПоказателя));
		
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	ИмяОбласти = Область.Имя;
	Если ИмяРаздела <> "Титульный" Тогда
		ПозицияПодстроки = СтрНайти(ИмяОбласти, "_");
		Если ПозицияПодстроки > 0 Тогда
			ИмяОбласти = Лев(ИмяОбласти, ПозицияПодстроки - 1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", ИмяОбласти));
	Если ПараметрыВводаПоля.Количество() > 0 Тогда
		ПараметрВводаПоля = ПараметрыВводаПоля[0];
		Если СтрДлина(СокрЛП(ЗначПоказателя)) <> 0 И ПараметрВводаПоля.Длина <> 0 И СтрДлина(СокрЛП(ЗначПоказателя)) <> ПараметрВводаПоля.Длина Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Длина значения показателя должна быть равна " + ПараметрВводаПоля.Длина + "!'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяРаздела);
	
	Если ИмяРаздела = "Раздел11" ИЛИ ИмяРаздела = "Раздел21" Тогда
		РасчетНаКлиенте(ИмяРаздела, ИмяОбласти);
	ИначеЕсли ИмяРаздела = "Титульный" Тогда
		КодОснВидаДеятельности = СокрЛП(ТабличныйДокумент.Области["КодОснВидаДеятельности"].Значение);
		Если КодОснВидаДеятельности <> "120" Тогда
			ТабличныйДокумент.Области["ВидДеятельностиНФО"].Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	// ПроцессыОбработкиДокументов
	//
	Если Элементы.ТабличныйДокумент.Защита Тогда
		
		Возврат;
		
	КонецЕсли;
	//
	// ПроцессыОбработкиДокументов
	
	Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Ложь;
	Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Ложь;
	
	ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Элемент.ТекущаяОбласть.Имя);
	
	Если ЗначениеЗаполнено(ИмяГруппы) Тогда
		
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Доступность = Истина;
		
		ИмяПервойГрафы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"][0];
		ИсхКолСтрок = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИсхКолСтрок"];
		Координаты = СтрокаСКоординатамиПоказателя(Элемент.ТекущаяОбласть.Имя);
		
		ТестИмя = ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(ИсхКолСтрок + 1);
		Если СтрЧислоВхождений(Элемент.ТекущаяОбласть.Имя, "ДобавитьСтроку") = 0
			И ТабличныйДокумент.Области.Найти(ТестИмя) <> Неопределено Тогда
			Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюДобавитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюДобавитьСтроку;
		Элементы.ТабличныйДокументКонтекстноеМенюУдалитьСтроку.Заголовок
		= ДопТекст.ЗаголовокКонтекстногоМенюУдалитьСтроку;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводВидовДеятельностиЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	Если РезультатВыбора <> Неопределено Тогда
		
		СтрокаКодыВД = "";
		Для каждого КодВД Из РезультатВыбора Цикл
			Если КодВД.Пометка Тогда
				СтрокаКодыВД = СтрокаКодыВД + ", " + КодВД.Значение;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(СтрокаКодыВД) Тогда
			СтрокаКодыВД = Сред(СтрокаКодыВД, 3);
		КонецЕсли;
		Область.Значение = СтрокаКодыВД;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	
	ПрежнийКодВалюты = "";
	
	Если ЗначениеЗаполнено(Область.Значение) Тогда
		Если Область.Имя = "Валюта" Тогда
			ДлинаСтроки = СтрДлина(Область.Значение);
			ПрежнийКодВалюты = Сред(Область.Значение, ДлинаСтроки - 3, 3);
		Иначе
			ПрежнийКодВалюты = Область.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат <> Неопределено Тогда
		РеквизитыЭлемента = РеквизитыЭлементаСправочника(Результат);
		Если ПрежнийКодВалюты = РеквизитыЭлемента.Код Тогда
			Область.Очистить();
		Иначе
			Если Область.Имя = "Валюта" Тогда
				Область.Значение = ?(ЗначениеЗаполнено(РеквизитыЭлемента.НаимПолное),
					РеквизитыЭлемента.НаимПолное, РеквизитыЭлемента.Наименование)
					+ " (" + РеквизитыЭлемента.Код + ")";
			Иначе
				Область.Значение = РеквизитыЭлемента.Код;
			КонецЕсли;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РеквизитыЭлементаСправочника(Результат)
	
	НаименованиеПолное = "";
	Если Результат.Метаданные().Реквизиты.Найти("НаименованиеПолное") <> Неопределено Тогда
		НаименованиеПолное = Результат.НаименованиеПолное;
	КонецЕсли;
	
	Возврат Новый Структура("Код,Наименование,НаимПолное",
	Результат.Код, Результат.Наименование, НаименованиеПолное);
	
КонецФункции

&НаСервере
Процедура СформироватьТаблицуКодовСтран()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Код", Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(3)));
	Результат.Колонки.Добавить("Название", Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(250)));
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Справочник.Код КАК Код,
		|	Справочник.Наименование КАК Название
		|ИЗ
		|	Справочник.СтраныМира КАК Справочник
		|");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = Результат.Добавить();
		НовСтр.Код = Выборка.Код;
		НовСтр.Название = Выборка.Название;
	КонецЦикла;
	
	НовСтр = Результат.Вставить(0);
	НовСтр.Код = "";
	НовСтр.Название = "Пустое значение";
	НовСтр = Результат.Добавить();
	НовСтр.Код = "997";
	НовСтр.Название = "Страна места регистрации материнской компании представительств и филиалов иностранных компаний, расположенных на территории Российской Федерации, являющихся клиентами некредитной финансовой организации, неизвестна";
	НовСтр = Результат.Добавить();
	НовСтр.Код = "998";
	НовСтр.Название = "В качестве нерезидента - клиента некредитной финансовой организации выступают международная или межправительственная организация, их филиалы и постоянные представительства в Российской Федерации";
	НовСтр = Результат.Добавить();
	НовСтр.Код = "999";
	НовСтр.Название = "Иные случаи, если страна места регистрации нерезидента - клиента некредитной финансовой организации неизвестна";
	
	ТЗВыбора.Загрузить(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборАдресаОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Область = ДополнительныеПараметры.Область;
	УказанныйАдрес = Результат;
	
	Если УказанныйАдрес = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Область.Значение = ?(УказанныйАдрес.Название = "Адрес не указывается", "", УказанныйАдрес.Название);
	
	Если УказанныйАдрес.Название = "Адрес не указывается" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрФакт";
		
	КонецЕсли;
	
	Если УказанныйАдрес.Название = "Фактический адрес" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрФакт";
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Юридический адрес" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрЮР";
		
	КонецЕсли;
	
	Если УказанныйАдрес.Код = "Почтовый адрес" Тогда
		
		СтруктураРеквизитовФормы.мТипАдреса = "АдрПочт";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаВидДеятельностиНФОЗавершение(ВидДеятельностиНФОЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВидДеятельностиНФОЭлемент <> Неопределено Тогда
		ТабличныйДокумент.Области["ВидДеятельностиНФО"].Значение = ВидДеятельностиНФОЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаОснованиеНаправленияОтчетностиЗавершение(ОснованиеНапрОтчЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ОснованиеНапрОтчЭлемент <> Неопределено Тогда
		ТабличныйДокумент.Области["ОснованиеНаправленияОтчетности"].Значение = ОснованиеНапрОтчЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МногострочнаяЧастьТекущейОбласти(Форма, Знач ИмяОбласти)
	
	Если НЕ ЗначениеЗаполнено(ИмяОбласти) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтрокуЗначок", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "ДобавитьСтроку", "");
	ИмяОбласти = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяОбласти, Форма.СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Для каждого ЭлемСтруктуры Из Форма.СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
		Если ЭлемСтруктуры.Ключ = ИмяГруппы Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ДополнительныйТекстПриДобавленииУдаленииСтрок(Знач ИмяГруппы)
	
	Если НЕ ЗначениеЗаполнено(ИмяГруппы) Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы900 Тогда
		Подстрока = "файл";
		ТекстВопроса = НСтр("ru='Удалить выбранный файл?'");
	Иначе
		Подстрока = "строку";
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	КонецЕсли;
	
	ДопТекст = Новый Структура;
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюДобавитьСтроку", "Добавить " + Подстрока);
	ДопТекст.Вставить("ЗаголовокКонтекстногоМенюУдалитьСтроку", "Удалить " + Подстрока);
	ДопТекст.Вставить("ТекстВопросаПередУдалениемСтроки", ТекстВопроса);
	
	Возврат ДопТекст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьОбластей(Форма, ИмяСтраницыПанели)
	
	Если ИмяСтраницыПанели = "Раздел11"
		ИЛИ ИмяСтраницыПанели = "Раздел21" Тогда
		
		МассивОбрабОбластей = Новый Массив;
		МассивОбрабОбластей.Добавить(Форма.ТабличныйДокумент.Области["ОборотыСписание"]);
		МассивОбрабОбластей.Добавить(Форма.ТабличныйДокумент.Области["ОборотыЗачисление"]);
		МассивОбрабОбластей.Добавить(Форма.ТабличныйДокумент.Области["ОстаткиКонПериода"]);
		
		Для каждого Обл Из МассивОбрабОбластей Цикл
			Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
				Обл.Защита   = Ложь;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_0"];
			Иначе
				Обл.Защита   = Истина;
				Обл.ЦветФона = Форма.мСтруктураЦветовРаскраски["_4"];
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСтраницыПанели = "Титульный" Тогда
		
		КодОснВидаДеятельности = СокрЛП(Форма.ТабличныйДокумент.Области["КодОснВидаДеятельности"].Значение);
		
		ОбрабОбл = Форма.ТабличныйДокумент.Области["ОбластьВидДеятельностиНФО"];
		
		ОбрабОбл.Видимость = КодОснВидаДеятельности = "120";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзТабличногоДокументаВМестаХранения

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ВеткаРаздела = Неопределено)
	
	// Многоуровневые разделы.
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(НаимРаздела);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела,
			ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
		
	// Обычные разделы.
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = ДанныеТабличногоДокумента(НаимРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеТабличногоДокумента(НаимРаздела)
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					ЭтоОбластьПоказателяМногострочнойЧасти = Ложь;
					СтрПоиска = Лев(ТекущаяОбласть.Имя, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
					Если СтруктураРаздела["ИменаГруппМнЧ"].Найти(СтрПоиска) <> Неопределено Тогда
						ЭтоОбластьПоказателяМногострочнойЧасти = Истина;
					КонецЕсли;
					Если НЕ ЭтоОбластьПоказателяМногострочнойЧасти Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяГруппы, ДеревоДанных, Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
				ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПомещениеДанныхИзМестХраненияВТабличныйДокумент

&НаСервере
Процедура ВывестиДанныеВТабличныйДокументНаСервере(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяТекРаздела;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеВТабличныйДокумент(ИмяТекРаздела, НовыеНомераСтрокМногоуровнегоРаздела = Неопределено)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	// Многоуровневые разделы.
	//
	Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяТекРаздела) Тогда
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяТекРаздела];
		
		ИмяГлРаздела = Неопределено;
		СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
		ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, ИмяТекРаздела, ИмяГлРаздела);
		
		ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ТекВетка = ДеревоДанныхРаздела;
		
		Для каждого НомерСтроки Из НовыеНомераСтрокМногоуровнегоРаздела Цикл
			ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
		КонецЦикла;
		
		// Вывод немногострочных данных.
		Для Каждого ЭлСтруктуры Из ТекВетка.Данные Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
		// Вывод, для наглядности, данных экземпляра раздела 1 в подразделах раздела 1.
		СтруктураРаздела1 = мСтруктураМногоуровневыхРазделов["Раздел1"];
		Если СтруктураРаздела1.Свойство("ИменаПодчиненныхРазделов") Тогда
			Если СтруктураРаздела1["ИменаПодчиненныхРазделов"].Найти(ИмяТекРаздела) <> Неопределено Тогда
				ВеткаРодителя = ДеревоДанныхРаздела.Строки[НовыеНомераСтрокМногоуровнегоРаздела[0] - 1];
				Для каждого ЭлемДанныхРодителя Из ВеткаРодителя.Данные Цикл
					Обл = ТабличныйДокумент.Области.Найти(ЭлемДанныхРодителя.Ключ);
					Если Обл <> Неопределено Тогда
						Обл.Текст = ЭлемДанныхРодителя.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Добавление в многострочную часть необходимого количества
		// дополнительных строк, вывод многострочных данных.
		ВывестиМногострочныеДанныеВТабличныйДокумент(ТекВетка);
		
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = НовыеНомераСтрокМногоуровнегоРаздела;
		
	// Обычные разделы.
	//
	Иначе
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Обл = ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ);
			Если Обл <> Неопределено Тогда
				Обл.Значение = ЭлСтруктуры.Значение;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьДоступностьОбластей(ЭтаФорма, ИмяТекРаздела);
	
	ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(ИмяТекРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиМногострочныеДанныеВТабличныйДокумент(Ветка, Координаты = "")
	
	ДанныеМнЧ = Ветка.ДанныеМногострочныхЧастей;
	
	Для каждого ЭлемСтруктуры Из ДанныеМнЧ Цикл
		
		ДеревоМнЧ = ЭлемСтруктуры.Значение;
		
		Для Инд_Число = 0 По ДеревоМнЧ.Строки.Количество() - 1 Цикл
			
			// Добавление необходимого количества доп. строк.
			Если Инд_Число > 0 Тогда
				Инд = СтрокаСИндексомПоказателя(Инд_Число);
				ИмяОбластиПреемника = "ДобавлениеСтроки" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				ВставитьДопСтроку(ЭлемСтруктуры.Ключ, ИмяОбластиПреемника);
			КонецЕсли;
			
			// Обработка гиперссылок удаления строки, если эта строка единственная.
			Если ДеревоМнЧ.Строки.Количество() = 1 Тогда
				Инд = СтрокаСИндексомПоказателя(1);
				ИмяИскомойОбласти = "УдалитьСтроку" + ЭлемСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Гиперссылка = Ложь;
					Обл.Текст = "";
				КонецЕсли;
			КонецЕсли;
			
			// Вывод многострочных данных.
			Данные = ДеревоМнЧ.Строки[Инд_Число].Данные;
			Инд = СтрокаСИндексомПоказателя(Инд_Число + 1);
			Для Каждого ЭлСтруктуры Из Данные Цикл
				ИмяИскомойОбласти = ЭлСтруктуры.Ключ + Координаты + Инд;
				Обл = ТабличныйДокумент.Области.Найти(ИмяИскомойОбласти);
				Если Обл <> Неопределено Тогда
					Обл.Значение = ЭлСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
			
			// Добавление необходимого количества подчиненных доп. строк.
			ПодчВетка = ДеревоМнЧ.Строки[Инд_Число];
			ПодчКоординаты = Координаты + Инд;
			ВывестиМногострочныеДанныеВТабличныйДокумент(ПодчВетка, ПодчКоординаты);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеСтраницМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "Раздел1" Тогда
		ДобавитьСтраницуРаздел1();
	ИначеЕсли ИмяРаздела = "Раздел11" Тогда
		ДобавитьСтраницуРаздел11();
	Иначе
		Возврат;
	КонецЕсли;
	
	Обл = ТабличныйДокумент.Области["УдалитьСтраницуЗначок"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "х";
	Обл = ТабличныйДокумент.Области["УдалитьСтраницу"];
	Обл.Гиперссылка = Истина;
	Обл.Текст = "Удалить страницу";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуРаздел1()
	
	ИмяРаздела = "Раздел1";
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки.Добавить();
	// Добавление разделов, подчиненных новой странице.
	ИнициализироватьПодчиненныеРазделы(ИмяРаздела, НовВетка);
	
	НомерНовВетки = ДеревоРаздела.Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуРаздел11()
	
	ИмяГлРаздела = "Раздел1";
	ИмяРаздела = "Раздел11";
	
	ДеревоРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	// Нахождение строки в дереве значений, соответствующей текущей странице.
	ТекВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
	// Помещение данных текущей страницы в структуры найденной строки.
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	ТекВетка.Данные = ДанныеТаблДокумента.Данные;
	ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Добавление новой страницы.
	// (Добавляется строка в конец коллекции строк дерева значений.)
	НовВетка = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Добавить();
	
	НомерНовВетки = ДеревоРаздела.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Количество();
	
	// Вывод и помещение начальных данных новой страницы
	// в структуры вновь добавленной строки дерева значений.
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяРаздела));
	ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяРаздела);
	НовВетка.Данные = ДанныеТаблДокумента.Данные;
	НовВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоРаздела, УникальныйИдентификатор);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] = НомерНовВетки;
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
			Для каждого НайденнаяСтраница1 Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница1.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					ТекСтраницаРаздела1 = НайденнаяСтраница1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраницаПодчРаздел Из ТекСтраницаРаздела1.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраницаПодчРаздел.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] Тогда
			ТекСтраницаПодчРаздел = НайденнаяСтраницаПодчРаздел;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница11 Из ТекСтраницаПодчРаздел.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница11.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница11.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Удалить текущую страницу?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	Если ИмяРаздела = "Раздел1" Тогда
		УдалитьСтраницуРаздел1();
	ИначеЕсли ИмяРаздела = "Раздел11" Тогда
		УдалитьСтраницуРаздел11();
	Иначе
		Возврат;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуРаздел1()
	
	ИмяРаздела = "Раздел1";
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяРаздела Тогда
			Для каждого НайденнаяСтраница Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница.КолонкаНомерСтраницыРазделаОтчета = НомСтраницыПослеУдаления Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтраницуРаздел11()
	
	ИмяГлРаздела = "Раздел1";
	ИмяРаздела = "Раздел11";
	
	ДеревоДанных = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
	
	НомПоследнейСтраницы = ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Количество();
	
	// Номер строки дерева значений, соответствующий номеру удаляемой страницы.
	НомУдаляемойСтраницы = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2];
	
	// Номер строки дерева значений, соответствующий номеру выводимой после удаления страницы.
	НомСтраницыПослеУдаления = ?(НомУдаляемойСтраницы = НомПоследнейСтраницы,
		НомУдаляемойСтраницы - 1, НомУдаляемойСтраницы);
	
	// Удаление страницы.
	ДеревоДанных.Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки.Удалить(НомУдаляемойСтраницы - 1);
	
	// Сохранение изменений в дереве значений.
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
		= ПоместитьВоВременноеХранилище(ДеревоДанных, УникальныйИдентификатор);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] = НомСтраницыПослеУдаления;
	
	// Вывод данных строки дерева значений после удаления страницы.
	ВывестиДанныеВТабличныйДокумент(ИмяРаздела, СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого ИскомыйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если ИскомыйРаздел.КолонкаРазделыОтчетаСокрНаим = ИмяГлРаздела Тогда
			Для каждого НайденнаяСтраница1 Из ИскомыйРаздел.ПолучитьЭлементы() Цикл
				Если НайденнаяСтраница1.КолонкаНомерСтраницыРазделаОтчета
					= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] Тогда
					ТекСтраницаРаздела1 = НайденнаяСтраница1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраницаПодчРаздел Из ТекСтраницаРаздела1.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраницаПодчРаздел.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] Тогда
			ТекСтраницаПодчРаздел = НайденнаяСтраницаПодчРаздел;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НайденнаяСтраница11 Из ТекСтраницаПодчРаздел.ПолучитьЭлементы() Цикл
		Если НайденнаяСтраница11.КолонкаНомерСтраницыРазделаОтчета
			= СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница11.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпрятатьСсылкуУдалитьСтраницу()
	
	Если Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		ЭлементыРодителя = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы();
		Если (ЭлементыРодителя.Количество() > 1)
			И (ЭлементыРодителя[0].КолонкаРазделыОтчетаСокрНаим = ЭлементыРодителя[1].КолонкаРазделыОтчетаСокрНаим) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницуЗначок");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	ОблУдалитьСтраницу = ТабличныйДокумент.Области.Найти("УдалитьСтраницу");
	Если ОблУдалитьСтраницу <> Неопределено Тогда
		ОблУдалитьСтраницу.Текст = "";
		ОблУдалитьСтраницу.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДобавлениеУдалениеДополнительныхСтрокМногострочныхЧастейМногоуровневыхРазделов

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ДопФайлы" Тогда
		ДобавитьФайл();
	Иначе
		ВставитьДополнительнуюСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтроку()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	Если СтрНайти(ИмяТекОбласти, "ДобавитьСтроку") Тогда
		ИмяОбластиПреемника = СтрЗаменить(ИмяТекОбласти, "ДобавитьСтроку", "");
		ИмяОбластиПреемника = СтрЗаменить(ИмяОбластиПреемника, "Значок", "");
		ИмяГруппы = Лев(ИмяОбластиПреемника, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяОбластиПреемника;
	Иначе
		ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
		ИмяГрафы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
		МаксИнд = ИндексПоказателя(ИмяТекОбласти);
		Координаты = СтрокаСКоординатамиПоказателя(ИмяТекОбласти);
		Пока ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + СтрокаСИндексомПоказателя(МаксИнд + 1)) <> Неопределено Цикл
			МаксИнд = МаксИнд + 1;
		КонецЦикла;
		ИмяОбластиПреемника = "ДобавлениеСтроки" + ИмяГруппы + Координаты + СтрокаСИндексомПоказателя(МаксИнд);
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		ВставитьДопСтроку(ИмяГруппы, ИмяОбластиПреемника);
		СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьДопСтроку(Знач ИмяГруппы, Знач ИмяОбластиПреемника, ЭтоАвтоВставкаПодчиненнойМнЧ = Ложь)
	
	НачИндекс = "_1";
	
	Если СтрНайти(ИмяОбластиПреемника, "ДобавлениеСтроки" + ИмяГруппы) > 0 Тогда
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + ИмяГруппы);
		
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТаблДок.Область(ИскомаяОбласть.Имя);
		ВставляемаяОбласть.Имя = "";
		
		НовКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбластиПреемника);
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординаты, "_");
		НачКоординаты = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординаты = НачКоординаты + НачИндекс;
		КонецЦикла;
		
		ПреИндекс_Число = ИндексПоказателя(ИмяОбластиПреемника);
		НовИндекс_Число = ?(ЭтоАвтоВставкаПодчиненнойМнЧ, 1, ПреИндекс_Число + 1);
		
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		НачПостфикс = ИмяГруппы + НачКоординаты + НачИндекс;
		ПреПостфикс = ИмяГруппы + НовКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + НовКоординаты + НовИндекс;
		
		МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			НачИмяОбл = ИмяГрафы + НачКоординаты + НачИндекс;
			НовИмяОбл = ИмяГрафы + НовКоординаты + НовИндекс;
			
			ОбластьЯчейки = ВремТаблДок.Области[НачИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
			
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ВремТаблДок.Область("УдалитьСтроку" + НачПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		Если ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			Обл = ВремТаблДок.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		Иначе
			Обл = ВремТаблДок.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Истина;
			Обл.Текст = "х";
			Если НовИндекс_Число = 2 Тогда
				Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
			КонецЕсли;
		КонецЕсли;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		ОблПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемника);
		ОблПреемник.Имя = "ДобавлениеСтроки" + НовПостфикс;
		
		// Изменения в оформлении ячеек: установка значения "НетЛинии"/"Сплошная" для
		// свойства "ГраницаСнизу" (в случае задания номеров специальных колонок):
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Удаление линии в определенных колонках последней (до добавления) строки.
				Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
					Обл = ТабличныйДокумент.Область(
						ОблПреемник.Верх - 1, НомКолонки, ОблПреемник.Верх - 1, НомКолонки);
					Если Обл <> Неопределено Тогда
						Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
				КонецЕсли;
				// Установка линии в определенных колонках добавляемой строки.
				Обл = ВремТаблДок.Область(
					ВставляемаяОбласть.Низ, НомКолонки, ВставляемаяОбласть.Низ, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТабличныйДокумент.ВставитьОбласть(
			ВставляемаяОбласть, ОблПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ЭтоАвтоВставкаПодчиненнойМнЧ Тогда
			// Установка текущей области после добавления строки.
			НовИмяТекОбл = МассивИменГраф[0] + НовКоординаты + НовИндекс;
			НовТекОбл = ТабличныйДокумент.Области[НовИмяТекОбл];
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НовТекОбл;
		КонецЕсли;
		
	КонецЕсли;
	
	ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
		ИмяГруппы]["ИменаПодчиненныхГрупп"];
	Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
		НовКоординатыДляПодчОбласти = НовКоординаты + НовИндекс;
		
		КолУровнейПодчиненности = СтрЧислоВхождений(НовКоординатыДляПодчОбласти, "_");
		НачКоординатыДляПодчОбласти = "";
		Для НомУр = 1 По КолУровнейПодчиненности Цикл
			НачКоординатыДляПодчОбласти = НачКоординатыДляПодчОбласти + НачИндекс;
		КонецЦикла;
		
		НачИндВставляемойОбласти = НачИндекс;
		
		ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
			"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		
		Если ИскомаяОбласть = Неопределено Тогда
			НачИндВставляемойОбласти = 1;
			Пока ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ИмяПодчГруппы
				+ НачКоординатыДляПодчОбласти + "_" + Формат(НачИндВставляемойОбласти, "ЧГ=")) = Неопределено Цикл
				НачИндВставляемойОбласти = НачИндВставляемойОбласти + 1;
			КонецЦикла;
			НачИндВставляемойОбласти = "_" + Формат(НачИндВставляемойОбласти, "ЧГ=");
			ИскомаяОбласть = ТабличныйДокумент.Области.Найти(
				"ДобавлениеСтроки" + ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти);
		КонецЕсли;
		
		ВремТабличныйДокумент = ТабличныйДокумент.ПолучитьОбласть(ИскомаяОбласть.Имя);
		ВставляемаяОбласть = ВремТабличныйДокумент.Область(ИскомаяОбласть.Имя);
		Для каждого ОбластьЯчейки Из ВремТабличныйДокумент.Области Цикл
			ОбластьЯчейки.Имя = СтрЗаменить(ОбластьЯчейки.Имя,
				ИмяПодчГруппы + НачКоординатыДляПодчОбласти + НачИндВставляемойОбласти,
				ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс);
		КонецЦикла;
		ИмяОбластиПреемникаДляПодчОбласти = СтрЗаменить(ИмяОбластиПреемника, ПреПостфикс, НовПостфикс);
		ОбластьПреемник = ТабличныйДокумент.Области.Найти(ИмяОбластиПреемникаДляПодчОбласти);
		
		ТабличныйДокумент.ВставитьОбласть(ВставляемаяОбласть, ОбластьПреемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		ИмяОбластиПреемникаДляПодчОбласти = "ДобавлениеСтроки" + ИмяПодчГруппы + НовКоординатыДляПодчОбласти + НачИндекс;
		
		ВставитьДопСтроку(ИмяПодчГруппы, ИмяОбластиПреемникаДляПодчОбласти, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	ИмяТекОбласти = СтрЗаменить(ИмяТекОбласти, "УдалитьСтроку", "");
	
	ИмяГруппы = Лев(ИмяТекОбласти, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект);
	ДопТекст = ДополнительныйТекстПриДобавленииУдаленииСтрок(ИмяГруппы);
	Если ДопТекст <> Неопределено Тогда
		ТекстВопроса = ДопТекст.ТекстВопросаПередУдалениемСтроки;
	Иначе
		ТекстВопроса = НСтр("ru='Удалить выбранную строку?'");
	КонецЕсли;
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ДопФайлы" Тогда
		УдалитьФайл(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
		Возврат;
	КонецЕсли;
	
	УдалитьДопСтрокуНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтрокуНаСервере()
	
	ИмяТекОбласти = Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
	
	УдалитьДопСтроку(ИмяТекОбласти);
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Расчет(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДопСтроку(ИмяОбласти)
	
	ИмяГруппы = СтрЗаменить(ИмяОбласти, "УдалитьСтроку", "");
	ИмяГруппы = Лев(ИмяГруппы, СтруктураРеквизитовФормы.ДлинаИмениГруппы);
	
	ТекКоординаты = СтрокаСКоординатамиПоказателя(ИмяОбласти);
	
	ТекИндекс_Число = ИндексПоказателя(ИмяОбласти);
	ТекИндекс = СтрокаСИндексомПоказателя(ТекИндекс_Число);
	ТекПостфикс = ИмяГруппы + ТекКоординаты + ТекИндекс;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	ОблДобавлениеСтроки = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
	
	// Удаляется последняя строка.
	//
	Если ОблДобавлениеСтроки <> Неопределено Тогда
		
		ПреИндекс_Число = ТекИндекс_Число - 1;
		ПреИндекс = СтрокаСИндексомПоказателя(ПреИндекс_Число);
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		
		ОблУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
		
		ВерхУдОбласти = ОблУдаляемогоПоказателя.Верх;
		НизУдОбласти  = ОблДобавлениеСтроки.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ТекПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтроку" + ПреПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ТекПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + ПреПостфикс;
		
		Если ПреИндекс_Число = 1 Тогда
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + ПреПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		// Изменения в оформлении ячеек в случае задания номеров специальных колонок.
		НомераСпецКолонок = Неопределено;
		СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы].Свойство(
			"КолонкиСИзмНижнГраницей", НомераСпецКолонок);
		Если НомераСпецКолонок <> Неопределено Тогда
			Для каждого НомКолонки Из НомераСпецКолонок Цикл
				// Установка линии в определенных колонках последней (после удаления) строки.
				Обл = ТабличныйДокумент.Область(
					ВерхУдОбласти - 1, НомКолонки, ВерхУдОбласти - 1, НомКолонки);
				Если Обл <> Неопределено Тогда
					Обл.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ПреИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	// Удаляемая строка не последняя.
	//
	Иначе
		
		НовИндекс_Число = ТекИндекс_Число + 1;
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		
		ОблУдаляемогоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + ТекИндекс);
		ОблСледующегоПоказателя = ТабличныйДокумент.Область(ИмяПервойГрафы + ТекКоординаты + НовИндекс);
		
		ВерхУдОбласти = ОблУдаляемогоПоказателя.Верх;
		НизУдОбласти  = ОблСледующегоПоказателя.Верх - 1;
		
		УдаляемаяОбласть = ТабличныйДокумент.Область(ВерхУдОбласти, , НизУдОбласти, );
		
		// Сохранение свойств "эталонных" областей для последующего восстановления.
		СпОбластейДляВосстановленияПослеУдаления = Новый СписокЗначений;
		ВремТаблДок = ТабличныйДокумент.ПолучитьОбласть(УдаляемаяОбласть.Имя);
		Для каждого ЭлемСтруктуры Из СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей Цикл
			ИмяИскомойобласти = "МногострочнаяЧасть" + ЭлемСтруктуры.Ключ;
			Искомаяобласть = ВремТаблДок.Области.Найти(ИмяИскомойобласти);
			Если Искомаяобласть <> Неопределено Тогда
				ВысотаОбл = Искомаяобласть.Низ - Искомаяобласть.Верх + 1;
				СпОбластейДляВосстановленияПослеУдаления.Добавить(ВысотаОбл, ЭлемСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		НовИндекс_Число = ТекИндекс_Число;
		
		// Реиндексация имен областей текущей многострочной части после удаления строки.
		Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + ТекКоординаты
			+ СтрокаСИндексомПоказателя(НовИндекс_Число + 1)) <> Неопределено Цикл
			
			ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число + 1);
			НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
			
			Для каждого ИмяГрафы Из МассивИменГраф Цикл
				ПреИмяОбл = ИмяГрафы + ТекКоординаты + ПреИндекс;
				НовИмяОбл = ИмяГрафы + ТекКоординаты + НовИндекс;
				
				ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
				ОбластьЯчейки.Имя = НовИмяОбл;
			КонецЦикла;
			
			ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
			НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
			
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
			Обл.Имя = "УдалитьСтроку" + НовПостфикс;
			
			// Обновление координат в именах областей подчиненных многострочных частей.
			ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ИмяГруппы]["ИменаПодчиненныхГрупп"];
			Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
				ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
					ИмяПодчГруппы, ТекКоординаты + ПреИндекс, ТекКоординаты + НовИндекс);
				РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
			КонецЦикла;
			
			НовИндекс_Число = НовИндекс_Число + 1;
			
		КонецЦикла;
		
		ПреИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число);
		НовИндекс = СтрокаСИндексомПоказателя(НовИндекс_Число - 1);
		
		ПреПостфикс = ИмяГруппы + ТекКоординаты + ПреИндекс;
		НовПостфикс = ИмяГруппы + ТекКоординаты + НовИндекс;
		
		Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
		Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
		Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
		Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
		
		// Восстановление удаленных "эталонных" областей по предварительно сохраненным свойствам.
		НачИндекс = "_1";
		Для каждого ЭлемСписка Из СпОбластейДляВосстановленияПослеУдаления Цикл
			НачКоординаты = "";
			УровеньПодчиненияГруппы = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["УровеньПодчинения"];
			
			Для НомУр = 1 По УровеньПодчиненияГруппы Цикл
				НачКоординаты = НачКоординаты + НачИндекс;
			КонецЦикла;
			
			ИмяГрафыДляПозиционирования = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[
				ЭлемСписка.Представление]["ИменаГраф"][0];
			
			ИмяОбластиДляПозиционирования = ИмяГрафыДляПозиционирования + НачКоординаты + НачИндекс;
			ОбластьДляПозиционирования = ТабличныйДокумент.Область(ИмяОбластиДляПозиционирования);
			
			ВосстОбластьВерх = ОбластьДляПозиционирования.Верх;
			ВосстОбластьНиз  = ВосстОбластьВерх + ЭлемСписка.Значение - 1;
			
			ВосстОбласть = ТабличныйДокумент.Область(ВосстОбластьВерх, , ВосстОбластьНиз, );
			ВосстОбласть.Имя = "МногострочнаяЧасть" + ЭлемСписка.Представление;
		КонецЦикла;
		
		Если НовИндекс = НачИндекс Тогда // после удаления осталась единственная строка
			Обл = ТабличныйДокумент.Область("УдалитьСтроку" + НовПостфикс);
			Обл.Гиперссылка = Ложь;
			Обл.Текст = "";
		КонецЕсли;
		
		НовИмяТекОбл = ИмяПервойГрафы + ТекКоординаты + ТекИндекс;
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Области[НовИмяТекОбл];
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РеиндексироватьПодчиненныеДопСтроки(ПараметрыРеиндексации)
	
	ИмяГруппы = ПараметрыРеиндексации["ИмяГруппы"];
	ПреКоординаты = ПараметрыРеиндексации["ПреКоординаты"];
	НовКоординаты = ПараметрыРеиндексации["НовКоординаты"];
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы
		+ ПреКоординаты + СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		
		Инд = СтрокаСИндексомПоказателя(Инд_Число);
		
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			ПреИмяОбл = ИмяГрафы + ПреКоординаты + Инд;
			НовИмяОбл = ИмяГрафы + НовКоординаты + Инд;
			
			ОбластьЯчейки = ТабличныйДокумент.Области[ПреИмяОбл];
			ОбластьЯчейки.Имя = НовИмяОбл;
		КонецЦикла;
		
		ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
		НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
		
		Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + ПреПостфикс);
		Обл.Имя = "УдалитьСтроку" + НовПостфикс;
		
		ИменаПодчиненныхГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчиненныхГрупп Цикл
			ПарамРеинд = Новый Структура("ИмяГруппы,ПреКоординаты,НовКоординаты",
				ИмяПодчГруппы, ПреКоординаты + Инд, НовКоординаты + Инд);
			РеиндексироватьПодчиненныеДопСтроки(ПарамРеинд);
		КонецЦикла;
		
		Инд_Число = Инд_Число + 1;
		
	КонецЦикла;
	
	Инд = СтрокаСИндексомПоказателя(Инд_Число - 1);
	
	ПреПостфикс = ИмяГруппы + ПреКоординаты + Инд;
	НовПостфикс = ИмяГруппы + НовКоординаты + Инд;
	
	Обл = ТабличныйДокумент.Области.Найти("ДобавлениеСтроки" + ПреПостфикс);
	Обл.Имя = "ДобавлениеСтроки" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтроку" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтроку" + НовПостфикс;
	Обл = ТабличныйДокумент.Области.Найти("ДобавитьСтрокуЗначок" + ПреПостфикс);
	Обл.Имя = "ДобавитьСтрокуЗначок" + НовПостфикс;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИндексПоказателя(Знач ИмяОбласти)
	
	МассивСтрок = СтрРазделить(ИмяОбласти, "_");
	
	КолСтрок = МассивСтрок.Количество();
	
	Если КолСтрок = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексСтрока = МассивСтрок[КолСтрок - 1];
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрока) Тогда
		Возврат Число(ИндексСтрока);
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСИндексомПоказателя(Знач Индекс)
	
	Если ТипЗнч(Индекс) <> Тип("Число") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат "_" + Формат(Индекс, "ЧГ=");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСКоординатамиПоказателя(Знач Координаты)
	
	СтрокаСКоординатами = "";
	
	Если ТипЗнч(Координаты) = Тип("Массив") Тогда
		Для каждого КоординатаЧисло Из Координаты Цикл
			Если ТипЗнч(КоординатаЧисло) <> Тип("Число") Тогда
				Возврат Неопределено;
			КонецЕсли;
			СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаЧисло, "ЧГ=");
		КонецЦикла;
	ИначеЕсли ТипЗнч(Координаты) = Тип("Строка") Тогда
		МассивСтрок = СтрРазделить(Координаты, "_");
		КолСтрок = МассивСтрок.Количество();
		Если КолСтрок = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСтрок.Удалить(КолСтрок - 1);
		МассивСтрок.Удалить(0);
		Для каждого КоординатаСтрока Из МассивСтрок Цикл
			Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КоординатаСтрока) Тогда
				СтрокаСКоординатами = СтрокаСКоординатами + "_" + Формат(КоординатаСтрока, "ЧГ=");
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаСКоординатами;
	
КонецФункции

#КонецОбласти

#Область Авторасчет

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяТекущейСтраницыПанели = "", ОбластьИмя = "") Экспорт
	
	Расчет(ЭтаФорма, ИмяТекущейСтраницыПанели, ОбластьИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяРаздела = "", ОбластьИмя = "") Экспорт
	
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел11" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ОборотыСписание11,
					Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0 Тогда
					СуммаСписаний = 0;
					Для НомПодраздела = 1 По 6 Цикл
						Ном = 1;
						Пока Форма.ТабличныйДокумент.Области.Найти(
							"П11" + НомПодраздела + "0002_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
							СуммаСписаний = СуммаСписаний + Форма.ТабличныйДокумент.Области[
								"П11" + НомПодраздела + "0002_" + Формат(Ном, "ЧГ=")].Значение;
							Ном = Ном + 1;
						КонецЦикла;
					КонецЦикла;
					Форма.ТабличныйДокумент.Области["ОборотыСписание"].Значение = СуммаСписаний;
				КонецЕсли;
				
				Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ОборотыЗачисление11,
					Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0 Тогда
					СуммаЗачислений = 0;
					Для НомПодраздела = 1 По 6 Цикл
						Ном = 1;
						Пока Форма.ТабличныйДокумент.Области.Найти(
								"П11" + НомПодраздела + "0003_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
							СуммаЗачислений = СуммаЗачислений + Форма.ТабличныйДокумент.Области[
								"П11" + НомПодраздела + "0003_" + Формат(Ном, "ЧГ=")].Значение;
							Ном = Ном + 1;
						КонецЦикла;
					КонецЦикла;
					Форма.ТабличныйДокумент.Области["ОборотыЗачисление"].Значение = СуммаЗачислений;
				КонецЕсли;
				
				Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ОстаткиКонПериода11,
					Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0 Тогда
					Форма.ТабличныйДокумент.Области["ОстаткиКонПериода"].Значение
						= Форма.ТабличныйДокумент.Области["ОстаткиНачПериода"].Значение
						+ Форма.ТабличныйДокумент.Области["ОборотыЗачисление"].Значение
						- Форма.ТабличныйДокумент.Области["ОборотыСписание"].Значение;
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			
			Если ЗначениеЗаполнено(ОбластьИмя) Тогда
				
				Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ОборотыСписание21,
					Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0 Тогда
					СуммаСписаний = 0;
					Для НомПодраздела = 1 По 5 Цикл
						Ном = 1;
						Пока Форма.ТабличныйДокумент.Области.Найти(
							"П21" + НомПодраздела + "0002_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
							СуммаСписаний = СуммаСписаний + Форма.ТабличныйДокумент.Области[
								"П21" + НомПодраздела + "0002_" + Формат(Ном, "ЧГ=")].Значение;
							Ном = Ном + 1;
						КонецЦикла;
					КонецЦикла;
					Форма.ТабличныйДокумент.Области["ОборотыСписание"].Значение = СуммаСписаний;
				КонецЕсли;
				
				Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ОборотыЗачисление21,
					Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0 Тогда
					СуммаЗачислений = 0;
					Для НомПодраздела = 1 По 5 Цикл
						Ном = 1;
						Пока Форма.ТабличныйДокумент.Области.Найти(
								"П21" + НомПодраздела + "0003_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
							СуммаЗачислений = СуммаЗачислений + Форма.ТабличныйДокумент.Области[
								"П21" + НомПодраздела + "0003_" + Формат(Ном, "ЧГ=")].Значение;
							Ном = Ном + 1;
						КонецЦикла;
					КонецЦикла;
					Форма.ТабличныйДокумент.Области["ОборотыЗачисление"].Значение = СуммаЗачислений;
				КонецЕсли;
				
				Если СтрЧислоВхождений(Форма.СтруктураЗависимыхЯчеекДляАвторасчета.ОстаткиКонПериода21,
					Лев(ОбластьИмя, Форма.СтруктураРеквизитовФормы.ДлинаИмениГрафы)) > 0 Тогда
					Форма.ТабличныйДокумент.Области["ОстаткиКонПериода"].Значение
						= Форма.ТабличныйДокумент.Области["ОстаткиНачПериода"].Значение
						+ Форма.ТабличныйДокумент.Области["ОборотыЗачисление"].Значение
						- Форма.ТабличныйДокумент.Области["ОборотыСписание"].Значение;
				КонецЕсли;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(ОбластьИмя) Тогда
				РасчетВДеревеЗначений(Форма, ИмяРаздела);
			КонецЕсли;
		Иначе
			РасчетВДеревеЗначений(Форма, ИмяРаздела);
		КонецЕсли;
		
	ИначеЕсли ИмяРаздела = "" Тогда
		
		Расчет(Форма, "Раздел21");
		Расчет(Форма, "Раздел11");
		
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РасчетВДеревеЗначений(Форма, ИмяРаздела)
	
	ИмяГлРаздела = ИмяРаздела;
	СтруктураРаздела = Форма.мСтруктураМногоуровневыхРазделов[ИмяРаздела];
	Если СтруктураРаздела.Свойство("ИмяГлавногоРаздела") Тогда
		ИмяГлРаздела = СтруктураРаздела["ИмяГлавногоРаздела"];
	КонецЕсли;
	
	Если ИмяРаздела = "Раздел11" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1].Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[1] - 1].Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[2] - 1];
		КонецЕсли;
		
		Для каждого Ветка_1 Из ДеревоДанных.Строки Цикл
			
			Для каждого Ветка_11 Из Ветка_1.Строки[0].Строки Цикл
				
				Если Ветка_11 = АктивнаяВетка Тогда
					Для НомПодраздела = 1 По 6 Цикл
						ДанныеМнЧ = Ветка_11.ДанныеМногострочныхЧастей["П11" + НомПодраздела + "00"].Строки;
						Для каждого Ветка_ Из ДанныеМнЧ Цикл
							Ветка_.Данные.Вставить("П11" + НомПодраздела + "0002",
							Форма.ТабличныйДокумент.Области["П11" + НомПодраздела + "0002_"
								+ Формат(ДанныеМнЧ.Индекс(Ветка_) + 1, "ЧГ=")].Значение);
							Ветка_.Данные.Вставить("П11" + НомПодраздела + "0003",
							Форма.ТабличныйДокумент.Области["П11" + НомПодраздела + "0003_"
								+ Формат(ДанныеМнЧ.Индекс(Ветка_) + 1, "ЧГ=")].Значение);
						КонецЦикла;
					КонецЦикла;
					Ветка_11.Данные["ОстаткиНачПериода"] = Форма.ТабличныйДокумент.Области["ОстаткиНачПериода"].Значение;
				КонецЕсли;
				
				СуммаСписаний = 0;
				СуммаЗачислений = 0;
				Для НомПодраздела = 1 По 6 Цикл
					ДанныеМнЧ = Ветка_11.ДанныеМногострочныхЧастей["П11" + НомПодраздела + "00"].Строки;
					Для каждого Ветка_ Из ДанныеМнЧ Цикл
						СуммаСписаний = СуммаСписаний + Ветка_.Данные["П11" + НомПодраздела + "0002"];
						СуммаЗачислений = СуммаЗачислений + Ветка_.Данные["П11" + НомПодраздела + "0003"];
					КонецЦикла;
				КонецЦикла;
				Ветка_11.Данные["ОборотыСписание"] = СуммаСписаний;
				Ветка_11.Данные["ОборотыЗачисление"] = СуммаЗачислений;
				
				Ветка_11.Данные["ОстаткиКонПериода"] = Ветка_11.Данные["ОстаткиНачПериода"]
					+ Ветка_11.Данные["ОборотыЗачисление"] - Ветка_11.Данные["ОборотыСписание"];
				
				Если Ветка_11 = АктивнаяВетка Тогда
					Форма.ТабличныйДокумент.Области["ОборотыСписание"].Значение = Ветка_11.Данные["ОборотыСписание"];
					Форма.ТабличныйДокумент.Области["ОборотыЗачисление"].Значение = Ветка_11.Данные["ОборотыЗачисление"];
					Форма.ТабличныйДокумент.Области["ОстаткиКонПериода"].Значение = Ветка_11.Данные["ОстаткиКонПериода"];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
		
	ИначеЕсли ИмяРаздела = "Раздел21" Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела Тогда
			АктивнаяВетка = ДеревоДанных.Строки[
				Форма.СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела[0] - 1];
		КонецЕсли;
		
		Для каждого Ветка_21 Из ДеревоДанных.Строки Цикл
			
			Если Ветка_21 = АктивнаяВетка Тогда
				Для НомПодраздела = 1 По 5 Цикл
					ДанныеМнЧ = Ветка_21.ДанныеМногострочныхЧастей["П21" + НомПодраздела + "00"].Строки;
					Для каждого Ветка_ Из ДанныеМнЧ Цикл
						Ветка_.Данные.Вставить("П21" + НомПодраздела + "0002",
						Форма.ТабличныйДокумент.Области["П21" + НомПодраздела + "0002_"
							+ Формат(ДанныеМнЧ.Индекс(Ветка_) + 1, "ЧГ=")].Значение);
						Ветка_.Данные.Вставить("П21" + НомПодраздела + "0003",
						Форма.ТабличныйДокумент.Области["П21" + НомПодраздела + "0003_"
							+ Формат(ДанныеМнЧ.Индекс(Ветка_) + 1, "ЧГ=")].Значение);
					КонецЦикла;
				КонецЦикла;
				Ветка_21.Данные["ОстаткиНачПериода"] = Форма.ТабличныйДокумент.Области["ОстаткиНачПериода"].Значение;
			КонецЕсли;
			
			СуммаСписаний = 0;
			СуммаЗачислений = 0;
			Для НомПодраздела = 1 По 5 Цикл
				ДанныеМнЧ = Ветка_21.ДанныеМногострочныхЧастей["П21" + НомПодраздела + "00"].Строки;
				Для каждого Ветка_ Из ДанныеМнЧ Цикл
					СуммаСписаний = СуммаСписаний + Ветка_.Данные["П21" + НомПодраздела + "0002"];
					СуммаЗачислений = СуммаЗачислений + Ветка_.Данные["П21" + НомПодраздела + "0003"];
				КонецЦикла;
			КонецЦикла;
			Ветка_21.Данные["ОборотыСписание"] = СуммаСписаний;
			Ветка_21.Данные["ОборотыЗачисление"] = СуммаЗачислений;
			
			Ветка_21.Данные["ОстаткиКонПериода"] = Ветка_21.Данные["ОстаткиНачПериода"]
				+ Ветка_21.Данные["ОборотыЗачисление"] - Ветка_21.Данные["ОборотыСписание"];
			
			Если Ветка_21 = АктивнаяВетка Тогда
				Форма.ТабличныйДокумент.Области["ОборотыСписание"].Значение = Ветка_21.Данные["ОборотыСписание"];
				Форма.ТабличныйДокумент.Области["ОборотыЗачисление"].Значение = Ветка_21.Данные["ОборотыЗачисление"];
				Форма.ТабличныйДокумент.Области["ОстаткиКонПериода"].Значение = Ветка_21.Данные["ОстаткиКонПериода"];
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]
			= ПоместитьВоВременноеХранилище(ДеревоДанных, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ОборотыСписание11",
		"П1110002;П1120002;П1130002;П1140002;П1150002;П1160002");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ОборотыЗачисление11",
		"П1110003;П1120003;П1130003;П1140003;П1150003;П1160003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ОстаткиКонПериода11",
		"ОстаткиНачПериода;П1110002;П1120002;П1130002;П1140002;П1150002;П1160002;П1110003;П1120003;П1130003;П1140003;П1150003;П1160003");
	
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ОборотыСписание21",
		"П2110002;П2120002;П2130002;П2140002;П2150002");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ОборотыЗачисление21",
		"П2110003;П2120003;П2130003;П2140003;П2150003");
	СтруктураЗависимыхЯчеекДляАвторасчета.Вставить("ОстаткиКонПериода21",
		"ОстаткиНачПериода;П2110002;П2120002;П2130002;П2140002;П2150002;П2110003;П2120003;П2130003;П2140003;П2150003");
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИПроверкаВыгрузкиЭлектронногоПредставления

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗагрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РегламентированнаяОтчетностьЗагрузкаКлиент.ЗагрузитьИзФайлаОтчет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ЗагрузкаОтчетаИзФайла(ДанныеДляЗагрузки) Экспорт
	
	Если Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон(НСтр("ru='Отчет ""%1"" не сохранен.'"), ЭтотОбъект.Заголовок);
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗагрузкаОтчетаИзФайлаНаСервере(ДанныеДляЗагрузки)
	
	СформироватьСтруктуруПоказателей();
	
	ПараметрыОтчета = СформироватьСтруктуруПараметров();
	
	ДеревоДляЗагрузки = ИзвлечьСтруктуруXML("СхемаВыгрузки2015Кв3");
	
	Если НЕ РегламентированнаяОтчетностьЗагрузка.ЗагрузкаОтчетаИзФайла(
		ЭтотОбъект, ПараметрыОтчета, ДанныеДляЗагрузки, ДеревоДляЗагрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = Неопределено;
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
КонецПроцедуры

&НаКлиенте
Функция УниверсальнаяВыгрузка(ТекстВыгрузки = Неопределено, ПроверятьБлокировки = Истина) Экспорт
	
	Перем ПараметрыВыгрузки;
	
	Если Модифицированность Тогда
		ТекстЗаголовка = ЗаголовокРегламентированногоОтчета(
			СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ОргСтр = " (" + СтруктураРеквизитовФормы.Организация + ")";
		Если СтрНайти(ТекстЗаголовка, ОргСтр) = 0 Тогда
			ТекстЗаголовка = ТекстЗаголовка + ОргСтр;
		КонецЕсли;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отчет """ + ТекстЗаголовка + """ не сохранен.";
		Сообщение.Сообщить();
		
		Возврат Ложь;
	КонецЕсли;
	
	Если Открыта() Тогда
		Если СтруктураРеквизитовФормы.ЕдиницаИзмерения
			<> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить единицу измерения ""в рублях"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru='Перед выгрузкой необходимо установить точность ""0"".'");
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки) Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
	
	СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),
		КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина" );
	
	Если СтрНайти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УниверсальнаяВыгрузкаXMLНаСервере(ТекстВыгрузки, ПараметрыВыгрузки)
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ПараметрыВыгрузки.ИмяСхемыВыгрузки);
	
	Если НЕ ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВыгрузки = Новый Массив;
	
	ТекстВыгрузкиОтчета = ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки);
	ДополнитьТекстВыгрузкиДаннымиДополнительныхФайлов(ТекстВыгрузкиОтчета);
	ТекстВыгрузки.Добавить(ВыгрузкаОтчета(ТекстВыгрузкиОтчета, ПараметрыВыгрузки));
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПоказателей()
	
	мДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета();
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		мДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
	КонецЦикла;
	
	Для Каждого Раздел Из мСтруктураМногоуровневыхРазделов Цикл
		мДанныеОтчета.Вставить(Раздел.Ключ);
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция СформироватьСтруктуруПараметров()
	
	Титульный = мДанныеОтчета.Титульный;
	
	Если НЕ Титульный.Свойство("ОснованиеНаправленияОтчетности") Тогда
		Титульный.Вставить("ОснованиеНаправленияОтчетности", "Первичное направление отчетности");
	КонецЕсли;
	Если НЕ Титульный.Свойство("ВидДеятельностиНФО") Тогда
		Титульный.Вставить("ВидДеятельностиНФО", "");
	КонецЕсли;
	Если НЕ Титульный.Свойство("АдресЭлектроннойПочты") Тогда
		Титульный.Вставить("АдресЭлектроннойПочты", "");
	КонецЕсли;
	Если НЕ Титульный.Свойство("Примечание") Тогда
		Титульный.Вставить("Примечание", "");
	КонецЕсли;
	
	ПараметрыВыгрузки = Новый Структура;
	
	ЭтоПБОЮЛ = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
		СтруктураРеквизитовФормы.Организация);
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	ПараметрыВыгрузки.Вставить("ОКАТО", СокрЛП(Титульный.ОКАТО));
	ПараметрыВыгрузки.Вставить("ИНН", СокрЛП(СтруктураРеквизитовФормы.Организация.ИНН));
	ПараметрыВыгрузки.Вставить("ОГРН", СокрЛП(Титульный.ОГРН));
	ПараметрыВыгрузки.Вставить("КПП", СокрЛП(Титульный.КПП));
	ПараметрыВыгрузки.Вставить("НаимПолн", СокрЛП(Титульный.ОргПолнНаим));
	ПараметрыВыгрузки.Вставить("НаимСокр", СокрЛП(Титульный.ОргСокрНаим));
	ПараметрыВыгрузки.Вставить("ОргПочтАдрес", СокрЛП(Титульный.ОргПочтАдрес));
	ПараметрыВыгрузки.Вставить("КодОснВидаДеятельности", СокрЛП(Титульный.КодОснВидаДеятельности));
	ПараметрыВыгрузки.Вставить("КодыИныхВидовДеятельности", СокрЛП(Титульный.КодыИныхВидовДеятельности));
	ПараметрыВыгрузки.Вставить("ВидДеятельностиНФО", СокрЛП(Титульный.ВидДеятельностиНФО));
	
	ОснованиеНапрОтч = СокрЛП(Титульный.ОснованиеНаправленияОтчетности);
	Если ЗначениеЗаполнено(ОснованиеНапрОтч) Тогда
		Если ОснованиеНапрОтч = "Направление уточненных данных" Тогда
			ПараметрыВыгрузки.Вставить("ОснованиеНаправленияОтчетности", "2");
		ИначеЕсли ОснованиеНапрОтч = "Направление в связи с полученным Предписанием Банка России" Тогда
			ПараметрыВыгрузки.Вставить("ОснованиеНаправленияОтчетности", "3");
		Иначе
			ПараметрыВыгрузки.Вставить("ОснованиеНаправленияОтчетности", "1");
		КонецЕсли;
	Иначе
		ПараметрыВыгрузки.Вставить("ОснованиеНаправленияОтчетности", "");
	КонецЕсли;
	
	Постфикс = "";
	АппВерсия = "2.16.3";
	ИмяСхемыВыгрузки = "СхемаВыгрузки2015Кв3_КоллИнвест";
	Если ПараметрыВыгрузки.КодОснВидаДеятельности = "020"
		ИЛИ ПараметрыВыгрузки.КодОснВидаДеятельности = "100" Тогда
		Постфикс = "_КоллИнвест";
		АппВерсия = "2.16.3.1";
	ИначеЕсли ПараметрыВыгрузки.КодОснВидаДеятельности = "110" Тогда
		Постфикс = "_МФО";
		ИмяСхемыВыгрузки = "СхемаВыгрузки2015Кв3_МФО";
	ИначеЕсли ПараметрыВыгрузки.КодОснВидаДеятельности = "120" Тогда
		Если ПараметрыВыгрузки.ВидДеятельностиНФО
			= "Сельскохозяйственный кредитный потребительский кооператив" Тогда
			Постфикс = "_СКПК";
			ИмяСхемыВыгрузки = "СхемаВыгрузки2015Кв3_СКПК";
		Иначе
			Постфикс = "_КПК";
			ИмяСхемыВыгрузки = "СхемаВыгрузки2015Кв3_КПК";
		КонецЕсли;
	ИначеЕсли ПараметрыВыгрузки.КодОснВидаДеятельности = "180" Тогда
		Постфикс = "_Ломбард";
		ИмяСхемыВыгрузки = "СхемаВыгрузки2015Кв3_Ломбард";
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("АппВерсия", АппВерсия);
	ПараметрыВыгрузки.Вставить("ИмяСхемыВыгрузки", ИмяСхемыВыгрузки);
	ПараметрыВыгрузки.Вставить("ЗаписьXML_НачалоЭлемента", "av:ОКУД0420001" + Постфикс);
	
	ПараметрыВыгрузки.Вставить("МесПериодОтч", Формат(Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания), "ЧЦ=3; ЧВН="));
	ПараметрыВыгрузки.Вставить("ГодПериодОтч", Формат(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания, "ДФ=гггг"));
	ПараметрыВыгрузки.Вставить("ДатаДок", Формат(ТекущаяДатаСеанса(), "ДФ=""гггг-ММ-дд"""));
	ПараметрыВыгрузки.Вставить("НомерДок", СокрЛП(Титульный.ИсходящийНомер));
	
	ПараметрыВыгрузки.Вставить("АдресЭлектроннойПочты", СокрЛП(Титульный.АдресЭлектроннойПочты));
	ПараметрыВыгрузки.Вставить("Примечание", СокрЛП(Титульный.Примечание));
	
	ФИО = РегламентированнаяОтчетность.РазложитьФИО(Титульный.РукФИО);
	ПараметрыВыгрузки.Вставить("РукФамилия", ФИО.Фамилия);
	ПараметрыВыгрузки.Вставить("РукИмя", ФИО.Имя);
	ПараметрыВыгрузки.Вставить("РукОтчество", ФИО.Отчество);
	ПараметрыВыгрузки.Вставить("РукДолжность", СокрЛП(Титульный.РукДолжность));
	ПараметрыВыгрузки.Вставить("РукТелефон", СокрЛП(Титульный.РукТелефон));
	
	ФИО = РегламентированнаяОтчетность.РазложитьФИО(Титульный.ИспФИО);
	ПараметрыВыгрузки.Вставить("ИспФамилия", ФИО.Фамилия);
	ПараметрыВыгрузки.Вставить("ИспИмя", ФИО.Имя);
	ПараметрыВыгрузки.Вставить("ИспОтчество", ФИО.Отчество);
	ПараметрыВыгрузки.Вставить("ИспДолжность", СокрЛП(Титульный.ИспДолжность));
	ПараметрыВыгрузки.Вставить("ИспТелефон", СокрЛП(Титульный.ИспТелефон));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаДополнительныхФайлов", "av:Files");
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "av:Отчетность");
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

&НаСервере
Функция ИзвлечьСтруктуруXML(ИмяМакета)
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				ТекКод = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Код = ?(ТекКод = "Name", ТекКод, "av:" + ТекКод);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

&НаСервере
Функция ПроверитьВозможностьВыгрузки(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	СтатусПроверки = Истина;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ВозможныеКодыОсновныхВД = Новый Структура;
	ВозможныеКодыИныхВД = Новый Массив;
	ВозможныеКодыИныхВД.Добавить("180");
	ВозможныеКодыИныхВД.Добавить("100");
	ВозможныеКодыИныхВД.Добавить("110");
	ВозможныеКодыИныхВД.Добавить("120");
	ВозможныеКодыИныхВД.Добавить("000");
	ВозможныеКодыОсновныхВД.Вставить("_020", ВозможныеКодыИныхВД);
	ВозможныеКодыИныхВД = Новый Массив;
	ВозможныеКодыИныхВД.Добавить("180");
	ВозможныеКодыИныхВД.Добавить("110");
	ВозможныеКодыИныхВД.Добавить("120");
	ВозможныеКодыИныхВД.Добавить("000");
	ВозможныеКодыОсновныхВД.Вставить("_100", ВозможныеКодыИныхВД);
	ВозможныеКодыИныхВД = Новый Массив;
	ВозможныеКодыИныхВД.Добавить("020");
	ВозможныеКодыИныхВД.Добавить("100");
	ВозможныеКодыИныхВД.Добавить("180");
	ВозможныеКодыИныхВД.Добавить("120");
	ВозможныеКодыИныхВД.Добавить("000");
	ВозможныеКодыОсновныхВД.Вставить("_110", ВозможныеКодыИныхВД);
	ВозможныеКодыИныхВД = Новый Массив;
	ВозможныеКодыИныхВД.Добавить("020");
	ВозможныеКодыИныхВД.Добавить("100");
	ВозможныеКодыИныхВД.Добавить("110");
	ВозможныеКодыИныхВД.Добавить("180");
	ВозможныеКодыИныхВД.Добавить("000");
	ВозможныеКодыОсновныхВД.Вставить("_120", ВозможныеКодыИныхВД);
	ВозможныеКодыИныхВД = Новый Массив;
	ВозможныеКодыИныхВД.Добавить("020");
	ВозможныеКодыИныхВД.Добавить("100");
	ВозможныеКодыИныхВД.Добавить("110");
	ВозможныеКодыИныхВД.Добавить("120");
	ВозможныеКодыИныхВД.Добавить("000");
	ВозможныеКодыОсновныхВД.Вставить("_180", ВозможныеКодыИныхВД);
	
	Если НЕ (ЗначениеЗаполнено(ПараметрыВыгрузки.КодОснВидаДеятельности)
		И ВозможныеКодыОсновныхВД.Свойство("_" + ПараметрыВыгрузки.КодОснВидаДеятельности)) Тогда
		СообщитьВТС("Выгрузка электронного представления формы возможна при следующих кодах основного вида деятельности: 020, 100, 110, 120, 180.",
		"Титульный", "КодОснВидаДеятельности");
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка титульного листа.
	Если ПараметрыВыгрузки.КодОснВидаДеятельности = "120"
		И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ВидДеятельностиНФО) Тогда
		СообщитьВТС("Не задан вид деятельности некредитной финансовой организации.", "Титульный", "ВидДеятельностиНФО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИНН) Тогда
		СообщитьВТС("Не задан ИНН налогоплательщика.", "Титульный", "ИНН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОГРН) Тогда
		СообщитьВТС("Не задан ОГРН налогоплательщика.", "Титульный", "ОГРН");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимПолн) Тогда
		СообщитьВТС("Не задано полное наименование организации.", "Титульный", "ОргПолнНаим");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимСокр) Тогда
		СообщитьВТС("Не задано сокращенное наименование организации.", "Титульный", "ОргСокрНаим");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОргПочтАдрес) Тогда
		СообщитьВТС("Не задан почтовый адрес организации.", "Титульный", "ОргПочтАдрес");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.КодыИныхВидовДеятельности) Тогда
		ВозможныеКодыИныхВД = ВозможныеКодыОсновныхВД["_" + ПараметрыВыгрузки.КодОснВидаДеятельности];
		МассивКодовИныхВД = СтрРазделить(ПараметрыВыгрузки["КодыИныхВидовДеятельности"], ", ", Ложь);
		Для каждого КодИногоВД Из МассивКодовИныхВД Цикл
			Если ВозможныеКодыИныхВД.Найти(КодИногоВД) = Неопределено Тогда
				ТекстСообщения = "Неверно указаны коды иных видов деятельности. Возможны следующие значения: ";
				ТекстСообщения = ТекстСообщения + СтрСоединить(ВозможныеКодыИныхВД, ", ") + ".";
				СообщитьВТС(ТекстСообщения, "Титульный", "КодыИныхВидовДеятельности");
				СтатусПроверки = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОКАТО) Тогда
		СообщитьВТС("Не задан ОКАТО налогоплательщика.", "Титульный", "ОКАТО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ПараметрыВыгрузки.ЭтоПБОЮЛ И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
		СообщитьВТС("Не задан КПП налогоплательщика.", "Титульный", "КПП");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если ПараметрыВыгрузки.КодОснВидаДеятельности = "120"
		ИЛИ ПараметрыВыгрузки.КодОснВидаДеятельности = "110"
		ИЛИ ПараметрыВыгрузки.КодОснВидаДеятельности = "180" Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ОснованиеНаправленияОтчетности) Тогда
			СообщитьВТС("Не задано основание направления отчетности.", "Титульный", "ОснованиеНаправленияОтчетности");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ (ПараметрыВыгрузки.КодОснВидаДеятельности = "120"
		И (НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ВидДеятельностиНФО)
		ИЛИ ПараметрыВыгрузки.ВидДеятельностиНФО = "Кредитный потребительский кооператив")) Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.АдресЭлектроннойПочты) Тогда
			СообщитьВТС("Не задан адрес электронной почты.", "Титульный", "АдресЭлектроннойПочты");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НомерДок) Тогда
		СообщитьВТС("Не задан номер исходящего документа.", "Титульный", "ИсходящийНомер");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.РукФамилия) Тогда
		СообщитьВТС("Не задана фамилия руководителя.", "Титульный", "РукФИО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.РукИмя) Тогда
		СообщитьВТС("Не задано имя руководителя.", "Титульный", "РукФИО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.РукДолжность) Тогда
		СообщитьВТС("Не задана должность руководителя.", "Титульный", "РукДолжность");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.РукТелефон) Тогда
		СообщитьВТС("Не задан телефон руководителя.", "Титульный", "РукТелефон");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИспФамилия) Тогда
		СообщитьВТС("Не задана фамилия исполнителя.", "Титульный", "ИспФИО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИспИмя) Тогда
		СообщитьВТС("Не задано имя исполнителя.", "Титульный", "ИспФИО");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИспДолжность) Тогда
		СообщитьВТС("Не задана должность исполнителя.", "Титульный", "ИспДолжность");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИспТелефон) Тогда
		СообщитьВТС("Не задан телефон исполнителя.", "Титульный", "ИспТелефон");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Проверка раздела 1.
	
	ДеревоДанныхРаздел1 = ДанныеМногоуровневыхРазделов.Раздел1;
	Для каждого Ветка1 Из ДеревоДанныхРаздел1.Строки Цикл
		
		// Определение необходимости проверки страницы раздела 1.
		
		ПроверятьРаздел1 = Ложь;
		
		Если НЕ СтраницаПуста(Ветка1.Данные, "Раздел1", ДеревоВыгрузки) Тогда
			ПроверятьРаздел1 = Истина;
		КонецЕсли;
		
		Если НЕ ПроверятьРаздел1 Тогда
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов["Раздел1"];
			ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
			
			Для каждого ИмяПодчРаздела Из ИменаПодчиненныхРазделов Цикл
				ИндексПодчРаздела = ИменаПодчиненныхРазделов.Найти(ИмяПодчРаздела);
				Для каждого ВеткаПодчРаздела Из Ветка1.Строки[ИндексПодчРаздела].Строки Цикл
					Если НЕ СтраницаПуста(ВеткаПодчРаздела.Данные, ИмяПодчРаздела, ДеревоВыгрузки) Тогда
						ПроверятьРаздел1 = Истина;
						Прервать;
					Иначе
						Для каждого ДанныеМнЧПодчРаздела Из ВеткаПодчРаздела.ДанныеМногострочныхЧастей Цикл
							Для каждого СтрокаМнЧПодчРаздела Из ДанныеМнЧПодчРаздела.Значение.Строки Цикл
								Если НЕ СтраницаПуста(СтрокаМнЧПодчРаздела.Данные, ДанныеМнЧПодчРаздела.Ключ, ДеревоВыгрузки) Тогда
									ПроверятьРаздел1 = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ПроверятьРаздел1 Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ПроверятьРаздел1 Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если ПроверятьРаздел1 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПроверятьРаздел1 Тогда
			
			// Проверка страницы раздела 1.
			
			НомерСтраницы = ДеревоДанныхРаздел1.Строки.Индекс(Ветка1) + 1;
			
			// Регистрационный номер/порядковый номер.
			НомКредОрг = СокрЛП(Ветка1.Данные["РегНомерКредОрг"]);
			НомКредОргДлина = СтрДлина(НомКредОрг);
			Если НомКредОргДлина <> 4 Тогда
				СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
				+ ": не" + ?(НомКредОргДлина = 0, "", "верно")
				+ " задан регистрационный номер кредитной организации.",
				"Раздел1", "РегНомерКредОрг", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			ПорядНомФил = СокрЛП(Ветка1.Данные["ПорядНомерФил"]);
			Если ЗначениеЗаполнено(ПорядНомФил) Тогда
				ПорядНомФилДлина = СтрДлина(ПорядНомФил);
				Если ПорядНомФилДлина <> 4 Тогда
					СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
					+ ": неверно задан порядковый номер филиала.",
					"Раздел1", "ПорядНомерФил", НомерСтраницы);
					СтатусПроверки = Ложь;
				КонецЕсли;
			КонецЕсли;
			// БИК.
			БИККредОрг = СокрЛП(Ветка1.Данные["БИККредОрг"]);
			БИККредОргДлина = СтрДлина(БИККредОрг);
			Если БИККредОргДлина <> 9 Тогда
				СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
				+ ": не" + ?(БИККредОргДлина = 0, "", "верно")
				+ " задан БИК кредитной организации (филиала кредитной организации).",
				"Раздел1", "БИККредОрг", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			// Сокращенное наименование.
			СокрНаимКредОрг = СокрЛП(Ветка1.Данные["СокрНаимКредОрг"]);
			Если НЕ ЗначениеЗаполнено(СокрНаимКредОрг) Тогда
				СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
				+ ": не задано сокращенное наименование кредитной организации (филиала кредитной организации).",
				"Раздел1", "СокрНаимКредОрг", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
			
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов["Раздел1"];
			ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
			
			Для каждого ИмяПодчРаздела Из ИменаПодчиненныхРазделов Цикл
				ИндексПодчРаздела = ИменаПодчиненныхРазделов.Найти(ИмяПодчРаздела);
				Для каждого ВеткаПодчРаздела Из Ветка1.Строки[ИндексПодчРаздела].Строки Цикл
					
					// Определение необходимости проверки страниц разделов 1.1, 1.2, 1.3,
					// подчиненных странице раздела 1.
					
					ПроверятьПодчРаздел = Ложь;
					
					Если НЕ СтраницаПуста(ВеткаПодчРаздела.Данные, ИмяПодчРаздела, ДеревоВыгрузки) Тогда
						ПроверятьПодчРаздел = Истина;
					Иначе
						Для каждого ДанныеМнЧПодчРаздела Из ВеткаПодчРаздела.ДанныеМногострочныхЧастей Цикл
							Для каждого СтрокаМнЧПодчРаздела Из ДанныеМнЧПодчРаздела.Значение.Строки Цикл
								Если НЕ СтраницаПуста(СтрокаМнЧПодчРаздела.Данные, ДанныеМнЧПодчРаздела.Ключ, ДеревоВыгрузки) Тогда
									ПроверятьПодчРаздел = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если ПроверятьПодчРаздел Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если ПроверятьПодчРаздел Тогда
						
						НомерПодчСтраницы = Ветка1.Строки[ИндексПодчРаздела].Строки.Индекс(ВеткаПодчРаздела) + 1;
						
						КоординатыПодчСтраницы = Строка(НомерСтраницы) + "," + Строка(ИндексПодчРаздела + 1) + "," + Строка(НомерПодчСтраницы);
						
						Если ИмяПодчРаздела = "Раздел11" Тогда
							
							// Проверка страницы раздела 1.1, подчиненной странице раздела 1.
							
							// Валюта.
							Валюта = СокрЛП(ВеткаПодчРаздела.Данные["Валюта"]);
							Если НЕ ЗначениеЗаполнено(Валюта) Тогда
								СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
								+ " -> Виды и суммы операций " + Формат(НомерПодчСтраницы, "ЧГ=")
								+ ": не задана валюта.", "Раздел11", "Валюта", КоординатыПодчСтраницы);
								СтатусПроверки = Ложь;
							КонецЕсли;
							
							Для каждого ДанныеМнЧПодчРаздела Из ВеткаПодчРаздела.ДанныеМногострочныхЧастей Цикл
								Для каждого СтрокаМнЧПодчРаздела Из ДанныеМнЧПодчРаздела.Значение.Строки Цикл
									ИмяГруппыМнЧ = ДанныеМнЧПодчРаздела.Ключ;
									Если НЕ СтраницаПуста(СтрокаМнЧПодчРаздела.Данные, ИмяГруппыМнЧ, ДеревоВыгрузки) Тогда
										
										НомерСтрокиМнЧ = ДанныеМнЧПодчРаздела.Значение.Строки.Индекс(СтрокаМнЧПодчРаздела) + 1;
										
										Если ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы111 Тогда
											НаимПодр = "Операции с резидентами - юридическими лицами";
										ИначеЕсли ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы112 Тогда
											НаимПодр = "Операции с резидентами - индивидуальными предпринимателями";
										ИначеЕсли ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы113 Тогда
											НаимПодр = "Операции с резидентами - физическими лицами";
										ИначеЕсли ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы114 Тогда
											НаимПодр = "Операции с нерезидентами - юридическими лицами";
										ИначеЕсли ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы115 Тогда
											НаимПодр = "Операции с нерезидентами - физическими лицами";
										ИначеЕсли ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы116 Тогда
											НаимПодр = "Операции с неустановленными лицами";
										КонецЕсли;
										
										// Код вида операции.
										КодВидаОперации = СокрЛП(СтрокаМнЧПодчРаздела.Данные[ИмяГруппыМнЧ + "01"]);
										КодВидаОперацииДлина = СтрДлина(КодВидаОперации);
										Если КодВидаОперацииДлина <> 5 Тогда
											СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
											+ " -> Виды и суммы операций " + Формат(НомерПодчСтраницы, "ЧГ=")
											+ " -> " + НаимПодр + ": в строке " + Формат(НомерСтрокиМнЧ, "ЧГ=")
											+ " не" + ?(КодВидаОперацииДлина = 0, "", "верно")
											+ " задан код вида операции.", "Раздел11",
											ИмяГруппыМнЧ + "01_" + Формат(НомерСтрокиМнЧ, "ЧГ="), КоординатыПодчСтраницы);
											СтатусПроверки = Ложь;
										КонецЕсли;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							
						ИначеЕсли ИмяПодчРаздела = "Раздел12" Тогда
							
							// Проверка страницы раздела 1.2, подчиненной странице раздела 1.
							
							Для каждого ДанныеМнЧПодчРаздела Из ВеткаПодчРаздела.ДанныеМногострочныхЧастей Цикл
								Для каждого СтрокаМнЧПодчРаздела Из ДанныеМнЧПодчРаздела.Значение.Строки Цикл
									ИмяГруппыМнЧ = ДанныеМнЧПодчРаздела.Ключ;
									Если НЕ СтраницаПуста(СтрокаМнЧПодчРаздела.Данные, ИмяГруппыМнЧ, ДеревоВыгрузки) Тогда
										
										НомерСтрокиМнЧ = ДанныеМнЧПодчРаздела.Значение.Строки.Индекс(СтрокаМнЧПодчРаздела) + 1;
										
										Если ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы121 Тогда
											НаимПодр = "Операции с нерезидентами - юридическими лицами";
										ИначеЕсли ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы122 Тогда
											НаимПодр = "Операции с нерезидентами - физическими лицами";
										КонецЕсли;
										
										// Код страны нерезидента.
										КодСтраны = СокрЛП(СтрокаМнЧПодчРаздела.Данные[ИмяГруппыМнЧ + "01"]);
										КодСтраныДлина = СтрДлина(КодСтраны);
										Если КодСтраныДлина <> 3 Тогда
											СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
											+ " -> Раздел 1.2 -> " + НаимПодр + ": в строке " + Формат(НомерСтрокиМнЧ, "ЧГ=")
											+ " не" + ?(КодСтраныДлина = 0, "", "верно") + " задан код страны нерезидента.",
											"Раздел12", ИмяГруппыМнЧ + "01_" + Формат(НомерСтрокиМнЧ, "ЧГ="), КоординатыПодчСтраницы);
											СтатусПроверки = Ложь;
										КонецЕсли;
										// Код вида операции.
										КодВидаОперации = СокрЛП(СтрокаМнЧПодчРаздела.Данные[ИмяГруппыМнЧ + "02"]);
										КодВидаОперацииДлина = СтрДлина(КодВидаОперации);
										Если КодВидаОперацииДлина <> 5 Тогда
											СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
											+ " -> Раздел 1.2 -> " + НаимПодр + ": в строке " + Формат(НомерСтрокиМнЧ, "ЧГ=")
											+ " не" + ?(КодВидаОперацииДлина = 0, "", "верно") + " задан код вида операции.",
											"Раздел12", ИмяГруппыМнЧ + "02_" + Формат(НомерСтрокиМнЧ, "ЧГ="), КоординатыПодчСтраницы);
											СтатусПроверки = Ложь;
										КонецЕсли;
										// Код валюты.
										КодВалюты = СокрЛП(СтрокаМнЧПодчРаздела.Данные[ИмяГруппыМнЧ + "03"]);
										КодВалютыДлина = СтрДлина(КодВалюты);
										Если КодВалютыДлина <> 3 Тогда
											СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
											+ " -> Раздел 1.2 -> " + НаимПодр + ": в строке " + Формат(НомерСтрокиМнЧ, "ЧГ=")
											+ " не" + ?(КодВалютыДлина = 0, "", "верно") + " задан код валюты.",
											"Раздел12", ИмяГруппыМнЧ + "03_" + Формат(НомерСтрокиМнЧ, "ЧГ="), КоординатыПодчСтраницы);
											СтатусПроверки = Ложь;
										КонецЕсли;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							
						ИначеЕсли ИмяПодчРаздела = "Раздел13" Тогда
							
							// Проверка страницы раздела 1.3, подчиненной странице раздела 1.
							
							Для каждого ДанныеМнЧПодчРаздела Из ВеткаПодчРаздела.ДанныеМногострочныхЧастей Цикл
								Для каждого СтрокаМнЧПодчРаздела Из ДанныеМнЧПодчРаздела.Значение.Строки Цикл
									ИмяГруппыМнЧ = ДанныеМнЧПодчРаздела.Ключ;
									Если НЕ СтраницаПуста(СтрокаМнЧПодчРаздела.Данные, ИмяГруппыМнЧ, ДеревоВыгрузки) Тогда
										
										НомерСтрокиМнЧ = ДанныеМнЧПодчРаздела.Значение.Строки.Индекс(СтрокаМнЧПодчРаздела) + 1;
										
										// Код страны банка-нерезидента - получателя (плательщика).
										КодСтраны = СокрЛП(СтрокаМнЧПодчРаздела.Данные[ИмяГруппыМнЧ + "01"]);
										КодСтраныДлина = СтрДлина(КодСтраны);
										Если КодСтраныДлина <> 3 Тогда
											СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
											+ " -> Раздел 1.3: в строке " + Формат(НомерСтрокиМнЧ, "ЧГ=")
											+ " не" + ?(КодСтраныДлина = 0, "", "верно")
											+ " задан код страны банка-нерезидента - получателя (плательщика).",
											"Раздел13", ИмяГруппыМнЧ + "01_" + Формат(НомерСтрокиМнЧ, "ЧГ="), КоординатыПодчСтраницы);
											СтатусПроверки = Ложь;
										КонецЕсли;
										// Код вида операции.
										КодВидаОперации = СокрЛП(СтрокаМнЧПодчРаздела.Данные[ИмяГруппыМнЧ + "02"]);
										КодВидаОперацииДлина = СтрДлина(КодВидаОперации);
										Если КодВидаОперацииДлина <> 5 Тогда
											СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
											+ " -> Раздел 1.3: в строке " + Формат(НомерСтрокиМнЧ, "ЧГ=")
											+ " не" + ?(КодВидаОперацииДлина = 0, "", "верно") + " задан код вида операции.",
											"Раздел13", ИмяГруппыМнЧ + "02_" + Формат(НомерСтрокиМнЧ, "ЧГ="), КоординатыПодчСтраницы);
											СтатусПроверки = Ложь;
										КонецЕсли;
										// Код валюты.
										КодВалюты = СокрЛП(СтрокаМнЧПодчРаздела.Данные[ИмяГруппыМнЧ + "03"]);
										КодВалютыДлина = СтрДлина(КодВалюты);
										Если КодВалютыДлина <> 3 Тогда
											СообщитьВТС("Раздел 1 -> Операции по счетам " + Формат(НомерСтраницы, "ЧГ=")
											+ " -> Раздел 1.3: в строке " + Формат(НомерСтрокиМнЧ, "ЧГ=")
											+ " не" + ?(КодВалютыДлина = 0, "", "верно") + " задан код валюты.",
											"Раздел12", ИмяГруппыМнЧ + "03_" + Формат(НомерСтрокиМнЧ, "ЧГ="), КоординатыПодчСтраницы);
											СтатусПроверки = Ложь;
										КонецЕсли;
										
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка раздела 2.1.
	
	ДеревоДанныхРаздел21 = ДанныеМногоуровневыхРазделов.Раздел21;
	ПроверятьРаздел21 = Ложь;
	Для каждого Ветка21 Из ДеревоДанныхРаздел21.Строки Цикл
		
		НомерСтраницы = ДеревоДанныхРаздел21.Строки.Индекс(Ветка21) + 1;
		
		Для каждого ДанныеМнЧРаздела Из Ветка21.ДанныеМногострочныхЧастей Цикл
			Для каждого СтрокаМнЧРаздела Из ДанныеМнЧРаздела.Значение.Строки Цикл
				ИмяГруппыМнЧ = ДанныеМнЧРаздела.Ключ;
				Если НЕ СтраницаПуста(СтрокаМнЧРаздела.Данные, ИмяГруппыМнЧ, ДеревоВыгрузки) Тогда
					
					НомерСтрокиМнЧ = ДанныеМнЧРаздела.Значение.Строки.Индекс(СтрокаМнЧРаздела) + 1;
					
					Если ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы211 Тогда
						НаимПодр = "Операции с резидентами - юридическими лицами";
					ИначеЕсли ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы212 Тогда
						НаимПодр = "Операции с резидентами - индивидуальными предпринимателями";
					ИначеЕсли ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы213 Тогда
						НаимПодр = "Операции с резидентами - физическими лицами";
					ИначеЕсли ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы214 Тогда
						НаимПодр = "Операции с нерезидентами - юридическими лицами";
					ИначеЕсли ИмяГруппыМнЧ = СтруктураРеквизитовФормы.мИдГруппы215 Тогда
						НаимПодр = "Операции с нерезидентами - физическими лицами";
					КонецЕсли;
					
					// Код вида операции.
					КодВидаОперации = СокрЛП(СтрокаМнЧРаздела.Данные[ИмяГруппыМнЧ + "01"]);
					КодВидаОперацииДлина = СтрДлина(КодВидаОперации);
					Если КодВидаОперацииДлина <> 5 Тогда
						СообщитьВТС("Раздел 2.1 -> " + НаимПодр + ": в строке " + Формат(НомерСтрокиМнЧ, "ЧГ=")
						+ " не" + ?(КодВидаОперацииДлина = 0, "", "верно") + " задан код вида операции.",
						"Раздел21", ИмяГруппыМнЧ + "01_" + Формат(НомерСтрокиМнЧ, "ЧГ="), НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	// Проверка раздела 2.2.
	
	ДеревоДанныхРаздел22 = ДанныеМногоуровневыхРазделов.Раздел22;
	ПроверятьРаздел22 = Ложь;
	Для каждого Ветка22 Из ДеревоДанныхРаздел22.Строки Цикл
		
		НомерСтраницы = ДеревоДанныхРаздел22.Строки.Индекс(Ветка22) + 1;
		
		Для каждого ДанныеМнЧРаздела Из Ветка22.ДанныеМногострочныхЧастей Цикл
			Для каждого СтрокаМнЧРаздела Из ДанныеМнЧРаздела.Значение.Строки Цикл
				ИмяГруппыМнЧ = ДанныеМнЧРаздела.Ключ;
				Если НЕ СтраницаПуста(СтрокаМнЧРаздела.Данные, ИмяГруппыМнЧ, ДеревоВыгрузки) Тогда
					
					НомерСтрокиМнЧ = ДанныеМнЧРаздела.Значение.Строки.Индекс(СтрокаМнЧРаздела) + 1;
					
					// Код страны нерезидента.
					КодСтраны = СокрЛП(СтрокаМнЧРаздела.Данные[ИмяГруппыМнЧ + "01"]);
					КодСтраныДлина = СтрДлина(КодСтраны);
					Если КодСтраныДлина <> 3 Тогда
						СообщитьВТС("Раздел 2.2: в строке " + Формат(НомерСтрокиМнЧ, "ЧГ=")
						+ " не" + ?(КодВидаОперацииДлина = 0, "", "верно") + " задан код страны нерезидента.",
						"Раздел22", ИмяГруппыМнЧ + "01_" + Формат(НомерСтрокиМнЧ, "ЧГ="), НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					// Код вида операции.
					КодВидаОперации = СокрЛП(СтрокаМнЧРаздела.Данные[ИмяГруппыМнЧ + "02"]);
					КодВидаОперацииДлина = СтрДлина(КодВидаОперации);
					Если КодВидаОперацииДлина <> 5 Тогда
						СообщитьВТС("Раздел 2.2: в строке " + Формат(НомерСтрокиМнЧ, "ЧГ=")
						+ " не" + ?(КодВидаОперацииДлина = 0, "", "верно") + " задан код вида операции.",
						"Раздел22", ИмяГруппыМнЧ + "02_" + Формат(НомерСтрокиМнЧ, "ЧГ="), НомерСтраницы);
						СтатусПроверки = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция СтраницаПуста(ДанныеСтраницы, Показатели, ДеревоВыгрузки = Неопределено)
	
	ПоказателиРаздела = ПолучитьПоказателиРаздела(ДеревоВыгрузки, Показатели);
	
	ПоказателиНеанализируемыеНаЗаполненность = Новый Массив;
	
	Для Каждого Пок Из ПоказателиРаздела Цикл
		Если ПоказателиНеанализируемыеНаЗаполненность.Найти(Пок.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ПоказательЗаполнен(Пок, ДанныеСтраницы[Пок.Ключ]) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиРаздела(ДеревоВыгрузки, Раздел)
	
	ПоказателиРаздела = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", Раздел), Истина);
	КоличествоСтрокРаздела = ПоказателиРаздела.Количество();
	Для ОбрИнд = 1 По КоличествоСтрокРаздела Цикл
		Инд = КоличествоСтрокРаздела - ОбрИнд;
		ТекСтр = ПоказателиРаздела[Инд];
		Если НЕ ЗначениеЗаполнено(ТекСтр.Ключ) Тогда
			ПоказателиРаздела.Удалить(Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоказателиРаздела;
	
КонецФункции

&НаСервере
Функция ПоказательЗаполнен(Показатель, Значение)
	
	Возврат ЗначениеЗаполнено(Значение) И НЕ (СокрЛП(Показатель.Формат) = "N" И Показатель.МаксРазмерность = 15 И ТипЗнч(Значение) = Тип("Число") И Окр(Значение) = 0);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки)
	
	ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ДеревоВыгрузки); // формируем точную структуру XML-макета
	ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, ДеревоВыгрузки);
	ОтсечьНезаполненныеНеобязательныеУзлы(ДеревоВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУсловныеЭлементы(Знач ПараметрыВыгрузки, Узел)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти
			ИЛИ Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаДополнительныхФайлов Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(мДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(ЭтаФорма, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ПараметрыВыгрузки, ТекСтр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Узел, НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				ПараметрыВыгрузки, "ИмяКлючевогоУзлаСодержательнойЧасти")
				И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(Стр, ПараметрыВыгрузки);
			ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(
				ПараметрыВыгрузки, "ИмяКлючевогоУзлаДополнительныхФайлов")
				И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаДополнительныхФайлов Тогда
				ЗаполнитьУзелИменамиДополнительныхФайлов(Стр);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки, КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(Узел, Стр);
					ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, УзелСоответствующийСтроке, НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ПараметрыВыгрузки, Стр, НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция СкопироватьУзел(Родитель, Узел)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
	МаксИндекс = -1;
	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
		Если ТекИндекс > МаксИндекс Тогда
			МаксИндекс = ТекИндекс;
		КонецЕсли;
	КонецЦикла;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(НовыйУзел, Стр);
	КонецЦикла;
	Возврат НовыйУзел;
	
КонецФункции

&НаСервере
Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУзелИменамиДополнительныхФайлов(УзелРодитель)
	
	МассивДопФайлов = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеМассивДопФайлов"]);
	
	Если МассивДопФайлов.Количество() > 0 Тогда
		Файл = ПолучитьПодчиненныйЭлемент(УзелРодитель, "av:File");
		Для каждого СтруктураХранения Из МассивДопФайлов Цикл
			ЭкзФайл = СкопироватьУзел(УзелРодитель, Файл);
			ВывестиПоказательВXML(ЭкзФайл, " Name=" + """" + СтруктураХранения["Имя"] + """");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТекстВыгрузкиДаннымиДополнительныхФайлов(ТекстВыгрузкиОтчета)
	
	МассивДопФайлов = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеМассивДопФайлов"]);
	
	Для каждого СтруктураХранения Из МассивДопФайлов Цикл
		ИмяФайла = СтруктураХранения["Имя"];
		ДвДанные = ПолучитьИзВременногоХранилища(СтруктураХранения["Адрес"]);
		
		B64 = Base64Строка(ДвДанные);
		B64 = СтрЗаменить(B64, Символы.ПС, "");
		B64 = СтрЗаменить(B64, Символы.ВК, "");
		
		ТекстВыгрузкиОтчета = СтрЗаменить(ТекстВыгрузкиОтчета,
			"<av:File> Name=""" + ИмяФайла + """",
			"<av:File Name="""  + ИмяФайла + """" + ">" + B64);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСодержательнуюЧасть(УзелРодитель, ПараметрыВыгрузки)
	
	// Соответствие кодов валют.
	СоответствиеКВ = Новый Соответствие;
	СоответствиеКВ.Вставить("008", 0);
	СоответствиеКВ.Вставить("012", 1);
	СоответствиеКВ.Вставить("032", 2);
	СоответствиеКВ.Вставить("036", 3);
	СоответствиеКВ.Вставить("044", 4);
	СоответствиеКВ.Вставить("048", 5);
	СоответствиеКВ.Вставить("050", 6);
	СоответствиеКВ.Вставить("051", 7);
	СоответствиеКВ.Вставить("052", 8);
	СоответствиеКВ.Вставить("060", 9);
	СоответствиеКВ.Вставить("064", 10);
	СоответствиеКВ.Вставить("068", 11);
	СоответствиеКВ.Вставить("072", 12);
	СоответствиеКВ.Вставить("084", 13);
	СоответствиеКВ.Вставить("090", 14);
	СоответствиеКВ.Вставить("096", 15);
	СоответствиеКВ.Вставить("104", 16);
	СоответствиеКВ.Вставить("108", 17);
	СоответствиеКВ.Вставить("116", 18);
	СоответствиеКВ.Вставить("124", 19);
	СоответствиеКВ.Вставить("132", 20);
	СоответствиеКВ.Вставить("136", 21);
	СоответствиеКВ.Вставить("144", 22);
	СоответствиеКВ.Вставить("152", 23);
	СоответствиеКВ.Вставить("156", 24);
	СоответствиеКВ.Вставить("170", 25);
	СоответствиеКВ.Вставить("174", 26);
	СоответствиеКВ.Вставить("188", 27);
	СоответствиеКВ.Вставить("191", 28);
	СоответствиеКВ.Вставить("192", 29);
	СоответствиеКВ.Вставить("203", 30);
	СоответствиеКВ.Вставить("208", 31);
	СоответствиеКВ.Вставить("214", 32);
	СоответствиеКВ.Вставить("222", 33);
	СоответствиеКВ.Вставить("230", 34);
	СоответствиеКВ.Вставить("232", 35);
	СоответствиеКВ.Вставить("233", 36);
	СоответствиеКВ.Вставить("238", 37);
	СоответствиеКВ.Вставить("242", 38);
	СоответствиеКВ.Вставить("262", 39);
	СоответствиеКВ.Вставить("270", 40);
	СоответствиеКВ.Вставить("292", 41);
	СоответствиеКВ.Вставить("320", 42);
	СоответствиеКВ.Вставить("324", 43);
	СоответствиеКВ.Вставить("328", 44);
	СоответствиеКВ.Вставить("332", 45);
	СоответствиеКВ.Вставить("340", 46);
	СоответствиеКВ.Вставить("344", 47);
	СоответствиеКВ.Вставить("348", 48);
	СоответствиеКВ.Вставить("352", 49);
	СоответствиеКВ.Вставить("356", 50);
	СоответствиеКВ.Вставить("360", 51);
	СоответствиеКВ.Вставить("364", 52);
	СоответствиеКВ.Вставить("368", 53);
	СоответствиеКВ.Вставить("376", 54);
	СоответствиеКВ.Вставить("388", 55);
	СоответствиеКВ.Вставить("392", 56);
	СоответствиеКВ.Вставить("398", 57);
	СоответствиеКВ.Вставить("400", 58);
	СоответствиеКВ.Вставить("404", 59);
	СоответствиеКВ.Вставить("408", 60);
	СоответствиеКВ.Вставить("410", 61);
	СоответствиеКВ.Вставить("414", 62);
	СоответствиеКВ.Вставить("417", 63);
	СоответствиеКВ.Вставить("418", 64);
	СоответствиеКВ.Вставить("422", 65);
	СоответствиеКВ.Вставить("426", 66);
	СоответствиеКВ.Вставить("428", 67);
	СоответствиеКВ.Вставить("430", 68);
	СоответствиеКВ.Вставить("434", 69);
	СоответствиеКВ.Вставить("440", 70);
	СоответствиеКВ.Вставить("446", 71);
	СоответствиеКВ.Вставить("454", 72);
	СоответствиеКВ.Вставить("458", 73);
	СоответствиеКВ.Вставить("462", 74);
	СоответствиеКВ.Вставить("478", 75);
	СоответствиеКВ.Вставить("480", 76);
	СоответствиеКВ.Вставить("484", 77);
	СоответствиеКВ.Вставить("496", 78);
	СоответствиеКВ.Вставить("498", 79);
	СоответствиеКВ.Вставить("504", 80);
	СоответствиеКВ.Вставить("512", 81);
	СоответствиеКВ.Вставить("516", 82);
	СоответствиеКВ.Вставить("524", 83);
	СоответствиеКВ.Вставить("532", 84);
	СоответствиеКВ.Вставить("533", 85);
	СоответствиеКВ.Вставить("548", 86);
	СоответствиеКВ.Вставить("554", 87);
	СоответствиеКВ.Вставить("558", 88);
	СоответствиеКВ.Вставить("566", 89);
	СоответствиеКВ.Вставить("578", 90);
	СоответствиеКВ.Вставить("586", 91);
	СоответствиеКВ.Вставить("590", 92);
	СоответствиеКВ.Вставить("598", 93);
	СоответствиеКВ.Вставить("600", 94);
	СоответствиеКВ.Вставить("604", 95);
	СоответствиеКВ.Вставить("608", 96);
	СоответствиеКВ.Вставить("624", 97);
	СоответствиеКВ.Вставить("634", 98);
	СоответствиеКВ.Вставить("643", 99);
	СоответствиеКВ.Вставить("646", 100);
	СоответствиеКВ.Вставить("654", 101);
	СоответствиеКВ.Вставить("678", 102);
	СоответствиеКВ.Вставить("682", 103);
	СоответствиеКВ.Вставить("690", 104);
	СоответствиеКВ.Вставить("694", 105);
	СоответствиеКВ.Вставить("702", 106);
	СоответствиеКВ.Вставить("704", 107);
	СоответствиеКВ.Вставить("706", 108);
	СоответствиеКВ.Вставить("710", 109);
	СоответствиеКВ.Вставить("728", 164);
	СоответствиеКВ.Вставить("748", 110);
	СоответствиеКВ.Вставить("752", 111);
	СоответствиеКВ.Вставить("756", 112);
	СоответствиеКВ.Вставить("760", 113);
	СоответствиеКВ.Вставить("764", 114);
	СоответствиеКВ.Вставить("776", 115);
	СоответствиеКВ.Вставить("780", 116);
	СоответствиеКВ.Вставить("784", 117);
	СоответствиеКВ.Вставить("788", 118);
	СоответствиеКВ.Вставить("800", 119);
	СоответствиеКВ.Вставить("807", 120);
	СоответствиеКВ.Вставить("818", 121);
	СоответствиеКВ.Вставить("826", 122);
	СоответствиеКВ.Вставить("834", 123);
	СоответствиеКВ.Вставить("840", 124);
	СоответствиеКВ.Вставить("858", 125);
	СоответствиеКВ.Вставить("860", 126);
	СоответствиеКВ.Вставить("882", 127);
	СоответствиеКВ.Вставить("886", 128);
	СоответствиеКВ.Вставить("901", 130);
	СоответствиеКВ.Вставить("931", 131);
	СоответствиеКВ.Вставить("932", 132);
	СоответствиеКВ.Вставить("934", 133);
	СоответствиеКВ.Вставить("936", 134);
	СоответствиеКВ.Вставить("937", 135);
	СоответствиеКВ.Вставить("938", 136);
	СоответствиеКВ.Вставить("940", 137);
	СоответствиеКВ.Вставить("941", 138);
	СоответствиеКВ.Вставить("943", 139);
	СоответствиеКВ.Вставить("944", 140);
	СоответствиеКВ.Вставить("946", 141);
	СоответствиеКВ.Вставить("949", 142);
	СоответствиеКВ.Вставить("950", 143);
	СоответствиеКВ.Вставить("951", 144);
	СоответствиеКВ.Вставить("952", 145);
	СоответствиеКВ.Вставить("953", 146);
	СоответствиеКВ.Вставить("960", 147);
	СоответствиеКВ.Вставить("967", 165);
	СоответствиеКВ.Вставить("968", 148);
	СоответствиеКВ.Вставить("969", 149);
	СоответствиеКВ.Вставить("970", 150);
	СоответствиеКВ.Вставить("971", 151);
	СоответствиеКВ.Вставить("972", 152);
	СоответствиеКВ.Вставить("973", 153);
	СоответствиеКВ.Вставить("974", 154);
	СоответствиеКВ.Вставить("975", 155);
	СоответствиеКВ.Вставить("976", 156);
	СоответствиеКВ.Вставить("977", 157);
	СоответствиеКВ.Вставить("978", 158);
	СоответствиеКВ.Вставить("980", 159);
	СоответствиеКВ.Вставить("981", 160);
	СоответствиеКВ.Вставить("985", 161);
	СоответствиеКВ.Вставить("986", 162);
	
	Титульный = мДанныеОтчета.Титульный;
	
	ДанныеМногоуровневыхРазделов = Новый Структура;
	СохрСтруктура = СохраненныеДанныеОтчета();
	Для каждого ЭлементСтруктуры Из СохрСтруктура.ДанныеМногоуровневыхРазделов Цикл
		ДанныеМногоуровневыхРазделов.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	ДеревоДанныхРаздел1  = ДанныеМногоуровневыхРазделов["Раздел1"];
	ДеревоДанныхРаздел21 = ДанныеМногоуровневыхРазделов["Раздел21"];
	ДеревоДанныхРаздел22 = ДанныеМногоуровневыхРазделов["Раздел22"];
	
	// Узел "Отчетность".
	
	МесяцПредставления = ПолучитьПодчиненныйЭлемент(УзелРодитель, "av:МесяцПредставления");
	Эл = ПолучитьПодчиненныйЭлемент(МесяцПредставления, "av:Код");
	ВывестиПоказательВXML(Эл, Формат(Месяц(СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания), "ЧЦ=3; ЧВН="));
	
	ГодПредставления = ПолучитьПодчиненныйЭлемент(УзелРодитель, "av:ГодПредставления");
	ВывестиПоказательВXML(ГодПредставления, Титульный["ОтчетГод"]);
	
	ПолноеНаименОрг = ПолучитьПодчиненныйЭлемент(УзелРодитель, "av:ПолноеНаименОрг");
	ВывестиПоказательВXML(ПолноеНаименОрг, Титульный["ОргПолнНаим"]);
	
	СокращНаименОрг = ПолучитьПодчиненныйЭлемент(УзелРодитель, "av:СокращНаименОрг");
	ВывестиПоказательВXML(СокращНаименОрг, Титульный["ОргСокрНаим"]);
	
	ПочтАдресОрг = ПолучитьПодчиненныйЭлемент(УзелРодитель, "av:ПочтАдресОрг");
	ВывестиПоказательВXML(ПочтАдресОрг, СтрЗаменить(Титульный["ОргПочтАдрес"], "№ ", ""));
	
	ИНН11 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "av:ИНН11");
	ВывестиПоказательВXML(ИНН11, Титульный["ИНН"]);
	
	ОГРН11 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "av:ОГРН11");
	ВывестиПоказательВXML(ОГРН11, Титульный["ОГРН"]);
	
	Таблица_СведОДеят = ПолучитьПодчиненныйЭлемент(УзелРодитель, "av:Таблица_СведОДеят");
	СтрокаКодыДеятельности = ПолучитьПодчиненныйЭлемент(Таблица_СведОДеят, "av:СтрокаКодыДеятельности");
	
	МассивКодовИныхВД = СтрРазделить(Титульный["КодыИныхВидовДеятельности"], ", ", Ложь);
	
	Для ИндВМассиве = 0 По МассивКодовИныхВД.Количество() - 1 Цикл
		КодИногоВД = МассивКодовИныхВД[ИндВМассиве];
		Если Титульный["КодОснВидаДеятельности"] = "120" Тогда // КПК и СКПК
			Если КодИногоВД = "020" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "1";
			ИначеЕсли КодИногоВД = "100" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "2";
			ИначеЕсли КодИногоВД = "110" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "3";
			ИначеЕсли КодИногоВД = "180" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "4";
			ИначеЕсли КодИногоВД = "000" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "5";
			КонецЕсли;
		ИначеЕсли Титульный["КодОснВидаДеятельности"] = "020"
			ИЛИ Титульный["КодОснВидаДеятельности"] = "100" Тогда // КоллИнвест
			Если КодИногоВД = "180" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "1";
			ИначеЕсли КодИногоВД = "100" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "2";
			ИначеЕсли КодИногоВД = "110" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "3";
			ИначеЕсли КодИногоВД = "120" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "4";
			ИначеЕсли КодИногоВД = "000" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "5";
			КонецЕсли;
		ИначеЕсли Титульный["КодОснВидаДеятельности"] = "110" Тогда // МФО
			Если КодИногоВД = "020" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "0";
			ИначеЕсли КодИногоВД = "100" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "0";
			ИначеЕсли КодИногоВД = "180" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "4";
			ИначеЕсли КодИногоВД = "120" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "1";
			ИначеЕсли КодИногоВД = "000" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "5";
			КонецЕсли;
		ИначеЕсли Титульный["КодОснВидаДеятельности"] = "180" Тогда // Ломбард
			Если КодИногоВД = "020" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "1";
			ИначеЕсли КодИногоВД = "100" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "2";
			ИначеЕсли КодИногоВД = "110" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "3";
			ИначеЕсли КодИногоВД = "120" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "4";
			ИначеЕсли КодИногоВД = "000" Тогда
				МассивКодовИныхВД[ИндВМассиве] = "5";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивКодовИныхВД.Количество() = 0 И Титульный["КодОснВидаДеятельности"] = "110" Тогда // МФО
		МассивКодовИныхВД.Добавить("0");
	КонецЕсли;
	
	КолКодовИныхВД = МассивКодовИныхВД.Количество();
	Если КолКодовИныхВД > 0 Тогда
		Для ИндВМассиве = 0 По КолКодовИныхВД - 1 Цикл
			КодИногоВД = МассивКодовИныхВД[ИндВМассиве];
			ЭкзСтрокаКодыДеятельности = СкопироватьУзел(Таблица_СведОДеят, СтрокаКодыДеятельности);
			
			Кол1_КодОсн = ПолучитьПодчиненныйЭлемент(ЭкзСтрокаКодыДеятельности, "av:Кол1_КодОсн");
			Эл = ПолучитьПодчиненныйЭлемент(Кол1_КодОсн, "av:Код");
			ВывестиПоказательВXML(Эл, Титульный["КодОснВидаДеятельности"]);
			
			Кол2_КодИной = ПолучитьПодчиненныйЭлемент(ЭкзСтрокаКодыДеятельности, "av:Кол2_КодИной");
			Эл = ПолучитьПодчиненныйЭлемент(Кол2_КодИной, "av:Код");
			ВывестиПоказательВXML(Эл, КодИногоВД);
		КонецЦикла;
	Иначе
		ЭкзСтрокаКодыДеятельности = СкопироватьУзел(Таблица_СведОДеят, СтрокаКодыДеятельности);
		
		Кол1_КодОсн = ПолучитьПодчиненныйЭлемент(ЭкзСтрокаКодыДеятельности, "av:Кол1_КодОсн");
		Эл = ПолучитьПодчиненныйЭлемент(Кол1_КодОсн, "av:Код");
		ВывестиПоказательВXML(Эл, Титульный["КодОснВидаДеятельности"]);
	КонецЕсли;
	
	// Раздел 1.
	
	Раздел1 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "av:Раздел1");
	ТаблицаРаздел1 = ПолучитьПодчиненныйЭлемент(Раздел1, "av:ТаблицаРаздел1");
	Разд1КРедОрг = ПолучитьПодчиненныйЭлемент(ТаблицаРаздел1, "av:Разд1КРедОрг");
	
	Для каждого ВеткаРаздел1 Из ДеревоДанныхРаздел1.Строки Цикл
		
		ЭкзРазд1КРедОрг = СкопироватьУзел(ТаблицаРаздел1, Разд1КРедОрг);
		Для каждого Эл Из ЭкзРазд1КРедОрг.Строки Цикл
			Если Эл.Строки.Количество() = 0 Тогда
				Если Эл.Код = "av:РегистрНомер" Тогда
					НомКредОрг  = СокрЛП(ВеткаРаздел1.Данные["РегНомерКредОрг"]);
					ПорядНомФил = СокрЛП(ВеткаРаздел1.Данные["ПорядНомерФил"]);
					ВывестиПоказательВXML(Эл, ?(ЗначениеЗаполнено(ПорядНомФил), НомКредОрг + "/" + ПорядНомФил, НомКредОрг));
				Иначе
					ВывестиПоказательВXML(Эл, ВеткаРаздел1.Данные[Эл.Ключ]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Раздел 1.1.
		
		Подраздел1_1 = ПолучитьПодчиненныйЭлемент(ЭкзРазд1КРедОрг, "av:Подраздел1_1");
		Таблица_Валюта = ПолучитьПодчиненныйЭлемент(Подраздел1_1, "av:Таблица_Валюта");
		Page_111 = ПолучитьПодчиненныйЭлемент(Таблица_Валюта, "av:Page_111");
		
		ДеревоДанныхПодраздел1_1 = ВеткаРаздел1.Строки[0];
		
		Для каждого ВеткаРаздел11 Из ДеревоДанныхПодраздел1_1.Строки Цикл
			
			ЭкзPage_111 = СкопироватьУзел(Таблица_Валюта, Page_111);
			
			Валюта = ПолучитьПодчиненныйЭлемент(ЭкзPage_111, "av:Валюта");
			
			Эл = ПолучитьПодчиненныйЭлемент(Валюта, "av:Код");
			СтрокаСКодомВалюты = ВеткаРаздел11.Данные[Эл.Ключ];
			ДлинаСтроки = СтрДлина(СтрокаСКодомВалюты);
			КодВалютыИзСтроки = Сред(СтрокаСКодомВалюты, ДлинаСтроки - 3, 3);
			ВывестиПоказательВXML(Эл, ВыгружаемыйКодВалюты(КодВалютыИзСтроки, ПараметрыВыгрузки, СоответствиеКВ));
			
			Таблица_ВидыОпераций = ПолучитьПодчиненныйЭлемент(ЭкзPage_111, "av:Таблица_ВидыОпераций");
			
			// Раздел 1.1.1.
			ИменаПодчУзлов = Новый Структура("ВидОпераций,Операция,Списано,Зачислено",
			"Строка_РезидентыЮЛ", "Кол1_КодОперРезидЮЛ",
			"Кол2_СуммСписаниеРезидЮЛ", "Кол3_СуммЗачислРезидЮЛ");
			ДанныеМнЧ = ВеткаРаздел11.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы111];
			ЗаполнитьУзел_СписаниеЗачисление(Таблица_ВидыОпераций, ИменаПодчУзлов, ДанныеМнЧ);
			// Раздел 1.1.2.
			ИменаПодчУзлов = Новый Структура("ВидОпераций,Операция,Списано,Зачислено",
			"Строка_РезидентыИП", "Кол1_КодОперРезидИП",
			"Кол2_СуммСписаниеРезидИП", "Кол3_СуммЗачислРезидИП");
			ДанныеМнЧ = ВеткаРаздел11.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы112];
			ЗаполнитьУзел_СписаниеЗачисление(Таблица_ВидыОпераций, ИменаПодчУзлов, ДанныеМнЧ);
			// Раздел 1.1.3.
			ИменаПодчУзлов = Новый Структура("ВидОпераций,Операция,Списано,Зачислено",
			"Строка_РезидентыФЛ", "Кол1_КодОперРезидФЛ",
			"Кол2_СуммСписаниеРезидФЛ", "Кол3_СуммЗачислРезидФЛ");
			ДанныеМнЧ = ВеткаРаздел11.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы113];
			ЗаполнитьУзел_СписаниеЗачисление(Таблица_ВидыОпераций, ИменаПодчУзлов, ДанныеМнЧ);
			// Раздел 1.1.4.
			ИменаПодчУзлов = Новый Структура("ВидОпераций,Операция,Списано,Зачислено",
			"Строка_НерезидентыЮЛ", "Кол1_КодОперНерезидЮЛ",
			"Кол2_СуммСписаниеНерезидЮЛ", "Кол3_СуммЗачислНерезидЮЛ");
			ДанныеМнЧ = ВеткаРаздел11.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы114];
			ЗаполнитьУзел_СписаниеЗачисление(Таблица_ВидыОпераций, ИменаПодчУзлов, ДанныеМнЧ);
			// Раздел 1.1.5.
			ИменаПодчУзлов = Новый Структура("ВидОпераций,Операция,Списано,Зачислено",
			"Строка_НерезидентыФЛ", "Кол1_КодОперНерезидФЛ",
			"Кол2_СуммСписаниеНерезидФЛ", "Кол3_СуммЗачислНерезидФЛ");
			ДанныеМнЧ = ВеткаРаздел11.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы115];
			ЗаполнитьУзел_СписаниеЗачисление(Таблица_ВидыОпераций, ИменаПодчУзлов, ДанныеМнЧ);
			// Раздел 1.1.6.
			ИменаПодчУзлов = Новый Структура("ВидОпераций,Операция,Списано,Зачислено",
			"СтрокаНеустановленныеЛ", "Кол1_КодОперНеустанЛица",
			"Кол2_СуммСписаниеНеустанЛица", "Кол3_СуммЗачислНеустанЛица");
			ДанныеМнЧ = ВеткаРаздел11.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы116];
			ЗаполнитьУзел_СписаниеЗачисление(Таблица_ВидыОпераций, ИменаПодчУзлов, ДанныеМнЧ);
			// Всего обороты по счету (счетам).
			Row_169 = ПолучитьПодчиненныйЭлемент(Таблица_ВидыОпераций, "av:Row_169");
			Эл = ПолучитьПодчиненныйЭлемент(Row_169, "av:Cell_171");
			ВывестиПоказательВXML(Эл, ВеткаРаздел11.Данные[Эл.Ключ]);
			Эл = ПолучитьПодчиненныйЭлемент(Row_169, "av:Cell_172");
			ВывестиПоказательВXML(Эл, ВеткаРаздел11.Данные[Эл.Ключ]);
			// Остатки на начало отчетного периода.
			Row_175 = ПолучитьПодчиненныйЭлемент(Таблица_ВидыОпераций, "av:Row_175");
			Эл = ПолучитьПодчиненныйЭлемент(Row_175, "av:Cell_176");
			ВывестиПоказательВXML(Эл, "Остатки на начало отчетного периода");
			Эл = ПолучитьПодчиненныйЭлемент(Row_175, "av:Cell_177");
			ВывестиПоказательВXML(Эл, ВеткаРаздел11.Данные[Эл.Ключ]);
			// Остатки на конец отчетного периода.
			Row_178 = ПолучитьПодчиненныйЭлемент(Таблица_ВидыОпераций, "av:Row_178");
			Эл = ПолучитьПодчиненныйЭлемент(Row_178, "av:Cell_179");
			ВывестиПоказательВXML(Эл, "Остатки на конец отчетного периода");
			Эл = ПолучитьПодчиненныйЭлемент(Row_178, "av:Cell_180");
			ВывестиПоказательВXML(Эл, ВеткаРаздел11.Данные[Эл.Ключ]);
			
		КонецЦикла;
		
		// Раздел 1.2.
		
		Подраздел1_2 = ПолучитьПодчиненныйЭлемент(ЭкзРазд1КРедОрг, "av:Подраздел1_2");
		Таблица_1_2СтруктОперацСНерезид = ПолучитьПодчиненныйЭлемент(Подраздел1_2, "av:Таблица_1_2СтруктОперацСНерезид");
		
		ДеревоДанныхПодраздел1_2 = ВеткаРаздел1.Строки[1];
		
		Для каждого ВеткаРаздел12 Из ДеревоДанныхПодраздел1_2.Строки Цикл
			
			// Раздел 1.2.1.
			ИменаПодчУзлов = Новый Структура("ВидОпераций,Страна,Операция,Валюта,Списано,Зачислено",
			"СтрокаСтруктОперСНерезЮЛ", "Кол1_Таб1_2КодСтраны", "Кол2_Таб1_2КодОперации",
			"Кол3_Таб1_2КодВалюты", "Кол4_Таб1_2Списано", "Кол5_Таб1_2Зачислено");
			ДанныеМнЧ = ВеткаРаздел12.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы121];
			ЗаполнитьУзел_СписаниеЗачисление(
			Таблица_1_2СтруктОперацСНерезид, ИменаПодчУзлов, ДанныеМнЧ, ПараметрыВыгрузки, СоответствиеКВ);
			
			// Раздел 1.2.2.
			ИменаПодчУзлов = Новый Структура("ВидОпераций,Страна,Операция,Валюта,Списано,Зачислено",
			"СтрокаСтруктОперСНерезФЛ", "Кол6_Таб1_2КодСтраны", "Кол7_Таб1_2КодОперации",
			"Кол8_Таб1_2КодВалюты", "Кол9_Таб1_2Списано", "Кол10_Таб1_2Зачислено");
			ДанныеМнЧ = ВеткаРаздел12.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы122];
			ЗаполнитьУзел_СписаниеЗачисление(
			Таблица_1_2СтруктОперацСНерезид, ИменаПодчУзлов, ДанныеМнЧ, ПараметрыВыгрузки, СоответствиеКВ);
			
		КонецЦикла;
		
		// Раздел 1.3.
		
		Подраздел1_3 = ПолучитьПодчиненныйЭлемент(ЭкзРазд1КРедОрг, "av:Подраздел1_3");
		Таблица1_3СтруктТрансгранОпер = ПолучитьПодчиненныйЭлемент(Подраздел1_3, "av:Таблица1_3СтруктТрансгранОпер");
		
		ДеревоДанныхПодраздел1_3 = ВеткаРаздел1.Строки[2];
		
		Для каждого ВеткаРаздел13 Из ДеревоДанныхПодраздел1_3.Строки Цикл
			
			ИменаПодчУзлов = Новый Структура("ВидОпераций,Страна,Операция,Валюта,Списано,Зачислено",
			"СтрокаСтруктТрансгрОпер", "Кол1_Таб1_3КодСтраны", "Кол2_Таб1_3КодОпер",
			"Кол3_Таб1_3КодВалюты", "Кол4_Таб1_3СуммаОперСпис", "Кол5_Таб1_3СуммаОперЗач");
			ДанныеМнЧ = ВеткаРаздел13.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы130];
			ЗаполнитьУзел_СписаниеЗачисление(
			Таблица1_3СтруктТрансгранОпер, ИменаПодчУзлов, ДанныеМнЧ, ПараметрыВыгрузки, СоответствиеКВ);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Раздел 2.
	
	Раздел2 = ПолучитьПодчиненныйЭлемент(УзелРодитель, "av:Раздел2");
	
	// Раздел 2.1.
	
	Подраздел2_1 = ПолучитьПодчиненныйЭлемент(Раздел2, "av:Подраздел2_1");
	Таблица2_1ОперЧерезКассу = ПолучитьПодчиненныйЭлемент(Подраздел2_1, "av:Таблица2_1ОперЧерезКассу");
	
	Для каждого ВеткаРаздел21 Из ДеревоДанныхРаздел21.Строки Цикл
		
		// Раздел 2.1.1.
		ИменаПодчУзлов = Новый Структура("ВидОпераций,Операция,Списано,Зачислено",
		"СтрокаОперСРезидЮЛ", "Кол1_Таб2_1КодОперЮЛРез",
		"Кол2_Таб2_1СумВыданоЮЛРез", "Кол3_Таб2_1СумВнесеноЮЛРез");
		ДанныеМнЧ = ВеткаРаздел21.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы211];
		ЗаполнитьУзел_СписаниеЗачисление(Таблица2_1ОперЧерезКассу, ИменаПодчУзлов, ДанныеМнЧ);
		// Раздел 2.1.2.
		ИменаПодчУзлов = Новый Структура("ВидОпераций,Операция,Списано,Зачислено",
		"СтрокаОперСРезидИП", "Кол1_Таб2_1КодОперИП",
		"Кол2_Таб2_1СумВыданоИП", "Кол3_Таб2_1СумВнесеноИП");
		ДанныеМнЧ = ВеткаРаздел21.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы212];
		ЗаполнитьУзел_СписаниеЗачисление(Таблица2_1ОперЧерезКассу, ИменаПодчУзлов, ДанныеМнЧ);
		// Раздел 2.1.3.
		ИменаПодчУзлов = Новый Структура("ВидОпераций,Операция,Списано,Зачислено",
		"СтрокаОперСРезФЛ", "Кол1_Таб2_1КодОперФЛРез",
		"Кол2_Таб2_1СумВыданоФЛРез", "Кол3_Таб2_1СумВнесеноФЛРез");
		ДанныеМнЧ = ВеткаРаздел21.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы213];
		ЗаполнитьУзел_СписаниеЗачисление(Таблица2_1ОперЧерезКассу, ИменаПодчУзлов, ДанныеМнЧ);
		// Раздел 2.1.4.
		ИменаПодчУзлов = Новый Структура("ВидОпераций,Операция,Списано,Зачислено",
		"СтрокаОперСНерезЮЛ", "Кол1_Таб2_1КодОперЮЛНерез",
		"Кол2_Таб2_1СумВыданоЮЛНерез", "Кол3_Таб2_1СумВнесеноЮЛНерез");
		ДанныеМнЧ = ВеткаРаздел21.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы214];
		ЗаполнитьУзел_СписаниеЗачисление(Таблица2_1ОперЧерезКассу, ИменаПодчУзлов, ДанныеМнЧ);
		// Раздел 2.1.5.
		ИменаПодчУзлов = Новый Структура("ВидОпераций,Операция,Списано,Зачислено",
		"СтрокаОперСНерезФЛ", "Кол1_Таб2_1КодОперФЛНерез",
		"Кол2_Таб2_1СумВыданоФЛНерез", "Кол3_Таб2_1СумВнесеноФЛНерез");
		ДанныеМнЧ = ВеткаРаздел21.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы215];
		ЗаполнитьУзел_СписаниеЗачисление(Таблица2_1ОперЧерезКассу, ИменаПодчУзлов, ДанныеМнЧ);
		// Всего.
		Строка_Всего = ПолучитьПодчиненныйЭлемент(Таблица2_1ОперЧерезКассу, "av:Строка_Всего");
		Эл = ПолучитьПодчиненныйЭлемент(Строка_Всего, "av:Cell_11113");
		ВывестиПоказательВXML(Эл, ВеткаРаздел21.Данные[Эл.Ключ]);
		Эл = ПолучитьПодчиненныйЭлемент(Строка_Всего, "av:Cell_11114");
		ВывестиПоказательВXML(Эл, ВеткаРаздел21.Данные[Эл.Ключ]);
		// Остатки денежных средств в кассе на начало отчетного периода.
		Строка_ОстаткиНачало = ПолучитьПодчиненныйЭлемент(Таблица2_1ОперЧерезКассу, "av:Строка_ОстаткиНачало");
		Эл = ПолучитьПодчиненныйЭлемент(Строка_ОстаткиНачало, "av:Cell_11111");
		ВывестиПоказательВXML(Эл, ВеткаРаздел21.Данные[Эл.Ключ]);
		// Остатки денежных средств в кассе на конец отчетного периода.
		Строка_ОстаткиКонец = ПолучитьПодчиненныйЭлемент(Таблица2_1ОперЧерезКассу, "av:Строка_ОстаткиКонец");
		Эл = ПолучитьПодчиненныйЭлемент(Строка_ОстаткиКонец, "av:Cell_11112");
		ВывестиПоказательВXML(Эл, ВеткаРаздел21.Данные[Эл.Ключ]);
		
	КонецЦикла;
	
	// Раздел 2.2.
	
	Подраздел2_2 = ПолучитьПодчиненныйЭлемент(Раздел2, "av:Подраздел2_2");
	Таблица2_2СтруктТрансгранОпер = ПолучитьПодчиненныйЭлемент(Подраздел2_2, "av:Таблица2_2СтруктТрансгранОпер");
	
	Для каждого ВеткаРаздел22 Из ДеревоДанныхРаздел22.Строки Цикл
		
		ИменаПодчУзлов = Новый Структура("ВидОпераций,Страна,Операция,Списано,Зачислено",
		"СтрокаСтруктОперЧерКассу", "Кол1_Таб2_2КодСтраны", "Кол2_Таб2_2КодОпер",
		"Кол3_Таб2_2СуммаВыдано", "Кол4_Таб2_2СуммаВнесено");
		ДанныеМнЧ = ВеткаРаздел22.ДанныеМногострочныхЧастей[СтруктураРеквизитовФормы.мИдГруппы220];
		ЗаполнитьУзел_СписаниеЗачисление(Таблица2_2СтруктТрансгранОпер, ИменаПодчУзлов, ДанныеМнЧ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУзел_СписаниеЗачисление(РодительскийУзел, ИменаПодчУзлов, ДанныеМнЧ,
	ПараметрыВыгрузки = Неопределено, СоответствиеКодовВалют = Неопределено)
	
	ВидОпераций = ПолучитьПодчиненныйЭлемент(РодительскийУзел, "av:" + ИменаПодчУзлов.ВидОпераций);
	Для каждого СтрокаМнЧ Из ДанныеМнЧ.Строки Цикл
		ЭкзВидОпераций = СкопироватьУзел(РодительскийУзел, ВидОпераций);
		
		Если ИменаПодчУзлов.Свойство("Страна") Тогда
			Эл = ПолучитьПодчиненныйЭлемент(ЭкзВидОпераций, "av:" + ИменаПодчУзлов.Страна);
			Эл = ПолучитьПодчиненныйЭлемент(Эл, "av:Код");
			ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
		КонецЕсли;
		
		Эл = ПолучитьПодчиненныйЭлемент(ЭкзВидОпераций, "av:" + ИменаПодчУзлов.Операция);
		Эл = ПолучитьПодчиненныйЭлемент(Эл, "av:Код");
		ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
		
		Если ИменаПодчУзлов.Свойство("Валюта") Тогда
			Эл = ПолучитьПодчиненныйЭлемент(ЭкзВидОпераций, "av:" + ИменаПодчУзлов.Валюта);
			Эл = ПолучитьПодчиненныйЭлемент(Эл, "av:Код");
			Если ПараметрыВыгрузки <> Неопределено И СоответствиеКодовВалют <> Неопределено Тогда
				ВывестиПоказательВXML(Эл, ВыгружаемыйКодВалюты(
				СтрокаМнЧ.Данные[Эл.Ключ], ПараметрыВыгрузки, СоответствиеКодовВалют));
			Иначе
				ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
			КонецЕсли;
		КонецЕсли;
		
		Эл = ПолучитьПодчиненныйЭлемент(ЭкзВидОпераций, "av:" + ИменаПодчУзлов.Списано);
		ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
		
		Эл = ПолучитьПодчиненныйЭлемент(ЭкзВидОпераций, "av:" + ИменаПодчУзлов.Зачислено);
		ВывестиПоказательВXML(Эл, СтрокаМнЧ.Данные[Эл.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВыгружаемыйКодВалюты(КодВалюты, ПараметрыВыгрузки, СоответствиеКодовВалют)
	
	// Особая обработка кода валюты.
	Если ПараметрыВыгрузки.КодОснВидаДеятельности = "110"          // МФО
		ИЛИ ПараметрыВыгрузки.КодОснВидаДеятельности = "180"       // Ломбард
		ИЛИ ПараметрыВыгрузки.КодОснВидаДеятельности = "120" Тогда // КПК, СКПК
		
		КодВал = СоответствиеКодовВалют[КодВалюты];
		
		Возврат ?(КодВал = Неопределено, "", КодВал);
		
	КонецЕсли;
	
	Возврат КодВалюты;
	
КонецФункции

&НаСервере
Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Код = "av:File" Тогда
		Узел.Значение = ЗначениеПоказателя;
	ИначеЕсли Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧН=0;ЧГ=;";
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтсечьНезаполненныеНеобязательныеУзлы(Узел)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(Стр);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0) И УзелПуст(Узел) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
		И УзелПуст(Узел)
		И ?(СтрНайти(Узел.Обязательность, "О") <> 0 ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0, РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелПуст(Узел)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(Стр) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
		
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
		
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьДанные(Узел)
	
	СтатусПроверки = Истина;
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если НЕ ЗначениеСоответствуетФормату(Узел) Тогда
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр из Узел.Строки Цикл
		СтатусПроверки = (ПроверитьДанные(Стр) И СтатусПроверки); // именно в указанном порядке для выдачи всех ошибок
	КонецЦикла;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Функция ЗначениеСоответствуетФормату(Стр)
	
	СтатусПроверки = Истина;
	Если Стр.Формат = "Т" ИЛИ Стр.Формат = "T" Тогда // учтем оба варианта: кириллицу и латиницу
		ДлинаЗначения = СтрДлина(Стр.Значение);
		Если ДлинаЗначения < Стр.МинРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ меньше минимально возможной (" + ДлинаЗначения + " < " + Стр.МинРазмерность + ")", "Титульный", "");
		КонецЕсли;
		Если ДлинаЗначения > Стр.МаксРазмерность Тогда
			СтатусПроверки = Ложь;
			СообщитьВТС("Длина значения показателя """ + РегламентированнаяОтчетность.ПредставлениеПоказателя(Стр) + """ больше максимально возможной (" + ДлинаЗначения + " > " + Стр.МаксРазмерность + ")", "Титульный", "");
		КонецЕсли;
	КонецЕсли;
	Возврат СтатусПроверки;
	
КонецФункции

&НаСервере
Процедура СообщитьВТС(Описание, Раздел, ИмяЯчейки, ФИО = "")
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(ЭтаФорма, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторФайлаВыгрузки(ПараметрыВыгрузки)
	
	ИдентификаторФайла = "OKUD0420001"
		+ "_" + ?(ПараметрыВыгрузки.Свойство("ЭтоПБОЮЛ") И ПараметрыВыгрузки.ЭтоПБОЮЛ,
		СокрЛП(ПараметрыВыгрузки.ИНН), СокрЛП(ПараметрыВыгрузки.ИНН) + СокрЛП(ПараметрыВыгрузки.КПП))
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

&НаСервере
Функция ВыгрузкаОтчета(ТекстВыгрузки, ПараметрыВыгрузки)
	
	КодировкаФайлаВыгрузки = "utf-8";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xtdd");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВремХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xtdd");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВремХранилище);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ОперацииСДенежнымиСредствамиНФО");
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

&НаСервере
Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки, ПараметрыВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML("utf-8"); // создаем новый поток для записи
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки); // пишем дерево в поток
	ТекстДляЗаписи = ПотокXML.Закрыть(); // получаем текст XML
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML, ПараметрыВыгрузки) Экспорт
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента(ПараметрыВыгрузки.ЗаписьXML_НачалоЭлемента);
		ПотокXML.ЗаписатьАтрибут("appVersion", ПараметрыВыгрузки.АппВерсия);
		ПотокXML.ЗаписатьАтрибут("xmlns:xserializer", "http://www.it.ru/Schemas/Avior/XSerializer");
		ПотокXML.ЗаписатьАтрибут("externalId", Строка(Новый УникальныйИдентификатор));
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xmlns:av", "http://www.it.ru/Schemas/Avior/ПУРЦБ");
		ПотокXML.ЗаписатьАтрибут("xsi:schemaLocation", "http://www.it.ru/Schemas/Avior/ПУРЦБ ПУРЦБ.xsd");
		
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыгрузку(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(
		ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВыгрузкуОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчета()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВыгрузкуОтчетаЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыгрузкуОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму(
		"Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Проверить(СпДокОсн);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПоказатели() Экспорт
	
	СформироватьСтруктуруПоказателей();
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров();
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ПараметрыВыгрузки.ИмяСхемыВыгрузки);
	
	Если НЕ ПроверитьВозможностьВыгрузки(
		ПараметрыВыгрузки, ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьДанными(ПараметрыВыгрузки, ДеревоВыгрузки);
	
	Если НЕ ПроверитьДанные(ДеревоВыгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область УправлениеНастройкамиОтчета

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
	Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("ПроверкаСоотношений", Ложь);
	мПараметры.Вставить("СчетчикСтраниц", Ложь);
	мПараметры.Вставить("Автосохранение", Ложь);
	мПараметры.Вставить("ИмеетсяРеквизитДеревоВыбранныхСтраниц", Истина);
	мПараметры.Вставить("ИмяОтчета", Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("мАвтоВыборКодов", СтруктураРеквизитовФормы.мАвтоВыборКодов);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);

	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();

	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Модифицированность = Истина;
	
	флЗначенияИдентичны = Истина;
	
	Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
		
		Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = мДеревоВыбранныхСтраниц.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
			флЗначенияИдентичны = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
		
		Если СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Ложь Тогда
			
			ДополнительныеПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru='Будет произведен перерасчет всех рассчитываемых показателей. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Иначе
			
			УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
			
			ДопПараметры = Новый Структура(
			"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
			НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
			ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
		ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерерасчетВсехРассчитываемыхПоказателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Истина;
		Возврат;
	КонецЕсли;
	
	РасчетНаСервере();
	
	УстановитьДоступностьОбластей(ЭтаФорма, ТекущийРазделОтчетаСокрНаим);
	
	ДопПараметры = Новый Структура(
		"НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны",
		НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, флЗначенияИдентичны);
	ПослеОткрытияФормыВыбораСтраниц(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияФормыВыбораСтраниц(ДополнительныеПараметры)
	
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	флЗначенияИдентичны = ДополнительныеПараметры.флЗначенияИдентичны;
	
	РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
	
	Если НЕ флЗначенияИдентичны Тогда
		
		СформироватьДеревоРазделовОтчетаНаСервере();
		
		Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
			
			НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
			
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НомерСтраницыРазделаОтчета = Неопределено
				И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
				
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
				НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
				
			КонецЕсли;
			
			Если НЕ НайденнаяСтрока = Неопределено Тогда
				
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Очистка

#Область ОчисткаОтчета

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(
		ЭтаФорма, "ОчиститьВесьОтчет");
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	ТабличныйДокумент.Очистить();
	
	ИнициализироватьМногоуровневыеРазделы();
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеМассивДопФайлов",
		ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор));
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеМассивИменУдаленныхДопФайлов",
		ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор));
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ОбновитьДеревоРазделовВФормеОтчета(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел11"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел13" Тогда
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	КонецЕсли;
	
	ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоРазделовВФормеОтчета(ИмяРаздела)
	
	Если НЕ ИмяРаздела = Неопределено Тогда
		
		// Пытаемся найти ранее запомненный раздел.
		НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(
			РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ИмяРаздела);
		
		// В случае успешного поиска, устанавливаем курсор на найденный раздел.
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОчисткаТекущейСтраницы

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ДополнительныеПараметры.Вставить("ВыполняемоеОповещение", Новый ОписаниеОповещения("ОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект));
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание! Будет очищена текущая страница.%1Продолжить?'"), Символы.ПС);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОчиститьТекущуюСтраницуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОчиститьТекущуюСтраницуЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	ИмяРаздела = ДополнительныеПараметры.ИмяРаздела;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчисткаРегламентированногоОтчетаНаСервере(ИмяРаздела);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы) Экспорт
	
	Если ИмяСтраницы = "Титульный" Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита Тогда
				Обл.Очистить();
			КонецЕсли;
		КонецЦикла;
		
		Обл = ТабличныйДокумент.Области.Найти("ДатаПодписи");
		Если ЗначениеЗаполнено(Обл.Значение) Тогда
			ДатаПодписи = Лев(СтрЗаменить(Формат(Обл.Значение, "ДФ = ""дд.ММ.гггг 'г.'"""), ".", ""), 8);
		Иначе
			ДатаПодписи = "        ";
		КонецЕсли;
		
	Иначе
		
		Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ДопФайлы" Тогда
			
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеМассивДопФайлов",
				ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор));
			
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеМассивИменУдаленныхДопФайлов",
				ПоместитьВоВременноеХранилище(Новый Массив, УникальныйИдентификатор));
			
		КонецЕсли;
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяСтраницы));
		
		
		ВывестиДанныеВТабличныйДокументНаСервере(ИмяСтраницы,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		НомерКорректировки = 0;
		ТабличныйДокумент.Области.НомерКорректировки.Значение = "0";
		СтруктураРеквизитовФормы.ВидДокумента = ?(НомерКорректировки = 0, 0, 1);
		УстановитьДоступностьОбластей(ЭтаФорма, СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	Иначе
		СпрятатьСсылкуУдалитьСтраницу();
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДействияСДополнительнымиФайлами

&НаКлиенте
Процедура ДобавитьФайл()
	
	АдресФайла  = "";
	ВыбИмяФайла = "";
	
	Оп = Новый ОписаниеОповещения("ДобавитьФайлЗавершение", ЭтотОбъект);
	
	Попытка
		
		НачатьПомещениеФайла(Оп, АдресФайла, ВыбИмяФайла, Истина, УникальныйИдентификатор);
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'При загрузке файла возникла ошибка.
									 |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлЗавершение(Результат, АдресФайла, ВыбИмяФайла, Парам) Экспорт
	
	Если НЕ Результат Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекстПредупреждения = "";
	
	ВозможныеРасширения = Новый Массив;
	ВозможныеРасширения.Добавить(".DOC");
	ВозможныеРасширения.Добавить(".DOCX");
	ВозможныеРасширения.Добавить(".XLS");
	ВозможныеРасширения.Добавить(".XLSX");
	ВозможныеРасширения.Добавить(".PDF");
	ВозможныеРасширения.Добавить(".TIF");
	ВозможныеРасширения.Добавить(".TIFF");
	ВозможныеРасширения.Добавить(".PNG");
	ВозможныеРасширения.Добавить(".JPG");
	ВозможныеРасширения.Добавить(".JPEG");
	ВозможныеРасширения.Добавить(".BMP");
	ВозможныеРасширения.Добавить(".GIF");
	ВозможныеРасширения.Добавить(".AVI");
	ВозможныеРасширения.Добавить(".MP4");
	ВозможныеРасширения.Добавить(".WMV");
	ВозможныеРасширения.Добавить(".MP3");
	ВозможныеРасширения.Добавить(".WMA");
	ВозможныеРасширения.Добавить(".WAV");
	
	РасшДл4 = ВРег(Прав(ВыбИмяФайла, 4));
	РасшДл5 = ВРег(Прав(ВыбИмяФайла, 5));
	
	Если ВозможныеРасширения.Найти(РасшДл4) = Неопределено
		И ВозможныеРасширения.Найти(РасшДл5) = Неопределено Тогда
		СтрокаРасширений = СтрСоединить(ВозможныеРасширения, ",");
		СтрокаРасширений = СтрЗаменить(СтрокаРасширений, ".", " ");
		ШаблонТекста = НСтр(
			"ru='Файл должен иметь одно из допустимых расширений:%1!'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, СтрокаРасширений);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ДлинаРасширения = ?(ВозможныеРасширения.Найти(РасшДл4) <> Неопределено, 4, 5);
	
	Каталог = "";
	СтрокаПоиска = ВыбИмяФайла;
	
	Пока СтрДлина(СтрокаПоиска) > 0 Цикл
		Если Прав(СтрокаПоиска, 1) = "\" ИЛИ Прав(СтрокаПоиска, 1) = "/" Тогда
			Каталог = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска));
			Прервать;
		Иначе
			СтрокаПоиска = Лев(СтрокаПоиска, СтрДлина(СтрокаПоиска) - 1);
		КонецЕсли;
	КонецЦикла;
	
	ИмяФайла = СтрЗаменить(ВыбИмяФайла, Каталог, "");
	
	Ном = 1;
	Пока ТабличныйДокумент.Области.Найти("П9000001_" + Формат(Ном, "ЧГ=")) <> Неопределено Цикл
		Обл = ТабличныйДокумент.Область("П9000001_" + Формат(Ном, "ЧГ="));
		Если ИмяФайла = Обл.Значение Тогда
			ШаблонТекста = НСтр(
				"ru='Файл с именем ""%1"" ранее уже был добавлен!'");
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста, ИмяФайла);
			Прервать;
		КонецЕсли;
		Ном = Ном + 1;
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Элементы.ТабличныйДокумент.ТекущаяОбласть = Обл;
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(ИмяФайла) + ДлинаРасширения > 100 Тогда
		ТекстПредупреждения = НСтр(
			"ru='Длина имени дополнительного файла не должна превышать 100 символов!'");
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ИмяФайла, ТекстПредупреждения);
	Исключение
		ШаблонТекста = НСтр("ru = 'При загрузке файла возникла ошибка.
		|%1'");
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстПредупреждения, , НСтр("ru = 'Ошибка'"));
		Возврат;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтруктуруДанныхФайла(АдресФайла, ИмяФайла, ТекстПредупреждения = "")
	
	Если НЕ ДобавляетсяФайлДопустимогоРазмера(АдресФайла, ИмяФайла) Тогда
		ТекстПредупреждения = НСтр(
			"ru='Размер выгружаемого электронного документа не должен превышать 10 Мб!'");;
		Возврат;
	КонецЕсли;
	
	СтруктураХранения = Новый Структура("Имя,Адрес,Размер",
		ИмяФайла, АдресФайла, РазмерФайла(АдресФайла, ИмяФайла));
	
	МассивДопФайлов = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеМассивДопФайлов"]);
	
	МассивДопФайлов.Добавить(СтруктураХранения);
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеМассивДопФайлов",
		ПоместитьВоВременноеХранилище(МассивДопФайлов, УникальныйИдентификатор));
	
	Если МассивДопФайлов.Количество() > 1 Тогда
		ВставитьДополнительнуюСтроку();
		СохранитьДанныеРаздела("ДопФайлы");
	КонецЕсли;
	
	ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхДопФайлы"]);
	
	ДанныеМнЧ = ДеревоДанныхРаздела.Строки[0].ДанныеМногострочныхЧастей[
		СтруктураРеквизитовФормы.мИдГруппы900];
	
	ВеткаВДеревеМнЧ = ДанныеМнЧ.Строки[ДанныеМнЧ.Строки.Количество() - 1];
	ВеткаВДеревеМнЧ.Данные["П9000001"] = СтруктураХранения["Имя"];
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанныхДопФайлы",
		ПоместитьВоВременноеХранилище(ДеревоДанныхРаздела, УникальныйИдентификатор));
	
	ВывестиДанныеВТабличныйДокумент("ДопФайлы", СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	Если МассивДопФайлов.Количество() = 1 Тогда
		Постфикс = СтруктураРеквизитовФормы.мИдГруппы900 + "_1";
		Обл = ТабличныйДокумент.Область("УдалитьСтроку" + Постфикс);
		Обл.Гиперссылка = Истина;
		Обл.Текст = "х";
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СоставДополнительныхФайловИзменен = Истина;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ДобавляетсяФайлДопустимогоРазмера(АдресФайла, ИмяФайла)
	
	МассивДопФайлов = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеМассивДопФайлов"]);
	
	ИтоговыйРазмер = 0;
	Для каждого СтруктураХранения Из МассивДопФайлов Цикл
		ИтоговыйРазмер = ИтоговыйРазмер + СтруктураХранения["Размер"];
	КонецЦикла;
	
	Если РазмерФайла(АдресФайла, ИмяФайла) + ИтоговыйРазмер
		> СтруктураРеквизитовФормы.ПредельныйРазмерФайлаВыгрузки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УдалитьВременныйФайл(ИмяУдаляемогоФайла)
	
	УдаляемыйФайл = Новый Файл(ИмяУдаляемогоФайла);
	Если УдаляемыйФайл.Существует() Тогда
		УдалитьФайлы(ИмяУдаляемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФайл(ИмяОбласти)
	
	ИндДопФайлаВМассиве = ИндексПоказателя(ИмяОбласти) - 1;
	
	МассивДопФайлов = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеМассивДопФайлов"]);
	
	Если МассивДопФайлов.Количество() > 1 Тогда
		УдалитьДопСтрокуНаСервере();
	Иначе
		ТабличныйДокумент.Область("П9000001_1").Очистить();
		СохранитьДанныеРаздела("ДопФайлы");
	КонецЕсли;
	
	МассивДопФайлов.Удалить(ИндДопФайлаВМассиве);
	
	СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеМассивДопФайлов",
		ПоместитьВоВременноеХранилище(МассивДопФайлов, УникальныйИдентификатор));
	
	ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента("ДопФайлы");
	
	Если МассивДопФайлов.Количество() = 0 Тогда
		Обл = ТабличныйДокумент.Области.Найти(
			"ДобавитьСтрокуЗначок" + СтруктураРеквизитовФормы.мИдГруппы900 + "_1");
		Если Обл <> Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = Обл;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.СоставДополнительныхФайловИзменен = Истина;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаДискФайл(ИмяОбласти)
	
	ИндДопФайлаВМассиве = ИндексПоказателя(ИмяОбласти) - 1;
	
	МассивДопФайлов = ПолучитьИзВременногоХранилища(
		СтруктураРеквизитовФормы["АдресВоВрХранилищеМассивДопФайлов"]);
	
	СтруктураХранения = МассивДопФайлов[ИндДопФайлаВМассиве];
	
	Попытка
		
		Если Не ЗначениеЗаполнено(СтруктураХранения["Имя"]) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыДиалога = Новый ПараметрыДиалогаПолученияФайлов;
		ПараметрыДиалога.Заголовок = НСтр("ru = 'Выберите путь для сохранения файла'");
		
		НачатьПолучениеФайлаССервера(СтруктураХранения["Адрес"], СтруктураХранения["Имя"], ПараметрыДиалога);
		
	Исключение
		
		ШаблонТекста = НСтр("ru = 'При выгрузке файла возникла ошибка.
		|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекста, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ПоказатьПредупреждение(, ТекстСообщения, , НСтр("ru = 'Ошибка'"));
		
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция РазмерФайла(АдресФайла, ИмяФайла)
	
	ФайлЗагрузки = ПолучитьИмяВременногоФайла();
	ФайлЗагрузкиДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
	ФайлЗагрузкиДвоичныеДанные.Записать(ФайлЗагрузки);
	Файл = Новый Файл(ФайлЗагрузки);
	
	РазмерФайла = Файл.Размер();
	
	УдалитьВременныйФайл(ФайлЗагрузки);
	
	Возврат РазмерФайла;
	
КонецФункции

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Отказ = Ложь;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоказатьБланкЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередПечатьюРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланкЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, НеИзФормыОтчета = Ложь) Экспорт
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
		"ru='%1. Формируется печатная форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
	
	Если НЕ ПечатьНаСервере(ВидПечати) Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(
		ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере(ВидПечати)
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и задать его в качестве используемого по умолчанию!'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения <> ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1
		ИЛИ СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения <> 0 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Печать возможна только при установленной единице измерения ""в рублях"" и точности ""0"".'");
		Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(мДеревоВыбранныхСтраниц) <> Тип("ДанныеФормыДерево") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	сохрНомераСтрокМногоуровнегоРаздела = СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела;
	
	СтрПоля = "ПолеСверху, ПолеСправа, ПолеСнизу, ПолеСлева";
	ВремПоля = Новый Структура(СтрПоля);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ВывестиДанныеВТабличныйДокумент("Титульный");
	
	ВыбранныеСтраницы = Новый Массив();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0
			ИЛИ СтрокаУровня1.ИмяСтраницы = "ДопФайлы" Тогда
			Продолжить;
		КонецЕсли;
		
		ВыбранныеСтраницы.Добавить(СтрокаУровня1.ИмяСтраницы);
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаименованиеЛиста",  "Форма отчета");
	СтруктураПараметров.Вставить("ОриентацияЛиста",    "Портрет");
	СтруктураПараметров.Вставить("ИмяСтраницы",        "Форма отчета");
	Структурапараметров.Вставить("ИмяОбластиТаблПоля", "ТабличныйДокумент");
	СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
	
	ВывестиНаПечатьОтчет(СтруктураПараметров, ВыбранныеСтраницы, СтрПоля);
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = сохрНомераСтрокМногоуровнегоРаздела;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ВремПоля, СтрПоля);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	КопироватьДанныеФормы(мДеревоВыбранныхСтраниц, мДеревоСтраницОтчета);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВывестиНаПечатьОтчет(СтруктураПараметров, ВыбранныеСтраницы, СтрПоля = Неопределено)
	
	ИмяМакета = "ПечатныйБланк2015Кв3";
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(ИмяМакета);
	
	ВремПоля = Новый Структура(СтрПоля);
	
	// Титульный.
	//
	ПечФорма = Макет.Получитьобласть("Титульный");
	ПечФорма.ПолеСверху = 5;
	ПечФорма.ПолеСправа = 5;
	ПечФорма.ПолеСнизу  = 5;
	ПечФорма.ПолеСлева  = 5;
	ПечФорма.Автомасштаб = Истина;
	
	Для каждого ОблПФ Из ПечФорма.Области Цикл
		Если ТабличныйДокумент.Области.Найти(ОблПФ.Имя) <> Неопределено Тогда
			ОблПФ.Значение = ТабличныйДокумент.Область(ОблПФ.Имя).Значение;
		КонецЕсли;
	КонецЦикла;
	
	// Раздел 1.
	//
	Если ВыбранныеСтраницы.Найти("Раздел1") <> Неопределено Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
		
		Для каждого Ветка1 Из ДеревоДанных.Строки Цикл
			
			ПФ_Раздел1 = Макет.Получитьобласть("Раздел1");
			ПФ_Раздел1.Параметры.Заполнить(Ветка1.Данные);
			ПФ_Раздел1.Параметры.РегНомерКредОрг = ?(ЗначениеЗаполнено(Ветка1.Данные["ПорядНомерФил"]),
				Ветка1.Данные["РегНомерКредОрг"] + "/" + Ветка1.Данные["ПорядНомерФил"],
				Ветка1.Данные["РегНомерКредОрг"]);
			
			Если НЕ ПечФорма.ПроверитьВывод(ПФ_Раздел1) Тогда
				ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПечФорма.Вывести(ПФ_Раздел1);
			Постфикс1 = "_" + Формат(ДеревоДанных.Строки.Индекс(Ветка1) + 1, "ЧГ=");
			ПечФорма.Область("Раздел1").Имя = ПечФорма.Область("Раздел1").Имя + Постфикс1;
			
			// Раздел 1.1.
			//
			// Формирование промежуточной таблицы значений.
			//
			Массив = Новый Массив;
			Массив.Добавить(Тип("Строка"));
			ОписаниеТиповС = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки());
			Массив.Очистить();
			Массив.Добавить(Тип("Строка"));
			ОписаниеТиповС5 = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(5));
			Массив.Очистить();
			Массив.Добавить(Тип("Строка"));
			ОписаниеТиповС8 = Новый ОписаниеТипов(Массив, , Новый КвалификаторыСтроки(8));
			Массив.Очистить();
			Массив.Добавить(Тип("Число"));
			ОписаниеТиповЧ1000 = Новый ОписаниеТипов(Массив, , , Новый КвалификаторыЧисла(1000));
			Массив.Очистить();
			Массив.Добавить(Тип("Число"));
			ОписаниеТиповЧ1 = Новый ОписаниеТипов(Массив, , , Новый КвалификаторыЧисла(1,0));
			Массив.Очистить();
			Массив.Добавить(Тип("Число"));
			ОписаниеТиповЧ15_3 = Новый ОписаниеТипов(Массив, , , Новый КвалификаторыЧисла(15,3));
			
			ТЗ11 = Новый ТаблицаЗначений;
			
			ТЗ11.Колонки.Добавить("Валюта", ОписаниеТиповС);
			ТЗ11.Колонки.Добавить("ПризнСортПоВалюте", ОписаниеТиповЧ1);
			ТЗ11.Колонки.Добавить("ИмяМнЧ", ОписаниеТиповС8);
			ТЗ11.Колонки.Добавить("Операция", ОписаниеТиповС5);
			ТЗ11.Колонки.Добавить("Списание", ОписаниеТиповЧ15_3);
			ТЗ11.Колонки.Добавить("Зачисление", ОписаниеТиповЧ15_3);
			
			ТЗОстаткиОбороты11 = Новый ТаблицаЗначений;
			
			ТЗОстаткиОбороты11.Колонки.Добавить("Валюта", ОписаниеТиповС);
			ТЗОстаткиОбороты11.Колонки.Добавить("ОборотыСписание", ОписаниеТиповЧ15_3);
			ТЗОстаткиОбороты11.Колонки.Добавить("ОборотыЗачисление", ОписаниеТиповЧ15_3);
			ТЗОстаткиОбороты11.Колонки.Добавить("ОстаткиНачПериода", ОписаниеТиповЧ15_3);
			ТЗОстаткиОбороты11.Колонки.Добавить("ОстаткиКонПериода", ОписаниеТиповЧ15_3);
			
			Для каждого Ветка11 Из Ветка1.Строки[0].Строки Цикл
				
				Валюта = Ветка11.Данные["Валюта"];
				
				Для каждого ЭлемСтрукт11 Из Ветка11.ДанныеМногострочныхЧастей Цикл
					
					ИмяМнЧ = ЭлемСтрукт11.Ключ;
					
					Для каждого Ветка11х Из ЭлемСтрукт11.Значение.Строки Цикл
						
						Операция = Ветка11х.Данные[ИмяМнЧ + "01"];
						Списание = Ветка11х.Данные[ИмяМнЧ + "02"];
						Зачисление = Ветка11х.Данные[ИмяМнЧ + "03"];
						
						НовСтрокаТЗ = ТЗ11.Добавить();
						НовСтрокаТЗ["Валюта"] = Валюта;
						НовСтрокаТЗ["ИмяМнЧ"] = ИмяМнЧ;
						НовСтрокаТЗ["Операция"] = Операция;
						НовСтрокаТЗ["Списание"] = Списание;
						НовСтрокаТЗ["Зачисление"] = Зачисление;
						
						СтрокаСКодомВалюты = СокрЛП(Валюта);
						ДлинаСтроки = СтрДлина(СтрокаСКодомВалюты);
						КодВалютыИзСтроки = Сред(СтрокаСКодомВалюты, ДлинаСтроки - 3, 3);
						Если КодВалютыИзСтроки = "643" Тогда
							НовСтрокаТЗ["ПризнСортПоВалюте"] = 1;
						ИначеЕсли КодВалютыИзСтроки = "840" Тогда
							НовСтрокаТЗ["ПризнСортПоВалюте"] = 2;
						ИначеЕсли КодВалютыИзСтроки = "978" Тогда
							НовСтрокаТЗ["ПризнСортПоВалюте"] = 3;
						Иначе
							НовСтрокаТЗ["ПризнСортПоВалюте"] = 4;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
				НовСтрокаТЗОстаткиОбороты = ТЗОстаткиОбороты11.Добавить();
				НовСтрокаТЗОстаткиОбороты["Валюта"] = Валюта;
				НовСтрокаТЗОстаткиОбороты["ОборотыСписание"] = Ветка11.Данные["ОборотыСписание"];
				НовСтрокаТЗОстаткиОбороты["ОборотыЗачисление"] = Ветка11.Данные["ОборотыЗачисление"];
				НовСтрокаТЗОстаткиОбороты["ОстаткиНачПериода"] = Ветка11.Данные["ОстаткиНачПериода"];
				НовСтрокаТЗОстаткиОбороты["ОстаткиКонПериода"] = Ветка11.Данные["ОстаткиКонПериода"];
				
			КонецЦикла;
			
			ТЗ11.Свернуть("Валюта, ПризнСортПоВалюте, ИмяМнЧ,Операция", "Списание, Зачисление");
			ТЗ11.Сортировать("ПризнСортПоВалюте, Валюта, ИмяМнЧ, Операция");
			
			ТЗВалюты = ТЗ11.Скопировать(, "Валюта");
			ТЗВалюты.Свернуть("Валюта");
			
			ТЗОстаткиОбороты11.Свернуть("Валюта",
				"ОборотыСписание, ОборотыЗачисление, ОстаткиНачПериода, ОстаткиКонПериода");
			
			КолВалют = ТЗВалюты.Количество();
			
			ДробКолВалют = (КолВалют) / 4;
			ЦелКолВалют = Цел(КолВалют / 4);
			
			КолПечЛистов11 = ?(ДробКолВалют = ЦелКолВалют, ЦелКолВалют, ЦелКолВалют + 1);
			
			// Формирование массива для вывода на печать данных сразу
			// 4-х экранных страниц раздела 1.1 на 1 печатный лист.
			//
			СтруктураНачальныхТаблицМнЧ = Новый Структура;
			СтруктураРаздела11 = мСтруктураМногоуровневыхРазделов["Раздел11"];
			Для каждого ИмяМнЧ Из СтруктураРаздела11["ИменаГруппМнЧ"] Цикл
				НачТаблМнЧ = Новый ТаблицаЗначений;
				НачТаблМнЧ.Колонки.Добавить(ИмяМнЧ + "01", ОписаниеТиповС5);
				Для Инд = 1 По 4 Цикл
					НачТаблМнЧ.Колонки.Добавить(ИмяМнЧ + "02_" + Инд, ОписаниеТиповЧ15_3);
					НачТаблМнЧ.Колонки.Добавить(ИмяМнЧ + "03_" + Инд, ОписаниеТиповЧ15_3);
				КонецЦикла;
				СтруктураНачальныхТаблицМнЧ.Вставить(ИмяМнЧ, НачТаблМнЧ);
			КонецЦикла;
			
			МассивДанныхРазделов11ДляПечати = Новый Массив;
			
			Для ИндПечЛиста11 = 1 По КолПечЛистов11 Цикл
				
				СтруктураДанныхРаздела11ДляПечати = Новый Структура;
				СтруктураДанныхРаздела11ДляПечати.Вставить("Валюты", Новый Структура);
				Для каждого Элем Из СтруктураНачальныхТаблицМнЧ Цикл
					СтруктураДанныхРаздела11ДляПечати.Вставить(Элем.Ключ, Элем.Значение.Скопировать());
				КонецЦикла;
				
				Для Инд = 1 По 4 Цикл
					
					СтруктураДанныхРаздела11ДляПечати["Валюты"].Вставить("Валюта_" + Инд);
					
					ИндТЗВалюты = ИндПечЛиста11 * 4 + Инд - 5;
					
					Если ИндТЗВалюты <= КолВалют - 1 Тогда
						
						ТекВалюта = ТЗВалюты[ИндТЗВалюты]["Валюта"];
						
						СтруктураДанныхРаздела11ДляПечати["Валюты"]["Валюта_" + Инд] = ТекВалюта;
						
						Для каждого ИмяМнЧ Из СтруктураРаздела11["ИменаГруппМнЧ"] Цикл
							
							ТаблМнЧ = СтруктураДанныхРаздела11ДляПечати[ИмяМнЧ];
							
							МассивНайдСтрокТЗ11 = ТЗ11.НайтиСтроки(Новый Структура("Валюта,ИмяМнЧ", ТекВалюта,ИмяМнЧ));
							
							Если МассивНайдСтрокТЗ11.Количество() > 0 Тогда
								
								Для каждого НайдСтрокаТЗ11 Из МассивНайдСтрокТЗ11 Цикл
									
									Если Инд = 1 Тогда
										СтрокаТаблМнЧ = ТаблМнЧ.Добавить();
									Иначе
										МассивНайдСтрокТаблМнЧ = ТаблМнЧ.НайтиСтроки(Новый Структура(ИмяМнЧ + "01", НайдСтрокаТЗ11["Операция"]));
										Если МассивНайдСтрокТаблМнЧ.Количество() > 0 Тогда
											СтрокаТаблМнЧ = МассивНайдСтрокТаблМнЧ[0];
										Иначе
											СтрокаТаблМнЧ = ТаблМнЧ.Добавить();
										КонецЕсли;
									КонецЕсли;
									
									СтрокаТаблМнЧ[ИмяМнЧ + "01"] = НайдСтрокаТЗ11["Операция"];
									СтрокаТаблМнЧ[ИмяМнЧ + "02_" + Инд] = НайдСтрокаТЗ11["Списание"];
									СтрокаТаблМнЧ[ИмяМнЧ + "03_" + Инд] = НайдСтрокаТЗ11["Зачисление"];
									
								КонецЦикла;
								
							Иначе
								//
							КонецЕсли;
							
							СтруктураДанныхРаздела11ДляПечати.Вставить(ИмяМнЧ, ТаблМнЧ);
							
						КонецЦикла;
						
					Иначе
						//
					КонецЕсли;
					
				КонецЦикла;
				
				МассивДанныхРазделов11ДляПечати.Добавить(СтруктураДанныхРаздела11ДляПечати);
				
			КонецЦикла;
			
			// Вывода на печать данных раздела 1.1.
			//
			ИмяПервойГруппыМнЧ = СтруктураРаздела11["ИменаГруппМнЧ"][0];
			Для Инд = 0 По МассивДанныхРазделов11ДляПечати.Количество() - 1 Цикл
				
				СтруктураДанныхРаздела11ДляПечати = МассивДанныхРазделов11ДляПечати[Инд];
				Валюты = СтруктураДанныхРаздела11ДляПечати["Валюты"];
				
				Если Инд = 0 Тогда
					Заг_Раздел11 = Макет.Получитьобласть("Раздел11_Заголовок");
				КонецЕсли;
				Шап_Раздел11 = Макет.Получитьобласть("Раздел11_Шапка");
				Шап_Раздел11.Параметры.Заполнить(Валюты);
				Заг_МнЧ_Раздел11 = Макет.Получитьобласть(ИмяПервойГруппыМнЧ + "_Заголовок");
				Стр_Раздел11х = Макет.Получитьобласть(ИмяПервойГруппыМнЧ + "_Строка");
				
				МассивПроверки = Новый Массив;
				Если Инд = 0 Тогда
					МассивПроверки.Добавить(Заг_Раздел11);
				КонецЕсли;
				МассивПроверки.Добавить(Шап_Раздел11);
				МассивПроверки.Добавить(Заг_МнЧ_Раздел11);
				МассивПроверки.Добавить(Стр_Раздел11х);
				
				Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
					ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				Постфикс11 = Постфикс1 + "_" + Формат(Инд + 1, "ЧГ=");
				Если Инд = 0 Тогда
					ПечФорма.Вывести(Заг_Раздел11);
					ПечФорма.Область("Раздел11_Заголовок").Имя
						= ПечФорма.Область("Раздел11_Заголовок").Имя + Постфикс11;
				КонецЕсли;
				ПечФорма.Вывести(Шап_Раздел11);
				ПечФорма.Область("Раздел11_Шапка").Имя
					= ПечФорма.Область("Раздел11_Шапка").Имя + Постфикс11;
				
				Для каждого ИмяМнЧ Из СтруктураРаздела11["ИменаГруппМнЧ"] Цикл
					
					ТаблМнЧ = СтруктураДанныхРаздела11ДляПечати[ИмяМнЧ];
					
					Для ИндСтрокиТаблМнЧ = 0 По ТаблМнЧ.Количество() - 1 Цикл
						
						СтрокаТаблМнЧ = ТаблМнЧ[ИндСтрокиТаблМнЧ];
						
						Если ИндСтрокиТаблМнЧ = 0 Тогда
							Заг_МнЧ_Раздел11 = Макет.Получитьобласть(ИмяМнЧ + "_Заголовок");
						КонецЕсли;
						Стр_Раздел11х = Макет.Получитьобласть(ИмяМнЧ + "_Строка");
						Стр_Раздел11х.Параметры.Заполнить(СтрокаТаблМнЧ);
						
						МассивПроверки = Новый Массив;
						Если ИндСтрокиТаблМнЧ = 0 Тогда
							МассивПроверки.Добавить(Заг_МнЧ_Раздел11);
						КонецЕсли;
						МассивПроверки.Добавить(Стр_Раздел11х);
						
						Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
							ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						Постфикс11х = Постфикс11 + "_" + Формат(ИндСтрокиТаблМнЧ + 1, "ЧГ=");
						Если ИндСтрокиТаблМнЧ = 0 Тогда
							ПечФорма.Вывести(Заг_МнЧ_Раздел11);
							ПечФорма.Область(ИмяМнЧ + "_Заголовок").Имя
								= ПечФорма.Область(ИмяМнЧ + "_Заголовок").Имя + Постфикс11х;
						КонецЕсли;
						ПечФорма.Вывести(Стр_Раздел11х);
						ПечФорма.Область(ИмяМнЧ + "_Строка").Имя
							= ПечФорма.Область(ИмяМнЧ + "_Строка").Имя + Постфикс11х;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Под_Раздел11 = Макет.Получитьобласть("Раздел11_Подвал");
				Для Инд_ = 1 По 4 Цикл
					СтрокаТЗОстаткиОбороты = ТЗОстаткиОбороты11.Найти(Валюты["Валюта_" + Инд_], "Валюта");
					Если СтрокаТЗОстаткиОбороты <> Неопределено Тогда
						Для каждого Колонка Из ТЗОстаткиОбороты11.Колонки Цикл
							Если Колонка.Имя = "Валюта" Тогда
								Продолжить;
							КонецЕсли;
							Под_Раздел11.Параметры[Колонка.Имя + "_" + Инд_]
								= СтрокаТЗОстаткиОбороты[Колонка.Имя];
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ ПечФорма.ПроверитьВывод(Под_Раздел11) Тогда
					ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ПечФорма.Вывести(Под_Раздел11);
				ПечФорма.Область("Раздел11_Подвал").Имя
					= ПечФорма.Область("Раздел11_Подвал").Имя + Постфикс11;
				
			КонецЦикла;
			
			// Раздел 1.2.
			//
			СтруктураРаздела = мСтруктураМногоуровневыхРазделов["Раздел12"];
			ИмяПервойГруппыМнЧ = СтруктураРаздела["ИменаГруппМнЧ"][0];
			Для каждого Ветка12 Из Ветка1.Строки[1].Строки Цикл
				
				Заг_Раздел12 = Макет.Получитьобласть("Раздел12_Заголовок");
				Шап_Раздел12 = Макет.Получитьобласть("Раздел12_Шапка");
				Заг_МнЧ_Раздел12 = Макет.Получитьобласть(ИмяПервойГруппыМнЧ + "_Заголовок");
				Стр_Раздел12х = Макет.Получитьобласть(ИмяПервойГруппыМнЧ + "_Строка");
				
				МассивПроверки = Новый Массив;
				МассивПроверки.Добавить(Заг_Раздел12);
				МассивПроверки.Добавить(Шап_Раздел12);
				МассивПроверки.Добавить(Заг_МнЧ_Раздел12);
				МассивПроверки.Добавить(Стр_Раздел12х);
				
				Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
					ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ПечФорма.Вывести(Заг_Раздел12);
				ПечФорма.Вывести(Шап_Раздел12);
				
				Постфикс12 = Постфикс1
					+ "_" + Формат(Ветка1.Строки[1].Строки.Индекс(Ветка12) + 1, "ЧГ=");
				
				ПечФорма.Область("Раздел12_Заголовок").Имя
					= ПечФорма.Область("Раздел12_Заголовок").Имя + Постфикс12;
				ПечФорма.Область("Раздел12_Шапка").Имя
					= ПечФорма.Область("Раздел12_Шапка").Имя + Постфикс12;
				
				Для каждого ЭлемСтрукт12 Из Ветка12.ДанныеМногострочныхЧастей Цикл
					
					Заг_МнЧ_Раздел12 = Макет.Получитьобласть(ЭлемСтрукт12.Ключ + "_Заголовок");
					
					Для каждого Ветка12х Из ЭлемСтрукт12.Значение.Строки Цикл
						
						Стр_Раздел12х = Макет.Получитьобласть(ЭлемСтрукт12.Ключ + "_Строка");
						Стр_Раздел12х.Параметры.Заполнить(Ветка12х.Данные);
						
						МассивПроверки = Новый Массив;
						Если ЭлемСтрукт12.Значение.Строки.Индекс(Ветка12х) = 0 Тогда
							МассивПроверки.Добавить(Заг_МнЧ_Раздел12);
						КонецЕсли;
						МассивПроверки.Добавить(Стр_Раздел12х);
						
						Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
							ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						Если ЭлемСтрукт12.Значение.Строки.Индекс(Ветка12х) = 0 Тогда
							ПечФорма.Вывести(Заг_МнЧ_Раздел12);
						КонецЕсли;
						ПечФорма.Вывести(Стр_Раздел12х);
						
						Постфикс12х = Постфикс12
							+ "_" + Формат(ЭлемСтрукт12.Значение.Строки.Индекс(Ветка12х) + 1, "ЧГ=");
						
						Если ЭлемСтрукт12.Значение.Строки.Индекс(Ветка12х) = 0 Тогда
							ПечФорма.Область(ЭлемСтрукт12.Ключ + "_Заголовок").Имя
								= ПечФорма.Область(ЭлемСтрукт12.Ключ + "_Заголовок").Имя
								+ Постфикс12х;
						КонецЕсли;
						ПечФорма.Область(ЭлемСтрукт12.Ключ + "_Строка").Имя
							= ПечФорма.Область(ЭлемСтрукт12.Ключ + "_Строка").Имя
							+ Постфикс12х;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
			// Раздел 1.3.
			//
			Для каждого Ветка13 Из Ветка1.Строки[2].Строки Цикл
				
				Заг_Раздел13 = Макет.Получитьобласть("Раздел13_Заголовок");
				Шап_Раздел13 = Макет.Получитьобласть("Раздел13_Шапка");
				
				МассивПроверки = Новый Массив;
				МассивПроверки.Добавить(Заг_Раздел13);
				МассивПроверки.Добавить(Шап_Раздел13);
				
				Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
					ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ПечФорма.Вывести(Заг_Раздел13);
				ПечФорма.Вывести(Шап_Раздел13);
				
				Постфикс13 = Постфикс1
					+ "_" + Формат(Ветка1.Строки[1].Строки.Индекс(Ветка13) + 1, "ЧГ=");
				
				ПечФорма.Область("Раздел13_Заголовок").Имя
					= ПечФорма.Область("Раздел13_Заголовок").Имя + Постфикс13;
				ПечФорма.Область("Раздел13_Шапка").Имя
					= ПечФорма.Область("Раздел13_Шапка").Имя + Постфикс13;
				
				Для каждого ЭлемСтрукт13 Из Ветка13.ДанныеМногострочныхЧастей Цикл
					
					Для каждого Ветка13х Из ЭлемСтрукт13.Значение.Строки Цикл
						
						Стр_Раздел13х = Макет.Получитьобласть(ЭлемСтрукт13.Ключ + "_Строка");
						Стр_Раздел13х.Параметры.Заполнить(Ветка13х.Данные);
						
						МассивПроверки = Новый Массив;
						МассивПроверки.Добавить(Стр_Раздел13х);
						
						Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
							ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
						КонецЕсли;
						
						ПечФорма.Вывести(Стр_Раздел13х);
						
						Постфикс13х = Постфикс13
							+ "_" + Формат(ЭлемСтрукт13.Значение.Строки.Индекс(Ветка13х) + 1, "ЧГ=");
						
						ПечФорма.Область(ЭлемСтрукт13.Ключ + "_Строка").Имя
							= ПечФорма.Область(ЭлемСтрукт13.Ключ + "_Строка").Имя
							+ Постфикс13х;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 2.1.
	//
	Если ВыбранныеСтраницы.Найти("Раздел21") <> Неопределено Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел21"]);
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов["Раздел21"];
		ИмяПервойГруппыМнЧ = СтруктураРаздела["ИменаГруппМнЧ"][0];
		Для каждого Ветка21 Из ДеревоДанных.Строки Цикл
			
			Заг_Раздел2 = Макет.Получитьобласть("Раздел2");
			Заг_Раздел21 = Макет.Получитьобласть("Раздел21_Заголовок");
			Шап_Раздел21 = Макет.Получитьобласть("Раздел21_Шапка");
			Заг_МнЧ_Раздел21 = Макет.Получитьобласть(ИмяПервойГруппыМнЧ + "_Заголовок");
			Стр_Раздел21х = Макет.Получитьобласть(ИмяПервойГруппыМнЧ + "_Строка");
			
			МассивПроверки = Новый Массив;
			МассивПроверки.Добавить(Заг_Раздел2);
			МассивПроверки.Добавить(Заг_Раздел21);
			МассивПроверки.Добавить(Шап_Раздел21);
			МассивПроверки.Добавить(Заг_МнЧ_Раздел21);
			МассивПроверки.Добавить(Стр_Раздел21х);
			
			Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
				ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПечФорма.Вывести(Заг_Раздел2);
			ПечФорма.Вывести(Заг_Раздел21);
			ПечФорма.Вывести(Шап_Раздел21);
			Постфикс21 = "_" + Формат(ДеревоДанных.Строки.Индекс(Ветка21) + 1, "ЧГ=");
			ПечФорма.Область("Раздел2").Имя = ПечФорма.Область("Раздел2").Имя + Постфикс21;
			ПечФорма.Область("Раздел21_Заголовок").Имя = ПечФорма.Область("Раздел21_Заголовок").Имя + Постфикс21;
			ПечФорма.Область("Раздел21_Шапка").Имя = ПечФорма.Область("Раздел21_Шапка").Имя + Постфикс21;
			
			Для каждого ЭлемСтрукт21 Из Ветка21.ДанныеМногострочныхЧастей Цикл
				
				Заг_МнЧ_Раздел21 = Макет.Получитьобласть(ЭлемСтрукт21.Ключ + "_Заголовок");
				
				Для каждого Ветка21х Из ЭлемСтрукт21.Значение.Строки Цикл
					
					Стр_Раздел21х = Макет.Получитьобласть(ЭлемСтрукт21.Ключ + "_Строка");
					Стр_Раздел21х.Параметры.Заполнить(Ветка21х.Данные);
					
					МассивПроверки = Новый Массив;
					Если ЭлемСтрукт21.Значение.Строки.Индекс(Ветка21х) = 0 Тогда
						МассивПроверки.Добавить(Заг_МнЧ_Раздел21);
					КонецЕсли;
					МассивПроверки.Добавить(Стр_Раздел21х);
					
					Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
						ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					Если ЭлемСтрукт21.Значение.Строки.Индекс(Ветка21х) = 0 Тогда
						ПечФорма.Вывести(Заг_МнЧ_Раздел21);
					КонецЕсли;
					ПечФорма.Вывести(Стр_Раздел21х);
					
					Постфикс21х = Постфикс21
						+ "_" + Формат(ЭлемСтрукт21.Значение.Строки.Индекс(Ветка21х) + 1, "ЧГ=");
					
					Если ЭлемСтрукт21.Значение.Строки.Индекс(Ветка21х) = 0 Тогда
						ПечФорма.Область(ЭлемСтрукт21.Ключ + "_Заголовок").Имя
							= ПечФорма.Область(ЭлемСтрукт21.Ключ + "_Заголовок").Имя
							+ Постфикс21х;
					КонецЕсли;
					ПечФорма.Область(ЭлемСтрукт21.Ключ + "_Строка").Имя
						= ПечФорма.Область(ЭлемСтрукт21.Ключ + "_Строка").Имя
						+ Постфикс21х;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Под_Раздел21 = Макет.Получитьобласть("Раздел21_Подвал");
			Под_Раздел21.Параметры.Заполнить(Ветка21.Данные);
			
			Если НЕ ПечФорма.ПроверитьВывод(Под_Раздел21) Тогда
				ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПечФорма.Вывести(Под_Раздел21);
			ПечФорма.Область("Раздел21_Подвал").Имя = ПечФорма.Область("Раздел21_Подвал").Имя + Постфикс21;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Раздел 2.2.
	//
	Если ВыбранныеСтраницы.Найти("Раздел22") <> Неопределено Тогда
		
		ДеревоДанных = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел22"]);
		
		СтруктураРаздела = мСтруктураМногоуровневыхРазделов["Раздел22"];
		ИмяПервойГруппыМнЧ = СтруктураРаздела["ИменаГруппМнЧ"][0];
		Для каждого Ветка22 Из ДеревоДанных.Строки Цикл
			
			Заг_Раздел2 = Макет.Получитьобласть("Раздел2");
			Заг_Раздел22 = Макет.Получитьобласть("Раздел22_Заголовок");
			Шап_Раздел22 = Макет.Получитьобласть("Раздел22_Шапка");
			Стр_Раздел22х = Макет.Получитьобласть(ИмяПервойГруппыМнЧ + "_Строка");
			
			МассивПроверки = Новый Массив;
			Если ВыбранныеСтраницы.Найти("Раздел21") = Неопределено Тогда
				МассивПроверки.Добавить(Заг_Раздел2);
			КонецЕсли;
			МассивПроверки.Добавить(Заг_Раздел22);
			МассивПроверки.Добавить(Шап_Раздел22);
			МассивПроверки.Добавить(Стр_Раздел22х);
			
			Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
				ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			Если ВыбранныеСтраницы.Найти("Раздел21") = Неопределено Тогда
				ПечФорма.Вывести(Заг_Раздел2);
			КонецЕсли;
			ПечФорма.Вывести(Заг_Раздел22);
			ПечФорма.Вывести(Шап_Раздел22);
			Постфикс22 = "_" + Формат(ДеревоДанных.Строки.Индекс(Ветка22) + 1, "ЧГ=");
			Если ВыбранныеСтраницы.Найти("Раздел21") = Неопределено Тогда
				ПечФорма.Область("Раздел2_Заголовок").Имя = ПечФорма.Область("Раздел2_Заголовок").Имя + Постфикс22;
			КонецЕсли;
			ПечФорма.Область("Раздел22_Заголовок").Имя = ПечФорма.Область("Раздел22_Заголовок").Имя + Постфикс22;
			ПечФорма.Область("Раздел22_Шапка").Имя = ПечФорма.Область("Раздел22_Шапка").Имя + Постфикс22;
			
			Для каждого ЭлемСтрукт22 Из Ветка22.ДанныеМногострочныхЧастей Цикл
				
				Для каждого Ветка22х Из ЭлемСтрукт22.Значение.Строки Цикл
					
					Стр_Раздел22х = Макет.Получитьобласть(ЭлемСтрукт22.Ключ + "_Строка");
					Стр_Раздел22х.Параметры.Заполнить(Ветка22х.Данные);
					
					МассивПроверки = Новый Массив;
					МассивПроверки.Добавить(Стр_Раздел22х);
					
					Если НЕ ПечФорма.ПроверитьВывод(МассивПроверки) Тогда
						ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					
					ПечФорма.Вывести(Стр_Раздел22х);
					
					Постфикс22х = Постфикс22
						+ "_" + Формат(ЭлемСтрукт22.Значение.Строки.Индекс(Ветка22х) + 1, "ЧГ=");
					
					ПечФорма.Область(ЭлемСтрукт22.Ключ + "_Строка").Имя
						= ПечФорма.Область(ЭлемСтрукт22.Ключ + "_Строка").Имя
						+ Постфикс22х;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Подписи = Макет.Получитьобласть("Подписи");
	Подписи.Параметры.Заполнить(СтруктураДанныхТитульный);
	Подписи.Параметры.ДатаПодписи = Формат(СтруктураДанныхТитульный.ДатаПодписи, "ДФ=""'""""'дд'""""' ММММ гггг 'г.'""");
	
	Если НЕ ПечФорма.ПроверитьВывод(Подписи) Тогда
		ПечФорма.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ПечФорма.Вывести(Подписи);
	
	ЗаполнитьЗначенияСвойств(ВремПоля, ТабличныйДокумент, СтрПоля);
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ПечФорма);
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ПечФорма, СтрПоля);
	
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок,
		СтруктураПараметров, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
	
КонецПроцедуры

#КонецОбласти

#Область Автозаполнение

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	Отказ = Ложь;
	
	РегламентированнаяОтчетностьКлиентПереопределяемый.ПроверитьВозможностьАвтоЗаполненияРеглОтчета(ИмяФормы, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Команда", Команда);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередЗаполнениемРегламентированногоОтчета(
	ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Команда = ДополнительныеПараметры.Команда;
	
	ЗаполнитьАвтоНаСервере();
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Элементы.РазделыОтчета.ТекущаяСтрока
		= Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере()
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация",                  СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета",     СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",      СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("УникальныйИдентификаторФормы", ЭтаФорма.УникальныйИдентификатор);
	
	Контейнер = Новый Структура();
	Контейнер.Вставить("Раздел1",  СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]);
	Контейнер.Вставить("Раздел21", СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел21"]);
	Контейнер.Вставить("Раздел22", СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел22"]);
	
	РегламентированнаяОтчетностьПереопределяемый.ЗаполнитьОтчет(
		Сред(Лев(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7),
		Сред(ЭтаФорма.ИмяФормы, СтрНайти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ПараметрыОтчета, Контейнер);
	
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел1"]  = Контейнер["Раздел1"];
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел21"] = Контейнер["Раздел21"];
	СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанныхРаздел22"] = Контейнер["Раздел22"];
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Очистить();
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела.Добавить(1);
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел11"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел12"
		ИЛИ СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел13" Тогда
		СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Раздел1";
	КонецЕсли;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
		Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = СтруктураРеквизитовФормы.НаимТекущегоРаздела Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВывестиДанныеВТабличныйДокумент(СтруктураРеквизитовФормы.НаимТекущегоРаздела,
		СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуВЯчейках(Форма)
	
	Форма.ТабличныйДокумент.Области.ДатаПодписи.Значение = Форма.ДатаПодписи;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ВПрограммеИзмененаДатаПодписи = Ложь)
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
	
		СтрокаСведений = "ИННЮЛ, КППЮЛ, ОКАТО, ОГРН, НаимЮЛПол, НаимЮЛСокр, КодОснВидаДеятельностиНФО, КодыИныхВидовДеятельностиНФО, ТипНП, ТелОрганизации, ФИО, ФИОРук, ДолжнРук, ТелРук, ФИОИсп, ДолжнИсп, ТелИсп, "
			+ Форма.СтруктураРеквизитовФормы.мТипАдреса;
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
			Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СтрокаСведений);
		
		Форма.ТабличныйДокумент.Области.ИНН.Значение = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		Форма.ТабличныйДокумент.Области.КПП.Значение = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		Форма.ТабличныйДокумент.Области.ОКАТО.Значение = СокрЛП(СведенияОбОрганизации.ОКАТО);
		Форма.ТабличныйДокумент.Области.ОГРН.Значение = СокрЛП(СведенияОбОрганизации.ОГРН);
		Форма.ТабличныйДокумент.Области.ОргПолнНаим.Значение = СокрЛП(СведенияОбОрганизации.НаимЮлПол);
		Форма.ТабличныйДокумент.Области.ОргСокрНаим.Значение = СокрЛП(СведенияОбОрганизации.НаимЮЛСокр);
		Форма.ТабличныйДокумент.Области.РукФИО.Значение = СокрЛП(СведенияОбОрганизации.ФИОРук);
		Форма.ТабличныйДокумент.Области.РукДолжность.Значение = СокрЛП(СведенияОбОрганизации.ДолжнРук);
		Форма.ТабличныйДокумент.Области.РукТелефон.Значение = СокрЛП(СведенияОбОрганизации.ТелРук);
		Форма.ТабличныйДокумент.Области.ИспФИО.Значение = СокрЛП(СведенияОбОрганизации.ФИОИсп);
		Форма.ТабличныйДокумент.Области.ИспДолжность.Значение = СокрЛП(СведенияОбОрганизации.ДолжнИсп);
		Форма.ТабличныйДокумент.Области.ИспТелефон.Значение = СокрЛП(СведенияОбОрганизации.ТелИсп);
		
		Если СведенияОбОрганизации.КодОснВидаДеятельностиНФО <> Неопределено Тогда
			Форма.ТабличныйДокумент.Области.КодОснВидаДеятельности.Значение
				= СокрЛП(СведенияОбОрганизации.КодОснВидаДеятельностиНФО);
		КонецЕсли;
		
		Если СведенияОбОрганизации.КодыИныхВидовДеятельностиНФО <> Неопределено Тогда
			ПолучКодыИныхВД = СтрРазделить(СокрЛП(СведенияОбОрганизации.КодыИныхВидовДеятельностиНФО), ", ", Ложь);
			ОбрабКодыИныхВД = Новый Массив;
			Для каждого КодВД Из ПолучКодыИныхВД Цикл
				ОбрабКодВД = СокрЛП(КодВД);
				Если СтрДлина(ОбрабКодВД) = 3 Тогда
					ОбрабКодыИныхВД.Добавить(ОбрабКодВД);
				КонецЕсли;
			КонецЦикла;
			СтрокаКодыИныхВД = ?(ОбрабКодыИныхВД.Количество() > 0, СтрСоединить(ОбрабКодыИныхВД, ", "), "");
			Форма.ТабличныйДокумент.Области.КодыИныхВидовДеятельности.Значение = СтрокаКодыИныхВД;
		КонецЕсли;
		
		ПолныйАдрес = СведенияОбОрганизации[Форма.СтруктураРеквизитовФормы.мТипАдреса];
		Форма.ТабличныйДокумент.Области.ОргПочтАдрес.Значение = ?(ПолныйАдрес = ",,,,,,,,,", "",
		РегламентированнаяОтчетностьКлиентСервер.ПредставлениеАдресаВФормате9Запятых(ПолныйАдрес));
		
		ЗаполнитьДатуВЯчейках(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено ИЛИ СтруктураРеквизитовФормы.мАвтоВыборКодов Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Область.Имя) <> Неопределено Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	Если Ячейка.Раздел = "Раздел1" Тогда
		
		Для каждого НайденныйРаздел1 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел1.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				Для каждого НайденнаяСтраница1 Из НайденныйРаздел1.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница1.КолонкаНомерСтраницыРазделаОтчета = Число(Ячейка.Страница) Тогда
						СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
						Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраница1.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел11" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел1 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел1.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
				Для каждого НайденнаяСтраница1 Из НайденныйРаздел1.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница1.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела1 = НайденнаяСтраница1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденныйПодчРаздел Из ТекСтраницаРаздела1.ПолучитьЭлементы() Цикл
			Если НайденныйПодчРаздел.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				ТекПодчРаздел = НайденныйПодчРаздел;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденнаяСтраницаПодчРаздела Из ТекПодчРаздел.ПолучитьЭлементы() Цикл
			Если НайденнаяСтраницаПодчРаздела.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[2]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтраницаПодчРаздела.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел12"
		ИЛИ Ячейка.Раздел = "Раздел13" Тогда
		
		НомераСтрокМногоуровнегоРаздела
			= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Ячейка.Страница);
		
		Для каждого НайденныйРаздел1 Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел1.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
				Для каждого НайденнаяСтраница1 Из НайденныйРаздел1.ПолучитьЭлементы() Цикл
					Если НайденнаяСтраница1.КолонкаНомерСтраницыРазделаОтчета
						= Число(НомераСтрокМногоуровнегоРаздела[0]) Тогда
						ТекСтраницаРаздела1 = НайденнаяСтраница1;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого НайденныйПодчРаздел Из ТекСтраницаРаздела1.ПолучитьЭлементы() Цикл
			Если НайденныйПодчРаздел.КолонкаНомерСтраницыРазделаОтчета
				= Число(НомераСтрокМногоуровнегоРаздела[1]) Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйПодчРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Ячейка.Раздел = "Раздел21"
		ИЛИ Ячейка.Раздел = "Раздел22" Тогда
		
		Для каждого НайденныйРаздел Из РазделыОтчета.ПолучитьЭлементы() Цикл
			Если НайденныйРаздел.КолонкаРазделыОтчетаСокрНаим = Ячейка.Раздел Тогда
				СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
				Элементы.РазделыОтчета.ТекущаяСтрока = НайденныйРаздел.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Ячейка.Раздел = "Титульный" Тогда
		РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
	Иначе
		НайденнаяОбласть = ТабличныйДокумент.Области.Найти(Ячейка.ИмяЯчейки);
		Если НЕ НайденнаяОбласть = Неопределено Тогда
			Элементы.ТабличныйДокумент.ТекущаяОбласть = НайденнаяОбласть;
		КонецЕсли;
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		РазделыОтчетаПриАктивизацииСтроки(Элементы.РазделыОтчета);
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	// Необходимо для работы универсального механизма.
	Возврат;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере()
	
	ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из ЭтаФорма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = ЭтаФорма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			ИмяРаздела = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			
			Если мСтруктураМногоуровневыхРазделов.Свойство(ИмяРаздела) Тогда
				
				СтруктураРаздела = мСтруктураМногоуровневыхРазделов[ИмяРаздела];
				
				ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
					СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяРаздела]);
				
				Если СтруктураРаздела.Свойство("Многостраничность") Тогда
					
					КолСтрокВДеревеДанныхРаздела = Макс(ДеревоДанныхРаздела.Строки.Количество(), 1);
					
					Для НомерСтраницыРаздела = 1 По КолСтрокВДеревеДанныхРаздела Цикл
						
						ЭлементРаздел = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						НаимСтраницы = "Стр.";
						Если СтруктураРаздела.Свойство("НаимСтраницы") Тогда
							НаимСтраницы = СтруктураРаздела["НаимСтраницы"];
						КонецЕсли;
						ЭлементРаздел.КолонкаРазделыОтчета              = НаимСтраницы + " " + Формат(НомерСтраницыРаздела, "ЧГ=");
						ЭлементРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяРаздела;
						ЭлементРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыРаздела;
						
						Если СтруктураРаздела.Свойство("ИменаПодчиненныхРазделов") Тогда
							
							ИменаПодчиненныхРазделов = СтруктураРаздела["ИменаПодчиненныхРазделов"];
							КолПодчРазделов = ИменаПодчиненныхРазделов.Количество();
							
							Для ИндПодчРаздела = 0 По КолПодчРазделов - 1 Цикл
								
								ИмяПодчРаздела = ИменаПодчиненныхРазделов[ИндПодчРаздела];
								СтруктураПодчРаздела = мСтруктураМногоуровневыхРазделов[ИмяПодчРаздела];
								
								ЭлементПодчРазделовОтчета = ЭлементРаздел.ПолучитьЭлементы().Добавить();
								НаимСтраницы = "Стр.";
								Если СтруктураПодчРаздела.Свойство("НаимГруппыСтраниц") Тогда
									НаимСтраницы = СтруктураПодчРаздела["НаимГруппыСтраниц"];
								КонецЕсли;
								ЭлементПодчРазделовОтчета.КолонкаРазделыОтчета              = НаимСтраницы;
								ЭлементПодчРазделовОтчета.КолонкаРазделыОтчетаСокрНаим      = ИмяПодчРаздела;
								ЭлементПодчРазделовОтчета.КолонкаНомерСтраницыРазделаОтчета = ИндПодчРаздела + 1;
								
								Если СтруктураПодчРаздела.Свойство("Многостраничность") Тогда
									
									КолСтрокВДеревеДанныхПодчРаздела
										= Макс(ДеревоДанныхРаздела.Строки[НомерСтраницыРаздела - 1].Строки[ИндПодчРаздела].Строки.Количество(), 1);
									
									Для НомерСтраницыПодчРаздела = 1 По КолСтрокВДеревеДанныхПодчРаздела Цикл
										
										ЭлементПодчРаздел = ЭлементПодчРазделовОтчета.ПолучитьЭлементы().Добавить();
										НаимСтраницы = "Стр.";
										Если СтруктураПодчРаздела.Свойство("НаимСтраницы") Тогда
											НаимСтраницы = СтруктураПодчРаздела["НаимСтраницы"];
										КонецЕсли;
										ЭлементПодчРаздел.КолонкаРазделыОтчета              = НаимСтраницы + " " + Формат(НомерСтраницыПодчРаздела, "ЧГ=");
										ЭлементПодчРаздел.КолонкаРазделыОтчетаСокрНаим      = ИмяПодчРаздела;
										ЭлементПодчРаздел.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницыПодчРаздела;
										
									КонецЦикла;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета
				= ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
				ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0,
				1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		КонецЕсли;
		
		Если мСтруктураМногоуровневыхРазделов.Свойство(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
			
			НовыеНомераСтрокМногоуровнегоРаздела = Новый Массив;
			
			ТекРодитель = Элемент.ТекущиеДанные.ПолучитьРодителя();
			Если ТекРодитель <> Неопределено Тогда
				Пока ТекРодитель.ПолучитьРодителя() <> Неопределено Цикл
					НовыеНомераСтрокМногоуровнегоРаздела.Вставить(0, ТекРодитель.КолонкаНомерСтраницыРазделаОтчета);
					ТекРодитель = ТекРодитель.ПолучитьРодителя();
				КонецЦикла;
			КонецЕсли;
			НовыеНомераСтрокМногоуровнегоРаздела.Добавить(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
			КолНомеров = НовыеНомераСтрокМногоуровнегоРаздела.Количество();
			ЦелоеЧастное = Цел(КолНомеров / 2);
			ДробноеЧастное = КолНомеров / 2;
			Если ЦелоеЧастное = ДробноеЧастное Тогда
				НовыеНомераСтрокМногоуровнегоРаздела.Добавить(1);
			КонецЕсли;
			
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим,
				НовыеНомераСтрокМногоуровнегоРаздела);
			
		Иначе
			ВывестиДанныеВТабличныйДокументНаСервере(
				Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
		КонецЕсли;
		
	Иначе
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
	КонецЕсли;
	
	КМенюРО = Элементы.РазделыОтчета.КонтекстноеМеню;
	КМенюРО.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
	КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
	Если мСтруктураМногоуровневыхРазделов.Свойство(
		Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим) Тогда
		Если мСтруктураМногоуровневыхРазделов[Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим].Свойство(
			"Многостраничность") Тогда
			Элемент.Развернуть(Элемент.ТекущаяСтрока);
			КМенюРО.Видимость = Истина;
			Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			КонецЕсли;
			
			Если НЕ Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено
				И Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() > 1
				И НЕ (Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел11"
				И Элемент.ТекущиеДанные.ПолучитьРодителя().КолонкаРазделыОтчетаСокрНаим = "Раздел1") Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Истина;
				
			Иначе
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Истина;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюУдалитьСтраницу.Видимость = Ложь;
				
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				ВидимостьМеню = КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость;
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = Ложь;
			#КонецЕсли
			
			КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок = "Добавить страницу";
			Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел1" Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
				= "Добавить страницу ""Операции по счетам""";
			ИначеЕсли Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Раздел11" Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Заголовок
				= "Добавить страницу ""Виды и суммы операций""";
			КонецЕсли;
			
			#Если ВебКлиент Тогда
				КМенюРО.ПодчиненныеЭлементы.РазделыОтчетаКонтекстноеМенюДобавитьСтраницу.Видимость = ВидимостьМеню;
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.Обновить.Доступность = Истина;
	Иначе
		Элементы.Обновить.Доступность = Ложь;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Титульный" Тогда
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Ложь;
	Иначе
		Элементы.ТабличныйДокументКонтекстноеМенюГруппаСтроки.Видимость = Истина;
	КонецЕсли;
	
	СпрятатьСсылкуУдалитьСтраницу();
	
	Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1);
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьЗначенияСвойствЯчеекТабличногоДокумента(ИмяРаздела)
	
	Если НЕ (ИмяРаздела = "Титульный" ИЛИ ИмяРаздела = "ДопФайлы") Тогда
		
		Для каждого Обл Из ТабличныйДокумент.Области Цикл
			
			Если НЕ (СтрЧислоВхождений(Тип(Обл), "Рисунок") = 0
				И Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И Обл.СодержитЗначение = Истина
				И НЕ Обл.Защита) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяГруппы = МногострочнаяЧастьТекущейОбласти(ЭтаФорма, Обл.Имя);
			Если ИмяГруппы = Неопределено Тогда
				ИмяПоиска = Обл.Имя;
			Иначе
				ИмяПоиска = Лев(Обл.Имя, СтруктураРеквизитовФормы.ДлинаИмениГрафы);
			КонецЕсли;
			
			Если СтруктураРеквизитовФормы.АвтозаполняемыеПоказатели.Свойство(ИмяПоиска) Тогда
				Обл.ЦветФона = мСтруктураЦветовРаскраски["_3"];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяРаздела = "ДопФайлы" Тогда
		
		МассивДопФайлов = ПолучитьИзВременногоХранилища(
			СтруктураРеквизитовФормы["АдресВоВрХранилищеМассивДопФайлов"]);
		
		Обл = ТабличныйДокумент.Области.Найти("МногострочнаяЧасть" + СтруктураРеквизитовФормы.мИдГруппы900);
		Если Обл <> Неопределено Тогда
			Обл.Видимость = ?(МассивДопФайлов.Количество() = 0, Ложь, Истина);
		КонецЕсли;
		
		Если МассивДопФайлов.Количество() = 1 Тогда
			Обл = ТабличныйДокумент.Области.Найти("УдалитьСтроку" + СтруктураРеквизитовФормы.мИдГруппы900 + "_1");
			Если Обл <> Неопределено Тогда
				Обл.Гиперссылка = Истина;
				Обл.Текст = "х";
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "Титульный" Тогда
		УстановитьДоступностьОбластей(ЭтаФорма, "Титульный");
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка, ЗавершениеРаботы, ТекстПредупреждения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
				
		Возврат;
		
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СтрНайти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если СтрНайти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(СтрНайти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ПодключитьОбработчикОжидания("ВыполнитьПроверкуПередОткрытием", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПередОткрытием()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОткрытиемФормыРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Модифицированность = Ложь;
		Закрыть();
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьНомерКорректировки(Форма)
	
	НомерКорр = Форма.СтруктураРеквизитовФормы.ВидДокумента * Форма.НомерКорректировки;
	НомерКорректировкиСтрока = Формат(НомерКорр, "ЧН=0; ЧГ=");
	СтрДлинаНомерКорректировкиСтрока = СтрДлина(НомерКорректировкиСтрока);
	
	Форма.ТабличныйДокумент.Области["НомерКорректировки"].Значение = НомерКорректировкиСтрока;
	
Конецпроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С СЕРВИСОМ СДАЧИ ОТЧЕТНОСТИ ЧЕРЕЗ ПРЕДСТАВИТЕЛЯ

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьВИнтернетеЗавершение", ЭтотОбъект);
	
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернетеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма);
	
КонецПроцедуры

#Область ПанельОтправкиВКонтролирующиеОрганы

&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтаФорма, "УдалитьБанкРоссии");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтаФорма, "УдалитьБанкРоссии");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтаФорма, "УдалитьБанкРоссии");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтаФорма, "УдалитьБанкРоссии");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтаФорма, "УдалитьБанкРоссии");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтаФорма);
	ПараметрыИзменения.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган",
		ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.УдалитьБанкРоссии"));
	
	РегламентированнаяОтчетностьКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой", ЭтотОбъект);
	Отказ = Ложь;
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередОтправкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВыгрузкиРегламентированногоОтчетаПередОтправкой(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ОнлайнСервисыРегламентированнойОтчетностиКлиент.ПередВыгрузкойРегламентированногоОтчета(ОписаниеОповещения, ЭтотОбъект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "УдалитьБанкРоссии");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ДополнительныеПараметры.Форма.Закрыть();
КонецПроцедуры

&НаСервере
Процедура РазрешитьРедактированиеРеквизитовОбъекта() Экспорт
	
	РегламентированнаяОтчетность.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	РегламентированнаяОтчетностьКлиент.РазрешитьРедактированиеРеквизитовОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПрисоединенныеФайлы(Команда)
	
	РегламентированнаяОтчетностьКлиент.СохранитьОтчетИОткрытьФормуПрисоединенныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя) Экспорт
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

#Область ОбработчикиСобытийФормы

#Область ОбработчикиСобытийПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокументаОповещение(Контекст, ДополнительныеПараметры) Экспорт
	
	ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст);
		
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры, Контекст);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьЗадачуПоОбработкеДокумента(Команда)
	
	РегламентированнаяОтчетностьКлиент.ВыполнитьЗадачу(
		ЭтотОбъект,
		Команда,
		?(ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСохраненныйДок),
			СтруктураРеквизитовФормы.мСохраненныйДок,
			СтруктураРеквизитовФормы.ПустаяСсылкаНаРегламентированныйОтчет));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Подключаемый_КомментарийНаправившегоОткрытие(Элемент, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийНаправившегоОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийСледующемуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.КомментарийСледующемуНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокументов

&НаКлиенте
Процедура Записать(ПараметрыЗаписи) Экспорт
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗадачуПоОбработкеДокументаНаСервере(Контекст)
	
	РегламентированнаяОтчетность.ВыполнитьЗадачу(ЭтотОбъект, Контекст, СтруктураРеквизитовФормы.мСохраненныйДок);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюРеквизитов(БлокируемыеЭлементы, ТолькоПросмотр) Экспорт
	
	РегламентированнаяОтчетность.УправлениеДоступностьюРеквизитов(ЭтотОбъект, БлокируемыеЭлементы, ТолькоПросмотр);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
