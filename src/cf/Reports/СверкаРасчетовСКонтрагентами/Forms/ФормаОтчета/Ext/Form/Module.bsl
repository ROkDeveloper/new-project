
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ВестиУчетПоПодразделениям = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	
	ОбщегоНазначенияБПВызовСервера.ЗаполнитьСписокОрганизаций(Элементы.ПолеОрганизация, СоответствиеОрганизаций);
	
	РежимРасшифровки       = Параметры.РежимРасшифровки;
	ОтложенноеФормирование = Параметры.ОтложенноеФормирование;
	
	ОбновитьДатуПолученияДанных();
	
	Если РежимРасшифровки Тогда
		СтандартнаяОбработка = Ложь;
		Отчет.Организация = Справочники.Организации.ПустаяСсылка();
		Отчет.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Если ЗначениеЗаполнено(Параметры.НачалоПериода) И ЗначениеЗаполнено(Параметры.КонецПериода) Тогда
			Отчет.НачалоПериода = Параметры.НачалоПериода;
			Отчет.КонецПериода  = Параметры.КонецПериода;
		Иначе
			Отчет.НачалоПериода = Дата(1,1,1);
			Отчет.КонецПериода  = Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	
	Если ОтложенноеФормирование Тогда
		Возврат;
	КонецЕсли;
		
	Если РежимРасшифровки Тогда
		ЭтоПовторноеФормирование = Истина;
		ЗапуститьФормированиеОтчета();
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьДанныеОтчета", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбсужденияПодключены" Тогда
		ПоказатьБаннерВключитьОповещения();
	КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если ЭтоПовторноеФормирование Тогда
		ОбновитьДанныеОтчета(Истина);
	Иначе
		ЭтоПовторноеФормирование = Истина;
		ЗапуститьФормированиеОтчета();
	КонецЕсли;
	
	Элементы.Результат.АктивизироватьПоУмолчанию = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиИСформироватьОтчет(Команда)
	
	// Сбрасываем признак повторного формирования при изменении настроек.
	// В таком случае не обновляем данные из сервиса, а формируем отчет по имеющимся в программе данным.
	ЭтоПовторноеФормирование = Ложь;
	
	СформироватьОтчет(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	ОткрытьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	БухгалтерскиеОтчетыКлиент.ОтчетСохранитьКак(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОповещения(Команда)

	МодульОбсужденияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияКлиент");
	МодульОбсужденияКлиент.ПоказатьПодключение();

КонецПроцедуры

&НаКлиенте
Процедура НеВключатьОповещения(Команда)
	
	СкрытьБаннерВключитьОповещения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияПриИзменении(Элемент, ПолеОрганизация,
		Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиент.ОрганизацияПриИзменении(ЭтотОбъект, Элемент);
	
	// Сбрасываем признак повторного формирования при изменении настроек.
	// В таком случае не обновляем данные из сервиса, а формируем отчет по имеющимся в программе данным.
	ЭтоПовторноеФормирование = Ложь;
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
		ПолеОрганизация, СоответствиеОрганизаций);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, 
		СоответствиеОрганизаций, Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	// Сбрасываем признак повторного формирования при изменении настроек.
	// В таком случае не обновляем данные из сервиса, а формируем отчет по имеющимся в программе данным.
	ЭтоПовторноеФормирование = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	// Сбрасываем признак повторного формирования при изменении настроек.
	// В таком случае не обновляем данные из сервиса, а формируем отчет по имеющимся в программе данным.
	ЭтоПовторноеФормирование = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	// Сбрасываем признак повторного формирования при изменении настроек.
	// В таком случае не обновляем данные из сервиса, а формируем отчет по имеющимся в программе данным.
	ЭтоПовторноеФормирование = Ложь;
		
КонецПроцедуры

#Область НастройкиОтчета

&НаКлиенте
Процедура ГруппировкаСнятьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Ложь;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаУстановитьФлажки(Команда)
	
	Для Каждого СтрокаТаблицы Из Отчет.Группировка Цикл
		СтрокаТаблицы.Использование = Истина;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);  
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ГруппировкаПередНачаломИзменения(ЭтаФорма, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПриИзменении(Элемент)

	БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтотОбъект, Элемент, Ложь);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	Элементы.ГруппаБаннер.Видимость = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() = 0;

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);

КонецПроцедуры

&НаКлиенте
Процедура ОтборыПередНачаломИзменения(Элемент, Отказ)

	БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура РазмещениеДополнительныхПолейПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеПоляПередНачаломИзменения(Элемент, Отказ)
	
	БухгалтерскиеОтчетыКлиент.ДополнительныеПоляПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьЗаголовокПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийПоляРезультата

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ТипЗнч(Расшифровка) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		Если СтрНайти(Расшифровка, "http") = 1 Тогда
			ПерейтиПоНавигационнойСсылке(Расшифровка);
		ИначеЕсли СтрНайти(Расшифровка, "КонтрагентыБизнесСеть") Тогда
			ПерейтиПоНавигационнойСсылке(Расшифровка);
		КонецЕсли;
	Иначе
		БухгалтерскиеОтчетыКлиент.ОбработкаРасшифровкиСтандартногоОтчета(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	// Не будем обрабатывать нажатие на правую кнопку мыши.
	// Покажем стандартное контекстное меню ячейки табличного документа.
	Расшифровка = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриИзменении(Элемент)
	Если Элементы.Результат.Редактирование Тогда
		Элементы.ГруппаБаннер.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_СформироватьПриОткрытии()
	
	ЭтоПовторноеФормирование = Истина;
	ОбновитьДанныеОтчета(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОтчета(СформироватьОтчетПослеОбновления = Ложь)
	
	Если ВыполняютсяСервисныеЗадания() Тогда
		// Обмен с сервисом уже запущен, просто формируем отчет если требуется
		Если СформироватьОтчетПослеОбновления Тогда
			ЗапуститьФормированиеОтчета();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("СформироватьОтчетПослеОбновления", СформироватьОтчетПослеОбновления);
	
	ОбменССервисом = ОбменятьсяДаннымиССервисом(УникальныйИдентификатор);
	ИдентификаторЗаданияОбмена = ОбменССервисом.ИдентификаторЗадания;
	Если ОбменССервисом.Статус = "Выполнено" Тогда
		ПослеЗавершенияОбмена(ОбменССервисом, ДополнительныеПараметры);
		Возврат
	КонецЕсли;
	
	Элементы.Сформировать.Доступность            = Ложь;
	Элементы.ГруппаОбновление.Видимость          = Истина;
	Элементы.ДекорацияСервисНеОтвечает.Видимость = Ложь;
	
	ОповещениеОЗавершении   = Новый ОписаниеОповещения("ПослеЗавершенияОбмена", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания       = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ОбменССервисом, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполняютсяСервисныеЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Состояние", СостояниеФоновогоЗадания.Активно);
	
	МассивФоновыхЗаданиях = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	ИмяСервиса = СервисСверкиРасчетов.ИмяСервиса();
	Для каждого ФоновоеЗадание Из МассивФоновыхЗаданиях Цикл
		
		Если СтрНайти(ФоновоеЗадание.Наименование, ИмяСервиса) <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбменятьсяДаннымиССервисом(УникальныйИдентификатор)
	
	НаименованиеЗадания = СтрШаблон("%1. Обмен с сервисом", СервисСверкиРасчетов.ИмяСервиса());
	ИмяМетода           = "СервисСверкиРасчетов.ОбменятьсяССервисом";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыПроцедуры = Новый Структура("ЭтоВызовИзОтчета", Истина);
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода, ПараметрыПроцедуры);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияОбмена(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Элементы.Сформировать.Доступность   = Истина;
	Элементы.ГруппаОбновление.Видимость = Ложь;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗаданияОбмена) Тогда
		Возврат;
	Иначе
		ИдентификаторЗаданияОбмена = Неопределено;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда 
		Возврат;
	КонецЕсли;
	
	ОбновитьДатуПолученияДанных();
	
	Оповестить("ФормированиеОтчетаПоРасхождениям");
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры)
		И ДополнительныеПараметры.СформироватьОтчетПослеОбновления Тогда
		ЗапуститьФормированиеОтчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуПолученияДанных()
	
	ДатаУспешногоПолученияДанных = ДатаПолученияДанныхСервисаСверкиРасчетов;
	ДатаПолученияДанныхСервисаСверкиРасчетов = Константы.ДатаПолученияДанныхСервисаСверкиРасчетов.Получить();
	Если ЗначениеЗаполнено(ДатаПолученияДанныхСервисаСверкиРасчетов) Тогда
		Элементы.НадписьДатаАктуальности.Заголовок = СтрШаблон(НСтр("ru='Данные отчета получены из сервиса %1'"), СервисСверкиРасчетов.ИмяСервиса());
		Элементы.ДатаПолученияДанныхСервисаСверкиРасчетов.Видимость = Истина;
		Элементы.ДекорацияСервисНеОтвечает.Видимость = ДатаУспешногоПолученияДанных = ДатаПолученияДанныхСервисаСверкиРасчетов;
	Иначе
		Элементы.НадписьДатаАктуальности.Заголовок = СтрШаблон(НСтр("ru='Данные отчета не были получены из сервиса %1'"), СервисСверкиРасчетов.ИмяСервиса());
		Элементы.ДатаПолученияДанныхСервисаСверкиРасчетов.Видимость = Ложь;
		Элементы.ДекорацияСервисНеОтвечает.Видимость                = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПодготовленныеДанные()
	
	ЗагрузитьПодготовленныеДанныеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат           = РезультатВыполнения.Результат;
	ДанныеРасшифровки   = РезультатВыполнения.ДанныеРасшифровки;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПоказатьБаннер();
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьБаннерВключитьОповещения()

	НеПоказыватьПредложениеПодключитьОповещения = ХранилищеОбщихНастроек.Загрузить(ВРег("СервисСверкиРасчетовНеПоказыватьПредложениеПодключитьОповещения"));
	ПолныеПраваИлиПривилегированныйРежим = Пользователи.ЭтоПолноправныйПользователь();
	Если ЗначениеЗаполнено(НеПоказыватьПредложениеПодключитьОповещения) Тогда
		Элементы.ГруппаВключениеОповещений.Видимость = ПолныеПраваИлиПривилегированныйРежим
		И Не СервисСверкиРасчетовВызовСервера.ОбсужденияПодключены()
		И Не НеПоказыватьПредложениеПодключитьОповещения;
	Иначе
		Элементы.ГруппаВключениеОповещений.Видимость = ПолныеПраваИлиПривилегированныйРежим
			И Не СервисСверкиРасчетовВызовСервера.ОбсужденияПодключены();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьБаннерВключитьОповещения()
	
	ХранилищеОбщихНастроек.Сохранить(ВРег("СервисСверкиРасчетовНеПоказыватьПредложениеПодключитьОповещения"),, Истина);
	Элементы.ГруппаВключениеОповещений.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьБаннер()
	
	ИтогиСверкиПоТаблице = Отчеты.СверкаРасчетовСКонтрагентами.ИтогиСверкиПоТаблице(Результат);
	
	Если ИтогиСверкиПоТаблице.НетИтогов Тогда
		Элементы.ГруппаБаннер.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ПоказатьБаннерВключитьОповещения();
	
	Элементы.ГруппаБаннер.Видимость = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество() = 0;
	
	КоличествоДокументов   = ИтогиСверкиПоТаблице.КоличествоДокументов;
	НеОтраженоОрганизацией = ИтогиСверкиПоТаблице.НеОтраженоОрганизацией;
	НеОтраженоКонтрагентом = ИтогиСверкиПоТаблице.НеОтраженоКонтрагентом;
	РазличаютсяРеквизиты   = ИтогиСверкиПоТаблице.РазличаютсяРеквизиты;
	БезРасхождений         = ИтогиСверкиПоТаблице.БезРасхождений;
	НетИтогов              = ИтогиСверкиПоТаблице.НетИтогов;
	
	ЗапятаяПослеНеОтраженоОрганизацией   = "";
	ЗапятаяПослеНеОтраженоКонтрагентом   = "";
	ТочкаПослеСРазличающимисяРеквизитами = ""; 
	
	НеОтраженоОрганизациейНиз = 0;
	НеОтраженоКонтрагентомНиз = 0;
	
	Если НЕ НетИтогов Тогда
		
		Результат.УдалитьОбласть(Результат.Область("R"+Формат(Результат.ВысотаТаблицы -1, "ЧГ=0")+":R"+
		Формат(Результат.ВысотаТаблицы, "ЧГ=0")),
			ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Если КоличествоДокументов = 0 Тогда
		
		Элементы.ГруппаБаннер.ЦветФона = ЦветаСтиля.ЦветФонаОтрицательногоЗначения;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Сверка не производилась'")));
		
	Иначе
		
		Если НеОтраженоКонтрагентом > 0
			ИЛИ РазличаютсяРеквизиты > 0 Тогда
				
			ЗапятаяПослеНеОтраженоОрганизацией = ", ";
				
		КонецЕсли;
			
		Если РазличаютсяРеквизиты > 0 Тогда
				
			ЗапятаяПослеНеОтраженоКонтрагентом = ", ";
				
		КонецЕсли;
		
		Элементы.ГруппаБаннер.ЦветФона = Новый Цвет(215, 240, 199);
		
		Сверено = НСтр("ru='Сверено'");
		Если Прав(Строка(КоличествоДокументов), 1) = "1"
			И Прав(Строка(КоличествоДокументов), 2) <> "11" Тогда
			Сверено = Лев(Сверено,6);
		КонецЕсли;
		
		СвереноДокументов = ПолучитьСклоненияСтрокиПоЧислу("документ", КоличествоДокументов,,,"ПД=Винительный");
		ДокументовБезРасхождений = ПолучитьСклоненияСтрокиПоЧислу("документ", БезРасхождений,,,"ПД=Винительный");
		
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru='%1 %2'"),
			Сверено,
			СвереноДокументов[0])));
			
		// Для управления сворачиванием/разворачивание группирок отчета из баннера
		ОбластьНеОтраженыОрганизацией = Результат.НайтиТекст(Строка("Не отражено организацией"));
		ОбластьНеОтраженыКонтрагентом = Результат.НайтиТекст(Строка("Не отражено контрагентом"));
		ОбластьРазличаютсяРеквизиты = Результат.НайтиТекст(Строка("Различаются реквизиты"));
		
		Если ОбластьНеОтраженыОрганизацией <> Неопределено Тогда
			Если ОбластьНеОтраженыКонтрагентом <> Неопределено Тогда
				НеОтраженоОрганизациейНиз = ОбластьНеОтраженыКонтрагентом.Низ - 1;
			ИначеЕсли ОбластьРазличаютсяРеквизиты <> Неопределено Тогда
				НеОтраженоОрганизациейНиз = ОбластьРазличаютсяРеквизиты.Низ - 1;
			Иначе
				НеОтраженоОрганизациейНиз = Результат.ВысотаТаблицы;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбластьНеОтраженыКонтрагентом <> Неопределено Тогда
			Если ОбластьРазличаютсяРеквизиты <> Неопределено Тогда
				НеОтраженоКонтрагентомНиз = ОбластьРазличаютсяРеквизиты.Низ - 1;
			Иначе
				НеОтраженоКонтрагентомНиз = Результат.ВысотаТаблицы;
			КонецЕсли;
		КонецЕсли;
	
		// Формулировка баннера
		Если ОбластьНеОтраженыОрганизацией <> Неопределено
			ИЛИ ОбластьНеОтраженыКонтрагентом <> Неопределено
			ИЛИ ОбластьРазличаютсяРеквизиты <> Неопределено Тогда
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru=': '")));
			Элементы.ГруппаБаннер.ЦветФона = ЦветаСтиля.ЦветФонаОтрицательногоЗначения;
			
			Если ОбластьНеОтраженыОрганизацией <> Неопределено Тогда
				
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					НСтр("ru='не отражено организацией'"),,,,
					"Не отражено организацией"));
					
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru=' (%1)%2'"),
					НеОтраженоОрганизацией,
					ЗапятаяПослеНеОтраженоОрганизацией)));
					
			КонецЕсли;
			
			Если ОбластьНеОтраженыКонтрагентом <> Неопределено Тогда
				
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					НСтр("ru='не отражено контрагентом'"),,,,
					"Не отражено контрагентом"));
					
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru=' (%1)%2'"),
					НеОтраженоКонтрагентом,
					ЗапятаяПослеНеОтраженоКонтрагентом)));
					
			КонецЕсли;
			
			Если ОбластьРазличаютсяРеквизиты <> Неопределено Тогда
				
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
					НСтр("ru='с различающимися реквизитами'"),,,,
					"Различаются реквизиты"));
					
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru=' (%1)'"),
					РазличаютсяРеквизиты)));
					
			КонецЕсли;
				
			Если БезРасхождений > 0 Тогда
				
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(НСтр("ru=' и еще %1 без расхождений'"),
					ДокументовБезРасхождений[0])));
				
			КонецЕсли;
			
		Иначе
			
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru=': расхождений не обнаружено'")));
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='.'")));
	
	Элементы.Баннер.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФормированиеОтчета()
	
	ОчиститьСообщения();
	Элементы.ГруппаБаннер.Видимость = Ложь;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	СкрытьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьДанныеОтчета()
	
	ОбновитьДанныеОтчета();
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не КомпоновщикИнициализирован Тогда
		ИнициализироватьКомпоновщикаНастроек();
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	Если ИнформационнаяБазаФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет",
			ПараметрыОтчета, 
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчетаНаСервере()
	
	МенеджерОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ЭтотОбъект.ИмяФормы);
	
	ПараметрыОтчета = МенеджерОтчета.ПустыеПараметрыКомпоновкиОтчета();
	
	ПараметрыОтчета.Организация                       = Отчет.Организация;
	ПараметрыОтчета.ВключатьОбособленныеПодразделения = Отчет.ВключатьОбособленныеПодразделения;
	ПараметрыОтчета.Контрагент                        = Отчет.Контрагент;
	ПараметрыОтчета.НачалоПериода                     = Отчет.НачалоПериода;
	ПараметрыОтчета.КонецПериода                      = Отчет.КонецПериода;
	ПараметрыОтчета.РежимРасшифровки                  = Отчет.РежимРасшифровки;
	ПараметрыОтчета.СхемаКомпоновкиДанных             = ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных);
	ПараметрыОтчета.ИдентификаторОтчета               = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтотОбъект);
	ПараметрыОтчета.ДанныеРасшифровки                 = ДанныеРасшифровки;
	ПараметрыОтчета.НастройкиКомпоновкиДанных         = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"        , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("ВыводитьПодвал"           , Ложь);
	ПараметрыОтчета.Вставить("ВыводитьОрганизацию"      , НЕ ЗначениеЗаполнено(Отчет.Организация));
	
	ПараметрыОтчета.Вставить("ИдентификаторМакета"      , "Основной"); // Ключ текущего варианта настроек отчета
	ПараметрыОтчета.Вставить("Группировка"              , Отчет.Группировка.Выгрузить());
	ПараметрыОтчета.Вставить("ДополнительныеПоля"       , Отчет.ДополнительныеПоля.Выгрузить());
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикаНастроек()
	
	БухгалтерскиеОтчетыВызовСервера.ИнициализацияКомпоновщикаНастроек(ЭтотОбъект, Истина, КлючТекущегоВарианта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)

	Отчет = Форма.Отчет;

	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сверка расчетов с контрагентами%1'"),
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода));

	Если ЗначениеЗаполнено(Отчет.Организация) И Форма.ИспользуетсяНесколькоОрганизаций Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + " " + БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(Отчет.Организация, Отчет.ВключатьОбособленныеПодразделения);
	КонецЕсли;

	Форма.Заголовок = ЗаголовокОтчета;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля(Режим = "") Экспорт
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Показатели");
	СписокПолей.Добавить("Период");
	СписокПолей.Добавить("НомерСтроки");
	
	СписокПолей.Добавить("КоличествоДокументов");
	СписокПолей.Добавить("ПризнакОтраженияНДС");
	СписокПолей.Добавить("СимволСноски");
	СписокПолей.Добавить("ДатаВходящегоДокумента");
	СписокПолей.Добавить("НомерВходящегоДокумента");
	
	СписокПолей.Добавить("ОшДокументРегистратор");
	СписокПолей.Добавить("ОшСтавкаНДС");
	СписокПолей.Добавить("ОшНоменклатура");
	СписокПолей.Добавить("ОшКоличествоДокументов");
	
	
	Для Каждого ДоступноеПоле Из Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Ресурс Тогда
			СписокПолей.Добавить(Строка(ДоступноеПоле.Поле));
		КонецЕсли;
	КонецЦикла;
		
	Если Режим = "Отбор" Тогда
		СписокПолей.Добавить("РасшифровкаНачислениеРеализацияДокументРегистратор");
		СписокПолей.Добавить("ПризнакНаличияОшибок");
	ИначеЕсли Режим = "Порядок" Тогда
		БухгалтерскиеОтчетыКлиент.ДобавитьПоляРесурсовВЗапрещенныеПоля(ЭтаФорма, СписокПолей);
		СписокПолей.Добавить("ПризнакНаличияОшибок");
	ИначеЕсли Режим = "Группировка" Тогда
		СписокПолей.Добавить("ЗаписьДополнительногоЛиста");
	ИначеЕсли Режим = "Выбор" Тогда
		СписокПолей.Добавить("ПризнакНаличияОшибок");
		СписокПолей.Добавить("ОтражениеНДСВУчете");
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	// Сбрасываем признак повторного формирования при изменении настроек.
	// В таком случае не обновляем данные из сервиса, а формируем отчет по имеющимся в программе данным.
	ЭтоПовторноеФормирование = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаКлиенте
Процедура БаннерОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НаименованиеГруппировки = Строка(НавигационнаяСсылкаФорматированнойСтроки);
	НайденнаяОбласть = Результат.НайтиТекст(НаименованиеГруппировки);
	
	Если НайденнаяОбласть <> Неопределено Тогда
		
		Результат.ПоказатьУровеньГруппировокСтрок(0);
		Элементы.Результат.ТекущаяОбласть = НайденнаяОбласть;
		
		Если НаименованиеГруппировки = "Различаются реквизиты" Тогда
			Результат.Область("R" + Формат(НайденнаяОбласть.Низ, "ЧГ=0")+
			":R" + Формат(Результат.ВысотаТаблицы, "ЧГ=0")).Видимость = Истина;
		КонецЕсли;
		
		Если НаименованиеГруппировки = "Не отражено организацией" Тогда
			Результат.Область("R" + Формат(НайденнаяОбласть.Низ, "ЧГ=0")+
			":R" + Формат(НеОтраженоОрганизациейНиз, "ЧГ=0")).Видимость = Истина;
		КонецЕсли;
		
		Если НаименованиеГруппировки = "Не отражено контрагентом" Тогда
			Результат.Область("R" + Формат(НайденнаяОбласть.Низ, "ЧГ=0")+
			":R" + Формат(НеОтраженоКонтрагентомНиз, "ЧГ=0")).Видимость = Истина;
		КонецЕсли;
		
		Элементы.Результат.АктивизироватьПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	Если НЕ ЗавершениеРаботы 
		И (ЗначениеЗаполнено(ИдентификаторЗадания)
		ИЛИ ЗначениеЗаполнено(ИдентификаторЗаданияОбмена)) Тогда
		ОтменитьВыполнениеЗаданияПриЗакрытии();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнениеЗаданияПриЗакрытии()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияОбмена) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияОбмена);
	КонецЕсли;
	
	ИдентификаторЗаданияОбмена = Неопределено;
	ИдентификаторЗадания       = Неопределено;
	
КонецПроцедуры


#КонецОбласти