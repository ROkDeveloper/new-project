
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура   - флаги, задающие необходимость дополнительных действий.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	ПараметрыВыполненияОтчета = Новый Структура;
	ПараметрыВыполненияОтчета.Вставить("ИспользоватьПередКомпоновкойМакета",          Истина);
	ПараметрыВыполненияОтчета.Вставить("ИспользоватьПослеКомпоновкиМакета" ,          Ложь);
	ПараметрыВыполненияОтчета.Вставить("ИспользоватьПослеВыводаРезультата",           Истина);
	ПараметрыВыполненияОтчета.Вставить("ИспользоватьДанныеРасшифровки",               Истина);
	ПараметрыВыполненияОтчета.Вставить("ИспользоватьРасширенныеПараметрыРасшифровки", Ложь);
	
	Возврат ПараметрыВыполненияОтчета;
	
КонецФункции

// Возвращает структуру параметров, наличие которых требуется для успешного формирования отчета.
//
// Возвращаемое значение:
//   Структура - структура параметров для формирования отчета.
//
Функция ПустыеПараметрыКомпоновкиОтчета() Экспорт
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",                       Справочники.Организации.ПустаяСсылка());
	ПараметрыОтчета.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	ПараметрыОтчета.Вставить("Контрагент",                        Справочники.Контрагенты.ПустаяСсылка());
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок" ,                Ложь);
	ПараметрыОтчета.Вставить("ВыводитьПодвал",                    Ложь);
	ПараметрыОтчета.Вставить("МакетОформления",                   Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных",             Неопределено);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета",               "");
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных",         Неопределено);
	ПараметрыОтчета.Вставить("ДанныеРасшифровки",                 Неопределено);
	ПараметрыОтчета.Вставить("ДополнительныеПоля",                Неопределено);
	ПараметрыОтчета.Вставить("РазмещениеДополнительныхПолей",     0);
	ПараметрыОтчета.Вставить("БыстрыйОтбор",                      "");
	ПараметрыОтчета.Вставить("РежимРасшифровки",                  Ложь);
	ПараметрыОтчета.Вставить("НачалоПериода",                     Дата(1,1,1));
	ПараметрыОтчета.Вставить("КонецПериода",                      Дата(1,1,1));
	ПараметрыОтчета.Вставить("ВыводитьОрганизацию",               Истина);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	// Устанавливаем параметры если источник данных в СКД явлется запросом
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Организация", ПараметрыОтчета.Организация);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "Контрагент", ПараметрыОтчета.Контрагент);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(
		ПараметрыОтчета,
		КомпоновщикНастроек,
		"РегистрСведений.СервисСверкиРасчетовОбнаруженныеРасхождения");
		
	ОтборПоКонтрагенту = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборПоКонтрагенту.ЛевоеЗначение 		= Новый ПолеКомпоновкиДанных("Контрагент");
	ОтборПоКонтрагенту.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборПоКонтрагенту.ПравоеЗначение 	    = ПараметрыОтчета.Контрагент;
	ОтборПоКонтрагенту.Использование 		= Истина;
	ОтборПоКонтрагенту.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Контрагент) Тогда
		
		НовыйОтбор = БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(КомпоновщикНастроек, "Контрагент", ПараметрыОтчета.Контрагент,,, Истина);
		НовыйОтбор.Представление = "###ОтборПоКонтрагенту###"; 
		
	Иначе
		ОтборПоКонтрагенту.Использование 		= Ложь;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре можно изменить табличный документ после вывода в него данных.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. ПустыеПараметрыКомпоновкиОтчета()
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	ИтогиСверкиПоТаблице = ИтогиСверкиПоТаблице(Результат);
	
	Если ИтогиСверкиПоТаблице.КоличествоДокументов <> 0
		И ИтогиСверкиПоТаблице.КоличествоДокументов = ИтогиСверкиПоТаблице.БезРасхождений Тогда
		
		// Отобразим информацию об успешной сверке
		Результат.Очистить();
		
		МакетУспешнаяСверка = Отчеты.СверкаРасчетовСКонтрагентами.ПолучитьМакет("УспешнаяСверка");
		
		Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда 
			ОбластьЗаголовок = МакетУспешнаяСверка.ПолучитьОбласть("Заголовок");
			СведенияОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
				ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода, , , , Истина);
			НаименованиеОрганизацииДляПечатныхФорм = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияОрганизации, "НаименованиеДляПечатныхФорм,");
			ОбластьЗаголовок.Параметры.Организация = НаименованиеОрганизацииДляПечатныхФорм;
		Иначе
			ОбластьЗаголовок = МакетУспешнаяСверка.ПолучитьОбласть("ЗаголовокБезОтбораПоОрганизации");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОтчета.Контрагент) Тогда
			СведенияКонтрагента = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
				ПараметрыОтчета.Контрагент, ПараметрыОтчета.КонецПериода, , , , Истина);
			НаименованиеКонтрагентаДляПечатныхФорм = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
				СведенияКонтрагента, "НаименованиеДляПечатныхФорм,");
			ОбластьЗаголовок.Параметры.Контрагент = НаименованиеКонтрагентаДляПечатныхФорм; 
		Иначе
			ОбластьЗаголовок.Параметры.Контрагент = НСтр("ru='контрагентами'");
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Период = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
		
		ОбластьЗаголовок.Параметры.ОписаниеОтбора = Строка(ПараметрыОтчета.НастройкиКомпоновкиданных.Отбор);
		
		Результат.Вывести(ОбластьЗаголовок);
		
		ОбластьОписаниеСверки = МакетУспешнаяСверка.ПолучитьОбласть("ОписаниеСверки");
		
		ПоследняяЦифра1   = Прав(Строка(ИтогиСверкиПоТаблице.КоличествоДокументов),1) = "1" 
			И ?(ИтогиСверкиПоТаблице.КоличествоДокументов > 10, 
			Прав(Строка(ИтогиСверкиПоТаблице.КоличествоДокументов),2) <> "11", Истина);
		ТекстСверено      = ?(ПоследняяЦифра1, НСтр("ru = 'Сверен '"),  НСтр("ru = 'Сверено '")); 
		ТекстДокументов   = ПолучитьСклоненияСтрокиПоЧислу("документ" , ИтогиСверкиПоТаблице.КоличествоДокументов ,,,"ПД=Винительный");
		СвереноДокументов = ТекстСверено + ТекстДокументов[0];
		
		ОбластьОписаниеСверки.Параметры.СвереноДокументов = СвереноДокументов;
		Результат.Вывести(ОбластьОписаниеСверки);
		
		ОбластьПодробнееОСервисе = МакетУспешнаяСверка.ПолучитьОбласть("ПодробнееОСервисе");
		КонтрагентыБизнесСеть    = РегистрыСведений.КонтрагентыБизнесСеть.КонтрагентыEDIПоОрганизации();
		ОбластьПодробнееОСервисе.Параметры.КоличествоПодключенных = КонтрагентыБизнесСеть.Количество(); 
		ОбластьПодробнееОСервисе.Параметры.КонтрагентыБизнесСети  = "e1cib/list/РегистрСведений.КонтрагентыБизнесСеть";
		ОбластьПодробнееОСервисе.Параметры.СсылкаНаИТС            = "https://its.1c.ru/db/partnerits#content:4430:hdoc";
		
		Результат.Вывести(ОбластьПодробнееОСервисе);
		
	КонецЕсли;
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета) Экспорт
	
	ТекстЗаголовок = ПараметрыОтчета.СхемаКомпоновкиДанных.ВариантыНастроек[ПараметрыОтчета.ИдентификаторМакета].Представление;
	
	Возврат ТекстЗаголовок + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода);
	
КонецФункции

// Возвращает структуру итогов сверки по таблице отчета. 
//
// Параметры:
//  Результат    - ТабличныйДокумент - сформированный отчет.
//
// Возвращаемое значение:
//   ИтогиСверки - структура см. тело функции.
//
Функция ИтогиСверкиПоТаблице(Результат) Экспорт
	
	ИтогиСверки = Новый Структура();
	ИтогиСверки.Вставить("НетИтогов",              Ложь);
	
	ИтогиСверки.Вставить("КоличествоДокументов",   0);
	ИтогиСверки.Вставить("НеОтраженоОрганизацией", 0);
	ИтогиСверки.Вставить("НеОтраженоКонтрагентом", 0);
	ИтогиСверки.Вставить("РазличаютсяРеквизиты",   0);
	ИтогиСверки.Вставить("БезРасхождений",         0);

	ОбластьСверено = Результат.НайтиТекст("<Сверено>");
	Если ОбластьСверено = Неопределено Тогда
		ИтогиСверки.НетИтогов = Истина;
		Возврат ИтогиСверки;
	КонецЕсли;
	
	Попытка
		ИтогиСверки.БезРасхождений = Число(Формат(Результат.Область(ОбластьСверено.Низ, 2).Текст, "ЧГ=0"));
	Исключение
		// Исключение не отрабатываем.
	КонецПопытки;
	
	Попытка
		ИтогиСверки.НеОтраженоОрганизацией = Число(Формат(Результат.Область(ОбластьСверено.Низ+1, 3).Текст, "ЧГ=0"));
		ИтогиСверки.НеОтраженоКонтрагентом = Число(Формат(Результат.Область(ОбластьСверено.Низ+1, 4).Текст, "ЧГ=0"));
		ИтогиСверки.РазличаютсяРеквизиты   = Число(Формат(Результат.Область(ОбластьСверено.Низ+1, 5).Текст, "ЧГ=0"));
	Исключение
		// Исключение не отрабатываем.
	КонецПопытки;
	
	ИтогиСверки.КоличествоДокументов = ИтогиСверки.БезРасхождений
		+ ИтогиСверки.НеОтраженоОрганизацией
		+ ИтогиСверки.НеОтраженоКонтрагентом
		+ ИтогиСверки.РазличаютсяРеквизиты;
	
	Возврат ИтогиСверки;
	
КонецФункции
	
#КонецОбласти

#КонецЕсли