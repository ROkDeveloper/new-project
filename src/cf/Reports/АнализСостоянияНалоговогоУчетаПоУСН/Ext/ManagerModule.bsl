#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Инициализирует набор параметров, задающих флаги выполнения дополнительных действий над сущностями, обрабатываемыми
// в процессе формирования отчета.
//
// Возвращаемое значение:
//   Структура - флаги, задающие необходимость дополнительных действий.
//- 
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Результат.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	Результат.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Результат.Вставить("ИспользоватьВнешниеНаборыДанных",    Истина);
							
	Возврат Результат;
	
КонецФункции

// Возвращает внешние наборы данных, которые используются при компоновке макета.
// 
// Параметры:
//   ПараметрыОтчета - Структура - параметры исполнения отчета (см. ПодготовитьПараметрыОтчетаНаСервере() в ФормаОтчета).
//   МакетКомпоновки - МакетКомпоновкиДанных - сформированный макет компоновки данных.
// 
// Возвращаемое значение:
//   Структура - внешние наборы данных:
//     ТаблицаКоэффициентов - ТаблицаЗначений - таблица коэффициентов распределения расходов.
//        Документ - ДокументСсылка.РегламентнаяОперация - регламетная операция распределения расходов по видам деятельности.
//        ДатаДокумента - Дата - дата регламентной операции.
//        Коэфф - Число - доля дохода по совмещаемой системен налогообложения.
//
Функция ПолучитьВнешниеНаборыДанных(ПараметрыОтчета, МакетКомпоновки) Экспорт
	
	НаборыДанных = ПараметрыОтчета.СхемаКомпоновкиДанных.НаборыДанных;
	Если НаборыДанных.Найти("ВнешнийИсточник") = Неопределено
		Или НаборыДанных.ВнешнийИсточник.ИмяОбъекта <> "ТаблицаКоэффициентов" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокДоступныхОрганизаций = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(
		ПараметрыОтчета.Организация,
		ПараметрыОтчета.ВключатьОбособленныеПодразделения);
	Если СписокДоступныхОрганизаций.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонецПериодаОтчета = КонецДня(ПараметрыОтчета.КонецПериода);
	
	МетодРаспределения = УчетнаяПолитика.МетодРаспределенияРасходовУСНПоВидамДеятельности(ПараметрыОтчета.Организация, КонецПериодаОтчета);
	Метод = ?(МетодРаспределения = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.НарастающимИтогомСНачалаГода, "Год", "Квартал");
	
	БазаРаспределения  = УчетнаяПолитика.БазаРаспределенияРасходовУСНПоВидамДеятельности(ПараметрыОтчета.Организация, КонецПериодаОтчета);
	Если БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыВсегоНУ Тогда
		База = "НВ";
	ИначеЕсли БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ Тогда
		База = "НУ";
	Иначе
		База = "БУ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",     ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",      КонецПериодаОтчета);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокДоступныхОрганизаций);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентнаяОперация.Ссылка КАК Документ,
	|	РегламентнаяОперация.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
	|ГДЕ
	|	РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.РаспределениеРасходовПоВидамДеятельностиДляУСН)
	|	И РегламентнаяОперация.Организация В(&СписокОрганизаций)
	|	И РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаКоэффициентов = Запрос.Выполнить().Выгрузить();
	КолонкиТаблицыКоэффициентов = ТаблицаКоэффициентов.Колонки;
	КолонкиТаблицыКоэффициентов.Добавить("Коэфф", Новый ОписаниеТипов("Число"));
	
	Для Каждого Строка Из ТаблицаКоэффициентов Цикл
		Строка.Коэфф = КоэффициентРаспределенияРасходов(СписокДоступныхОрганизаций, Строка.ДатаДокумента, Метод, База);
	КонецЦикла;
	
	КолонкиТаблицыКоэффициентов.Удалить("ДатаДокумента");
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаКоэффициентов", ТаблицаКоэффициентов);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

// Процедура вызывается перед компоновкой макета.
// В процедуре можно доработать компоновщик перед выводом в отчет. Изменения сохранены не будут.
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры исполнения отчета (см. ПодготовитьПараметрыОтчетаНаСервере() в ФормаОтчета).
//   Схема - СхемаКомпоновкиДанных - описание получаемых данных.
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.УстановитьПараметрОрганизация(КомпоновщикНастроек, ПараметрыОтчета.Организация);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "НачалоПериода", НачалоДня(ПараметрыОтчета.НачалоПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "ДатаИзмененияУПпоНДС", ПараметрыОтчета.ДатаИзмененияУПпоНДС);
	
	Если СтрНайти(ПараметрыОтчета.КоллекцияНастроек.ИмяФормируемогоМакета, "МакетРасшифровкиПоНалогам") > 0
		Или СтрНайти(ПараметрыОтчета.КоллекцияНастроек.ИмяФормируемогоМакета, "МакетРасшифровкиНалоговПоДокументам") > 0 Тогда
		СчетаРасходовПоНалогамПредопределенные = Новый Массив;
		СчетаРасходовПоНалогамПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
		СчетаРасходовПоНалогамПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
		
		СчетаРасходовПоНалогамИсключения = Новый Массив;
		СчетаРасходовПоНалогамИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет);
		
		УсловияОтбораСчетовПоНалогам = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
		УсловияОтбораСчетовПоНалогам.СчетаИсключения = СчетаРасходовПоНалогамИсключения;
		
		СчетаРасходовПоНалогам = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(
			СчетаРасходовПоНалогамПредопределенные, УсловияОтбораСчетовПоНалогам);
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "СчетаРасходовПоНалогам", СчетаРасходовПоНалогам);
		
		СчетаУчетаНалоговВзносовСФОТПредопределенные = Новый Массив;
		СчетаУчетаНалоговВзносовСФОТПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.НДФЛ_НалоговогоАгента);
		СчетаУчетаНалоговВзносовСФОТПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ФСС);
		СчетаУчетаНалоговВзносовСФОТПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ПФР);
		СчетаУчетаНалоговВзносовСФОТПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ФОМС);
		СчетаУчетаНалоговВзносовСФОТПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.СтраховыеВзносыЕдиныйТариф);
		СчетаУчетаНалоговВзносовСФОТПредопределенные.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ);
		
		СчетаУчетаНалоговВзносовСФОТ = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаУчетаНалоговВзносовСФОТПредопределенные);
		
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "СчетаУчетаНалоговВзносовСФОТ", СчетаУчетаНалоговВзносовСФОТ);
		
		ПоказыватьСчетУчета = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ПоказыватьСчетаУчетаВДокументах");
		
		ПолеСчетУчетаНаименование = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы.Найти("СчетУчетаНаименование");
		ПолеСчетУчета = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы.Найти("СчетУчета");
		
		ГруппировкаПоСчету = КомпоновщикНастроек.Настройки.Структура.Получить(0);
		ПоляГруппировкиПоСчету = ГруппировкаПоСчету.Выбор.Элементы;
		ПоляГруппировкиПоСчету.Очистить();
		
		ПоляГруппировкиПоСчету.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		ГруппаПолейПоСчету = ПоляГруппировкиПоСчету.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
		ГруппаПолейПоСчету.Расположение = РасположениеПоляКомпоновкиДанных.Вместе;
		
		Если ПолеСчетУчетаНаименование <> Неопределено Тогда
			ПолеГруппировкиСчетУчетаНаименование = ГруппаПолейПоСчету.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеГруппировкиСчетУчетаНаименование.Поле = ПолеСчетУчетаНаименование.Поле;
		КонецЕсли;
		
		Если ПолеСчетУчета <> Неопределено Тогда
			ПолеГруппировкиСчетУчета = ГруппаПолейПоСчету.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеГруппировкиСчетУчета.Поле = ПолеСчетУчета.Поле;
			ПолеГруппировкиСчетУчета.Использование = ПоказыватьСчетУчета;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПараметрыОтчета.КоллекцияНастроек.ЗначениеРасшифровки = Неопределено Тогда
		Для Каждого ПараметрРасшифровки Из ПараметрыОтчета.КоллекцияНастроек.ЗначениеРасшифровки Цикл
			Если Не КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ПараметрРасшифровки.ИмяПараметра) = Неопределено Тогда
				БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
					КомпоновщикНастроек,
					ПараметрРасшифровки.ИмяПараметра,
					ПараметрРасшифровки.ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выводе заголовка отчета.
// В процедуре можно доработать выводимый заголовок отчета.
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры исполнения отчета (см. ПодготовитьПараметрыОтчетаНаСервере() в ФормаОтчета).
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - связь настроек компоновки данных и схемы компоновки.
//   Результат - ТабличныйДокумент - сформированный отчет.
//
Процедура ПриВыводеЗаголовка(ПараметрыОтчета, КомпоновщикНастроек, Результат) Экспорт 
	
	Макет = ПолучитьМакет("МакетЗаголовкаРасшифровки");
	
	ОбластьОтчета = Макет.ПолучитьОбласть("Заголовок");
	
	НаименованиеОрганизации = БухгалтерскиеОтчетыВызовСервера.ПолучитьТекстОрганизация(
		ПараметрыОтчета.Организация, ПараметрыОтчета.ВключатьОбособленныеПодразделения, ПараметрыОтчета.КонецПериода);
	ОбластьОтчета.Параметры.ТекстЗаголовка = СтрШаблон(НСтр("ru = '%1, %2'"),
		НаименованиеОрганизации,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПараметрыОтчета.НачалоПериода, ПараметрыОтчета.КонецПериода));
	Результат.Вывести(ОбластьОтчета);
	
	Если СтрНайти(ПараметрыОтчета.КоллекцияНастроек.ИмяФормируемогоМакета, "МакетРасшифровкиНоменклатурыПоДокументам") > 0 Тогда
		
		ПараметрыРасшифровки = ПараметрыОтчета.КоллекцияНастроек.ЗначениеРасшифровки;
		
		Если ТипЗнч(ПараметрыРасшифровки) = Тип("Массив") И ПараметрыРасшифровки.Количество() = 1 Тогда

			ЗначениеПараметраРасшифровки = ПараметрыРасшифровки[0].ЗначениеПараметра;

			Если ЗначениеЗаполнено(ЗначениеПараметраРасшифровки) Тогда

				НоменклатураНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ЗначениеПараметраРасшифровки, "Наименование");

				ОбластьОтчета = Макет.ПолучитьОбласть("Заголовок");
				ОбластьОтчета.Параметры.ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Номенклатура: ""%1""'"), НоменклатураНаименование);

				Результат.Вывести(ОбластьОтчета);

			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ПараметрыОтчета.КоллекцияНастроек.ИмяФормируемогоМакета, "МакетРасшифровкиЗарплатыПоДокументам") > 0 Тогда
		
		ПараметрыРасшифровки = ПараметрыОтчета.КоллекцияНастроек.ЗначениеРасшифровки;
		
		Если ТипЗнч(ПараметрыРасшифровки) = Тип("Массив") И ПараметрыРасшифровки.Количество() = 1 Тогда
			
			ИмяПараметраРасшифровки = ПараметрыРасшифровки[0].ИмяПараметра;
			ЗначениеПараметраРасшифровки = ПараметрыРасшифровки[0].ЗначениеПараметра;

			Если ЗначениеЗаполнено(ИмяПараметраРасшифровки) И ЗначениеЗаполнено(ЗначениеПараметраРасшифровки) Тогда

				ПараметрЗаголовок = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
				Если ПараметрЗаголовок <> Неопределено Тогда
					ШаблонЗаголовка = НСтр("ru = 'Расходы на оплату труда %1'");

					Если ИмяПараметраРасшифровки = "Сотрудник" Тогда
						ТекстРасшифровки = СтрШаблон(НСтр("ru = 'по сотруднику %1'"),
							ЗначениеПараметраРасшифровки);
					ИначеЕсли ИмяПараметраРасшифровки = "МесяцЗарплаты" Тогда
						ТекстРасшифровки = СтрШаблон(НСтр("ru = 'за %1'"),
							Формат(ЗначениеПараметраРасшифровки, "ДФ='ММММ гггг'"));
					Иначе
						ТекстРасшифровки = "";
					КонецЕсли;

					ПараметрЗаголовок.Значение = СтрШаблон(ШаблонЗаголовка, ТекстРасшифровки);
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ПараметрыОтчета.КоллекцияНастроек.ИмяФормируемогоМакета, "МакетРасшифровкиНалоговПоДокументам") > 0 Тогда
		
		ПараметрыРасшифровки = ПараметрыОтчета.КоллекцияНастроек.ЗначениеРасшифровки;
		
		Если ТипЗнч(ПараметрыРасшифровки) = Тип("Массив") И ПараметрыРасшифровки.Количество() <> 0 Тогда
			
			ЗначениеПараметраРасшифровки = Неопределено;
			
			Для Каждого ПараметрРасшифровки Из ПараметрыРасшифровки Цикл
				Если ПараметрРасшифровки.ИмяПараметра = "СчетУчета" Тогда
					ЗначениеПараметраРасшифровки = ПараметрРасшифровки.ЗначениеПараметра;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ЗначениеПараметраРасшифровки) Тогда

				ПараметрЗаголовок = КомпоновщикНастроек.Настройки.ПараметрыВывода.Элементы.Найти("Заголовок");
				Если ПараметрЗаголовок <> Неопределено Тогда
					СчетНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						ЗначениеПараметраРасшифровки, "Наименование");
					
					ПараметрЗаголовок.Значение = СтрШаблон(НСтр("ru = 'Расходы на %1'"), СчетНаименование);
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет графическую схему налоговой базы.
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры исполнения отчета (см. ПодготовитьПараметрыОтчетаНаСервере() в ФормаОтчета).
//   АдресХранилища - Строка - Адрес временного хранилища для помещения схемы налоговой базы.
//
Процедура ЗаполнитьСхемуНалоговойБазы(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяМакетаКарты = "МакетКарты";
	НастройкиКлиента = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения");
	Если ТипЗнч(НастройкиКлиента) = Тип("НастройкиКлиентскогоПриложения") 
		И НастройкиКлиента.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ИмяМакетаКарты = "МакетКарты82";
	КонецЕсли;
	РезультатСхема = ПолучитьМакет(ИмяМакетаКарты);
	
	ВыделятьНДСУСН = ВыделятьНДСУСН(ПараметрыОтчета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",    ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",     КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("РозничнаяВыручка", Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	Запрос.УстановитьПараметр("КартыИКредиты",    Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	Запрос.УстановитьПараметр("СПокупателем",     Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	Запрос.УстановитьПараметр("СКомиссионером",   Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Запрос.УстановитьПараметр("СКомитентом",      Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Запрос.УстановитьПараметр("СКомитентомНаЗакупку",      Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа5) КАК Графа5,
	|	ВЫБОР
	|		КОГДА КнигаУчетаДоходовИРасходов.ЭтапПроведения = -1
	|			ТОГДА ""Курсовая разница""
	|		КОГДА КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = &РозничнаяВыручка
	|			ТОГДА ""Розничная выручка""
	|		КОГДА КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|			ТОГДА ""Сторно доходов при возврате аванса покупателю""
	|		КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = &СПокупателем
	|				ИЛИ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = &СПокупателем
	|				ИЛИ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ВидОперации = &КартыИКредиты
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|			ТОГДА ""Поступления от покупателей""
	|		КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = &СКомиссионером
	|				ИЛИ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = &СКомиссионером
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|			ТОГДА ""Поступления от комиссионеров""
	|		КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора В (&СКомитентом, &СКомитентомНаЗакупку)
	|				ИЛИ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора В (&СКомитентом, &СКомитентомНаЗакупку)
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ОтчетКомитентуОПродажах
	|			ТОГДА ""Комиссионное вознаграждение""
	|		ИНАЧЕ ""Доходы, отраженные вручную""
	|	КОНЕЦ КАК Содержание
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПлатежноеПоручениеВходящееРасшифровкаПлатежа
	|		ПО КнигаУчетаДоходовИРасходов.Регистратор = ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка
	|			И (ПлатежноеПоручениеВходящееРасшифровкаПлатежа.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК ПлатежноеПоручениеИсходящееРасшифровкаПлатежа
	|		ПО КнигаУчетаДоходовИРасходов.Регистратор = ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.Ссылка
	|			И (ПлатежноеПоручениеИсходящееРасшифровкаПлатежа.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|		ПО КнигаУчетаДоходовИРасходов.Регистратор = РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|			И (РасходныйКассовыйОрдерРасшифровкаПлатежа.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|		ПО КнигаУчетаДоходовИРасходов.Регистратор = ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|			И (ПриходныйКассовыйОрдерРасшифровкаПлатежа.НомерСтроки = 1)
	|ГДЕ
	|	КнигаУчетаДоходовИРасходов.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КнигаУчетаДоходовИРасходов.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходов.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА КнигаУчетаДоходовИРасходов.ЭтапПроведения = -1
	|			ТОГДА ""Курсовая разница""
	|		КОГДА КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = &РозничнаяВыручка
	|			ТОГДА ""Розничная выручка""
	|		КОГДА КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
	|			ТОГДА ""Сторно доходов при возврате аванса покупателю""
	|		КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = &СПокупателем
	|				ИЛИ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = &СПокупателем
	|				ИЛИ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.Ссылка.ВидОперации = &КартыИКредиты
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
	|			ТОГДА ""Поступления от покупателей""
	|		КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = &СКомиссионером
	|				ИЛИ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора = &СКомиссионером
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|			ТОГДА ""Поступления от комиссионеров""
	|		КОГДА ПриходныйКассовыйОрдерРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора В (&СКомитентом, &СКомитентомНаЗакупку)
	|				ИЛИ ПлатежноеПоручениеВходящееРасшифровкаПлатежа.ДоговорКонтрагента.ВидДоговора В (&СКомитентом, &СКомитентомНаЗакупку)
	|				ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ОтчетКомитентуОПродажах
	|			ТОГДА ""Комиссионное вознаграждение""
	|		ИНАЧЕ ""Доходы, отраженные вручную""
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа5) <> 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЭлементыСхемы = РезультатСхема.ЭлементыГрафическойСхемы;
	
	ВсегоДоходов = 0;
	
	Пока Выборка.Следующий() Цикл
		
		ВсегоДоходов = ВсегоДоходов + Выборка.Графа5;
		
		Если СокрЛП(Выборка.Содержание) = "Розничная выручка" Тогда
			
			ЭлементыСхемы.РозничнаяВыручка.Наименование = Формат(Выборка.Графа5, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
			
		ИначеЕсли СокрЛП(Выборка.Содержание) = "Сторно доходов при возврате аванса покупателю" Тогда
			
			ЭлементыСхемы.ВозвратАвансов.Наименование = Формат(Выборка.Графа5, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
			
		ИначеЕсли СокрЛП(Выборка.Содержание) = "Поступления от покупателей" Тогда
			
			ЭлементыСхемы.ПоступленияОтПокупателей.Наименование	= Формат(Выборка.Графа5, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
			
		ИначеЕсли СокрЛП(Выборка.Содержание) = "Поступления от комиссионеров" Тогда
			
			ЭлементыСхемы.ПоступленияОтКомиссионеров.Наименование = Формат(Выборка.Графа5, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
			
		ИначеЕсли СокрЛП(Выборка.Содержание) = "Комиссионное вознаграждение" Тогда
			
			ЭлементыСхемы.КомиссионноеВознаграждение.Наименование = Формат(Выборка.Графа5, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
			
		ИначеЕсли СокрЛП(Выборка.Содержание) = "Курсовая разница" Тогда
			
			ЭлементыСхемы.КурсовыеРазницы.Наименование = Формат(Выборка.Графа5, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
			
		ИначеЕсли СокрЛП(Выборка.Содержание) = "Доходы, отраженные вручную" Тогда
			
			ЭлементыСхемы.ДоходыВручную.Наименование = Формат(Выборка.Графа5, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыСхемы.ДоходыВсего.Наименование = Формат(ВсегоДоходов, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
	
	ЭлементыСхемы.ТекстНДС.Наименование = ?(ВыделятьНДСУСН, "НДС, предъявленный поставщиком", "Сторно НДС прошлых периодов");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",    ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",     КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("ПустойВидРасхода", Перечисления.ВидыРасходовУСН.ПустаяСсылка());
	Запрос.УстановитьПараметр("Номенклатура",     Перечисления.ВидыРасходовУСН.Номенклатура);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа7) КАК Графа7,
	|	СУММА(КнигаУчетаДоходовИРасходов.НДС) КАК НДС,
	|	ВЫБОР
	|		КОГДА КнигаУчетаДоходовИРасходов.ВидРасхода = &ПустойВидРасхода
	|			ТОГДА ВЫБОР
	|					КОГДА КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						ТОГДА &Номенклатура
	|					КОГДА КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|							И КнигаУчетаДоходовИРасходов.ЭтапПроведения = 2
	|						ТОГДА ""Распределение по видам деятельности""
	|					ИНАЧЕ ""Прочее""
	|				КОНЕЦ
	|		ИНАЧЕ КнигаУчетаДоходовИРасходов.ВидРасхода
	|	КОНЕЦ КАК ВидРасхода
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|ГДЕ
	|	КнигаУчетаДоходовИРасходов.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И КнигаУчетаДоходовИРасходов.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходов.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА КнигаУчетаДоходовИРасходов.ВидРасхода = &ПустойВидРасхода
	|			ТОГДА ВЫБОР
	|					КОГДА КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя
	|						ТОГДА &Номенклатура
	|					КОГДА КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|							И КнигаУчетаДоходовИРасходов.ЭтапПроведения = 2
	|						ТОГДА ""Распределение по видам деятельности""
	|					ИНАЧЕ ""Прочее""
	|				КОНЕЦ
	|		ИНАЧЕ КнигаУчетаДоходовИРасходов.ВидРасхода
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(КнигаУчетаДоходовИРасходов.Графа7) <> 0
	|		ИЛИ СУММА(КнигаУчетаДоходовИРасходов.НДС) <> 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВсегоРасходов = 0;
	Пока Выборка.Следующий() Цикл
		ВсегоРасходов = ВсегоРасходов + Выборка.Графа7;
		
		Если ТипЗнч(Выборка.ВидРасхода) = Тип("ПеречислениеСсылка.ВидыРасходовУСН") Тогда
			
			Если Выборка.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
				
				ЭлементыСхемы.Номенклатура.Наименование    = Формат(Выборка.Графа7, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
				ЭлементыСхемы.НДСНоменклатура.Наименование = ?(ВыделятьНДСУСН или Выборка.НДС = 0, "", "в т.ч. НДС: " + Формат(Выборка.НДС, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '"));
				
			ИначеЕсли Выборка.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
				
				ЭлементыСхемы.ДопРасходы.Наименование    = Формат(Выборка.Графа7, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
				ЭлементыСхемы.НДСДопРасходы.Наименование = ?(ВыделятьНДСУСН или Выборка.НДС = 0, "", "в т.ч. НДС: " + Формат(Выборка.НДС, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '"));
				
			ИначеЕсли Выборка.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда
				
				ЭлементыСхемы.Услуги.Наименование    = Формат(Выборка.Графа7, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
				ЭлементыСхемы.НДСУслуги.Наименование = ?(ВыделятьНДСУСН или Выборка.НДС = 0, "", "в т.ч. НДС: " + Формат(Выборка.НДС, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '"));
				
			ИначеЕсли Выборка.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП Тогда
				
				ЭлементыСхемы.РБП.Наименование    = Формат(Выборка.Графа7, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
				ЭлементыСхемы.НДСРБП.Наименование = ?(ВыделятьНДСУСН или Выборка.НДС = 0, "", "в т.ч. НДС: " + Формат(Выборка.НДС, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '"));
				
			ИначеЕсли Выборка.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС Тогда
				
				ЭлементыСхемы.НДС.Наименование = Формат(Выборка.Графа7, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
				
			ИначеЕсли Выборка.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
				
				ЭлементыСхемы.Зарплата.Наименование = Формат(Выборка.Графа7, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
				
			ИначеЕсли Выборка.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
				
				ЭлементыСхемы.Налоги.Наименование = Формат(Выборка.Графа7, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.ВидРасхода) = Тип("Строка") Тогда
			
			Если СокрЛП(Выборка.ВидРасхода) = "Распределение по видам деятельности" Тогда
				
				ЭлементыСхемы.Распределение.Наименование	= Формат(Выборка.Графа7, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
				ЭлементыСхемы.НДСРаспределение.Наименование	= ?(ВыделятьНДСУСН или Выборка.НДС = 0, "", "в т.ч. НДС: " + Формат(Выборка.НДС, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '"));
				
			ИначеЕсли СокрЛП(Выборка.ВидРасхода) = "Прочее" Тогда
				
				ЭлементыСхемы.Прочее.Наименование    = Формат(Выборка.Графа7, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
				ЭлементыСхемы.НДСПрочее.Наименование = ?(ВыделятьНДСУСН или Выборка.НДС = 0, "", "в т.ч. НДС: " + Формат(Выборка.НДС, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыСхемы.РасходыВсего.Наименование = Формат(ВсегоРасходов, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
	ЭлементыСхемы.УсловнаяБаза.Наименование = Формат(ВсегоДоходов - ВсегоРасходов, "ЧЦ=20; ЧДЦ=2; ЧРГ=' '");
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("РезультатСхема", РезультатСхема);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

// Формирует расшифровку данных для выбранного элемента схемы налоговой базы.
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры исполнения отчета (см. ПодготовитьПараметрыОтчетаНаСервере() в ФормаОтчета).
//   АдресХранилища - Строка - Адрес временного хранилища для помещения расшифровки.
//
Процедура СформироватьРасшифровку(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	ЗначениеРасшифровки = ?(ТипЗнч(ПараметрыОтчета.Расшифровка) = Тип("Массив"), ПараметрыОтчета.Расшифровка, Неопределено);
			
	ПараметрыОтчета.КоллекцияНастроек.Вставить("ИмяФормируемогоМакета", ПараметрыОтчета.ИмяМакета);
	ПараметрыОтчета.КоллекцияНастроек.Вставить("ЗначениеРасшифровки",   ЗначениеРасшифровки);
	
	СхемаКомпоновкиДанных = ПолучитьМакет(ПараметрыОтчета.ИмяМакета);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьНастройкуМакета(ПараметрыОтчета, СхемаКомпоновкиДанных));
	
	ПараметрыОтчета.КоллекцияНастроек.Вставить("ИдентификаторМакета", ПараметрыОтчета.ИмяМакета);
	
	ОтключениеТаблиц(КомпоновщикНастроек, ПараметрыОтчета.ОтключитьТаблицы, ПараметрыОтчета.Расшифровка);
	
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьЗаголовок");
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал");
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьЗаголовок = Истина;
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ВыводитьПодвал	   = Ложь;
	
	ПараметрыОтчета.Вставить("ДанныеРасшифровки"        , Неопределено);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"    , СхемаКомпоновкиДанных);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"      , "АнализСостоянияНалоговогоУчетаПоУСН");
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных", КомпоновщикНастроек.ПолучитьНастройки());
	
	АдресПромежуточногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	БухгалтерскиеОтчетыВызовСервера.СформироватьОтчет(ПараметрыОтчета, АдресПромежуточногоХранилища);
	ПромежуточныйРезультатВыполнения = ПолучитьИзВременногоХранилища(АдресПромежуточногоХранилища);
	ДокументРезультат = ПромежуточныйРезультатВыполнения.Результат;
	
	РезультатВыполнения = Новый Структура;
	
	КэшОтчетов = ПараметрыОтчета.КэшОтчетов;
	Если СтрНайти(ПараметрыОтчета.ИмяМакета, "МакетРасшифровкиПоНоменклатуре") > 0
		Или СтрНайти(ПараметрыОтчета.ИмяМакета, "МакетРасшифровкиПоСотрудникам") > 0
		Или СтрНайти(ПараметрыОтчета.ИмяМакета, "МакетРасшифровкиПоНалогам") > 0 Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Вывести(ДокументРезультат);
		Структура = Новый Структура;
		Структура.Вставить("Результат",      ТабличныйДокумент);
		Структура.Вставить("ФиксацияСверху", ДокументРезультат.ФиксацияСверху);
		ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(ПромежуточныйРезультатВыполнения.ДанныеРасшифровки);
		ДанныеРасшифровкиОбъект.Объект.Вставить("КэшОтчетов", Неопределено);
		Структура.Вставить("ДанныеРасшифровки",
			ПоместитьВоВременноеХранилище(ДанныеРасшифровкиОбъект, Новый УникальныйИдентификатор));
		КэшОтчетов.Вставить(ПараметрыОтчета.ИмяМакета, Структура);
		
		РезультатВыполнения.Вставить("ИмяМакета", ПараметрыОтчета.ИмяМакета);
	КонецЕсли;
	
	РезультатВыполнения.Вставить("Результат",  ДокументРезультат);
	РезультатВыполнения.Вставить("ИмяМакета",  ПараметрыОтчета.ИмяМакета);
	РезультатВыполнения.Вставить("КэшОтчетов", КэшОтчетов);
	РезультатВыполнения.Вставить("ДанныеРасшифровки",
		ПолучитьИзВременногоХранилища(ПромежуточныйРезультатВыполнения.ДанныеРасшифровки));
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

// Возвращает настройки схемы компоновки данных.
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры исполнения отчета (см. ПодготовитьПараметрыОтчетаНаСервере() в ФормаОтчета).
//   СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - описание получаемых данных.
//
// Возвращаемое значение:
//   КомпоновщикНастроекКомпоновкиДанных - настройки схемы компоновки данных.
//-
Функция ПолучитьНастройкуМакета(ПараметрыОтчета, СхемаКомпоновкиДанных = Неопределено) Экспорт
	
	Если ПараметрыОтчета.КоллекцияНастроек <> Неопределено 
		И ПараметрыОтчета.КоллекцияНастроек.Свойство(ПараметрыОтчета.ИмяМакета) Тогда
		Возврат ПараметрыОтчета.КоллекцияНастроек[ПараметрыОтчета.ИмяМакета];
	ИначеЕсли СхемаКомпоновкиДанных = Неопределено Тогда
		Возврат ПолучитьМакет(ПараметрыОтчета.ИмяМакета).НастройкиПоУмолчанию;
	Иначе		
		Возврат СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;

КонецФункции

// Возвращает признак выделения НДС из расходов УСН.
//
// Параметры:
//   ПараметрыОтчета - Структура - параметры исполнения отчета (см. ПодготовитьПараметрыОтчетаНаСервере() в ФормаОтчета).
//
// Возвращаемое значение:
//   Булево - Истина, если порядок признания расходов по НДС установлен по оплате поставщику.
//
Функция ВыделятьНДСУСН(ПараметрыОтчета) Экспорт
	
	Возврат УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(ПараметрыОтчета.Организация, КонецДня(ПараметрыОтчета.КонецПериода)) = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику;
	
КонецФункции

// Возвращает дату изменения учетной политики по НДС.
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация, для которой необходимо получить дату изменения учетной политики.
//   ДатаОкончанияПериода - Дата - дата, до которой необходимо получить дату изменения учетной политики.
//
// Возвращаемое значение:
//   Дата - дата изменения учетной политики по НДС.
//
Функция ДатаИзмененияУчетнойПолитикиПоНДС(Организация, ДатаОкончанияПериода) Экспорт

	ДатаИзмененияУПпоНДС = '00010101';
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(ДатаОкончанияПериода) Тогда
		Возврат ДатаИзмененияУПпоНДС;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      ДатаОкончанияПериода);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиУчетаУСН.Период КАК Период,
	|	НастройкиУчетаУСН.ПорядокПризнанияРасходовПоНДС
	|ИЗ
	|	РегистрСведений.НастройкиУчетаУСН КАК НастройкиУчетаУСН
	|ГДЕ
	|	НастройкиУчетаУСН.Организация = &Организация
	|	И НастройкиУчетаУСН.Период < &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекущийРежимНДС = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Если ТекущийРежимНДС = Неопределено Тогда
			ТекущийРежимНДС    = Выборка.ПорядокПризнанияРасходовПоНДС;
			ДатаТекущегоРежима = Выборка.Период;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ПорядокПризнанияРасходовПоНДС) 
			И ТекущийРежимНДС <> Выборка.ПорядокПризнанияРасходовПоНДС Тогда
			ДатаИзмененияУПпоНДС = ДатаТекущегоРежима;
			Прервать;
		Иначе
			ДатаТекущегоРежима = Выборка.Период;
		КонецЕсли;
	КонецЦикла;

	Возврат ДатаИзмененияУПпоНДС;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоэффициентРаспределенияРасходов(СписокОрганизаций, Дата, Периодичность = "Квартал", Способ = "БУ")
	
	Если Дата >= УчетЕНВДКлиентСервер.ДатаОтменыЕНВД() Тогда
		
		// После отмены ЕНВД распределение возможно только при совмещении с ПСН.
		
		Если ТипЗнч(СписокОрганизаций) = Тип("СправочникСсылка.Организации") Тогда
			Организация = СписокОрганизаций;
		Иначе
			Если СписокОрганизаций.Количество() > 0 Тогда
				Организация = СписокОрганизаций[0];
			Иначе
				// Неверный параметр.
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		
		Возврат УчетПСН.ДоляДоходовПатентнойСистемыНалогообложения(Организация, Дата, Перечисления.Периодичность.Квартал);
		
	Иначе
		
		Возврат КоэффициентРаспределенияЕНВД(СписокОрганизаций, Дата, Периодичность, Способ);
		
	КонецЕсли;
	
КонецФункции

Функция КоэффициентРаспределенияЕНВД(СписокОрганизаций, Дата, Период = "Квартал", Способ = "БУ")
	
	Коэфф = 0;
	НачальнаяДата = ?(Период = "Квартал", НачалоКвартала(Дата), НачалоГода(Дата));
	
	Если Способ = "БУ" Тогда
		
		Коэфф = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СписокОрганизаций, НачальнаяДата, Дата);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачДата",           НачальнаяДата);
		Запрос.УстановитьПараметр("КонДата",           КонецМесяца(Дата));
		Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
		Запрос.Текст =
		
		"ВЫБРАТЬ
		|	СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот) КАК Графа5Оборот,
		|	СУММА(КнигаУчетаДоходовИРасходовОбороты.ДоходЕНВДОборот) КАК ДоходЕНВДОборот,
		|	СУММА(КнигаУчетаДоходовИРасходовОбороты.Графа4Оборот) КАК Графа4Оборот
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачДата, &КонДата, , Организация В (&СписокОрганизаций)) КАК КнигаУчетаДоходовИРасходовОбороты";
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			ДоходЕНВДОборот = ?(НЕ ЗначениеЗаполнено(Результат.ДоходЕНВДОборот), 0, Результат.ДоходЕНВДОборот);
			Графа4Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа4Оборот), 0, Результат.Графа4Оборот);
			Графа5Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа5Оборот), 0, Результат.Графа5Оборот);
			
			Если Способ = "НУ" Тогда
				
				Коэфф = ?(ДоходЕНВДОборот + Графа5Оборот = 0, 0, Результат.ДоходЕНВДОборот / (ДоходЕНВДОборот + Графа5Оборот));
				
			Иначе
				
				Коэфф = ?(Графа4Оборот = 0, 0, Результат.ДоходЕНВДОборот / Графа4Оборот);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Коэфф;
	
КонецФункции

Процедура ОтключениеТаблиц(КомпоновщикНастроек, ОтключитьТаблицы, Расшифровка)
	
	Если ОтключитьТаблицы Тогда                                                          		
		Для Каждого Таблица Из КомпоновщикНастроек.Настройки.Структура Цикл			
			Таблица.Использование = Таблица.Имя = Строка(Расшифровка);			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли