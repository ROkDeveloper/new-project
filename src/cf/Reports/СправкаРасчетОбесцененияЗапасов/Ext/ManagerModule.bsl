#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область БухгалтерскиеОтчеты

// Описывает свойства отчета (манифест), декларирующий поддержанные в нем возможности подсистемы,
// включая реализованный программный интерфейс.
//
Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Манифест = Новый Структура;
	Манифест.Вставить("ИспользоватьДанныеРасшифровки",      Истина);
	Манифест.Вставить("ИспользоватьПередКомпоновкойМакета", Истина);
	Манифест.Вставить("ИспользоватьПослеКомпоновкиМакета",  Истина);
	Манифест.Вставить("ИспользоватьПриВыводеЗаголовка",     Истина);
	Манифест.Вставить("ИспользоватьПослеВыводаРезультата",  Истина);
	
	СправкиРасчеты.УстановитьОтчетНеИспользуетНаборыСуммовыхПоказателей(Манифест);
	СправкиРасчеты.УстановитьВариантРасширенногоПервогоНалоговогоПериода(
		Манифест,
		БухгалтерскийУчет.ВариантРасширенногоПервогоНалоговогоПериода());
	
	Возврат Манифест;
	
КонецФункции

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление", "Основной", НСтр("ru = 'Обесценение запасов'")));
	
	Возврат Массив;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиБухгалтерскиеОтчеты

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПриВыводеЗаголовка.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//  Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПриВыводеЗаголовка(Контекст, КомпоновщикНастроек, Результат) Экспорт
	
	Контекст.ВыполнениеОтчета.Вставить(
		"ОтчетнаяДата",
		КонецМесяца(Контекст.КонецПериода) + 1);
		
	ПериодОтчета = ПериодОтчета(
		Контекст.НачалоПериода,
		Контекст.КонецПериода,
		Контекст.ВыполнениеОтчета.ОтчетнаяДата,
		Контекст.Организация);
		
	Контекст.ВыполнениеОтчета.Вставить("ПериодОтчета", ПериодОтчета);
	
	Если ПериодОтчета = Неопределено Тогда
		Контекст.Вставить("ВыводитьЕдиницуИзмерения", Ложь);
	КонецЕсли;
	
	СправкиРасчеты.ВывестиШапкуОтчета(Результат, Контекст);
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПередКомпоновкойМакета.
//
// Параметры:
//  Контекст			 - Структура - контекст, в котором формируется отчет.
//                         См. СправкиРасчеты.КонтекстФормированияОтчета.
//  Схема				 - СхемаКомпоновкиДанных - схема отчета.
//  КомпоновщикНастроек	 - КомпоновщикНастроекКомпоновкиДанных - описание связи настроек и схемы отчета.
//
Процедура ПередКомпоновкойМакета(Контекст, Схема, КомпоновщикНастроек) Экспорт
	
	Если РасчетОтсутствует(Контекст) Тогда
		
		// отменим показ отчета
		Схема.НаборыДанных.Очистить();
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВыводитьПодвал", Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	Контекст.ВыполнениеОтчета.Вставить(
		"АктуальныйПереченьОбесцененияЗапасов",
		Документы.ОбесценениеЗапасов.АктуальныйПеречень(Контекст.КонецПериода, Контекст.Организация));
		
	НастроитьПериодОтчета(
		КомпоновщикНастроек,
		Контекст.НачалоПериода,
		Контекст.КонецПериода,
		Контекст.ВыполнениеОтчета.ПериодОтчета);
		
	НастроитьОтборПоОрганизации(КомпоновщикНастроек, Контекст.Организация);
	
	СчетаОбесценения = РегистрыСведений.РасчетОбесцененияЗапасов.СчетаОбесценения();
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"СчетаРезервов",
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(СчетаОбесценения.ВыгрузитьКолонку("СчетРезерва")));
		
	ТекстыЗаголовковГруппКолонок = ЗаголовкиГруппКолонок(Контекст.НачалоПериода, Контекст.ВыполнениеОтчета.ОтчетнаяДата);
	
	БухгалтерскиеОтчеты.УстановитьЗаголовкиГруппКолонок(КомпоновщикНастроек, ТекстыЗаголовковГруппКолонок);
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПослеКомпоновкиМакета.
//
// Параметры:
//  Контекст		 - Структура - контекст, в котором формируется отчет.
//                     См. СправкиРасчеты.КонтекстФормированияОтчета.
//  МакетКомпоновки	 - МакетКомпоновкиДанных - сформированный макет компоновки данных.
//
Процедура ПослеКомпоновкиМакета(Контекст, МакетКомпоновки) Экспорт
	
	Если РасчетОтсутствует(Контекст) Тогда
		Возврат;
	КонецЕсли;
	
	СправкиРасчеты.НастроитьГрафыОтчета(МакетКомпоновки, ГрафыОтчета());
	
КонецПроцедуры

// Обработчик события подсистемы БухгалтерскиеОтчеты.
// Вызов определяется параметром ИспользоватьПослеВыводаРезультата.
//
// Параметры:
//  Контекст  - Структура - контекст, в котором формируется отчет.
//              См. СправкиРасчеты.КонтекстФормированияОтчета.
//  Результат - ТабличныйДокумент - табличный документ с сформированным отчетом.
//
Процедура ПослеВыводаРезультата(Контекст, Результат) Экспорт
	
	Если РасчетОтсутствует(Контекст) Тогда
		ВывестиРасчетОтсутствует(Результат, Контекст.КонецПериода);
		Возврат;
	КонецЕсли;
	
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	СправкиРасчеты.ОформитьРезультатОтчета(Результат, Контекст, Ложь);
	
	ВывестиПорядокРасчета(
		Результат,
		Контекст.НачалоПериода,
		Контекст.ВыполнениеОтчета.ОтчетнаяДата,
		Контекст.ВыполнениеОтчета.АктуальныйПереченьОбесцененияЗапасов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТонкаяНастройка

Функция ПериодОтчета(НачалоПериода, КонецПериода, ОтчетнаяДата, Организация)
	
	ПериодРасчета = РегистрыСведений.РасчетОбесцененияЗапасов.ПериодПредыдущегоРасчета(
		ОтчетнаяДата,
		Организация);
		
	Если ПериодРасчета < НачалоМесяца(КонецПериода) Или ПериодРасчета < НачалоПериода Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПериодРасчета;
	
КонецФункции

Функция РасчетОтсутствует(Контекст)
	
	Возврат Не Контекст.ВыполнениеОтчета.Свойство("ПериодОтчета")
		Или Контекст.ВыполнениеОтчета.ПериодОтчета = Неопределено;
	
КонецФункции

Процедура НастроитьПериодОтчета(КомпоновщикНастроек, НачалоПериода, КонецПериода, ПериодРасчета)
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"НачалоОтчетногоПериода",
		НачалоПериода);
		
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"КонецПредыдущегоОтчетногоПериода",
		НачалоМесяца(КонецПериода) - 1);
		
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек,
		"ПериодРасчета",
		ПериодРасчета);
	
КонецПроцедуры

Процедура НастроитьОтборПоОрганизации(КомпоновщикНастроек, Организация)
	
	ОписаниеОтбораПоОрганизации = Новый Структура;
	ОписаниеОтбораПоОрганизации.Вставить("Организация",                       Организация);
	ОписаниеОтбораПоОрганизации.Вставить("ВключатьОбособленныеПодразделения", Ложь);
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ОписаниеОтбораПоОрганизации, КомпоновщикНастроек);
	
КонецПроцедуры

Функция ГрафыОтчета()
	
	Разделы = Новый Соответствие;
	
	// Заголовки строк
	Разделы.Вставить(
		СправкиРасчеты.СлужебноеИмяЗаголовкиСтрок(),
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НСтр("ru = '1'")));
	
	// "НаНачалоПериода"
	ГрафыРаздела = Новый Массив;
	ГрафыРаздела.Добавить(НСтр("ru = '2'")); // ОбесценениеНачало
	Разделы.Вставить("НаНачалоПериода", ГрафыРаздела);
	
	// "НаКонецПериода"
	ГрафыРаздела = Новый Массив;
	ГрафыРаздела.Добавить(НСтр("ru = '3'")); // Количество
	ГрафыРаздела.Добавить(НСтр("ru = '4'")); // ЦенаПриобретения
	ГрафыРаздела.Добавить(НСтр("ru = '5'")); // Себестоимость
	ГрафыРаздела.Добавить(НСтр("ru = '6'")); // ЧистаяЦенаПродажи
	ГрафыРаздела.Добавить(НСтр("ru = '7'")); // ЧистаяСтоимостьПродажи
	ГрафыРаздела.Добавить(НСтр("ru = '8'")); // ОбесценениеКонец
	ГрафыРаздела.Добавить(НСтр("ru = '9'")); // ОбесценениеКонецПроцент
	Разделы.Вставить("НаКонецПериода", ГрафыРаздела);
	
	// "Изменение"
	ГрафыРаздела = Новый Массив;
	ГрафыРаздела.Добавить(НСтр("ru = '10'")); // Обесценение
	ГрафыРаздела.Добавить(НСтр("ru = '11'")); // ОбесценениеВыбытие
	ГрафыРаздела.Добавить(НСтр("ru = '12'")); // ОбесценениеУбыток
	Разделы.Вставить("Изменение", ГрафыРаздела);
	
	Возврат Разделы;
	
КонецФункции

Функция ЗаголовкиГруппКолонок(НачалоПериода, ОтчетнаяДата)
	
	Периоды = Новый Структура;
	Периоды.Вставить("НаНачалоПериода", НачалоПериода);
	Периоды.Вставить("НаКонецПериода",  ОтчетнаяДата);
	
	Шаблон = НСтр("ru = 'На %1'");
	
	Заголовки = Новый Структура;
	
	Для Каждого ОписаниеПериода Из Периоды Цикл
		Заголовки.Вставить(ОписаниеПериода.Ключ, СтрШаблон(Шаблон, Формат(ОписаниеПериода.Значение, "ДЛФ=D")));
	КонецЦикла;
	
	Возврат Заголовки;
	
КонецФункции

Процедура ВывестиРасчетОтсутствует(ТабличныйДокумент, Период)
	
	Шаблон = ПолучитьМакет("ПорядокРасчета");
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("Период",                            ПредставлениеПериода(НачалоМесяца(Период), КонецМесяца(Период)));
	ПараметрыТекста.Вставить("ПредставлениеДокумента",            Метаданные.Документы.ОбесценениеЗапасов.Синоним);
	ПараметрыТекста.Вставить("ПредставлениеРегламентнойОперации", Строка(Перечисления.ВидыРегламентныхОпераций.ОбесценениеЗапасов));
	
	ШаблонРасчетОтсутствует = Шаблон.ПолучитьОбласть("РасчетОтсутствует");
	ШаблонРасчетОтсутствует.Параметры.Заполнить(ПараметрыТекста);
	
	ТабличныйДокумент.Вывести(ШаблонРасчетОтсутствует);
	
КонецПроцедуры

Процедура ВывестиПорядокРасчета(ТабличныйДокумент, НачалоПериода, ОтчетнаяДата, АктуальныйПереченьОбесцененияЗапасов)
	
	Шаблон = ПолучитьМакет("ПорядокРасчета");
	
	// Заголовок
	ШаблонЗаголовок = Шаблон.ПолучитьОбласть("Заголовок");
	ТабличныйДокумент.Вывести(ШаблонЗаголовок);
	
	ДатаДокументаОбесценения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальныйПереченьОбесцененияЗапасов, "Дата");
	Если Не ЗначениеЗаполнено(ДатаДокументаОбесценения) Тогда
		ДатаДокументаОбесценения = ОтчетнаяДата - 1;
	КонецЕсли;
	
	ПараметрыТекста = Новый Структура;
	ПараметрыТекста.Вставить("НачалоПериода",            Формат(НачалоПериода,            "ДЛФ=D"));
	ПараметрыТекста.Вставить("ОтчетнаяДата",             Формат(ОтчетнаяДата,             "ДЛФ=D"));
	ПараметрыТекста.Вставить("ДатаДокументаОбесценения", Формат(ДатаДокументаОбесценения, "ДЛФ=D"));
	ПараметрыТекста.Вставить("ПредставлениеДокумента",   Метаданные.Документы.ОбесценениеЗапасов.Синоним);
	
	ШаблонПорядокРасчета = Шаблон.ПолучитьОбласть("ПорядокРасчета");
	
	ШаблонПорядокРасчета.Параметры.Заполнить(ПараметрыТекста);
	
	ТабличныйДокумент.Вывести(ШаблонПорядокРасчета);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
