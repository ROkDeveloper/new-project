#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Процедура заполняет описание сервисов, чтобы отобразить их на форме.
// 
// Параметры:
//  ОписанияСервисов - ТаблицаЗначений - Описания сервисов, которые поддерживают обмен с АУСН
//
Процедура ЗаполнитьОписанияСервисов(ОписанияСервисов) Экспорт
	
	ОписанияСервисов.Очистить();
	
	БанкиНеПоддерживающиеПередачуНДФЛ = БанкиНеПоддерживающиеПередачуНДФЛ();
	МассивИдентификаторов = Новый Массив;
	Для Каждого Банк из БанкиАУСН() Цикл
		СтруктураНаименования = ОбщегоНазначенияБПКлиентСервер.РазложитьСтрокуНаименования(Банк.Наименование);
		ОписаниеСервиса = НовыйОписаниеСервиса();
		ОписаниеСервиса.ИмяСервиса = СтруктураНаименования.Наименование;
		Идентификатор = СокрЛП(СтрЗаменить(Банк.Идентификатор, "-", ""));
		Если МассивИдентификаторов.Найти(Идентификатор) <> Неопределено Тогда
			Идентификатор = СокрЛП(СтрЗаменить(Банк.Ссылка.УникальныйИдентификатор(), "-", ""));
		КонецЕсли;
		ОписаниеСервиса.ИмяЭлементов = Идентификатор;
		МассивИдентификаторов.Добавить(Идентификатор);
		ОписаниеСервиса.БИКБанка = Банк.БИК;
		ОписаниеСервиса.Сервис = Банк.Ссылка;
		Если БанкиНеПоддерживающиеПередачуНДФЛ.Найти(Банк.Ссылка) <> Неопределено Тогда
			ОписаниеСервиса.Описание = ОписаниеОбменаСБанками(Ложь);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОписанияСервисов.Добавить(), ОписаниеСервиса);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу с описанными возможностями сервисов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описанные возможности сервисов - см. НовыйТаблицаВозможностиСервисов()
//
Функция ОписанныеВозможностиСервисов() Экспорт
	
	ОписанныеСервисы = НовыйТаблицаВозможностиСервисов();
	
	// Особо опишем ФНС
	ФНС = НовыйВозможностиСервиса();
	ФНС.Сервис = Справочники.КлассификаторБанков.ПустаяСсылка();
	ФНС.ИмяСервиса         = "ФНС";
	ФНС.ИмяЭлементов       = "ФНС";
	ФНС.РазметкаОпераций   = Ложь;
	ЗаполнитьЗначенияСвойств(ОписанныеСервисы.Добавить(), ФНС);
	
	// Обработаем все банки АУСН
	БанкиНеПоддерживающиеПередачуНДФЛ = БанкиНеПоддерживающиеПередачуНДФЛ();
	МассивИдентификаторов = Новый Массив;
	Для Каждого Банк Из БанкиАУСН() Цикл
		ВозможностьСервиса = НовыйВозможностиСервиса();
		ВозможностьСервиса.Сервис     = Банк.Ссылка;
		ВозможностьСервиса.ИмяСервиса = Банк.Ссылка;
		Идентификатор = СокрЛП(СтрЗаменить(Банк.Идентификатор, "-", ""));
		Если МассивИдентификаторов.Найти(Идентификатор) <> Неопределено Тогда
			Идентификатор = СокрЛП(СтрЗаменить(Банк.Ссылка.УникальныйИдентификатор(), "-", ""));
		КонецЕсли;
		ВозможностьСервиса.ИмяЭлементов = Идентификатор;
		МассивИдентификаторов.Добавить(Идентификатор);
		Если БанкиНеПоддерживающиеПередачуНДФЛ.Найти(Банк.Ссылка) <> Неопределено Тогда
			ВозможностьСервиса.ПередачаНДФЛ = Ложь;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОписанныеСервисы.Добавить(), ВозможностьСервиса);
	КонецЦикла;
	
	Возврат ОписанныеСервисы;
	
КонецФункции

// Процедура заполняет описание сервисов, чтобы отобразить их на форме.
// 
// Параметры:
//  ВозможностиСервисов - ТаблицаЗначений - Возможности сервисов, которые поддерживают обмен с АУСН
//
Процедура ЗаполнитьВозможностиСервисов(ВозможностиСервисов) Экспорт
	
	ОписанныеСервисы = ОписанныеВозможностиСервисов();
	
	Для Каждого ОписаниеВозможностиСервиса Из ВозможностиСервисов Цикл
		СтруктураПоиска = Новый Структура("Сервис", ОписаниеВозможностиСервиса.Сервис);
		Строки = ОписанныеСервисы.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() = 0 Тогда
			СтрокаЗаполнения = НовыйВозможностиСервиса();
		Иначе
			СтрокаЗаполнения = Строки[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОписаниеВозможностиСервиса, СтрокаЗаполнения, , "Сервис, ИмяСервиса, ИмяЭлементов");
	КонецЦикла;
	
КонецПроцедуры

// Новый конструктор возможности сервиса.
// 
// Возвращаемое значение:
//  Структура - Новый возможности сервиса:
// * Сервис - СправочникСсылка.КлассификаторБанков
// * ИмяСервиса - Строка
// * ИмяЭлементов - Строка 
// * РазметкаОпераций - Булево 
// * РасчетНалога - Булево
// * ПлатежныеРеквизиты - Булево 
// * УведомленияОтФНС - Булево
// * ПередачаНДФЛ - Булево
//
Функция НовыйВозможностиСервиса() Экспорт
	
	ВозможностиСервиса = Новый Структура;
	ВозможностиСервиса.Вставить("Сервис",             Справочники.КлассификаторБанков.ПустаяСсылка());
	ВозможностиСервиса.Вставить("ИмяСервиса",         "");
	ВозможностиСервиса.Вставить("ИмяЭлементов",       "");
	ВозможностиСервиса.Вставить("РазметкаОпераций",   Истина);
	ВозможностиСервиса.Вставить("РасчетНалога",       Истина);
	ВозможностиСервиса.Вставить("ПлатежныеРеквизиты", Истина);
	ВозможностиСервиса.Вставить("УведомленияОтФНС",   Истина);
	ВозможностиСервиса.Вставить("ПередачаНДФЛ",       Истина);
	
	Возврат ВозможностиСервиса;
	
КонецФункции

// Возвращает описание сервиса.
// 
// Возвращаемое значение:
//  Структура - Описание сервиса:
// * ИмяСервиса - Строка - Используется в заголовке декораций
// * Описание - Строка - Описание обмена с сервисом. Описываются основные функции
// * ИмяЭлементов - Строка - Постфикс элементов для создания элементов на форме
// * ИмяКартинкиПодключено - Строка - Имя картинки, которую показываем когда обмен подключен
// * ИмяКартинкиНеПодключено - Строка - Имя картинки, которую показываем когда обмен не подключен
// * БИКБанка - Строка - Код банка, чтобы найти Банк по классификатору
// * Сервис - СправочникСсылка.КлассификаторБанков - Банк по классификатору
//
Функция НовыйОписаниеСервиса() Экспорт
	
	ОписаниеСервиса = Новый Структура;
	ОписаниеСервиса.Вставить("ИмяСервиса", "");
	ОписаниеСервиса.Вставить("Описание", ОписаниеОбменаСБанками());
	ОписаниеСервиса.Вставить("ИмяЭлементов", СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", ""));
	ОписаниеСервиса.Вставить("ИмяКартинкиПодключено", "ИнтеграцияАУСНПодключен");
	ОписаниеСервиса.Вставить("ИмяКартинкиНеПодключено", "СинхронизацияОтключена");
	ОписаниеСервиса.Вставить("БИКБанка", "");
	ОписаниеСервиса.Вставить("Сервис", Справочники.КлассификаторБанков.ПустаяСсылка());
	
	Возврат ОписаниеСервиса;
	
КонецФункции

// Возвращает массив банков, которые пока не поддерживают передачу НДФЛ.
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.КлассификаторБанков - Банки не поддерживающие передачу НДФЛ
//
Функция БанкиНеПоддерживающиеПередачуНДФЛ() Экспорт
	
	МассивБанков = Новый Массив;
	МассивБанков.Добавить(РаботаСБанкамиБП.СсылкаПоКлассификатору("044525092"));
	
	Возврат МассивБанков;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОписаниеОбменаСБанками(ЕстьПередачаНДФЛ = Истина)
	
	Если ЕстьПередачаНДФЛ Тогда
		Возврат НСтр("ru = 'Обмен позволяет определять какие из операций относятся к налоговой базе АУСН и на какую сумму, а также позволяет передавать информацию о расчетах НДФЛ'");
	Иначе
		Возврат НСтр("ru = 'Обмен позволяет определять какие из операций относятся к налоговой базе АУСН и на какую сумму'");
	КонецЕсли;
	
КонецФункции

Функция БанкиАУСН()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанкиАУСН.Банк КАК Ссылка,
	|	КлассификаторБанков.Наименование,
	|	КлассификаторБанков.Код КАК БИК,
	|	БанкиАУСН.Идентификатор
	|ИЗ
	|	РегистрСведений.БанкиАУСН КАК БанкиАУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО БанкиАУСН.Банк = КлассификаторБанков.Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция НовыйТаблицаВозможностиСервисов()
	
	ТаблицаВозможностиСервисов = Новый ТаблицаЗначений;
	Для Каждого КлючИЗначение Из НовыйВозможностиСервиса() Цикл
		ТаблицаВозможностиСервисов.Колонки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат ТаблицаВозможностиСервисов;
	
КонецФункции

#КонецОбласти

#КонецЕсли