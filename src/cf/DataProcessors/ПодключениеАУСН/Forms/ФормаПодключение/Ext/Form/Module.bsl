#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОсновнаяОрганизация = Неопределено;
	ИнтеграцияАУСНПереопределяемый.ПолучитьОсновнуюОрганизацию(ОсновнаяОрганизация);
	Объект.Организация = ОсновнаяОрганизация;   
	
	Элементы.Организация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		Или Не ЗначениеЗаполнено(Объект.Организация);
	Элементы.ОрганизацияСсылка.Видимость = Не Элементы.Организация.Видимость;
    
	ПрочитатьРеквизитыОрганизации(ЭтотОбъект);
	
	ОбсужденияНастройкаДоступна = ПравоДоступа("АдминистрированиеДанных", Метаданные);
	ОбсужденияПодключены = УведомленияОтФНСАУСНВызовСервера.ОбсужденияПодключены();
	
	Обработки.ПодключениеАУСН.ЗаполнитьОписанияСервисов(ОписанияСервисов);
	Для Каждого ОписаниеСервиса Из ОписанияСервисов Цикл
		СоздатьЭлементыФормыГруппыСервиса(ОписаниеСервиса);
	КонецЦикла;

	ЗаполнитьСостоянияПодключения();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда  
		// Получаем список банков, которые зарегистрированы в сервисе
		ВыполнитьМетодВФоне("СписокБанков"); 
	Иначе
		ОтобразитьПодключениеКПорталу("СписокБанков");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбсужденияПодключены" Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		ОбсужденияПодключены = УведомленияОтФНСАУСНВызовСервера.ОбсужденияПодключены();
		Если ОбсужденияПодключены Тогда
			УведомленияОтФНСАУСНКлиент.Подключить();
			УведомленияОтФНСАУСНКлиент.ПоказатьНовыеОповещения();
		КонецЕсли;
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ПодключенСервисФНС" Тогда
		СостояниеПодключения = СостоянияПодключения.НайтиСтроки(
			Новый Структура("Сервис", ПредопределенноеЗначение("Справочник.КлассификаторБанков.ПустаяСсылка")))[0];
		СостояниеПодключения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Подключено");
		ПолучитьДанныеВФоне();
		УправлениеФормой(ЭтотОбъект);

		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Организация", Объект.Организация);
		ПараметрОповещения.Вставить("Банк",  ПредопределенноеЗначение("Справочник.КлассификаторБанков.ПустаяСсылка"));
		Оповестить("ИнтеграцияАУСН_ИзмененоСостояние", ПараметрОповещения);
	ИначеЕсли ИмяСобытия = "ИнтеграцияАУСН_ПодключенБанк" Тогда
		Если Не Параметр.СервисПодключен Тогда
			Возврат;
		КонецЕсли;
		СостояниеПодключения = СостоянияПодключения.НайтиСтроки(Новый Структура("Сервис", Параметр.Банк))[0];
		СостояниеПодключения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Подключено");
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Организация", Объект.Организация);
		ПараметрОповещения.Вставить("Банк", Параметр.Банк);
		Оповестить("ИнтеграцияАУСН_ИзмененоСостояние", ПараметрОповещения);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименяемаяСистемаНалогообложенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = ОбщегоНазначенияБПКлиентСервер.ПараметрыОткрытияФормыСОжиданием();
	ПараметрыОткрытия.ИмяФормы = "ОбщаяФорма.НалогиИОтчеты";
	ПараметрыОткрытия.Владелец = ЭтотОбъект;
	ПараметрыОткрытия.Заголовок = НСтр("ru = 'Настройки налогов и отчетов'");
	ПараметрыОткрытия.Уникальность = УникальныйИдентификатор;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("РежимНастройки", Истина);
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	
	ОбщегоНазначенияБПКлиент.ОткрытьФормуСОжиданием(ПараметрыОткрытия, ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаПодключитьФНС(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	ОткрытьФорму(
		"Обработка.ПодключениеАУСН.Форма.ФормаПодключениеФНС",
		СтруктураПараметров,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтключитьФНС(Команда)
	
	КомандаОтключитьФНСНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодключитьОбсуждения(Команда)
	
	МодульОбсужденияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияКлиент");
	МодульОбсужденияКлиент.ПоказатьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтключитьОбсуждения(Команда)
	
	МодульОбсужденияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияКлиент");
	МодульОбсужденияКлиент.ПоказатьОтключение();
	
КонецПроцедуры

&НаКлиенте
Процедура Повторить(Команда)
	
	Если Не ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		Метод = "СписокБанков";
		ОтобразитьПодключениеКПорталу(Метод);
	Иначе
		СостояниеФормы = ВсеСостоянияФормы().Подключение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОтправляемыхДанных(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ОписанияСервисов", ОписанияСервисов);
	ПараметрыФормы.Вставить("СостоянияПодключения", СостоянияПодключения);
	
	ОткрытьФорму("Обработка.ПодключениеАУСН.Форма.СоставДанныхОбмена", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СозданиеЭлементовФормы

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураЭлементовГруппыСервиса()
	
	СтруктураЭлементов = Новый Структура;
	СтруктураЭлементов.Вставить("ОсновнаяГруппа",     "Группа");
	СтруктураЭлементов.Вставить("ГруппаЗаголовок",    "ГруппаЗаголовок");
	СтруктураЭлементов.Вставить("Логотип",            "Логотип");
	СтруктураЭлементов.Вставить("КартинкаПодключено", "КартинкаПодключено");
	СтруктураЭлементов.Вставить("КартинкаОтключено",  "КартинкаОтключено");
	СтруктураЭлементов.Вставить("Заголовок",          "ТекстОбмен");
	СтруктураЭлементов.Вставить("Описание",           "ДекорацияОписание");
	СтруктураЭлементов.Вставить("Кнопки",             "ГруппаКнопки");
	СтруктураЭлементов.Вставить("КомандаПодключить",  "КомандаПодключить");
	СтруктураЭлементов.Вставить("КомандаОтключить",   "КомандаОтключить");
	
	Возврат СтруктураЭлементов;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементыФормыГруппыСервиса(ОписаниеСервиса)
	
	СтруктураЭлементов = СтруктураЭлементовГруппыСервиса();
	ТекстыЭлементов    = ТекстыЗаголовков();
	
	Если Элементы.Найти(СтруктураЭлементов.ОсновнаяГруппа + ОписаниеСервиса.ИмяЭлементов) <> Неопределено Тогда
		// Эта группа уже создана
		Возврат;
	КонецЕсли;
	
	ОсновнаяГруппа = Элементы.Вставить(
		СтруктураЭлементов.ОсновнаяГруппа + ОписаниеСервиса.ИмяЭлементов,
		Тип("ГруппаФормы"),
		Элементы.ГруппаБанки);
	ОсновнаяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ОсновнаяГруппа.Видимость = Истина;
	ОсновнаяГруппа.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
	ОсновнаяГруппа.Заголовок = ОписаниеСервиса.ИмяСервиса;
	ОсновнаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ОсновнаяГруппа.ОтображатьЗаголовок = Ложь;
	
	// Заголовок
	ГруппаЗаголовок = Элементы.Вставить(
		СтруктураЭлементов.ГруппаЗаголовок + ОписаниеСервиса.ИмяЭлементов,
		Тип("ГруппаФормы"),
		ОсновнаяГруппа);
	ГруппаЗаголовок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЗаголовок.Заголовок = СтруктураЭлементов.ГруппаЗаголовок;
	ГруппаЗаголовок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаЗаголовок.ВертикальноеПоложениеПодчиненных = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаЗаголовок.РастягиватьПоГоризонтали = Истина;
	ГруппаЗаголовок.ОтображатьЗаголовок = Ложь;

	СостояниеПодключено = Элементы.Вставить(СтруктураЭлементов.КартинкаПодключено + ОписаниеСервиса.ИмяЭлементов,
		Тип("ДекорацияФормы"),
		ГруппаЗаголовок);
	СостояниеПодключено.Вид = ВидДекорацииФормы.Картинка;
	СостояниеПодключено.РазмерКартинки = РазмерКартинки.Пропорционально;
	СостояниеПодключено.Картинка = БиблиотекаКартинок[ОписаниеСервиса.ИмяКартинкиПодключено];
	СостояниеПодключено.Заголовок = СтруктураЭлементов.КартинкаПодключено;
	СостояниеПодключено.Высота = 2;
	СостояниеПодключено.Ширина = 5;
	
	СостояниеОтключено = Элементы.Вставить(СтруктураЭлементов.КартинкаОтключено + ОписаниеСервиса.ИмяЭлементов,
		Тип("ДекорацияФормы"),
		ГруппаЗаголовок);
	СостояниеОтключено.Вид = ВидДекорацииФормы.Картинка;
	СостояниеОтключено.Картинка = БиблиотекаКартинок[ОписаниеСервиса.ИмяКартинкиНеПодключено];
	СостояниеОтключено.РазмерКартинки = РазмерКартинки.Пропорционально;
	СостояниеОтключено.Заголовок = СтруктураЭлементов.КартинкаОтключено;
	СостояниеОтключено.Высота = 2;
	СостояниеОтключено.Ширина = 5;
	
	ТекстОписания = Элементы.Вставить(СтруктураЭлементов.Заголовок + ОписаниеСервиса.ИмяЭлементов,
		Тип("ДекорацияФормы"),
		ГруппаЗаголовок);
	ТекстОписания.Вид = ВидДекорацииФормы.Надпись;
	ТекстОписания.Заголовок = СтрШаблон(ТекстыЭлементов.ТекстПодключен, ОписаниеСервиса.ИмяСервиса);
	ТекстОписания.Шрифт = ШрифтыСтиля.КрупныйШрифтТекста;
	ТекстОписания.АвтоМаксимальнаяШирина = Ложь;
	
	// Описание обмена
	ТекстОбмена = Элементы.Вставить(
		СтруктураЭлементов.Описание + ОписаниеСервиса.ИмяЭлементов,
		Тип("ДекорацияФормы"),
		ОсновнаяГруппа);
	ТекстОбмена.Вид = ВидДекорацииФормы.Надпись;
	ТекстОбмена.Заголовок = ОписаниеСервиса.Описание;
	ТекстОбмена.Ширина = 50;
	
	// Кнопки
	ГруппаКнопки = Элементы.Вставить(
		СтруктураЭлементов.Кнопки + ОписаниеСервиса.ИмяЭлементов,
		Тип("ГруппаФормы"),
		ОсновнаяГруппа);
	ГруппаКнопки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаКнопки.Заголовок = СтруктураЭлементов.Кнопки;
	ГруппаКнопки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	ГруппаКнопки.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
	ГруппаКнопки.ОтображатьЗаголовок = Ложь;
	
	// Команда "Подключить"
	ИмяКоманды = СтруктураЭлементов.КомандаПодключить + ОписаниеСервиса.ИмяЭлементов;
	НоваяКоманда = Команды.Добавить(ИмяКоманды);
	НоваяКоманда.Заголовок = ТекстыЭлементов.Подключить;
	НоваяКоманда.Действие = "КомандаПодключитьБанк";
	КнопкаПодключить = Элементы.Вставить(
		ИмяКоманды,
		Тип("КнопкаФормы"), ГруппаКнопки);
	КнопкаПодключить.ИмяКоманды = ИмяКоманды;
	КнопкаПодключить.ЦветФона = ЦветаСтиля.ЦветАктивности;
	КнопкаПодключить.Шрифт = ШрифтыСтиля.ШрифтКнопкиПодключенияАУСН;
	
	// Команда "Отключить"
	ИмяКоманды = СтруктураЭлементов.КомандаОтключить + ОписаниеСервиса.ИмяЭлементов;
	НоваяКоманда = Команды.Добавить(ИмяКоманды);
	НоваяКоманда.Заголовок = ТекстыЭлементов.Отключить;
	НоваяКоманда.Действие = "КомандаОтключитьБанк";
	КнопкаОтключить = Элементы.Вставить(
		ИмяКоманды,
		Тип("КнопкаФормы"), ГруппаКнопки);
	КнопкаОтключить.ИмяКоманды = ИмяКоманды;
	КнопкаОтключить.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстыЗаголовков()
	
	СтруктураТекстов = Новый Структура;
	СтруктураТекстов.Вставить("Подключить",       НСтр("ru = 'Подключить'"));
	СтруктураТекстов.Вставить("Проверить",        НСтр("ru = 'Проверить'"));
	СтруктураТекстов.Вставить("Отключить",        НСтр("ru = 'Отключить (не рекомендуется)'"));
	СтруктураТекстов.Вставить("ТекстПодключен",   НСтр("ru = '%1 подключен'"));
	СтруктураТекстов.Вставить("ТекстНеПодключен", НСтр("ru = '%1 не подключен'"));
	СтруктураТекстов.Вставить("ТекстОшибка",      НСтр("ru = '%1 есть ошибки'"));	
	Возврат СтруктураТекстов;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияССервисами

&НаСервереБезКонтекста
Функция ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки()
	
	Возврат ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьПодключениеКПорталу(Метод = "", Ответ = Неопределено)
	
	ИмяОбработчикаЗавершения = ?(Метод = "СписокБанков",
		"Подключаемый_ПолучитьСписокБанков",
		"Подключаемый_ЗавершитьОбработкуОшибки");
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Метод", Метод);
	ДополнительныеПараметры.Вставить("Ответ", Ответ);
	ДополнительныеПараметры.Вставить("ФормаВладелец" , ЭтотОбъект);
	ОбработчикЗавершения = Новый ОписаниеОповещения(
		ИмяОбработчикаЗавершения, ЭтотОбъект, ДополнительныеПараметры);
	ИнтеграцияАУСНКлиент.ОтобразитьПодключениеКПорталу(ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеВФоне()
	
	Метод = ИнтеграцияАУСНКлиентСервер.ИменаМетодовВзаимодействияИнтеграцияСЛК().ПолучитьУведомления;
	ДлительнаяОперация = ДлительнаяОперацияПолучитьУведомленияНаСервере(Метод);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПолучитьУведомленияЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьУведомленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Статус = "Ошибка" Тогда
		Возврат;
	КонецЕсли;
	Если ОбсужденияПодключены Тогда
		УведомленияОтФНСАУСНКлиент.ПоказатьНовыеОповещения();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ДлительнаяОперацияПолучитьУведомленияНаСервере(Метод)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Организация", Объект.Организация);
	ПараметрыПроцедуры.Вставить("МетодВзаимодействия", Метод);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияАУСН.ВыполнитьВФоне", 
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Функция ПараметрыВыполненияМетода(Метод, Банк = Неопределено)
	
	ПараметрыМетода = ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия(Метод);
	Если ПараметрыМетода.Свойство("ИдентификаторБанка") И ЗначениеЗаполнено(Банк) Тогда
		ПараметрыМетода.ИдентификаторБанка = ИнтеграцияАУСНВызовСервераПовтИсп.ИдентификаторБанкаПоКлассификатору(Банк);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, Объект);
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, ЭтотОбъект);
	
	Возврат ПараметрыМетода;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьМетодВФоне(Метод, Банк = Неопределено)
	
	СостояниеФормы = ВсеСостоянияФормы().Ожидание;
	УправлениеФормой(ЭтотОбъект);
	
	ПараметрыМетода = ПараметрыВыполненияМетода(Метод, Банк);
	ДлительнаяОперация = ВыполнитьМетодВФонеНаСервере(
		ПараметрыМетода, УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		ОпределитьСостояниеФормы(ЭтотОбъект);
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Метод", Метод);
	Если ЗначениеЗаполнено(Банк) Тогда
		ДополнительныеПараметры.Вставить("Банк", Банк);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	Обработчик = Новый ОписаниеОповещения("ОбработкаВыполненияМетода", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьМетодВФонеНаСервере(Знач ПараметрыМетода, Знач ИдентификаторФормы)
	
	Возврат ИнтеграцияАУСН.ВыполнитьВФоне(ПараметрыМетода, ИдентификаторФормы);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыполненияМетода(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = ОтветМетода(Результат, ДополнительныеПараметры.Метод);
	
	Если Ответ <> Неопределено Тогда
		ОбработкаОтветаМетода(Ответ, ДополнительныеПараметры);
	Иначе
		СостояниеФормы = ВсеСостоянияФормы().Подключение;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОтветМетода(Результат, Метод)

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ЗаписатьОшибкуВЖурналРегистрации(
			Результат.КраткоеПредставлениеОшибки,
			Результат.ПодробноеПредставлениеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Ответ = ?(ЭтоАдресВременногоХранилища(Результат.АдресРезультата), 
		ПолучитьИзВременногоХранилища(Результат.АдресРезультата), 
		Неопределено);
	
	Возврат Ответ;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач КраткоеПредставлениеОшибки, Знач ПодробноеПредставлениеОшибки)
	
	ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаМетода(Ответ, ДополнительныеПараметры)
	
 	СтатусыЗапросов = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов();
	
	Если Ответ.Статус = СтатусыЗапросов.Выполнено Тогда
		
		Если ДополнительныеПараметры.Метод = "СписокБанков" Тогда
			ОбработатьОтвет_СписокБанков(Ответ.Результат, ДополнительныеПараметры);
		ИначеЕсли ДополнительныеПараметры.Метод = "ОтключитьБанк" Тогда
			ОбработатьОтвет_ОтключитьБанк(ДополнительныеПараметры);
		Иначе
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
		
	ИначеЕсли Ответ.Статус = СтатусыЗапросов.Ошибка Тогда
		
		КодСостояния = Ответ.КодСостояния;
			
		Если КодСостояния = 401 И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			
			// Требуется подключение к Порталу
			ОтобразитьПодключениеКПорталу(ДополнительныеПараметры.Метод, Ответ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьСписокБанков(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Действие = "Повторить" Тогда
		
		ВыполнитьМетодВФоне("СписокБанков");
		
	Иначе
		
		ПредставлениеОшибки = НСтр("ru = 'Подключение к Интернет-поддержке не выполнено'");
		СостояниеФормы = ВсеСостоянияФормы().Ошибка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗавершитьОбработкуОшибки(Результат, ПараметрыЗавершения) Экспорт
	
	Если Результат.Действие = "Повторить" Тогда
		
		ВыполнитьМетодВФоне(ПараметрыЗавершения.Метод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтвет_СписокБанков(Результат, ПараметрыМетода)
	
	Если ЭтоАдресВременногоХранилища(АдресСпискаБанков) Тогда
		УдалитьИзВременногоХранилища(АдресСпискаБанков);
	КонецЕсли;
	БанкиЗагружены = Истина;
	ОбновитьСписокБанков(Результат);
	ОпределитьСостояниеФормы(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.БанкиАУСН"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокБанков(РезультатВыполненияМетода)
	
	ПодключенныеБанки = ИнтеграцияАУСН.ОбновитьСписокБанков(РезультатВыполненияМетода);
	Для Каждого ПодключенныйБанк Из ПодключенныеБанки Цикл
		СтруктураПоиска = Новый Структура("Сервис", ПодключенныйБанк.Банк);
		Если ОписанияСервисов.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			// Если не найдено описание, то заполним его данными по умолчанию
			НовоеОписание = Обработки.ПодключениеАУСН.НовыйОписаниеСервиса();
			НовоеОписание.Сервис = ПодключенныйБанк.Банк;
			СтруктураНаименования = ОбщегоНазначенияБПКлиентСервер.РазложитьСтрокуНаименования(ПодключенныйБанк.Банк);
			НовоеОписание.ИмяСервиса = СтруктураНаименования.Наименование;
			НовоеОписание.ИмяЭлементов = СтрЗаменить(ПодключенныйБанк.Идентификатор, "-", "");
			ЗаполнитьЗначенияСвойств(ОписанияСервисов.Добавить(), НовоеОписание);
			СоздатьЭлементыФормыГруппыСервиса(НовоеОписание);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтвет_ОтключитьБанк(ПараметрыМетода)
	
	ОтключитьБанкНаСервере(ПараметрыМетода.Банк);
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.СостоянияИнтеграцииАУСН"));
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Организация", ПараметрыМетода.Организация);
	ПараметрОповещения.Вставить("Банк", ПараметрыМетода.Банк);
	Оповестить("ИнтеграцияАУСН_ИзмененоСостояние", ПараметрОповещения);
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.СостоянияИнтеграцииАУСН"));
	
	ОпределитьСостояниеФормы(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиВыполненияКоманд

//@skip-check module-unused-method
&НаКлиенте
Процедура КомандаПодключитьБанк(Команда)
	
	СтруктураЭлементов = СтруктураЭлементовГруппыСервиса();
	ИмяЭлементов = СтрЗаменить(Команда.Имя, СтруктураЭлементов.КомандаПодключить, "");
	ОписаниеСервиса = ОписанияСервисов.НайтиСтроки(
		Новый Структура("ИмяЭлементов", ИмяЭлементов))[0];
	ОткрытьФормуПодключенияБанка(ОписаниеСервиса);
	
КонецПроцедуры

//@skip-check module-unused-method
&НаКлиенте
Процедура КомандаОтключитьБанк(Команда)
	
	СостояниеФормы = ВсеСостоянияФормы().Ожидание;
	УправлениеФормой(ЭтотОбъект);
	СтруктураЭлементов = СтруктураЭлементовГруппыСервиса();
	ИмяЭлементов = СтрЗаменить(Команда.Имя, СтруктураЭлементов.КомандаОтключить, "");
	ОписаниеСервиса = ОписанияСервисов.НайтиСтроки(
		Новый Структура("ИмяЭлементов", ИмяЭлементов))[0];
	
	ВыполнитьМетодВФоне("ОтключитьБанк", ОписаниеСервиса.Сервис);
	
КонецПроцедуры

&НаСервере
Процедура КомандаОтключитьФНСНаСервере()
	
	РегистрыСведений.СостоянияИнтеграцииАУСН.ЗаписатьСостояниеИнтеграцииЛКАУСН(
		Объект.Организация,
		Перечисления.СостоянияИнтеграцииАУСН.Отключено,
		"");
		
	Строки = СостоянияПодключения.НайтиСтроки(
		Новый Структура(
			"Сервис", 
			ПредопределенноеЗначение("Справочник.КлассификаторБанков.ПустаяСсылка")));
	Для Каждого Строка Из Строки Цикл
		Строка.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Отключено");
	КонецЦикла;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенияБанка(ОписаниеСервиса)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Банк", ОписаниеСервиса.Сервис);
	СтруктураПараметров.Вставить("ИмяЭлементов", ОписаниеСервиса.ИмяЭлементов);
	СтруктураПараметров.Вставить("ИмяКартинкиПодключено", ОписаниеСервиса.ИмяКартинкиПодключено);
	СтруктураПараметров.Вставить("ИмяКартинкиНеПодключено", ОписаниеСервиса.ИмяКартинкиНеПодключено);
	СтруктураПараметров.Вставить("ИмяБанка", ОписаниеСервиса.ИмяСервиса);
	
	ОткрытьФорму(
		"Обработка.ПодключениеАУСН.Форма.ФормаПодключениеБанка",
		СтруктураПараметров,
		ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьБанкНаСервере(Банк)
	
	РегистрыСведений.СостоянияИнтеграцииАУСН.ЗаписатьСостояниеИнтеграции(
		Объект.Организация,
		Банк,
		Перечисления.СостоянияИнтеграцииАУСН.Отключено);
	
	СостояниеПодключения = СостоянияПодключения.НайтиСтроки(Новый Структура("Сервис", Банк))[0];
	СостояниеПодключения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Отключено");
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьСостояниеФормы(Форма)
	
	СостоянияФормы = ВсеСостоянияФормы();
	Если Не ЗначениеЗаполнено(Форма.Объект.Организация) Тогда
		Форма.СостояниеФормы = СостоянияФормы.НеЗаполнено;
	ИначеЕсли Не Форма.ПрименяетсяАУСН Тогда
		Форма.СостояниеФормы = СостоянияФормы.НекорректныеРеквизиты;
	Иначе
		Форма.СостояниеФормы = СостоянияФормы.Подключение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеСервиса(Сервис, ОписанияСервисов)
	
	НайденныеСтроки = ОписанияСервисов.НайтиСтроки(Новый Структура("Сервис", Сервис));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НайденныеСтроки[0];
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВсеСостоянияФормы()
	
	Результат = Новый Структура;
	Результат.Вставить("НеЗаполнено", "Не заполнены обязательные реквизиты");
	Результат.Вставить("НекорректныеРеквизиты", "Некорректные значения реквизитов");
	Результат.Вставить("Ожидание", "Ожидание фоновой операции");
	Результат.Вставить("Подключение", "Подключение");
	Результат.Вставить("Ошибка", "Ошибка выполнения метода");
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСостоянияПодключения()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Банки.Код,
	|	Банки.КоррСчет
	|ПОМЕСТИТЬ ВТ_БанкиОрганизации
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Банки КАК Банки
	|		ПО БанковскиеСчета.Банк = Банки.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КлассификаторБанков.Ссылка
	|ПОМЕСТИТЬ ВТ_БанкиПоКлассификатору
	|ИЗ
	|	ВТ_БанкиОрганизации КАК ВТ_БанкиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО ВТ_БанкиОрганизации.Код = КлассификаторБанков.Код
	|		И ВТ_БанкиОрганизации.КоррСчет = КлассификаторБанков.КоррСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка) КАК Банк,
	|	ЗНАЧЕНИЕ(Перечисление.СостоянияИнтеграцииАУСН.Отсутствует) КАК Состояние
	|ПОМЕСТИТЬ ВТ_ПодключениеКФНСПоУмолчанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БанкиПоКлассификатору.Ссылка КАК Сервис,
	|	ЕСТЬNULL(СостоянияИнтеграцииАУСН.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияИнтеграцииАУСН.Отсутствует)) КАК Состояние
	|ИЗ
	|	ВТ_БанкиПоКлассификатору КАК ВТ_БанкиПоКлассификатору
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
	|		ПО СостоянияИнтеграцииАУСН.Банк = ВТ_БанкиПоКлассификатору.Ссылка
	|		И СостоянияИнтеграцииАУСН.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПодключениеКФНСПоУмолчанию.Банк,
	|	ЕСТЬNULL(СостоянияИнтеграцииАУСН.Состояние, ВТ_ПодключениеКФНСПоУмолчанию.Состояние) КАК Состояние
	|ИЗ
	|	ВТ_ПодключениеКФНСПоУмолчанию КАК ВТ_ПодключениеКФНСПоУмолчанию
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
	|		ПО ВТ_ПодключениеКФНСПоУмолчанию.Банк = СостоянияИнтеграцииАУСН.Банк
	|		И СостоянияИнтеграцииАУСН.Организация = &Организация
	|		И СостоянияИнтеграцииАУСН.Банк = Значение(Справочник.КлассификаторБанков.ПустаяСсылка)";
	
	СостоянияПодключения.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	// Состояние формы
	СостоянияФормы = ВсеСостоянияФормы();
	СостояниеФормы = Форма.СостояниеФормы;
	Если СостояниеФормы = СостоянияФормы.НеЗаполнено Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПустая;
	ИначеЕсли СостояниеФормы = СостоянияФормы.НекорректныеРеквизиты Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.НекорректныеРеквизиты;
	ИначеЕсли СостояниеФормы = СостоянияФормы.Ожидание Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОжидание;
	Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПодключение;
	КонецЕсли;
	
	// Обсуждения
	СтруктураПоиска = Новый Структура(
		"Состояние", ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Подключено"));
	ЕстьПодключенныеСервисы = Форма.СостоянияПодключения.НайтиСтроки(СтруктураПоиска).Количество() > 0;

	Элементы.ГруппаОповещения.Видимость = Форма.ОбсужденияНастройкаДоступна И ЕстьПодключенныеСервисы;
	Элементы.КартинкаСостояниеПодключенОповещения.Видимость = Форма.ОбсужденияПодключены;
	Элементы.КартинкаСостояниеОтключеноОповещения.Видимость = Не Форма.ОбсужденияПодключены;
	Элементы.ПодключитьОбсуждения.Видимость = Не Форма.ОбсужденияПодключены;
	Элементы.ОтключитьОбсуждения.Видимость = Форма.ОбсужденияПодключены;
	Элементы.ТекстПодключеныОповещения.Видимость = Форма.ОбсужденияПодключены;
	Элементы.ТекстОтключеныОповещения.Видимость = Не Форма.ОбсужденияПодключены;
	
	// Сначала выключим все сервисы, так как у организации может не быть счетов в нужных банках
	Для Каждого ОписаниеСервиса Из Форма.ОписанияСервисов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Группа" + ОписаниеСервиса.ИмяЭлементов,
			"Видимость",
			Ложь);
	КонецЦикла;
	
	// Настройка формы для сервисов
	СтруктураЭлементов = СтруктураЭлементовГруппыСервиса();
	ТекстыЭлементов = ТекстыЗаголовков();
	Для Каждого СостояниеПодключения Из Форма.СостоянияПодключения Цикл
		
		Если ЗначениеЗаполнено(СостояниеПодключения.Сервис) Тогда
			ОписаниеСервиса = ОписаниеСервиса(СостояниеПодключения.Сервис, Форма.ОписанияСервисов);
		Иначе
			ОписаниеСервиса = Новый Структура;
			ОписаниеСервиса.Вставить("ИмяСервиса", "ФНС");
			ОписаниеСервиса.Вставить("ИмяЭлементов", "ФНС");
		КонецЕсли;
		
		Если ОписаниеСервиса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СервисПодключен = 
			(СостояниеПодключения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Подключено"));
		СервисОшибка = 
			(СостояниеПодключения.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииАУСН.Ошибка"));

		Если СервисПодключен Тогда
			ТекстЗаголовка = СтрШаблон(ТекстыЭлементов.ТекстПодключен, ОписаниеСервиса.ИмяСервиса);
		ИначеЕсли СервисОшибка Тогда
			ТекстЗаголовка = СтрШаблон(ТекстыЭлементов.ТекстОшибка, ОписаниеСервиса.ИмяСервиса);
		Иначе
			ТекстЗаголовка = СтрШаблон(ТекстыЭлементов.ТекстНеПодключен, ОписаниеСервиса.ИмяСервиса);
		КонецЕсли;
		
		ИмяЭлементов = ОписаниеСервиса.ИмяЭлементов;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"Группа" + ИмяЭлементов,
			"Видимость",
			Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			СтруктураЭлементов.Заголовок + ИмяЭлементов,
			"Заголовок",
			ТекстЗаголовка);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			СтруктураЭлементов.КартинкаПодключено + ИмяЭлементов,
			"Видимость",
			СервисПодключен);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			СтруктураЭлементов.КартинкаОтключено + ИмяЭлементов,
			"Видимость",
			Не СервисПодключен);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"КомандаПодключить" + ИмяЭлементов,
			"Видимость",
			Не СервисПодключен);
			
		Если Не СервисПодключен И СервисОшибка Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"КомандаПодключить" + ИмяЭлементов,
				"Заголовок",
				ТекстыЭлементов.Проверить);
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"КомандаПодключить" + ИмяЭлементов,
				"Заголовок",
				ТекстыЭлементов.Подключить);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"КомандаОтключить" + ИмяЭлементов,
			"Видимость",
			СервисПодключен);
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ПрочитатьРеквизитыОрганизации(ЭтотОбъект);
	ЗаполнитьСостоянияПодключения();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПрочитатьРеквизитыОрганизации(Форма)
	
	Объект = Форма.Объект;
	
	СведенияОбОрганизации = СведенияОбОрганизации(Объект.Организация);
	
	Форма.ПрименяемаяСистемаНалогообложения = СведенияОбОрганизации.ПредставлениеСистемыНалогообложения;
	Форма.ПрименяетсяАУСН = СведенияОбОрганизации.ПрименяетсяАУСН;
	ОпределитьСостояниеФормы(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбОрганизации(Знач Организация)
	
	Возврат ИнтеграцияАУСН.СведенияОбОрганизации(Организация);
	
КонецФункции

#КонецОбласти