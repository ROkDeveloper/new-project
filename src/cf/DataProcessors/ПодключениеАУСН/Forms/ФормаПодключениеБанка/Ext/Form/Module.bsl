#Область ОписаниеПеременных

&НаКлиенте
Перем КодЗаявкиВведенныйТекст;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры,
		"Организация, Банк, КодЗаявки, ИмяЭлементов, ИмяБанка, ИмяКартинкиПодключено, ИмяКартинкиНеПодключено");
	
	Элементы.КартинкаНеПодключено.Картинка = БиблиотекаКартинок[ИмяКартинкиНеПодключено];
	Элементы.КартинкаПодключено.Картинка = БиблиотекаКартинок[ИмяКартинкиПодключено];
	
	Элементы.ТекстОбмен.Заголовок = СтрШаблон(ТекстыЗаголовков().ТекстНеПодключен, ИмяБанка);
	Элементы.ТекстОбменПодключен.Заголовок = СтрШаблон(ТекстыЗаголовков().ТекстПодключен, ИмяБанка);
	ЛичныйКабинетБанка = ИнтеграцияАУСНПовтИсп.СсылкаЛичныйКабинетБанка(Банк);
	СостояниеФормы = ВсеСостоянияФормы().Подключение;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(КодЗаявки) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Код заявки'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КодЗаявки", , Отказ);
	ИначеЕсли СтрДлина(КодЗаявки) <> ДлинаКодаЗаявки() Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Код заявки'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КодЗаявки", , Отказ);
	ИначеЕсли Не КодЗаявкиПроверен Тогда
		ТекстСообщения = НСтр("ru = 'Заявка не найдена. Проверьте правильность заполнения.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "КодЗаявки", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		СтандартнаяОбработка = Ложь;
		ИнтеграцияАУСНКлиент.ОткрытьЖурналРегистрации(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Ошибка"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КакПолучитьКодЗаявкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЛичныйКабинетБанка" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ЛичныйКабинетБанка) Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ЛичныйКабинетБанка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодЗаявкиПриИзменении(Элемент)
	
	КодЗаявкиОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура КодЗаявкиИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	КодЗаявкиВведенныйТекст = СокрЛП(Текст);
	
	ПодключитьОбработчикОжидания("Подключаемый_НайтиЗаявку", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подтвердить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ВыполнитьМетодВФоне("ПодтвердитьЗаявку");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Повторить(Команда)
	
	ВернутьсяКПодключению();
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ВыполнитьМетодВФоне("ОтклонитьЗаявку");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстыЗаголовков()
	
	СтруктураТекстов = Новый Структура;
	СтруктураТекстов.Вставить("ТекстПодключен",   НСтр("ru = '%1 подключен'"));
	СтруктураТекстов.Вставить("ТекстНеПодключен", НСтр("ru = 'Обмен с %1'"));
	
	Возврат СтруктураТекстов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВсеСостоянияФормы()

	Результат = Новый Структура;
	Результат.Вставить("Подключение", "Подключение обмена с банком");
	Результат.Вставить("Ожидание", "Ожидание фоновой операции");
	Результат.Вставить("ЗаявкаОтклонена", "Заявка отклонена");
	Результат.Вставить("Подключено", "Подключено");
	Результат.Вставить("Ошибка", "Ошибка");
	Возврат Результат;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	СостояниеФормы = Форма.СостояниеФормы;
	ВсеСостоянияФормы = ВсеСостоянияФормы();
	
	Если СостояниеФормы = ВсеСостоянияФормы.Подключение Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключение;
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы.Ожидание Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжидание;
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы.Ошибка Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОшибка;
		Элементы.ПредставлениеОшибки.Видимость = ЗначениеЗаполнено(Форма.ПредставлениеОшибки);
		Если Элементы.ПредставлениеОшибки.Видимость Тогда
			Элементы.ПредставлениеОшибки.Высота = СтрЧислоСтрок(Форма.ПредставлениеОшибки);
		КонецЕсли;
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы.ЗаявкаОтклонена Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаявкаОтклонена;
		
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы().Подключено Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗаявкаПодтверждена;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодЗаявкиОбработатьИзменение()
	
	КодЗаявки = СокрЛП(КодЗаявки);
	КодЗаявкиПодсказка = ПодсказкаКодаЗаявки(КодЗаявки);
	
	Если СтрДлина(КодЗаявки) <> ДлинаКодаЗаявки() Тогда
		КодЗаявкиПроверен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НайтиЗаявку()
	
	ДлинаВведенногоКодаЗаявки = СтрДлина(КодЗаявкиВведенныйТекст);
	
	КодЗаявкиПодсказка = ПодсказкаКодаЗаявки(КодЗаявкиВведенныйТекст);
	
	Если ДлинаВведенногоКодаЗаявки = ДлинаКодаЗаявки() Тогда
		ВыполнитьМетодВФоне("НайтиЗаявку");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодсказкаНекорректногоКодаЗаявки()
	
	СодержаниеПодсказки = НСтр("ru = 'Заявка не найдена. Проверьте правильность заполнения.'");
	ЦветПодсказки = ОбщегоНазначенияКлиент.ЦветСтиля("НекорректнаяЗаявкаАУСНЦвет");
	Возврат Новый ФорматированнаяСтрока(СодержаниеПодсказки, , ЦветПодсказки);
	
КонецФункции

&НаКлиенте
Функция ПодсказкаКодаЗаявки(КодЗаявки, СтатусЗаявки = Неопределено, НаименованиеБанка = "")
	
	ДлинаВведенногоКодаЗаявки = СтрДлина(КодЗаявки);
	ДлинаКодаЗаявки = ДлинаКодаЗаявки(); 
	
	Если СтатусЗаявки <> Неопределено Тогда
		Если СтатусЗаявки = ИнтеграцияАУСНКлиентСервер.СтатусыЗаявокПодключения().Новая Тогда
			Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
				СодержаниеПодсказки = СтрШаблон(НСтр("ru = 'Найдена новая заявка %1'"), НаименованиеБанка);
			Иначе
				СодержаниеПодсказки = НСтр("ru = 'Найдена новая заявка'");
			КонецЕсли; 
			ЦветПодсказки = ОбщегоНазначенияКлиент.ЦветСтиля("НоваяЗаявкаАУСНЦвет");
		ИначеЕсли СтатусЗаявки = ИнтеграцияАУСНКлиентСервер.СтатусыЗаявокПодключения().Принята Тогда
			Если ЗначениеЗаполнено(НаименованиеБанка) Тогда  
				СодержаниеПодсказки = СтрШаблон(НСтр("ru = 'Заявка %1 уже подтверждена'"), НаименованиеБанка);
			Иначе
				СодержаниеПодсказки = НСтр("ru = 'Заявка уже подтверждена'");
			КонецЕсли;
			ЦветПодсказки = ОбщегоНазначенияКлиент.ЦветСтиля("ПоясняющийТекст");
		ИначеЕсли СтатусЗаявки = ИнтеграцияАУСНКлиентСервер.СтатусыЗаявокПодключения().Отклонена Тогда
			Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
				СодержаниеПодсказки = СтрШаблон(НСтр("ru = 'Заявка %1 отклонена'"), НаименованиеБанка);
			Иначе
				СодержаниеПодсказки = НСтр("ru = 'Заявка отклонена'");
			КонецЕсли;
			ЦветПодсказки = ОбщегоНазначенияКлиент.ЦветСтиля("НекорректнаяЗаявкаАУСНЦвет");
		Иначе
			СодержаниеПодсказки = "";
			ЦветПодсказки = Новый Цвет();
		КонецЕсли;
		
		ТекстПодсказки = Новый ФорматированнаяСтрока(СодержаниеПодсказки, , ЦветПодсказки);
		
	ИначеЕсли 0 < ДлинаВведенногоКодаЗаявки И ДлинаВведенногоКодаЗаявки < ДлинаКодаЗаявки Тогда
		ОсталосьВвести = ДлинаКодаЗаявки() - ДлинаВведенногоКодаЗаявки;
		ТекстПодсказки = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';Осталось ввести %1 символ;;Осталось ввести %1 символа;Осталось ввести %1 символов;Осталось ввести %1 символов'"),
			ОсталосьВвести);
		ТекстПодсказки = Новый ФорматированнаяСтрока(ТекстПодсказки, , ОбщегоНазначенияКлиент.ЦветСтиля("ПоясняющийТекст"));
	Иначе
		ТекстПодсказки = Новый ФорматированнаяСтрока("");
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДлинаКодаЗаявки()
	
	Возврат 36;
	
КонецФункции

#Область ВыполнениеМетода

&НаКлиенте
Процедура ВыполнитьМетодВФоне(Метод)
	
	ПараметрыМетода = ПараметрыВыполненияМетода(Метод);
	ДлительнаяОперация = ВыполнитьМетодВФонеНаСервере(ПараметрыМетода, УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеФормы = ВсеСостоянияФормы().Ожидание;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Метод", Метод);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("Банк", Банк);
	ДополнительныеПараметры.Вставить("КодЗаявки", КодЗаявки);
	Обработчик = Новый ОписаниеОповещения("ОбработкаВыполненияМетода", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыВыполненияМетода(Метод)
	
	ПараметрыМетода = ИнтеграцияАУСНКлиентСервер.НовыеПараметрыМетодаВзаимодействия(Метод);
	Если ПараметрыМетода.Свойство("ИдентификаторБанка") И Не ЗначениеЗаполнено(ИдентификаторБанка) Тогда
		ИдентификаторБанка = ИнтеграцияАУСНВызовСервераПовтИсп.ИдентификаторБанкаПоКлассификатору(Банк);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, ЭтотОбъект);
	
	Если Метод = "НайтиЗаявку" И ПараметрыМетода.Свойство("КодЗаявки") тогда
		ПараметрыМетода.КодЗаявки = КодЗаявкиВведенныйТекст;
	КонецЕсли;
	
	Возврат ПараметрыМетода;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьМетодВФонеНаСервере(Знач ПараметрыМетода, Знач ИдентификаторФормы)
	
	Возврат ИнтеграцияАУСН.ВыполнитьВФоне(ПараметрыМетода, ИдентификаторФормы);
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыполненияМетода(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = ОтветМетода(Результат, ДополнительныеПараметры.Метод);
	
	Если Ответ <> Неопределено Тогда
		ОбработкаОтветаМетода(Ответ, ДополнительныеПараметры);
	Иначе
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОтветМетода(Результат, Метод)

		Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
		СостояниеФормы = ВсеСостоянияФормы().Ошибка;
		ЗаписатьОшибкуВЖурналРегистрации(
			Результат.КраткоеПредставлениеОшибки,
			Результат.ПодробноеПредставлениеОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Ответ = ?(ЭтоАдресВременногоХранилища(Результат.АдресРезультата), 
		ПолучитьИзВременногоХранилища(Результат.АдресРезультата), 
		Неопределено);
	
	Возврат Ответ;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(Знач КраткоеПредставлениеОшибки, Знач ПодробноеПредставлениеОшибки)
	
	ИнтеграцияАУСН.ЗаписатьОшибкуВЖурналРегистрации(КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаМетода(Ответ, ДополнительныеПараметры)
	
 	СтатусыЗапросов = ИнтеграцияАУСНКлиентСервер.СтатусыЗапросов();
	
	Если Ответ.Статус = СтатусыЗапросов.Выполнено Тогда
		
		Если ДополнительныеПараметры.Метод = "НайтиЗаявку" Тогда
			ОбработатьОтвет_НайтиЗаявку(Ответ.Результат, ДополнительныеПараметры);
		ИначеЕсли ДополнительныеПараметры.Метод = "ПодтвердитьЗаявку" Тогда
			ОбработатьОтвет_ПодтвердитьЗаявку(Ответ.Результат, ДополнительныеПараметры);
		ИначеЕсли ДополнительныеПараметры.Метод = "ОтклонитьЗаявку" Тогда
			ОбработатьОтвет_ОтклонитьЗаявку(Ответ.Результат, ДополнительныеПараметры);
		КонецЕсли;
		
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли Ответ.Статус = СтатусыЗапросов.Ошибка Тогда
		
		КодСостояния = Ответ.КодСостояния;
			
		Если КодСостояния = 401 И ИнтернетПоддержкаПользователейКлиент.ДоступноПодключениеИнтернетПоддержки() Тогда
			
			// Требуется подключение к Порталу
			ОтобразитьПодключениеКПорталу(ДополнительныеПараметры.Метод, Ответ);
			
		Иначе
			
			Если ЗначениеЗаполнено(Ответ.Сообщение) Тогда
				ПредставлениеОшибки = Ответ.Сообщение;
			Иначе
				ПредставлениеОшибки = СтрШаблон(
					НСтр("ru='Ошибка при вызове метода %1, код %2.'"),
					ДополнительныеПараметры.Метод,
					Ответ.КодСостояния);
			КонецЕсли;
			СостояниеФормы = ВсеСостоянияФормы().Ошибка;
			УправлениеФормой(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПодключениеКПорталу(Метод = "", Ответ = Неопределено)
	
	ИмяОбработчикаЗавершения = 
		"Подключаемый_ЗавершитьОбработкуОшибки";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Метод", Метод);
	ДополнительныеПараметры.Вставить("Ответ", Ответ);
	ДополнительныеПараметры.Вставить("ФормаВладелец" , ЭтотОбъект);
	ОбработчикЗавершения = Новый ОписаниеОповещения(
		ИмяОбработчикаЗавершения, ЭтотОбъект, ДополнительныеПараметры);
	ИнтеграцияАУСНКлиент.ОтобразитьПодключениеКПорталу(ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗавершитьОбработкуОшибки(Результат, ПараметрыЗавершения) Экспорт
	
	Если Результат.Действие = "Повторить" Тогда
		
		ВыполнитьМетодВФоне(ПараметрыЗавершения.Метод);
		
	Иначе
		
		ВернутьсяКПодключению();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтвет_НайтиЗаявку(Результат, ПараметрыМетода)
	
	КодНайденнойЗаявки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "requestUeid", "");
	РеквизитыБанковскихСчетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "bankAccounts", Новый Массив);
	
	КодЗаявкиПроверен = КодНайденнойЗаявки = КодЗаявкиВведенныйТекст
		И ПроверитьРеквизитыБанковскихСчетов(РеквизитыБанковскихСчетов);
	
	Если КодЗаявкиПроверен Тогда
		
		СтатусЗаявки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "status", "");
		НаименованиеБанка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "bankName", "");
		КодЗаявкиПодсказка = ПодсказкаКодаЗаявки(КодЗаявкиВведенныйТекст, СтатусЗаявки, НаименованиеБанка); 
	
	Иначе
		КодЗаявкиПодсказка = ПодсказкаНекорректногоКодаЗаявки();
	КонецЕсли;
	
	СостояниеФормы = ВсеСостоянияФормы().Подключение;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьРеквизитыБанковскихСчетов(РеквизитыБанковскихСчетов) 
	
	Если РеквизитыБанковскихСчетов.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	БИКВыбранногоБанка = БИКБанка(Банк);
	
	ВГраница = РеквизитыБанковскихСчетов.ВГраница();
	Для Индекс = 0 По ВГраница Цикл
		РеквизитыБанковскогоСчета = РеквизитыБанковскихСчетов[ВГраница - Индекс];
		Если ТипЗнч(РеквизитыБанковскогоСчета) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		БИКБанковскогоСчета = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РеквизитыБанковскогоСчета, "bic", "");
		Если БИКВыбранногоБанка <> БИКБанковскогоСчета Тогда
			РеквизитыБанковскихСчетов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если РеквизитыБанковскихСчетов.Количество() = 0 Тогда
		// Не осталось ни одного правильного счета
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВернутьсяКПодключению()
	
	КодЗаявки = "";
	КодЗаявкиОбработатьИзменение();
	СостояниеФормы = ВсеСостоянияФормы().Подключение;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция БИКБанка(Знач Банк)
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Код");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтвет_ПодтвердитьЗаявку(Результат, ПараметрыМетода)
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Попытка
			НовоеСостояниеИнтеграции = ЗаписатьСостояниеИнтеграцииПриПодключении(
				ПараметрыМетода.Организация, ПараметрыМетода.Банк, ПараметрыМетода.КодЗаявки, Результат);
		Исключение
			ПредставлениеОшибки = СтрШаблон(НСтр("ru = 'Подключение не завершено'"));
			СостояниеФормы = ВсеСостоянияФормы().Ошибка;
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если НовоеСостояниеИнтеграции = Неопределено Тогда
		// Состояние не изменилось, возвращаем форму к исходному состоянию
		СостояниеФормы = ВсеСостоянияФормы().Подключение;
		Возврат;
	КонецЕсли;
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.СостоянияИнтеграцииАУСН"));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Банк", Банк);
	ПараметрыОповещения.Вставить("СервисПодключен", Истина);
	Оповестить("ИнтеграцияАУСН_ПодключенБанк", ПараметрыОповещения);
	
	СостояниеФормы = ВсеСостоянияФормы().Подключено;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписатьСостояниеИнтеграцииПриПодключении(Организация, Банк, КодЗаявки, РезультатВыполнения)
	
	Если КодЗаявки <> ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполнения, "requestUeid", "") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтатусЗаявки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполнения, "status", "");
	Если СтатусЗаявки = ИнтеграцияАУСНКлиентСервер.СтатусыЗаявокПодключения().Принята Тогда
		СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииАУСН.Подключено;
	ИначеЕсли СтатусЗаявки = ИнтеграцияАУСНКлиентСервер.СтатусыЗаявокПодключения().Отклонена Тогда
		СостояниеИнтеграции = Перечисления.СостоянияИнтеграцииАУСН.Отсутствует;
	Иначе
		ПредставлениеОшибки = СтрШаблон(НСтр("ru = 'Сервер вернул некорректный статус заявки: %1'"), СтатусЗаявки);
		ЗаписатьОшибкуВЖурналРегистрации(ПредставлениеОшибки, ПредставлениеОшибки);
		ВызватьИсключение ПредставлениеОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеИнтеграции) Тогда
		Результат = РегистрыСведений.СостоянияИнтеграцииАУСН.ЗаписатьСостояниеИнтеграции(
			Организация, Банк, СостояниеИнтеграции, КодЗаявки);
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат ?(Результат, СостояниеИнтеграции, Неопределено);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОтвет_ОтклонитьЗаявку(Результат, ПараметрыМетода)
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НовоеСостояниеИнтеграции = ЗаписатьСостояниеИнтеграцииПриПодключении(
			ПараметрыМетода.Организация, ПараметрыМетода.Банк, ПараметрыМетода.КодЗаявки, Результат);
	КонецЕсли;
	
	Если НовоеСостояниеИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостояниеФормы = ВсеСостоянияФормы().ЗаявкаОтклонена;
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("Организация", ПараметрыМетода.Организация);
	ПараметрОповещения.Вставить("Банк ", ПараметрыМетода.Банк);
	Оповестить("ИнтеграцияАУСН_ИзмененоСостояние", ПараметрОповещения);
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.СостоянияИнтеграцииАУСН"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
