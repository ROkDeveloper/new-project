#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "Организация");
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	УстановитьСостояниеФормы();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ИнтернетПоддержкаПодключена Тогда
		ОтобразитьПодключениеКПорталу();
	ИначеЕсли СостояниеФормы <> ВсеСостоянияФормы().ТребуетКлючаДоступа Тогда
		ВыполнитьМетодПодключения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		СтандартнаяОбработка = Ложь;
		ИнтеграцияАУСНКлиент.ОткрытьЖурналРегистрации(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Ошибка"));
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "Портал1С" Тогда
		СтандартнаяОбработка = Ложь;
		ПерейтиПоНавигационнойСсылке(ИнтеграцияАУСНКлиентСервер.СсылкаНаПорталСКлючамиДоступа());
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЛКАУСН" Тогда
		СтандартнаяОбработка = Ложь;
		ПерейтиПоНавигационнойСсылке(ИнтеграцияАУСНКлиентСервер.СсылкаНаЗаявкуВЛичномКабинетеАУСН());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьЗапросНаПодключение(Команда)
	
	Если Не ЗначениеЗаполнено(КлючДоступа) Тогда
		Возврат;
	КонецЕсли;
	Если Не КлючДоступаДействителен(Организация, КлючДоступа) Тогда
		Элементы.ПодсказкаКлючДоступа.Видимость = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ПодсказкаКлючДоступа.Видимость = Ложь;
	
	ЗаписатьТокенПорталаАУСННаСервере();
	СостояниеФормы = ВсеСостоянияФормы().Ожидание;
	УправлениеФормой(ЭтотОбъект);
	ВыполнитьМетодПодключения();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьПодключениеСервиса");
	ПроверитьПодключениеСервиса();
	
КонецПроцедуры

&НаКлиенте
Процедура Повторить(Команда)
	
	Если Не ЗначениеЗаполнено(КлючДоступа) Тогда
		СостояниеФормы = ВсеСостоянияФормы().ТребуетКлючаДоступа;
	Иначе
		СостояниеФормы = ВсеСостоянияФормы().Ожидание;
		ПривязатьНалогоплательщикаКВУС();
	КонецЕсли;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаписатьТокенПорталаАУСННаСервере()
	
	ИнтеграцияАУСН.ЗаписатьТокенПорталаАУСН(Организация, КлючДоступа);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.СостояниеФормы = ВсеСостоянияФормы().Ожидание Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОжидание;
		Элементы.СтраницаПодтверждениеЗаявки.Видимость = Ложь;
		Элементы.СтраницаКлючДоступа.Видимость = Ложь;
	ИначеЕсли Форма.СостояниеФормы = ВсеСостоянияФормы().ТребуетКлючаДоступа Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКлючДоступа;
		Элементы.СтраницаКлючДоступа.Видимость = Истина;
		Элементы.СтраницаПодтверждениеЗаявки.Видимость = Ложь;
		Элементы.ОтправитьЗаявкуНаПодключение.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Форма.СостояниеФормы = ВсеСостоянияФормы().ТребуетПодтверждения Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодтверждениеЗаявки;
		Элементы.СтраницаПодтверждениеЗаявки.Видимость = Истина;
		Элементы.СтраницаКлючДоступа.Видимость = Ложь;
		Элементы.ФормаПроверитьПодключение.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Форма.СостояниеФормы = ВсеСостоянияФормы().Ошибка Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОшибка;
		Элементы.СтраницаПодтверждениеЗаявки.Видимость = Ложь;
		Элементы.СтраницаКлючДоступа.Видимость = Ложь;
		Элементы.Повторить.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Форма.СостояниеФормы = ВсеСостоянияФормы().Подключено Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодключено;
		Элементы.СтраницаПодтверждениеЗаявки.Видимость = Ложь;
		Элементы.СтраницаКлючДоступа.Видимость = Ложь;
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Форма.КлючСохраненияПоложенияОкна = Форма.СостояниеФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьМетодПодключения()
	
	Если СостояниеФормы = ВсеСостоянияФормы().Ожидание Тогда
		ПривязатьНалогоплательщикаКВУС();
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы().ТребуетПодтверждения Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПодключениеСервиса", 30);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьНалогоплательщикаКВУС()
	
	Метод = ИнтеграцияАУСНКлиентСервер.ИменаМетодовВзаимодействияИнтеграцияСЛК().ПривязатьНалогоплательщикаКВУС;
	ДлительнаяОперация = ДлительнаяОперацияНаСервере(Метод);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПривязатьНалогоплательщикаКВУСЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривязатьНалогоплательщикаКВУСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Статус = "Ошибка" Тогда
		СостояниеФормы = ВсеСостоянияФормы().Ошибка;
		ПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ПривязатьНалогоплательщикаКВУСНаСервере(Результат);
	
	Если СостояниеФормы = ВсеСостоянияФормы().ТребуетПодтверждения Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьПодключениеСервиса", 30);
	ИначеЕсли СостояниеФормы = ВсеСостоянияФормы().Подключено Тогда
		Оповестить("ПодключенСервисФНС");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура ПривязатьНалогоплательщикаКВУСНаСервере(Результат)
	
	ОтветСервиса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если ОтветСервиса = Неопределено Тогда
		СостояниеФормы = ВсеСостоянияФормы().Ошибка;
		ПредставлениеОшибки = НСтр("ru = 'Внутренняя ошибка приложения'");
	ИначеЕсли ОтветСервиса.Статус = "Выполнено" Тогда
		// Проверим, текущее состояние подключения
		УстановитьСостояниеФормы();
	ИначеЕсли ОтветСервиса.Статус = "НедействительныйТокен" Тогда
		СостояниеФормы = ВсеСостоянияФормы().ТребуетКлючаДоступа;
		Элементы.ПодсказкаКлючДоступа.Видимость = Истина;
		УправлениеФормой(ЭтотОбъект);	
	Иначе
		СостояниеФормы = ВсеСостоянияФормы().Ошибка;
		ПредставлениеОшибки = ОтветСервиса.Сообщение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеСервиса()
	
	Метод = ИнтеграцияАУСНКлиентСервер.ИменаМетодовВзаимодействияИнтеграцияСЛК().ПолучитьСтатусЗаявкиНаПодключение;
	ДлительнаяОперация = ДлительнаяОперацияНаСервере(Метод);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверкаЗаявкиЗавершение", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ДлительнаяОперацияНаСервере(Метод)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Организация", Организация);
	ПараметрыПроцедуры.Вставить("МетодВзаимодействия", Метод);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	Возврат ДлительныеОперации.ВыполнитьВФоне("ИнтеграцияАУСН.ВыполнитьВФоне", 
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПроверкаЗаявкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ПредставлениеОшибки = Результат.КраткоеПредставлениеОшибки;
		СостояниеФормы = ВсеСостоянияФормы().Ошибка;
	Иначе
		ПроверкаЗаявкиНаСервере(Результат);
	КонецЕсли;
	
	Если СостояниеФормы = ВсеСостоянияФормы().Подключено Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьПодключениеСервиса");
		Оповестить("ПодключенСервисФНС");
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры 

&НаСервере
Процедура ПроверкаЗаявкиНаСервере(Результат)
	
	ОтветСервиса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если ОтветСервиса = Неопределено Тогда
		СостояниеФормы = ВсеСостоянияФормы().Ошибка;
		ПредставлениеОшибки = НСтр("ru = 'Внутренняя ошибка приложения'");
	ИначеЕсли ОтветСервиса.Статус = "Выполнено" Тогда
		УстановитьСостояниеФормы();
	Иначе
		СостояниеФормы = ВсеСостоянияФормы().Ошибка;
		ПредставлениеОшибки = ОтветСервиса.Сообщение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеПодключенияОрганизации(Знач Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияИнтеграцииАУСН.Состояние
	|ИЗ
	|	РегистрСведений.СостоянияИнтеграцииАУСН КАК СостоянияИнтеграцииАУСН
	|ГДЕ
	|	СостоянияИнтеграцииАУСН.Организация = &Организация
	|	И СостоянияИнтеграцииАУСН.Банк = ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Состояние;
	Иначе
		Возврат Перечисления.СостоянияИнтеграцииАУСН.Отсутствует;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОтобразитьПодключениеКПорталу(Метод = "", Ответ = Неопределено)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Метод", Метод);
	ДополнительныеПараметры.Вставить("Ответ", Ответ);
	ДополнительныеПараметры.Вставить("ФормаВладелец" , ЭтотОбъект);
	ОбработчикЗавершения = Новый ОписаниеОповещения(
		"ОтобразитьПодключениеКПорталуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ИнтеграцияАУСНКлиент.ОтобразитьПодключениеКПорталу(ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПодключениеКПорталуЗавершение(Результат, ПараметрыЗавершения) Экспорт
	
	Если Результат.Действие = "Повторить" Тогда
		ИнтернетПоддержкаПодключена = Истина;
		ВыполнитьМетодПодключения();
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеФормы()
	
	СостояниеПодключения = СостояниеПодключенияОрганизации(Организация);
	КлючДоступа = ИнтеграцияАУСН.ТокенПорталаАУСН(Организация);
	Если ЗначениеЗаполнено(КлючДоступа) И Не ИнтеграцияАУСН.КлючДоступаДействителен(Организация, КлючДоступа) Тогда
		КлючДоступа = "";
	КонецЕсли;
	
	Если СостояниеПодключения = Перечисления.СостоянияИнтеграцииАУСН.Подключено Тогда
		СостояниеФормы = ВсеСостоянияФормы().Подключено;
	ИначеЕсли СостояниеПодключения = Перечисления.СостоянияИнтеграцииАУСН.ТребуетПодтвержденияВЛичномКабинете Тогда
		СостояниеФормы = ВсеСостоянияФормы().ТребуетПодтверждения;
	ИначеЕсли Не ЗначениеЗаполнено(КлючДоступа) Тогда
		СостояниеФормы = ВсеСостоянияФормы().ТребуетКлючаДоступа;
	ИначеЕсли СостояниеПодключения = Перечисления.СостоянияИнтеграцииАУСН.Ошибка Тогда
		СостояниеФормы = ВсеСостоянияФормы().Ошибка;
	Иначе
		СостояниеФормы = ВсеСостоянияФормы().Ожидание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВсеСостоянияФормы()
	
	ВсеСостоянияФормы = Новый Структура;
	ВсеСостоянияФормы.Вставить("Ожидание", "Ожидание");
	ВсеСостоянияФормы.Вставить("ТребуетКлючаДоступа", "ТребуетКлючаДоступа");
	ВсеСостоянияФормы.Вставить("ТребуетПодтверждения", "Требует подтверждения в личном кабинете");
	ВсеСостоянияФормы.Вставить("Ошибка", "Ошибка");
	ВсеСостоянияФормы.Вставить("Подключено", "Подключено");
	
	Возврат ВсеСостоянияФормы;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьПодключениеСервиса()
	
	ПроверитьПодключениеСервиса();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючДоступаДействителен(Знач Организация, КлючДоступа)
	
	Если Не ЗначениеЗаполнено(КлючДоступа) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрДлина(КлючДоступа) > 0 И СтрДлина(КлючДоступа) < 50 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИнтеграцияАУСН.КлючДоступаДействителен(Организация, КлючДоступа);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьКлючДоступа()
	
	Элементы.ПодсказкаКлючДоступа.Видимость = Не КлючДоступаДействителен(Организация, КлючДоступа);
	
КонецПроцедуры

#КонецОбласти