#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПодсистемаДО2 = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЕстьПодсистемаДО2();
	ЕстьПодсистемаДО3 = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЕстьПодсистемаДО3();
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы = СоставНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты = РодительскиеКонстанты(СоставНабораКонстантФормы);
	ДоступноПравоАдминистрирование = ПравоДоступа("Администрирование", Метаданные);
	
	РежимРаботы = Новый Структура;
	РежимРаботы.Вставить("СоставНабораКонстантФормы", Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	СокращенноеНаименованиеКонфигурации =
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.СокращенноеНаименованиеКонфигурации();
	Если ЗначениеЗаполнено(СокращенноеНаименованиеКонфигурации) Тогда
		Элементы.ДеревоОбъектовПредставление.Заголовок = СтрШаблон(
			НСтр("ru = 'Объект %1'"),
			СокращенноеНаименованиеКонфигурации);
		Элементы.ДекорацияДеревоОбъектов.Заголовок = СтрШаблон(
			НСтр("ru = 'Объекты %1, поддерживающие интеграцию:'"),
			СокращенноеНаименованиеКонфигурации);
	КонецЕсли;
	
	ОбновитьНастройкиОбновленияСвязанныхРеквизитов();
	ПолучитьПризнакИнтеграцияВключена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
	Если ЗначениеЗаполнено(НаборКонстант.АдресВебСервиса1СДокументооборот) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
	
	УстановитьДоступностьИспользованияИнтеграции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры

// Обработчик оповещения формы.
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_УспешноеПодключение" Тогда
		СостояниеДерева = ЗапомнитьСостояниеДерева();
		УстановитьВидимость();
		ВосстановитьСостояниеДерева(СостояниеДерева);
	КонецЕсли;
	
	Если ИмяСобытия = "ИнтеграцияС1СДокументооборотом_ИзмененоПравило"
			Или ИмяСобытия = "ИнтеграцияС1СДокументооборотом_СозданоПравило"
			Или ИмяСобытия = "ИнтеграцияС1СДокументооборотом_ЗаписаноПравило"
			Или ИмяСобытия = "ИнтеграцияС1СДокументооборотом3_ИзмененоПравило"
			Или ИмяСобытия = "ИнтеграцияС1СДокументооборотом3_СозданоПравило"
			Или ИмяСобытия = "ИнтеграцияС1СДокументооборотом3_ЗаписаноПравило" Тогда
		ЗаполнитьВДеревеПризнакВключена();
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
			Или (ТипЗнч(Параметр) = Тип("Структура")
			И ПолучитьОбщиеКлючиСтруктур(Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0) Тогда
		Прочитать();
		УстановитьДоступностьИспользованияИнтеграции();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(НаборКонстант.АдресВебСервиса1СДокументооборот) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не указан адрес веб-сервиса.'"));
		Возврат;
	КонецЕсли;
	
	ИмяФормыПараметров = "Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот";
	Оповещение = Новый ОписаниеОповещения("НастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВызовДляНастройкиДоступа", Истина);
	
	ОткрытьФорму(
		ИмяФормыПараметров,
		ПараметрыФормы,
		ЭтотОбъект,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияВключенаПриИзменении(Элемент)
	
	Если НомерРедакции = "2" Тогда
		ИмяКонстанты = "ИспользоватьИнтеграциюС1СДокументооборот";
	ИначеЕсли НомерРедакции = "3" Тогда
		ИмяКонстанты = "ИспользоватьИнтеграциюС1СДокументооборот3";
	Иначе
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент,, ИмяКонстанты);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресВебСервиса1СДокументооборотПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
	Если НаборКонстант.АдресВебСервиса1СДокументооборот = "" Тогда
		ИнтеграцияВключена = Ложь;
		Если НаборКонстант.ИспользоватьИнтеграциюС1СДокументооборот Тогда
			Подключаемый_ПриИзмененииРеквизита(
				Элементы.ИнтеграцияВключена,,
				"ИспользоватьИнтеграциюС1СДокументооборот");
		КонецЕсли;
		Если НаборКонстант.ИспользоватьИнтеграциюС1СДокументооборот3 Тогда
			Подключаемый_ПриИзмененииРеквизита(
				Элементы.ИнтеграцияВключена,,
				"ИспользоватьИнтеграциюС1СДокументооборот3");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьРасписание" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДиалогНастройкиРасписанияЗавершение", ЭтотОбъект);
		
		ДиалогНастройкиРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
		ДиалогНастройкиРасписания.Показать(ОписаниеОповещения);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВвестиИмяПользователяИПароль" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВызовДляПользователяЗаданияОбмена", Истина);
		
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот",
			ПараметрыФормы,
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьСвязанныеОбъектыАвтоматическиПриИзменении(Элемент)
	
	ОбновитьИспользованиеРегламентногоЗадания(ОбновлятьСвязанныеОбъектыАвтоматически);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДеревоОбъектов

&НаКлиенте
Процедура ДеревоОбъектовВключенаПриИзменении(Элемент)
	
	ПриИзмененииПризнакаВключена(Элементы.ДеревоОбъектов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.ДеревоОбъектов.ТекущиеДанные = Неопределено
		Или Элементы.ДеревоОбъектов.ТекущиеДанные.ЭтоГруппа Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле <> Элементы.ДеревоОбъектовТекстСсылки Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоОбъектов.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоПравил > 0 Тогда
		
		ОткрытьСписокПравилСОтбором(ТекущиеДанные);
		
	Иначе // настройка новых правил
		
		Если ТекущиеДанные.ВозможнаАвтонастройка Тогда
			
			НастроитьАвтоматически(ТекущиеДанные);
			
		Иначе
			
			НастроитьВручную(ТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеПравилаИнтеграции(Команда)
	
	Если НомерРедакции = "2" Тогда
		ИмяОткрываемойФормы = "Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ФормаСписка";
	ИначеЕсли НомерРедакции = "3" Тогда
		ИмяОткрываемойФормы = "Справочник.ПравилаИнтеграцииС1СДокументооборотом3.Форма.ФормаСписка";
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ИмяОткрываемойФормы,, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПравилоВручную(Команда)
	
	НастроитьВручную(Элементы.ДеревоОбъектов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	СостояниеДерева = ЗапомнитьСостояниеДерева();
	ЗаполнитьДеревоМетаданными();
	ВосстановитьСостояниеДерева(СостояниеДерева);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Истина Тогда
		
		СостояниеДерева = ЗапомнитьСостояниеДерева();
		УстановитьВидимость();
		ВосстановитьСостояниеДерева(СостояниеДерева);
		
		УстановитьДоступностьИспользованияИнтеграции();
		
		Если НомерРедакции = "2" И ЕстьПодсистемаДО3 И НаборКонстант.ИспользоватьИнтеграциюС1СДокументооборот3 Тогда
			ИнтеграцияВключена = Ложь;
			Подключаемый_ПриИзмененииРеквизита(
				Элементы.ИнтеграцияВключена,,
				"ИспользоватьИнтеграциюС1СДокументооборот3");
			
		ИначеЕсли НомерРедакции = "3" И ЕстьПодсистемаДО2 И НаборКонстант.ИспользоватьИнтеграциюС1СДокументооборот Тогда
			ИнтеграцияВключена = Ложь;
			Подключаемый_ПриИзмененииРеквизита(
				Элементы.ИнтеграцияВключена,,
				"ИспользоватьИнтеграциюС1СДокументооборот");
			
		КонецЕсли;
		
	Иначе // не удалось подключиться к ДО
		
		Оповещение = Новый ОписаниеОповещения("НастройкиАвторизацииНажатиеЗавершение", ЭтотОбъект);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВызовДляНастройкиДоступа", Истина);
		
		ОткрытьФорму(
			"Обработка.ИнтеграцияС1СДокументооборотБазоваяФункциональность.Форма.АвторизацияВ1СДокументооборот",
			ПараметрыФормы,
			ЭтотОбъект,,,,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиАвторизацииНажатиеЗавершение(Результат, Параметры) Экспорт
	
	СостояниеДерева = ЗапомнитьСостояниеДерева();
	УстановитьВидимость();
	ВосстановитьСостояниеДерева(СостояниеДерева);
	
	УстановитьДоступностьИспользованияИнтеграции();
	
КонецПроцедуры

&НаКлиенте
Процедура ДиалогНастройкиРасписанияЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбновитьНастройкиОбновленияСвязанныхРеквизитов(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьИспользованияИнтеграции()
	
	Если Не Элементы.ГруппаПодключение.Доступность Тогда
		Элементы.ГруппаПодключение.Доступность = Истина;
		
		Если ЗначениеЗаполнено(НаборКонстант.АдресВебСервиса1СДокументооборот) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(ОписаниеОповещения, ЭтотОбъект);
		Иначе
			СостояниеДерева = ЗапомнитьСостояниеДерева();
			УстановитьВидимость();
			ВосстановитьСостояниеДерева(СостояниеДерева);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ИнтеграцияВключена.Доступность = (НомерРедакции = "2" Или НомерРедакции = "3");
	Элементы.ДеревоОбъектов.Доступность = ИнтеграцияВключена И Элементы.ИнтеграцияВключена.Доступность;
#Если ВебКлиент Тогда
	Элементы.ДеревоОбъектов.СтрокаПоиска.Доступность = ИнтеграцияВключена И Элементы.ИнтеграцияВключена.Доступность;
#Иначе
	Элементы.ДеревоОбъектов.ОтображениеСтрокиПоиска.Доступность = ИнтеграцияВключена И Элементы.ИнтеграцияВключена.Доступность;
#КонецЕсли
	Элементы.СоздатьПравилоВручную.Доступность = ИнтеграцияВключена И Элементы.ИнтеграцияВключена.Доступность;
	Элементы.ВсеПравилаИнтеграции.Доступность = ИнтеграцияВключена И Элементы.ИнтеграцияВключена.Доступность;
	Элементы.Обновить.Доступность = ИнтеграцияВключена И Элементы.ИнтеграцияВключена.Доступность;
	Элементы.СинхронизироватьСвязи.Доступность = ИнтеграцияВключена И Элементы.ИнтеграцияВключена.Доступность;
	
	Элементы.ГруппаАвтообновление.Доступность = ИнтеграцияВключена
		И ДоступноПравоАдминистрирование
		И Элементы.ИнтеграцияВключена.Доступность;
	Элементы.КомандыНастройкиОбновления.Доступность = ИнтеграцияВключена
		И ДоступноПравоАдминистрирование
		И Элементы.ИнтеграцияВключена.Доступность;
	
КонецПроцедуры

// Выполняет автоматическую настройку интеграции.
//
&НаКлиенте
Процедура НастроитьАвтоматически(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИмяТипаОбъекта", ТекущиеДанные.ИмяТипаОбъекта);
	ОбъектСАвтонастройкой = ОбъектыСАвтонастройкой.НайтиСтроки(ПараметрыОтбора);
	
	ОписаниеВыполняемыхДействий = ОбъектСАвтонастройкой[0].ОписаниеВыполняемыхДействий;
	Если Не ЗначениеЗаполнено(ОписаниеВыполняемыхДействий) Тогда
		ОписаниеВыполняемыхДействий = ОписаниеВыполняемыхДействийПоУмолчанию();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьАвтоматическиПродолжение",
		ЭтаФорма,
		ТекущиеДанные.ИмяТипаОбъекта);
	
	ТекстВопроса = ОписаниеВыполняемыхДействий
		+ ?(СтрЗаканчиваетсяНа(ОписаниеВыполняемыхДействий, "."), "", ".")
		+ Символы.ПС
		+ НСтр("ru = 'Создать?'");
		
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(Истина, НСтр("ru = 'Создать автоматически'"));
	Кнопки.Добавить(Ложь, НСтр("ru = 'Настроить вручную'"));
	Кнопки.Добавить(Неопределено, НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Истина);
	
КонецПроцедуры

// Продолжает автоматическую настройку интеграции после вопроса "Вы уверены?".
//
&НаКлиенте
Процедура НастроитьАвтоматическиПродолжение(Результат, ИмяТипаОбъекта) Экспорт
	
	Если Результат = Истина Тогда
	
		ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьАвтоматическиЗавершение",
			ЭтаФорма,
			ИмяТипаОбъекта);
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ПроверитьПодключение(
			ОписаниеОповещения,
			ЭтотОбъект,
			Истина);
		
	ИначеЕсли Результат = Ложь Тогда
		
		НастроитьВручную(Элементы.ДеревоОбъектов.ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

// Завершает автоматическую настройку интеграции после проверки подключения.
//
&НаКлиенте
Процедура НастроитьАвтоматическиЗавершение(Результат, ИмяТипаОбъекта) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.НачатьАвтоматическуюНастройкуИнтеграции(ИмяТипаОбъекта);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВручную(ТекущиеДанные)
	
	Если НомерРедакции = "2" Тогда
		ИмяОткрываемойФормы = "Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ФормаЭлемента";
	ИначеЕсли НомерРедакции = "3" Тогда
		ИмяОткрываемойФормы = "Справочник.ПравилаИнтеграцииС1СДокументооборотом3.Форма.ФормаЭлемента";
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоГруппа Тогда
		ПараметрыФормы.Вставить("ТипОбъектаИС", ТекущиеДанные.ИмяТипаОбъекта);
	КонецЕсли;
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПравилСОтбором(ТекущиеДанные)
	
	Если НомерРедакции = "2" Тогда
		ИмяОткрываемойФормы = "Справочник.ПравилаИнтеграцииС1СДокументооборотом.Форма.ФормаСписка";
		РежимОткрытия = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ИначеЕсли НомерРедакции = "3" Тогда
		ИмяОткрываемойФормы = "Справочник.ПравилаИнтеграцииС1СДокументооборотом3.Форма.ФормаСписка";
		РежимОткрытия = Неопределено;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если ТекущиеДанные <> Неопределено И Не ТекущиеДанные.ЭтоГруппа Тогда
		ПараметрыФормы.Вставить("ТипОбъектаИС", ТекущиеДанные.ИмяТипаОбъекта);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСписокПравилСОтборомЗавершение", ЭтаФорма);
	
	ОткрытьФорму(
		ИмяОткрываемойФормы,
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПравилСОтборомЗавершение(Результат, Параметры) Экспорт
	
	ЗаполнитьВДеревеПризнакВключена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПризнакаВключена(СтрокаДерева)
	
	Если СтрокаДерева.КоличествоПравил = 0 Тогда
		Если СтрокаДерева.Включена Тогда
			СтрокаДерева.ТекстСсылки = НСтр("ru = '<Правила не настроены>'");
		Иначе
			СтрокаДерева.ТекстСсылки = "";
		КонецЕсли;
	Иначе
		// отключение правил.
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеВыполняемыхДействийПоУмолчанию()
	
	Возврат НСтр("ru = 'Будет автоматически создано правило интеграции.
		|В 1С:Документообороте будет создан соответствующий вид документа.'");
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина, КонстантаИмя = "")
	
	ПриИзмененииРеквизитаСервер(Элемент.Имя, КонстантаИмя);
	
	// Действия при выключении интеграции
	Если (КонстантаИмя = "ИспользоватьИнтеграциюС1СДокументооборот"
				И Не НаборКонстант.ИспользоватьИнтеграциюС1СДокументооборот)
			Или (КонстантаИмя = "ИспользоватьИнтеграциюС1СДокументооборот3"
				И Не НаборКонстант.ИспользоватьИнтеграциюС1СДокументооборот3) Тогда
		УстановитьДоступностьИспользованияИнтеграции();
	КонецЕсли;
	
	Если КонстантаИмя = "АдресВебСервиса1СДокументооборот" Тогда
		Элементы.ГруппаПодключение.Доступность = Ложь;
	КонецЕсли;
	
	Если ОбновлятьИнтерфейс Тогда
#Если Не ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
#Иначе
		УстановитьДоступностьИспользованияИнтеграции();
#КонецЕсли
	Иначе
		УстановитьДоступностьИспользованияИнтеграции();
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	УстановитьДоступностьИспользованияИнтеграции();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбщиеКлючиСтруктур(Структура1, Структура2) Экспорт
	
	Результат = Новый Структура;
	
	Для Каждого КлючИЗначение Из Структура1 Цикл
		Если Структура2.Свойство(КлючИЗначение.Ключ) Тогда
			Результат.Вставить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗапомнитьСостояниеДерева() Экспорт
	
	Состояние = Новый Структура;
	Состояние.Вставить("ТекСсылка", КлючСтрокиДереваОбъектов(Элементы.ДеревоОбъектов.ТекущиеДанные));
	
	Контекст = Новый Структура;
	Контекст.Вставить("Состояние", Новый Соответствие);
	ОбойтиДерево(ДеревоОбъектов.ПолучитьЭлементы(), Контекст, "ЗапомнитьСостояниеРазвернут");
	Состояние.Вставить("Развернут", Контекст.Состояние);
	
	Возврат Состояние;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьСостояниеДерева(Состояние) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("Состояние", Состояние.Развернут);
	Контекст.Вставить("ТекСсылка", Состояние.ТекСсылка);
	ОбойтиДерево(ДеревоОбъектов.ПолучитьЭлементы(), Контекст, "УстановитьСостояниеРазвернут");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбойтиДерево(ДеревоЭлементы, Контекст, ИмяПроцедуры)
	
	Для Каждого Элемент Из ДеревоЭлементы Цикл
		// Рекурсивный вызов
		ПодчиненныеУзлы = Элемент.ПолучитьЭлементы();
		Если ПодчиненныеУзлы.Количество() > 0 Тогда
			ОбойтиДерево(ПодчиненныеУзлы, Контекст, ИмяПроцедуры);
		КонецЕсли;
		Результат = Вычислить(ИмяПроцедуры + "(Элемент, Контекст)");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ЗапомнитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = ДеревоОбъектов.НайтиПоИдентификатору(ИдентификаторСтроки);
	Контекст.Состояние.Вставить(
		КлючСтрокиДереваОбъектов(ТекДанные),
		Элементы.ДеревоОбъектов.Развернут(ИдентификаторСтроки));
	
КонецФункции

&НаКлиенте
Функция УстановитьСостояниеРазвернут(Элемент, Контекст)
	
	ИдентификаторСтроки = Элемент.ПолучитьИдентификатор();
	ТекДанные = ДеревоОбъектов.НайтиПоИдентификатору(ИдентификаторСтроки);
	Ключ = КлючСтрокиДереваОбъектов(ТекДанные);
	
	ТребуемоеСостояниеРазвернут = Контекст.Состояние.Получить(Ключ);
	ТекущееСостояниеРазвернут = Элементы.ДеревоОбъектов.Развернут(ИдентификаторСтроки);
	Если (ТребуемоеСостояниеРазвернут = Истина) И (ТекущееСостояниеРазвернут = Ложь) Тогда
		Элементы.ДеревоОбъектов.Развернуть(ИдентификаторСтроки);
	ИначеЕсли (ТребуемоеСостояниеРазвернут = Ложь) И (ТекущееСостояниеРазвернут = Истина) Тогда
		Элементы.ДеревоОбъектов.Свернуть(ИдентификаторСтроки);
	КонецЕсли;
	
	Если Ключ = Контекст.ТекСсылка Тогда
		Элементы.ДеревоОбъектов.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция КлючСтрокиДереваОбъектов(Строка)
	
	Если Строка <> Неопределено Тогда
		ЭтоГруппа = Строка.ЭтоГруппа;
		Если Строка.ЭтоГруппа Тогда
			Имя = Строка.ПредставлениеПодсистемы;
		Иначе
			Имя = Строка.ПредставлениеОбъекта;
		КонецЕсли;
	Иначе
		ЭтоГруппа = Неопределено;
		Имя = Неопределено;
	КонецЕсли;
	
	Возврат СтрШаблон("{%1} - {%2}", ЭтоГруппа, Имя);
	
КонецФункции

#КонецОбласти

#Область ВызовСервера

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ИнтеграцияВключена.Заголовок = НСтр("ru = 'Интеграция включена'");
	Элементы.ИнтеграцияВключена.Подсказка = НСтр("ru = 'Включена интеграция с 1С:Документооборотом'");
	
	ВерсияСервиса = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса();
	НомерРедакции = Лев(ВерсияСервиса, 1);
	
	ЗаполнитьДеревоМетаданными();
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СервисДоступен(ВерсияСервиса) Тогда
		
		Если НомерРедакции = "1" Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
			Элементы.ДекорацияОписаниеВерсияНеПоддерживается.Заголовок = НСтр(
				"ru = 'Интеграция с 1С:Документооборот редакции 1 не поддерживается.'");
			
		ИначеЕсли НомерРедакции = "2" Тогда
			Элементы.ИнтеграцияВключена.Заголовок =
				НСтр("ru = 'Интеграция с 1С:Документооборотом редакции 2 включена'");
			Элементы.ИнтеграцияВключена.Подсказка =
				НСтр("ru = 'Включена интеграция с 1С:Документооборотом редакции 2'");
			Если ЕстьПодсистемаДО2 Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИнтеграцияС1СДокументооборотом;
			Иначе
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
				Элементы.ДекорацияОписаниеВерсияНеПоддерживается.Заголовок =
					НСтр("ru = 'Интеграция с 1С:Документооборот редакции 2 не поддерживается.'");
			КонецЕсли;
			
		ИначеЕсли НомерРедакции = "3" Тогда
			Элементы.ИнтеграцияВключена.Заголовок =
				НСтр("ru = 'Интеграция с 1С:Документооборотом редакции 3 включена'");
			Элементы.ИнтеграцияВключена.Подсказка =
				НСтр("ru = 'Включена интеграция с 1С:Документооборотом редакции 3'");
			Если ЕстьПодсистемаДО3 Тогда
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.7.31") Тогда
					Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИнтеграцияС1СДокументооборотом;
					
				Иначе
					Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
					Элементы.ДекорацияОписаниеВерсияНеПоддерживается.Заголовок = НСтр(
						"ru = 'Функционал не поддерживается в данной версии 1С:Документооборота.
						|Требуется 1С:Документооборот версии 3.0.7 или выше.'");
					
				КонецЕсли;
			Иначе
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
				Элементы.ДекорацияОписаниеВерсияНеПоддерживается.Заголовок =
					НСтр("ru = 'Интеграция с 1С:Документооборот редакции 3 не поддерживается.'");
			КонецЕсли;
			
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВерсияНеПоддерживается;
			Элементы.ДекорацияОписаниеВерсияНеПоддерживается.Заголовок = СтрШаблон(
				НСтр("ru = 'Интеграция с 1С:Документооборот редакции %1 не поддерживается.'"),
				НомерРедакции);
			
		КонецЕсли;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаИнтеграцияС1СДокументооборотом Тогда
			ДоступнаСинхронизацияСвязей = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса(
				"3.0.11.25");
			Элементы.СинхронизироватьСвязи.Видимость = ДоступнаСинхронизацияСвязей;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОбновленияСвязанныхРеквизитов(Расписание = Неопределено)
	
	Если Не ДоступноПравоАдминистрирование Тогда
		ОписаниеНастройкиОбновления = Новый ФорматированнаяСтрока(НСтр("ru = 'Расписание не доступно'"));
		Возврат;
	КонецЕсли;
	
	Задание = РегламентныеЗаданияСервер.Задание(
		Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными);
	
	Если Расписание <> Неопределено Тогда
		Задание.Расписание = Расписание;
		Задание.Записать();
	КонецЕсли;
	
	ОбновлятьСвязанныеОбъектыАвтоматически = Задание.Использование;
	РасписаниеРегламентногоЗадания = Задание.Расписание;
	
	МассивСтрокОписание = Новый Массив;
	
	РасписаниеСтрокой = Строка(Задание.Расписание);
	Если Не СтрЗаканчиваетсяНа(РасписаниеСтрокой, ".") Тогда
		РасписаниеСтрокой = РасписаниеСтрокой + ".  ";
	Иначе
		РасписаниеСтрокой = РасписаниеСтрокой + "  ";
	КонецЕсли;
	МассивСтрокОписание.Добавить(РасписаниеСтрокой);
	
	ОписаниеНастройкиОбновления = Новый ФорматированнаяСтрока(МассивСтрокОписание);
	
	МассивСтрокКоманды = Новый Массив;
	
	СтрокаСсылки = Новый ФорматированнаяСтрока(НСтр("ru = 'Изменить расписание'"),,,, "ИзменитьРасписание");
	МассивСтрокКоманды.Добавить(СтрокаСсылки);
	
	МассивСтрокКоманды.Добавить("   ");
	
	СтрокаСсылки = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Задать служебного пользователя для обмена'"),,,,
		"ВвестиИмяПользователяИПароль");
	МассивСтрокКоманды.Добавить(СтрокаСсылки);
	
	КомандыНастройкиОбновления = Новый ФорматированнаяСтрока(МассивСтрокКоманды);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитаСервер(ИмяЭлемента, КонстантаИмя)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, КонстантаИмя);
	
	Если КонстантаИмя = "ИспользоватьИнтеграциюС1СДокументооборот"
			Или КонстантаИмя = "ИспользоватьИнтеграциюС1СДокументооборот3" Тогда
		ОбновитьНастройкиОбновленияСвязанныхРеквизитов();
	КонецЕсли;
	
	Если КонстантаИмя = "АдресВебСервиса1СДокументооборот" Тогда
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотПарольИзвестен = Ложь;
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотМестоположениеПрокси = "";
		Если Не ЗначениеЗаполнено(НаборКонстант.АдресВебСервиса1СДокументооборот) Тогда
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = "0.0.0.0";
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОбновитьПовторноИспользуемыеПараметры();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, КонстантаИмя = "", ПеречитыватьФорму = Истина)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если КонстантаИмя = "" Тогда
		// Определение имени константы.
		МассивЧастейРеквизитПутьКДанным = СтрРазделить(РеквизитПутьКДанным, ".");
		Если МассивЧастейРеквизитПутьКДанным.Количество() = 2
				И НРег(МассивЧастейРеквизитПутьКДанным[0]) = НРег("НаборКонстант") Тогда
			// Если путь к данным реквизита указан через "НаборКонстант".
			КонстантаИмя = МассивЧастейРеквизитПутьКДанным[1];
		КонецЕсли;
	КонецЕсли;
	
	// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
	// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "ИнтеграцияВключена" Тогда
		НаборКонстант[КонстантаИмя] = ИнтеграцияВключена;
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) И ПеречитыватьФорму Тогда
			Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьИнтеграциюС1СДокументооборот" Тогда
		
		НаборКонстант["ИспользоватьПроцессыИЗадачи1СДокументооборота"] = КонстантаЗначение;
		СохранитьЗначениеРеквизита("НаборКонстант.ИспользоватьПроцессыИЗадачи1СДокументооборота");
		НаборКонстант["ИспользоватьПрисоединенныеФайлы1СДокументооборота"] = КонстантаЗначение;
		СохранитьЗначениеРеквизита("НаборКонстант.ИспользоватьПрисоединенныеФайлы1СДокументооборота");
		НаборКонстант["ИспользоватьСвязанныеДокументы1СДокументооборота"] = КонстантаЗначение;
		СохранитьЗначениеРеквизита("НаборКонстант.ИспользоватьСвязанныеДокументы1СДокументооборота");
		
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьИнтеграциюС1СДокументооборот3" Тогда
		
		НаборКонстант["ИспользоватьОбработкуОбъектов1СДокументооборота"] = КонстантаЗначение;
		СохранитьЗначениеРеквизита("НаборКонстант.ИспользоватьОбработкуОбъектов1СДокументооборота");
		НаборКонстант["ИспользоватьПрисоединенныеФайлы1СДокументооборота"] = КонстантаЗначение;
		СохранитьЗначениеРеквизита("НаборКонстант.ИспользоватьПрисоединенныеФайлы1СДокументооборота");
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дерево объектами и подсистемами согласно метаданным.
//
&НаСервере
Процедура ЗаполнитьДеревоМетаданными()
	
	Дерево = РеквизитФормыВЗначение("ДеревоОбъектов");
	Дерево.Строки.Очистить();
	
	ОбъектыСАвтонастройкой.Очистить();
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОпределенииОбъектовПоддерживающихАвтонастройку(
		ОбъектыСАвтонастройкой);
	СоответствиеПравил = СоответствиеПравилТипамОбъектов();
	
	ВыборкаПодсистема = СоответствиеОбъектовИПодсистем();
	Пока ВыборкаПодсистема.Следующий() Цикл
		
		Подсистема = Метаданные.НайтиПоПолномуИмени(ВыборкаПодсистема.Подсистема);
		
		СтрокаПодсистемы = Дерево.Строки.Добавить();
		СтрокаПодсистемы.ИмяПодсистемы = Подсистема.Имя;
		СтрокаПодсистемы.ПредставлениеПодсистемы = Подсистема.Представление();
		СтрокаПодсистемы.ЭтоГруппа = Истина;
		
		ВыборкаОбъект = ВыборкаПодсистема.Выбрать();
		Пока ВыборкаОбъект.Следующий() Цикл
			
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ВыборкаОбъект.Объект);
			
			СтрокаОбъекта = СтрокаПодсистемы.Строки.Добавить();
			СтрокаОбъекта.ИмяТипаОбъекта = ВыборкаОбъект.Объект;
			СтрокаОбъекта.ПредставлениеОбъекта = ОбъектМетаданных.Представление();
			
			КоличествоПравил = СоответствиеПравил[СтрокаОбъекта.ИмяТипаОбъекта];
			
			Если КоличествоПравил <> Неопределено Тогда
				СтрокаОбъекта.Включена = Истина;
				СтрокаОбъекта.КоличествоПравил = КоличествоПравил;
				СтрокаОбъекта.ТекстСсылки = СтрШаблон(НСтр("ru = 'Правила (%1)'"), КоличествоПравил);
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура("ИмяТипаОбъекта", СтрокаОбъекта.ИмяТипаОбъекта);
			ОбъектСАвтонастройкой = ОбъектыСАвтонастройкой.НайтиСтроки(ПараметрыОтбора);
			СтрокаОбъекта.ВозможнаАвтонастройка = (ОбъектСАвтонастройкой.Количество() <> 0);
			
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоОбъектов");
	
КонецПроцедуры

&НаСервере
Функция СоответствиеОбъектовИПодсистем()
	
	Типы = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипыОбъектовПоддерживающихИнтеграцию();
	ОбъектыМетаданных = Новый СписокЗначений;
	Для Каждого Тип Из Типы Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		ОбъектыМетаданных.Добавить(ОбъектМетаданных, ОбъектМетаданных.Представление());
	КонецЦикла;
	ОбъектыМетаданных.СортироватьПоПредставлению();
	
	СоответствиеОбъектовИПодсистем = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповСтрока = Новый ОписаниеТипов(Массив,, Новый КвалификаторыСтроки(255));
	СоответствиеОбъектовИПодсистем.Колонки.Добавить("Подсистема", ОписаниеТиповСтрока);
	СоответствиеОбъектовИПодсистем.Колонки.Добавить("Объект", ОписаниеТиповСтрока);
	СоответствиеОбъектовИПодсистем.Колонки.Добавить("ВключатьВКомандныйИнтерфейс", Новый ОписаниеТипов("Булево"));
	
	ЗаполнитьСоответствиеОбъектовИПодсистем(СоответствиеОбъектовИПодсистем, Метаданные.Подсистемы, ОбъектыМетаданных);
	
	ПереопределитьСоответствиеОбъектовИПодсистем(СоответствиеОбъектовИПодсистем);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоответствиеОбъектовИПодсистем.Объект КАК Объект,
		|	СоответствиеОбъектовИПодсистем.Подсистема КАК Подсистема,
		|	СоответствиеОбъектовИПодсистем.ВключатьВКомандныйИнтерфейс КАК ВключатьВКомандныйИнтерфейс
		|ПОМЕСТИТЬ ВТСоответствиеОбъектовИПодсистемПредварительная
		|ИЗ
		|	&СоответствиеОбъектовИПодсистем КАК СоответствиеОбъектовИПодсистем
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСоответствиеОбъектовИПодсистемПредварительная.Объект КАК Объект,
		|	МАКСИМУМ(ВТСоответствиеОбъектовИПодсистемПредварительная.ВключатьВКомандныйИнтерфейс) КАК ВключатьВКомандныйИнтерфейс
		|ПОМЕСТИТЬ ВТОтборПоВключениюВИнтерфейс
		|ИЗ
		|	ВТСоответствиеОбъектовИПодсистемПредварительная КАК ВТСоответствиеОбъектовИПодсистемПредварительная
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСоответствиеОбъектовИПодсистемПредварительная.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСоответствиеОбъектовИПодсистемПредварительная.Объект КАК Объект,
		|	ВТСоответствиеОбъектовИПодсистемПредварительная.Подсистема КАК Подсистема
		|ПОМЕСТИТЬ ВТСоответствиеОбъектовИПодсистем
		|ИЗ
		|	ВТСоответствиеОбъектовИПодсистемПредварительная КАК ВТСоответствиеОбъектовИПодсистемПредварительная
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборПоВключениюВИнтерфейс КАК ВТОтборПоВключениюВИнтерфейс
		|		ПО ВТСоответствиеОбъектовИПодсистемПредварительная.ВключатьВКомандныйИнтерфейс = ВТОтборПоВключениюВИнтерфейс.ВключатьВКомандныйИнтерфейс
		|			И ВТСоответствиеОбъектовИПодсистемПредварительная.Объект = ВТОтборПоВключениюВИнтерфейс.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСоответствиеОбъектовИПодсистем.Подсистема КАК Подсистема,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТСоответствиеОбъектовИПодсистем.Объект) КАК КоличествоОбъектов
		|ПОМЕСТИТЬ ВТКоличествоОбъектовВПодсистемах
		|ИЗ
		|	ВТСоответствиеОбъектовИПодсистем КАК ВТСоответствиеОбъектовИПодсистем
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСоответствиеОбъектовИПодсистем.Подсистема
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСоответствиеОбъектовИПодсистем.Объект КАК Объект,
		|	МАКСИМУМ(ВТКоличествоОбъектовВПодсистемах.КоличествоОбъектов) КАК КоличествоОбъектов
		|ПОМЕСТИТЬ ВТСверткаОбъектовПоКоличествуОбъектовВПодсистеме
		|ИЗ
		|	ВТСоответствиеОбъектовИПодсистем КАК ВТСоответствиеОбъектовИПодсистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоОбъектовВПодсистемах КАК ВТКоличествоОбъектовВПодсистемах
		|		ПО ВТСоответствиеОбъектовИПодсистем.Подсистема = ВТКоличествоОбъектовВПодсистемах.Подсистема
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСоответствиеОбъектовИПодсистем.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТСоответствиеОбъектовИПодсистем.Подсистема) КАК Подсистема,
		|	ВТСоответствиеОбъектовИПодсистем.Объект КАК Объект
		|ПОМЕСТИТЬ ВТСверткаПодсистем
		|ИЗ
		|	ВТСоответствиеОбъектовИПодсистем КАК ВТСоответствиеОбъектовИПодсистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСверткаОбъектовПоКоличествуОбъектовВПодсистеме КАК ВТСверткаОбъектовПоКоличествуОбъектовВПодсистеме
		|		ПО ВТСоответствиеОбъектовИПодсистем.Объект = ВТСверткаОбъектовПоКоличествуОбъектовВПодсистеме.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКоличествоОбъектовВПодсистемах КАК ВТКоличествоОбъектовВПодсистемах
		|		ПО ВТСоответствиеОбъектовИПодсистем.Подсистема = ВТКоличествоОбъектовВПодсистемах.Подсистема
		|			И (ВТСверткаОбъектовПоКоличествуОбъектовВПодсистеме.КоличествоОбъектов = ВТКоличествоОбъектовВПодсистемах.КоличествоОбъектов)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТСоответствиеОбъектовИПодсистем.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСверткаПодсистем.Подсистема КАК Подсистема,
		|	ВТСверткаПодсистем.Объект КАК Объект
		|ИЗ
		|	ВТСверткаПодсистем КАК ВТСверткаПодсистем
		|
		|УПОРЯДОЧИТЬ ПО
		|	Подсистема,
		|	Объект
		|ИТОГИ ПО
		|	Подсистема");
	Запрос.Параметры.Вставить("СоответствиеОбъектовИПодсистем", СоответствиеОбъектовИПодсистем);
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

&НаСервере
Процедура ПереопределитьСоответствиеОбъектовИПодсистем(СоответствиеОбъектовИПодсистем)
	
	ПереопределитьСоответствиеПодсистемыОбъекта(
		СоответствиеОбъектовИПодсистем,
		Метаданные.Документы.СчетНаОплатуПокупателю,
		Метаданные.Подсистемы.Справочники.Подсистемы.ПокупкиИПродажи);
	ПереопределитьСоответствиеПодсистемыОбъекта(
		СоответствиеОбъектовИПодсистем,
		Метаданные.Документы.СчетНаОплатуПоставщика,
		Метаданные.Подсистемы.Справочники.Подсистемы.ПокупкиИПродажи);
	ПереопределитьСоответствиеПодсистемыОбъекта(
		СоответствиеОбъектовИПодсистем,
		Метаданные.Документы.СчетФактураПолученный,
		Метаданные.Подсистемы.Справочники.Подсистемы.ПокупкиИПродажи);
	ПереопределитьСоответствиеПодсистемыОбъекта(
		СоответствиеОбъектовИПодсистем,
		Метаданные.Документы.ПоступлениеДопРасходов,
		Метаданные.Подсистемы.Справочники.Подсистемы.ПокупкиИПродажи);
	
КонецПроцедуры

&НаСервере
Процедура ПереопределитьСоответствиеПодсистемыОбъекта(СоответствиеОбъектовИПодсистем, Объект, НоваяПодсистема)
	
	ОбъектПолноеИмя = Объект.ПолноеИмя();
	НоваяПодсистемаПолноеИмя = НоваяПодсистема.ПолноеИмя();
	
	Строки = СоответствиеОбъектовИПодсистем.НайтиСтроки(Новый Структура("Объект", ОбъектПолноеИмя));
	
	Для Каждого Строка Из Строки Цикл
		Строка.Подсистема = НоваяПодсистемаПолноеИмя;
		Строка.ВключатьВКомандныйИнтерфейс = НоваяПодсистема.ВключатьВКомандныйИнтерфейс;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеОбъектовИПодсистем(СоответствиеОбъектовИПодсистем, Подсистемы, ОбъектыМетаданных)
	
	Для Каждого Подсистема Из Подсистемы Цикл
		
		Если СтрНачинаетсяС(Подсистема.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		Отказ = Ложь;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриДобавленииПодсистемыВДеревоИнтегрируемыхОбъектов(
			Подсистема,
			Отказ);
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьСоответствиеОбъектовИПодсистем(СоответствиеОбъектовИПодсистем, Подсистема.Подсистемы, ОбъектыМетаданных);
		
		Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
			
			Если СтрНачинаетсяС(ОбъектМетаданных.Значение.Имя, "Удалить") Тогда
				Продолжить;
			КонецЕсли;
			
			Если Подсистема.Состав.Содержит(ОбъектМетаданных.Значение) Тогда
				НовСтр = СоответствиеОбъектовИПодсистем.Добавить();
				НовСтр.Объект = ОбъектМетаданных.Значение.ПолноеИмя();
				НовСтр.Подсистема = Подсистема.ПолноеИмя();
				НовСтр.ВключатьВКомандныйИнтерфейс = Подсистема.ВключатьВКомандныйИнтерфейс;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает соответствие, содержащее для каждого имени типа количество
// правил и, в случае единственного правила - ссылку на него и представление.
//
&НаСервере
Функция СоответствиеПравилТипамОбъектов()
	
	Соответствие = Новый Соответствие;
	
	ТекстЗапроса = "ВЫБРАТЬ
		|	Правила.ТипОбъектаИС КАК ТипОбъектаИС,
		|	КОЛИЧЕСТВО(Правила.Ссылка) КАК КоличествоПравил
		|ИЗ
		|	&ПравилаИнтеграцииС1СДокументооборотом КАК Правила
		|ГДЕ
		|	НЕ Правила.ПометкаУдаления
		|	И Правила.ТипОбъектаДО <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	Правила.ТипОбъектаИС";
	
	Если НомерРедакции = "2" Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ПравилаИнтеграцииС1СДокументооборотом",
			"Справочник.ПравилаИнтеграцииС1СДокументооборотом");
	ИначеЕсли НомерРедакции = "3" Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ПравилаИнтеграцииС1СДокументооборотом",
			"Справочник.ПравилаИнтеграцииС1СДокументооборотом3");
	Иначе
		Возврат Соответствие;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ТипОбъектаИС, Выборка.КоличествоПравил);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

// Заполняет в дереве признак Включена согласно существованию подходящих правил в ИБ.
//
&НаСервере
Процедура ЗаполнитьВДеревеПризнакВключена()
	
	СоответствиеПравил = СоответствиеПравилТипамОбъектов();
	
	ОбработатьСтрокиДерева(ДеревоОбъектов.ПолучитьЭлементы(), СоответствиеПравил);
	
КонецПроцедуры

// Рекурсивно обрабатывает строки дерева, устанавливая признак Включена согласно переданному массиву
// объектов, для которых найдены правила интеграции.
//
&НаСервере
Процедура ОбработатьСтрокиДерева(СтрокиДерева, СоответствиеПравил)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ОбработатьСтрокиДерева(СтрокаДерева.ПолучитьЭлементы(), СоответствиеПравил);
			
		Иначе
			
			КоличествоПравил = СоответствиеПравил[СтрокаДерева.ИмяТипаОбъекта];
			СтрокаДерева.Включена = (КоличествоПравил <> Неопределено);
			
			Если СтрокаДерева.Включена Тогда
				СтрокаДерева.КоличествоПравил = КоличествоПравил;
				СтрокаДерева.ТекстСсылки = СтрШаблон(НСтр("ru = 'Правила (%1)'"),
					СтрокаДерева.КоличествоПравил);
			Иначе
				СтрокаДерева.КоличествоПравил = 0;
				СтрокаДерева.ТекстСсылки = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоставНабораКонстант(Набор)
	
	Результат = Новый Структура;
	
	Для Каждого МетаКонстанта Из Метаданные.Константы Цикл
		Если ЕстьРеквизитОбъекта(Набор, МетаКонстанта.Имя) Тогда
			Результат.Вставить(МетаКонстанта.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальностиОбъекта = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальностиОбъекта);
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальностиОбъекта;
	
КонецФункции

&НаСервере
Функция ЕстьПодчиненныеКонстанты(ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты)
	
	ТаблицаКонстант = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗависимостиКонстант();
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура(
			"ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты",
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты));
	
	Возврат ПодчиненныеКонстанты.Количество() > 0;
	
КонецФункции

&НаСервере
Функция РодительскиеКонстанты(СтруктураПодчиненныхКонстант)
	
	Результат = Новый Структура;
	ТаблицаКонстант = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗависимостиКонстант();
	
	Для Каждого ИскомаяКонстанта Из СтруктураПодчиненныхКонстант Цикл
		
		РодительскиеКонстанты = ТаблицаКонстант.НайтиСтроки(
			Новый Структура("ИмяПодчиненнойКонстанты", ИскомаяКонстанта.Ключ));
		
		Для Каждого СтрокаРодителя Из РодительскиеКонстанты Цикл
			
			Если Результат.Свойство(СтрокаРодителя.ИмяРодительскойКонстанты)
					Или СтруктураПодчиненныхКонстант.Свойство(СтрокаРодителя.ИмяРодительскойКонстанты) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить(СтрокаРодителя.ИмяРодительскойКонстанты);
			
			РодителиРодителя = РодительскиеКонстанты(Новый Структура(СтрокаРодителя.ИмяРодительскойКонстанты));
			
			Для Каждого РодительРодителя Из РодителиРодителя Цикл
				Результат.Вставить(РодительРодителя.Ключ);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПолучитьПризнакИнтеграцияВключена()
	
	ИнтеграцияВключена = НаборКонстант.ИспользоватьИнтеграциюС1СДокументооборот
		Или НаборКонстант.ИспользоватьИнтеграциюС1СДокументооборот3;
	
КонецПроцедуры

#КонецОбласти

#Область Сервер

&НаСервереБезКонтекста
Процедура ОбновитьИспользованиеРегламентногоЗадания(Использование)
	
	Задание = РегламентныеЗаданияСервер.Задание(
		Метаданные.РегламентныеЗадания.ИнтеграцияС1СДокументооборотВыполнитьОбменДанными);
	Задание.Использование = Использование;
	Задание.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
