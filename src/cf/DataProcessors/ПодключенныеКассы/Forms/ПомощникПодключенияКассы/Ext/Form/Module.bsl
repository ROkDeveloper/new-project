#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Подключаемое оборудование
	Если Параметры.Свойство("Склад") Тогда
		Склад = Параметры.Склад;
		
		Если ЗначениеЗаполнено(Склад) Тогда
			КассаБухгалтерии = 0;
			Элементы.КассаМагазина.Видимость = Ложь;
			Элементы.КассаБухгалтерии.Видимость = Ложь;
			
			Элементы.Склад.Видимость = Ложь;
			Элементы.СкладМК.Видимость = Ложь;
			Элементы.СкладОффлайн.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Если НЕ Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
		Элементы.Организация.Видимость = Ложь;
		Элементы.ОрганизацияМК.Видимость = Ложь;
		Элементы.ОрганизацияОффлайн.Видимость = Ложь;
	КонецЕсли;
	
	ЭтоВебКлиент   = Параметры.Свойство("ЭтоВебКлиент") ИЛИ ОбщегоНазначения.ЭтоВебКлиент();
	ОтключенТипЦен = Параметры.Свойство("ОтключенТипЦен") ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	
	ТипПодключения = ?(ЭтоВебКлиент, 9, 1);
	
	Если ЭтоВебКлиент И ТипПодключения = 1 Тогда
		Элементы.ГруппаПредупреждение.Видимость = Истина;
		Элементы.ФормаДалее.Доступность = Ложь;
		Элементы.ГруппаСтраницыПредупреждение.ТекущаяСтраница = Элементы.ГруппаВебКлиент;
	Иначе
		Элементы.ГруппаПредупреждение.Видимость = Ложь;
	КонецЕсли;
		
	СписокПроизводителейПодключаемые = Элементы.ПроизводительКассовогоАппарата.СписокВыбора;
	
	
	СписокПроизводителейПодключаемые.Добавить("атолффд12", 	НСтр("ru = 'Атол'"));
	СписокПроизводителейПодключаемые.Добавить("штрихм12", 	НСтр("ru = 'Штрих-М'"));
	СписокПроизводителейПодключаемые.Добавить("дримкас", 	НСтр("ru = 'Viki Print'"));
	СписокПроизводителейПодключаемые.Добавить("ars", 		НСтр("ru = 'Ars'"));
	СписокПроизводителейПодключаемые.Добавить("mstar", 		НСтр("ru = 'Mstar'"));
	СписокПроизводителейПодключаемые.Добавить("newton", 	НСтр("ru = 'Newton'"));
	СписокПроизводителейПодключаемые.Добавить("версият", 	НСтр("ru = 'К1-Ф'"));
	СписокПроизводителейПодключаемые.Добавить("искра", 		НСтр("ru = 'Искра'"));
	СписокПроизводителейПодключаемые.Добавить("ксс", 		НСтр("ru = 'Ккс'"));
	СписокПроизводителейПодключаемые.Добавить("счетмаш", 	НСтр("ru = 'Счетмаш'"));
	СписокПроизводителейПодключаемые.Добавить("фит", 		НСтр("ru = 'Fit'"));
	СписокПроизводителейПодключаемые.Добавить("инитпро", 	НСтр("ru = 'Инитпро'"));
	СписокПроизводителейПодключаемые.Добавить("инкотекс", 	НСтр("ru = 'Меркурий'"));
	СписокПроизводителейПодключаемые.Добавить("мебиус", 	НСтр("ru = 'Мебиус'"));
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСпособПодключения;
	Элементы.ФормаНазад.Видимость   = Ложь;
	
	Элементы.ДекорацияОшибкаВыгрузкиПрайса.Видимость = Ложь;
	Элементы.ДекорацияОшибкаНастройки.Видимость = Ложь;
	Элементы.ДекорацияОшибкаНастройки1.Видимость = Ложь;
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ЗаполнитьАдресИнтернетСервиса();
		Элементы.ГруппаQRКодНастроекМК.Видимость = Истина;
		Элементы.КаталогФайловогоОбмена.Видимость = Ложь;
	Иначе
		ОбменЧерезФайл = Истина;
		Элементы.ГруппаQRКодНастроекМК.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Справочники.ПодключаемоеОборудование) Тогда
		Элементы.ТипПодключенияККТ.Доступность = Ложь;
		Элементы.ТипПодключенияОФД.Доступность = Ложь;
		Элементы.ТипПодключенияЭвотор.Доступность = Ложь;
		Элементы.ТипПодключенияАтол.Доступность = Ложь;
		Элементы.ДекорацияШтрих.Доступность = Ложь;
		ТипПодключения = 4;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат) Тогда
		Элементы.ТипПодключенияМК.Доступность = Ложь;
		Элементы.ГруппаMSPOS.Доступность = Ложь;
		Элементы.ГруппаSIGMA.Доступность = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Обработка.ЗагрузкаИзОФД.Форма")  Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение.ИдентификаторУстройства) Тогда
			ПодключаемоеОборудование = ВыбранноеЗначение.ИдентификаторУстройства;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
			Элементы.ГруппаРезультатСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультатЗагрузкаИзОФД;
			Элементы.ФормаДалее.Заголовок = "Готово";
			Элементы.ФормаНазад.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаСервере
Процедура ПроизводительКассовогоАппаратаПриИзмененииНаСервере()
	
	ДрайверОборудования = ОпределитьДрайверККТПоПроизводителю(ПроизводительКассовогоАппарата);
	
	Если ДрайверОборудования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодключаемоеОборудование, "ДрайверОборудования") Тогда
		// Производитель тот же, создавать новый экземпляр не требуется.
		Возврат;
	Иначе
		// Производитель сменился, требуется повторное создание экземпляра.
		// Текущий экземпляр помечается на удаление.
		ПодключаемоеОборудованиеОбъект = ПодключаемоеОборудование.ПолучитьОбъект();
		ПодключаемоеОборудованиеОбъект.УстройствоИспользуется = Ложь;
		ПодключаемоеОборудованиеОбъект.ПометкаУдаления = Истина;
		ПодключаемоеОборудованиеОбъект.Записать();
		
		ПодключаемоеОборудование = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводительКассовогоАппаратаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПроизводительКассовогоАппарата) 
		И ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
			ПроизводительКассовогоАппаратаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассаБухгалтерииПриИзменении(Элемент)
	
	Элементы.Склад.Видимость = (КассаБухгалтерии = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогФайловогоОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайловогоКаталога(ЭтотОбъект, "КаталогФайловогоОбмена", СтандартнаяОбработка,,);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСпособПодключения Тогда
		Если ТипПодключения = 5 Тогда
			ТипПодключения = ?(Элементы.ГруппаMSPOS.Доступность, 2, 5);
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТипОборудования;
			Элементы.ФормаНазад.Видимость   = Истина;
		ИначеЕсли ТипПодключения = 1 Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкаОборудования;
			Элементы.ГруппаСтраницыНастройкаОборудования.ТекущаяСтраница = Элементы.ГруппаНастройкаПодключаемоеОборудование;
			Элементы.ФормаНазад.Видимость   = Истина;
		ИначеЕсли ТипПодключения = 9 Тогда
			Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
				Элементы.ГруппаРезультатСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультатЗагрузкаИзОФД;
				Элементы.ФормаДалее.Заголовок = "Готово";
				Элементы.ФормаНазад.Видимость = Ложь;
			Иначе
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("Склад", Склад);
				ПараметрыФормы.Вставить("СкрытьПервичнуюЗагрузку", Истина);
				ОткрытьФорму("Обработка.ЗагрузкаИзОФД.Форма.НастройкаПодключения",ПараметрыФормы,ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			КонецЕсли;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкаОборудования;
			Элементы.ГруппаСтраницыНастройкаОборудования.ТекущаяСтраница = Элементы.ГруппаНастройкаМобильнаяКасса;
			Элементы.ФормаНазад.Видимость   = Истина;
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТипОборудования Тогда
		Если ТипПодключения = 2 ИЛИ ТипПодключения = 3 Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкаОборудования;
			Элементы.ГруппаСтраницыНастройкаОборудования.ТекущаяСтраница = Элементы.ГруппаНастройкаМобильнаяКасса;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкаОборудования;
			Элементы.ГруппаСтраницыНастройкаОборудования.ТекущаяСтраница = Элементы.ГруппаНастройкаОффлайнОборудование;
			Если Элементы.ОрганизацияОффлайн.Видимость = Ложь
				И Элементы.СкладОффлайн.Видимость = Ложь Тогда
				
				Если ПроверитьДоступностьДалее() Тогда
					СоздатьЭлементОффлайнОборудование();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкаОборудования Тогда
		Если Элементы.ГруппаСтраницыНастройкаОборудования.ТекущаяСтраница =  Элементы.ГруппаНастройкаПодключаемоеОборудование Тогда
			Если ПроверитьДоступностьДалее() Тогда
				СоздатьЭлементПодключаемоеОборудование();
			КонецЕсли;
		ИначеЕсли Элементы.ГруппаСтраницыНастройкаОборудования.ТекущаяСтраница =  Элементы.ГруппаНастройкаМобильнаяКасса Тогда
			Если ПроверитьДоступностьДалее() Тогда
				СоздатьУзелОбменаСМобильнойКассой();
			КонецЕсли;
		ИначеЕсли Элементы.ГруппаСтраницыНастройкаОборудования.ТекущаяСтраница =  Элементы.ГруппаНастройкаОффлайнОборудование Тогда
			Если ПроверитьДоступностьДалее() Тогда
				СоздатьЭлементОффлайнОборудование();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТипОборудования Тогда
		ТипПодключения = 5;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСпособПодключения;
		Элементы.ФормаНазад.Видимость   = Ложь;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкаОборудования Тогда
		Если ТипПодключения = 1
			ИЛИ ТипПодключения = 4
			ИЛИ ТипПодключения = 9 Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСпособПодключения;
			Элементы.ФормаНазад.Видимость   = Ложь;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТипОборудования;
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат Тогда
		Если ТипПодключения = 9 Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТипОборудования;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкаОборудования;
		КонецЕсли;
		Элементы.ФормаДалее.Заголовок = "Далее";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПодключаемоеОборудование(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НастроитьПодключаемоеОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования(ПодключаемоеОборудование, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОффлайнОборудование(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НастроитьОфлайнОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОфлайнОборудованияКлиент.ВыполнитьНастройкуОборудования(ПодключаемоеОборудование, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьНастроекМК(Команда)
	
	ТабДокумент = ПечатьНастроекМКНаСервере();
	ТабДокумент.Показать("Настройки подключения");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидыОплатыОффланОборудования(Команда)
	
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		Оповещение = Новый ОписаниеОповещения("НастроитьВидыОплатОфлайнОборудованиеЗавершение", ЭтотОбъект);
		ЗначениеОтбора = Новый Структура("ОфлайнОборудование", ПодключаемоеОборудование);
		ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);
		ОткрытьФорму("РегистрСведений.КодыВидовОплатыКММ.ФормаСписка", ПараметрыФормы, , , , , Оповещение, );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодыТоваровОффлайнОборудования(Команда)
	
	ОткрытьФорму("РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяВыгрузкаОффлайнОборудование(Команда)
	
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) И ТипЗнч(ПодключаемоеОборудование) = Тип("СправочникСсылка.ОфлайнОборудование") Тогда
		Оповещение = Новый ОписаниеОповещения("ВыгрузитьОстаткиЗавершение", ЭтотОбъект);
		МенеджерОфлайнОборудованияКлиент.НачатьВыгрузкуДанныхНаККМ(ПодключаемоеОборудование, УникальныйИдентификатор, Оповещение);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФукнции

#Область ПодключаемоеОборудование

&НаКлиенте
Процедура СоздатьЭлементПодключаемоеОборудование()
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		СоздатьЭлементПодключаемоеОборудованиеНаСервере();
		Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
			Оповещение = Новый ОписаниеОповещения("НастроитьПодключаемоеОборудованиеЗавершение", ЭтотОбъект);
			МенеджерОборудованияКлиент.ВыполнитьНастройкуОборудования(ПодключаемоеОборудование, Оповещение);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
		Элементы.ГруппаРезультатСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультатПодключаемоеОборудование;
		Элементы.ФормаДалее.Заголовок = "Готово";
		Элементы.ФормаНазад.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементПодключаемоеОборудованиеНаСервере(НаименованиеПодключаемогоОборудования = "")
	
	ДрайверОборудования        = ОпределитьДрайверККТПоПроизводителю(ПроизводительКассовогоАппарата);
	ПредставлениеПроизводителя = ОпределитьПредставлениеПроизводителяККТ(ПроизводительКассовогоАппарата);
	РабочееМесто               = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	
	ПредставлениеПодключаемогоОборудования =  Строка(ПредставлениеПроизводителя)
						+ ?(ПустаяСтрока(Строка(Склад)),
							" " + НСтр("ru='в бухгалтерии'"),
							" " + НСтр("ru='в'") + " " + Строка(Склад));
	// Как в БПО.
	НаименованиеПодключаемогоОборудования  = ПредставлениеПодключаемогоОборудования
						+ ?(ПустаяСтрока(Строка(РабочееМесто)),
							" ",
							" " + НСтр("ru='на'") + " " + Строка(РабочееМесто));
						
	
	ПодключаемоеОборудование = СоздатьЭкземплярОборудованияККТ(
			ПодключаемоеОборудование,
			ДрайверОборудования,
			НаименованиеПодключаемогоОборудования,
			РабочееМесто);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьДрайверККТПоПроизводителю(Знач Производитель) Экспорт
	
	Производитель = НРег(Производитель);
	
	Если Производитель = "атол" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверАтолККТ54ФЗ10X");
		
	ИначеЕсли Производитель = "атолффд12" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверАТОЛККТ54ФЗ10XФФД12");
		
	ИначеЕсли Производитель = "штрихм" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверШтрихМККТ54ФЗ415");
		
	ИначеЕсли Производитель = "штрихм12" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверШтрихМККТ54ФЗ4ФФД12_517");
		
	ИначеЕсли Производитель = "ars" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверARSККТ54ФЗ");
		
	ИначеЕсли Производитель = "mstar" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверMSTARККТ54ФЗ");
		
	ИначеЕсли Производитель = "newton" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверNEWTONККТ54ФЗ");
		
	ИначеЕсли Производитель = "версият" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверВерсияТK1Ф54ФЗ");
		
	ИначеЕсли Производитель = "искра" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверИскраККТ54ФЗ");
		
	ИначеЕсли Производитель = "ксс" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверККСККТ54ФЗ2Х");
		
	ИначеЕсли Производитель = "счетмаш" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверСчетмашККТ54ФЗ");
		
	ИначеЕсли Производитель = "дримкас" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверДримкасККТ54ФЗ");
		
	ИначеЕсли Производитель = "фит" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверFITККТ54ФЗ");
		
	ИначеЕсли Производитель = "инитпро" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверИнитпроККТ54ФЗФФД12");
		
	ИначеЕсли Производитель = "инкотекс" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверИнкотексККТ54ФЗФФ12");
		
	ИначеЕсли Производитель = "мебиус" Тогда
		
		Возврат ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.ДрайверыОборудования.ДрайверМЕБИУСККТ54ФЗ");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОпределитьПредставлениеПроизводителяККТ(Знач Производитель) Экспорт
	
	СписокПроизводителейПодключаемые = Элементы.ПроизводительКассовогоАппарата.СписокВыбора;
	Возврат СписокПроизводителейПодключаемые.НайтиПоЗначению(Производитель);
	
КонецФункции

&НаКлиенте
Функция УбратьРабочееМестоИзНаименования(Знач НаименованиеПодключаемогоОборудования) Экспорт
	
	ПозицияРабочегоМеста = СтрНайти(НаименованиеПодключаемогоОборудования, " на ");
	Если ПозицияРабочегоМеста > 0 Тогда
		Возврат Лев(НаименованиеПодключаемогоОборудования, ПозицияРабочегоМеста - 1);
	Иначе
		Возврат НаименованиеПодключаемогоОборудования;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СоздатьЭкземплярОборудованияККТ(ПодключаемоеОборудование, Драйвер, Наименование, РабочееМесто = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		НовыйЭкземпляр = ПодключаемоеОборудование.ПолучитьОбъект();
	Иначе
		НовыйЭкземпляр = Справочники.ПодключаемоеОборудование.СоздатьЭлемент();
	КонецЕсли;
	
	НовыйЭкземпляр.Наименование 	= Наименование;
	НовыйЭкземпляр.РабочееМесто     = РабочееМесто;
	НовыйЭкземпляр.Организация 		= Организация;
	НовыйЭкземпляр.ТипОборудования 	= Перечисления.ТипыПодключаемогоОборудования.ККТ;
	НовыйЭкземпляр.ТипПодключения 	= Перечисления.ТипыПодключенияОборудования.ЛокальноеПодключение;
	НовыйЭкземпляр.ДрайверОборудования    = Драйвер;
	НовыйЭкземпляр.УстройствоИспользуется = Истина;
	НовыйЭкземпляр.СпособФорматноЛогическогоКонтроля = Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки;
	НовыйЭкземпляр.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = 0.01;
	
	
	НовыйЭкземпляр.Записать();
	
	Оборудование = НовыйЭкземпляр.Ссылка;
	
	МенеджерЗаписи = РегистрыСведений.ОборудованиеПоОрганизациям.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Оборудование = Оборудование;
	МенеджерЗаписи.Организация  = Организация;
	МенеджерЗаписи.Склад        = Склад;
	
	МенеджерЗаписи.Записать(Истина);
	
	Возврат Оборудование;
	
КонецФункции

&НаКлиенте
Процедура НастроитьПодключаемоеОборудованиеЗавершение(РезультатВыполнения, ДопПараметры) Экспорт
	
	Если РезультатВыполнения Тогда
		Элементы.НастроитьПодключаемоеОборудование.Вид = ВидКнопкиФормы.Гиперссылка;
		Элементы.НастроитьПодключаемоеОборудование.Заголовок = "Параметры подключения";
		Элементы.НастроитьПодключаемоеОборудование.Отображение = ОтображениеКнопки.Текст;
		Элементы.ДекорацияОшибкаНастройки1.Видимость = Ложь;
		ОписаниеОшибкиНастройкиОборудования = "";
	Иначе
		Элементы.НастроитьПодключаемоеОборудование.Картинка = БиблиотекаКартинок.Внимание16;
		Элементы.НастроитьПодключаемоеОборудование.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.ДекорацияОшибкаНастройки1.Видимость = Истина;
		ОписаниеОшибкиНастройкиОборудования = НСтр("ru='Не удалось сохранить параметры устройства.'");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПодключаемогоОборудованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		ПараметрыФормы = Новый Структура("Ключ", ПодключаемоеОборудование);
		ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МобильнаяКасса

&НаКлиенте
Процедура СоздатьУзелОбменаСМобильнойКассой()
	
	СообщениеОбОшибке = "";
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		СоздатьУзелОбменаСМобильнойКассойНаСервере(СообщениеОбОшибке);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'При создании подключения возникла ошибка:
			|%1'"), СообщениеОбОшибке);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		
	Иначе
		//Завершение настройки
		Отказ = Ложь;
		Если ОбменЧерезФайл Тогда
			СохранитьФайлНастроекМобильногоПриложенияНаКлиенте(СообщениеОбОшибке, Отказ);
			Если Отказ Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ИспользуетсяЯндексДиск = ИспользованиеЯндексДиск().ИспользуетсяЯндексДиск;
		Если ИспользуетсяЯндексДиск Или Не ОбменЧерезФайл Тогда
			
			НачальныеПараметрыПодключения = ПолучитьНачальныеПараметрыПодключенияМобильнойКассы();
			
			НачальныеПараметрыПодключения.РегистрационныйНомер = ИдентификаторМК;
			НачальныеПараметрыПодключения.ИспользуетсяЯндексДиск = ИспользуетсяЯндексДиск;
			НачальныеПараметрыПодключения.КаталогФайловогоОбмена = КаталогФайловогоОбмена;
			
			ПараметрыПодключенияМК = ПолучитьПараметрыПодключенияМобильнойКассы(НачальныеПараметрыПодключения);
			
			Элементы.ГруппаQRКодНастроекМК.Видимость = ИспользуетсяЯндексДиск Или (Не ОбменЧерезФайл);
			
			ОтобразитьПодсказкуМобильнойКассыСервер(ПараметрыПодключенияМК);
			
		КонецЕсли;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
		Элементы.ГруппаРезультатСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультатМобильнаяКасса;
		Элементы.ФормаДалее.Заголовок = "Готово";
		Элементы.ФормаНазад.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьУзелОбменаСМобильнойКассойНаСервере(СообщениеОбОшибке)
	
	Если ОбменЧерезФайл Тогда
		
		ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными(Истина);
		
		Префикс = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
		Если Не ЗначениеЗаполнено(Префикс) Тогда
			ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(Префикс);
			ОбменДаннымиСервер.УстановитьПрефиксИнформационнойБазы(Префикс);
		КонецЕсли;
		
		ПодключаемоеОборудование = СоздатьУзелФайловогоОбменаМобильногоПриложения(СообщениеОбОшибке);
		
		Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
			Возврат;
		КонецЕсли;
		
		ИмяФайлаНастроекДляПриемника = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(
			"СинхронизацияДанныхЧерезУниверсальныйФормат", "ИмяФайлаНастроекДляПриемника", "");
		
	Иначе
		
		СоздатьЗаписьОжиданиеПодключенияМК(СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписьОжиданиеПодключенияМК(СообщениеОбОшибке)
	
	ПодключенияМК = РегистрыСведений.ОжиданиеПодключенияМК.СоздатьМенеджерЗаписи();
	ПодключенияМК.ИдентификаторМК = СокрЛП(ИдентификаторМК);
	ПодключенияМК.Прочитать();
	Если ПодключенияМК.Выбран() Тогда
		СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Для 1С:Мобильной кассы с идентификатором %1 подключение на стороне бухгалтерии уже настроено. Ожидается завершения настройки в 1С:Мобильная касса.'"), ИдентификаторМК);
	Иначе
		ПодключенияМК.Организация = Организация;
		ПодключенияМК.Склад = Склад;
		ПодключенияМК.ИдентификаторМК = СокрЛП(ИдентификаторМК);
				
		ПараметрыПодключения = ОпределитьПараметрыПодключенияМобильнойКассы(АдресИнтернетСервис);
		ПараметрыПодключения.Вставить("Пользователь", ИмяПользователя());
		ПараметрыПодключения.Вставить("РегистрационныйНомер", ИдентификаторМК);
		
		ПодключенияМК.ТекстНастройкиПодключения = СформироватьТекстПодсказкиПодключенияМобильнойКассы(ПараметрыПодключения);
		ПодключенияМК.ТекстQRКода = СформироватьДанныеQRПодключенияМобильнойКассы(ПараметрыПодключения);
		ПодключенияМК.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьУзелФайловогоОбменаМобильногоПриложения(СообщениеОбОшибке)

	УзелОбмена = Неопределено;
	Отказ = Ложь;
	
	ПараметрыПодключения = Новый Структура;
	НастройкиПодключения = НастройкиПодключенияФайловыйОбменМК(УзелОбмена, СообщениеОбОшибке, Отказ);
	ПараметрыПодключения.Вставить("НастройкиПодключения", НастройкиПодключения);

	АдресРезультата = ПоместитьВоВременноеХранилище(ПараметрыПодключения);
	МодульПомощникСозданияОбменаДанными = ОбменДаннымиСервер.МодульПомощникСозданияОбменаДанными();
	
	//Начать создание настройки обмена
	МодульПомощникСозданияОбменаДанными.СохранитьНастройкиПодключения(ПараметрыПодключения, АдресРезультата);

	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Если Результат.НастройкиПодключенияСохранены Тогда

		УзелОбмена = Результат.УзелОбмена;
		
		//Заполнить настройки и отборы узла
		ЗаполнитьСвойстваУзлаОбмена(УзелОбмена, СообщениеОбОшибке, Отказ);
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ОбменДаннымиСервер.ЗавершитьНастройкуСинхронизацииДанных(УзелОбмена);
		ОбменДаннымиСервер.ЗарегистрироватьДанныеДляНачальнойВыгрузки(УзелОбмена);
		
		ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
		ПараметрыОбмена.ВыполнятьЗагрузку = Ложь;
		ПараметрыОбмена.ВыполнятьВыгрузку = Истина;
		ПараметрыОбмена.ВидТранспортаСообщенийОбмена = НастройкиПодключения.ВидТранспортаСообщенийОбмена;
		ПараметрыОбмена.СообщениеДляСопоставленияДанных = Истина;
		
		Если НастройкиПодключения.Свойство("WSПароль") Тогда
			ПараметрыОбмена.Вставить("ПараметрыАутентификации", НастройкиПодключения.WSПароль);
		КонецЕсли;
		
		Попытка
			ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(УзелОбмена, ПараметрыОбмена, Отказ);
		Исключение
			СообщениеОбОшибке = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииВыгрузкаДанныхДляСопоставления(),
				УровеньЖурналаРегистрации.Ошибка, , , СообщениеОбОшибке);
		КонецПопытки;
		
		Справочники.СценарииОбменовДанными.СоздатьСценарий(УзелОбмена);

	Иначе

		СообщениеОбОшибке = СтрШаблон("%1 %2", СообщениеОбОшибке, Результат.СообщениеОбОшибке);

	КонецЕсли;
	
	Возврат УзелОбмена;
КонецФункции

&НаСервере
Процедура ЗаполнитьСвойстваУзлаОбмена(УзелОбмена, СообщениеОбОшибке, Отказ)
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	УзелОбъект = УзелОбмена.ПолучитьОбъект();
	Если ЗначениеЗаполнено(Склад) Тогда
		УзелОбъект.СкладПоУмолчанию = Склад;
		ТипЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипЦенРозничнойТорговли");
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			УзелОбъект.ТипЦенДляИзмененияЦен = ТипЦен;
		КонецЕсли;
		
		УзелОбъект.Склады.Очистить();
		НоваяСтрока = УзелОбъект.Склады.Добавить();
		НоваяСтрока.Склад = Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		УзелОбъект.Организации.Очистить();
		НоваяСтрока = УзелОбъект.Организации.Добавить();
		НоваяСтрока.Организация = Организация;
		УзелОбъект.ИспользоватьОтборПоОрганизациям = Истина;
	КонецЕсли;
	
	Попытка
		УзелОбъект.Записать();
	Исключение
		Отказ = Истина;
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция НастройкиПодключенияФайловыйОбменМК(УзелОбмена, СообщениеОбОшибке, Отказ)

	ИмяПланаОбмена = "СинхронизацияДанныхЧерезУниверсальныйФормат";
	
	ЭтотУзел 			= ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена);
	ИдентификаторУзла 	= ОбменДаннымиСервер.ИдентификаторЭтогоУзлаДляОбмена(ЭтотУзел);
	
	ПрефиксПриемника = ?(ЗначениеЗаполнено(УзелОбмена),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Код"),
		ПрефиксИнформационнойБазыПриемника(СообщениеОбОшибке, Отказ)
	);
	
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("FILEКаталогОбменаИнформацией", 							КаталогФайловогоОбмена);
	НастройкиПодключения.Вставить("FILEСжиматьФайлИсходящегоСообщения",						Истина);
	НастройкиПодключения.Вставить("FILEТранслитерироватьИменаФайловСообщенийОбмена",		Ложь);
	НастройкиПодключения.Вставить("ВариантНастройкиОбмена",									"ОбменМК");
	НастройкиПодключения.Вставить("ВариантРаботыМастера",									"НастроитьНовыйОбменДанными");  //ПродолжитьНастройкуОбменаДанными
	НастройкиПодключения.Вставить("ВерсияФорматаОбмена",									"1.10");
	НастройкиПодключения.Вставить("ВерсияФорматаФайлаНастроекОбменаДанными", 				"1.2");
	НастройкиПодключения.Вставить("ВидТранспортаСообщенийОбмена",							Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	НастройкиПодключения.Вставить("ИдентификаторИнформационнойБазыИсточника",				ИдентификаторУзла);
	НастройкиПодключения.Вставить("ИмяПланаОбмена",											ИмяПланаОбмена);
	НастройкиПодключения.Вставить("ИмяПланаОбменаКорреспондента",							ИмяПланаОбмена);
	НастройкиПодключения.Вставить("ИспользоватьПараметрыТранспортаCOM",						Ложь);
	НастройкиПодключения.Вставить("ИспользоватьПараметрыТранспортаEMAIL",					Ложь);
	НастройкиПодключения.Вставить("ИспользоватьПараметрыТранспортаFILE",					Истина);
	НастройкиПодключения.Вставить("ИспользоватьПараметрыТранспортаFTP",						Ложь);
	НастройкиПодключения.Вставить("ИспользоватьПрефиксыДляНастройкиОбмена",					Ложь);
	НастройкиПодключения.Вставить("ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента", 	Истина);
	НастройкиПодключения.Вставить("КодПредопределенногоУзла",								ИдентификаторУзла);
	НастройкиПодключения.Вставить("НаименованиеВторойБазы",
		СтрШаблон("Мобильная касса (%1)", ИдентификаторМК));
	НастройкиПодключения.Вставить("НаименованиеЭтойБазы",									"1С:Бухгалтерия");
	НастройкиПодключения.Вставить("ПарольАрхиваСообщенияОбмена",							"");
	НастройкиПодключения.Вставить("ПоддерживаемыеОбъектыФормата",							Неопределено);
	НастройкиПодключения.Вставить("ПрефиксИнформационнойБазыИсточника",						
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить());
	НастройкиПодключения.Вставить("ПрефиксИнформационнойБазыПриемника",						ПрефиксПриемника);
	НастройкиПодключения.Вставить("СсылкаНового",											Неопределено);
	НастройкиПодключения.Вставить("УзелИнформационнойБазы",									ЭтотУзел);
	НастройкиПодключения.Вставить("ФорматОбмена",											"http://v8.1c.ru/edi/edi_stnd/EnterpriseData");
	НастройкиПодключения.Вставить("ИсправитьДублированиеНастроекСинхронизации",				Ложь);

	Возврат НастройкиПодключения;

КонецФункции

&НаСервере
Функция ПрефиксИнформационнойБазыПриемника(СообщениеОбОшибке, Отказ)

	ПрефиксНачалоЧислом = КодСимвола("М");
	МаксимальноеЧислоКасс = 10;
	
	ОписаниеПрефикса = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(2));
	
	ТаблицаДоступныхПрефиксов = Новый ТаблицаЗначений;
	ТаблицаДоступныхПрефиксов.Колонки.Добавить("Префикс", ОписаниеПрефикса);

	Для Счетчик = 0 По МаксимальноеЧислоКасс - 1 Цикл  
		
		ЧислоДесятков = Цел(Счетчик / 10);
		ЧислоЕдиниц = Счетчик % 10;
		
		НоваяСтрока 		= ТаблицаДоступныхПрефиксов.Добавить();
		НоваяСтрока.Префикс = Символ(ПрефиксНачалоЧислом + ЧислоДесятков) + ЧислоЕдиниц;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаДоступных.Префикс КАК Префикс
	|ПОМЕСТИТЬ врТаблицаДоступных
	|ИЗ
	|	&ТаблицаДоступных КАК ТаблицаДоступных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СинхронизацияДанныхЧерезУниверсальныйФормат.Код КАК Префикс
	|ПОМЕСТИТЬ врТаблицаЗанятых
	|ИЗ
	|	ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат КАК СинхронизацияДанныхЧерезУниверсальныйФормат
	|ГДЕ
	|	НЕ СинхронизацияДанныхЧерезУниверсальныйФормат.ЭтотУзел
	|	И СинхронизацияДанныхЧерезУниверсальныйФормат.ВариантНастройки = &ВариантНастройки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	врТаблицаДоступных.Префикс КАК Префикс
	|ИЗ
	|	врТаблицаДоступных КАК врТаблицаДоступных
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаЗанятых КАК врТаблицаЗанятых
	|		ПО врТаблицаДоступных.Префикс = врТаблицаЗанятых.Префикс
	|ГДЕ
	|	врТаблицаЗанятых.Префикс ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ТаблицаДоступных", ТаблицаДоступныхПрефиксов);
	Запрос.УстановитьПараметр("ВариантНастройки", "ОбменМК");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Префикс;
	Иначе
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Нет доступных префиксов. Удалите неиспользуемые настройки синхронизации с 1С:Мобильная касса.'");
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СохранитьФайлНастроекМобильногоПриложенияНаКлиенте(СообщениеОбОшибке, Отказ)

	ОповещениеПолученияФайла = Новый ОписаниеОповещения("ПолучениеФайлаНастроекПодключенияЗавершение", ЭтотОбъект);

	ИмяФайлаНастроекПодключенияДляВыгрузки = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(КаталогФайловогоОбмена, ИмяФайлаНастроекДляПриемника + ".xml");

	АдресВХранилищеНастройкиПодключения = АдресФайлаНастроекПодключения(ПодключаемоеОборудование, СообщениеОбОшибке, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайлаНастроекПодключенияДляВыгрузки, АдресВХранилищеНастройкиПодключения));

	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
	ПараметрыСохранения.Интерактивно = Ложь;

	ФайловаяСистемаКлиент.СохранитьФайлы(ОповещениеПолученияФайла, ПолучаемыеФайлы, ПараметрыСохранения);

КонецПроцедуры

&НаКлиенте
Процедура ПолучениеФайлаНастроекПодключенияЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт

	Если ПолученныеФайлы = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не удалось сохранить настройки подключения в файл.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция АдресФайлаНастроекПодключения(УзелОбмена, СообщениеОбОшибке, Отказ)
	
	ПомощникСозданияОбменаДанными = ОбменДаннымиСервер.МодульПомощникСозданияОбменаДанными().Создать();
	
	ЗаполнитьЗначенияСвойств(ПомощникСозданияОбменаДанными, НастройкиПодключенияФайловыйОбменМК(УзелОбмена, СообщениеОбОшибке, Отказ));
	
	АдресФайлаНастроек = "";
	ПомощникСозданияОбменаДанными.ВыполнитьВыгрузкуПараметровМастераВоВременноеХранилище(Отказ, АдресФайлаНастроек);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаНастроек);
	АдресФайлаНастроек = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Возврат АдресФайлаНастроек

КонецФункции

&НаКлиенте
Функция ИспользованиеЯндексДиск()
	
	ИспользованиеЯндексДиск = Новый Структура;
	ИспользованиеЯндексДиск.Вставить("ИспользуетсяЯндексДиск", Ложь);
	ИспользованиеЯндексДиск.Вставить("ЭтоВложенныйКаталогЯндексДиск", Ложь);
	ИспользованиеЯндексДиск.Вставить("ЕстьОшибкаВыбораКаталогаЯндексДиск", Ложь);
	
	СтрокаПоиска = "YandexDisk";
	
	ИспользуетсяЯндексДиск = Ложь;
	ЭтоВложенныйКаталогЯндексДиск = Ложь;
	ЕстьОшибкаВыбораКаталогаЯндексДиск = Ложь;
	
	ИспользуетсяЯндексДиск = (СтрНайти(ВРег(КаталогФайловогоОбмена), ВРег(СтрокаПоиска)) > 0);
	
	ЭтоВложенныйКаталогЯндексДиск = ЭтоВложенныйКаталогЯндексДиск(КаталогФайловогоОбмена, СтрокаПоиска);
	
	Если ИспользуетсяЯндексДиск И Не ЭтоВложенныйКаталогЯндексДиск Тогда
		
		ЕстьОшибкаВыбораКаталогаЯндексДиск = Истина;
		
	КонецЕсли;
	
	ИспользованиеЯндексДиск.ИспользуетсяЯндексДиск = ИспользуетсяЯндексДиск;
	ИспользованиеЯндексДиск.ЭтоВложенныйКаталогЯндексДиск = ЭтоВложенныйКаталогЯндексДиск;
	ИспользованиеЯндексДиск.ЕстьОшибкаВыбораКаталогаЯндексДиск = ЕстьОшибкаВыбораКаталогаЯндексДиск;
	Возврат ИспользованиеЯндексДиск;
	
КонецФункции

&НаКлиенте
Функция ЭтоВложенныйКаталогЯндексДиск(КаталогФайловогоОбмена, СтрокаПоиска)
	
	// Например:
	// C:\Users\%username%\YandexDisk-mklogin\Exchange\
	
	// Это каталог яндекс диска?
	НачалоСтрокиПоиска = СтрНайти(КаталогФайловогоОбмена, СтрокаПоиска);
	Если НачалоСтрокиПоиска = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Указан вложенный каталог?
	НачалоСтрокиПоиска = СтрНайти(КаталогФайловогоОбмена, "\", , НачалоСтрокиПоиска);
	Если НачалоСтрокиПоиска = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоВложенныйКаталогЯндексДиск = ЗначениеЗаполнено(Сред(КаталогФайловогоОбмена, НачалоСтрокиПоиска + 1));
	Если ЭтоВложенныйКаталогЯндексДиск Тогда
		
		СтрокаПодключения = СформироватьСтрокуПодключенияЯндексДиск(КаталогФайловогоОбмена);
		
		Если ЗначениеЗаполнено(СтрокаПодключения) Тогда
			
			ЭтоВложенныйКаталогЯндексДиск = Истина;
			
		Иначе
			
			ЭтоВложенныйКаталогЯндексДиск = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЭтоВложенныйКаталогЯндексДиск;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтрокуПодключенияЯндексДиск(ПутьЯндексДиск)
	
	СтрокаПоиска = "YandexDisk\";
	
	КоличествоУдаляемыхСимволов = СтрНайти(ВРег(ПутьЯндексДиск), ВРег(СтрокаПоиска)) + СтрДлина(СтрокаПоиска) - 1;
	ДлинаСтроки = СтрДлина(ПутьЯндексДиск) - КоличествоУдаляемыхСимволов;
	СтрокаПодключения = СтрЗаменить(Прав(ПутьЯндексДиск, ДлинаСтроки), "\", "/");
	
	Возврат СтрокаПодключения;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодключенияМобильнойКассы(Параметры)
	
	Если Параметры.ИспользуетсяЯндексДиск Тогда
		
		ПараметрыПодключения = Новый Структура;
	
		ПараметрыПодключения.Вставить("Пользователь");
		ПараметрыПодключения.Вставить("Пароль");
		ПараметрыПодключения.Вставить("СтрокаПодключения", Параметры.КаталогФайловогоОбмена);
		ПараметрыПодключения.Вставить("РегистрационныйНомер", Параметры.РегистрационныйНомер);
		ПараметрыПодключения.Вставить("ЭтоЯндексДиск", Истина);
		ПараметрыПодключения.Вставить("НеУдалосьОпределитьАдресСервера", Ложь);
		
		Возврат ПараметрыПодключения;
		
	Иначе
		
		ПараметрыПодключения = ОпределитьПараметрыПодключенияМобильнойКассы(АдресИнтернетСервис);
		
		ПараметрыПодключения.Вставить("Пользователь", ИмяПользователя());
		ПараметрыПодключения.Вставить("РегистрационныйНомер", Параметры.РегистрационныйНомер);
		
		Возврат ПараметрыПодключения;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьНачальныеПараметрыПодключенияМобильнойКассы()
	
	ПараметрыПодключения = Новый Структура;
	
	ПараметрыПодключения.Вставить("РегистрационныйНомер");
	ПараметрыПодключения.Вставить("ИспользуетсяЯндексДиск");
	ПараметрыПодключения.Вставить("КаталогФайловогоОбмена");
	
	Возврат ПараметрыПодключения;

КонецФункции

&НаСервере
Функция ОпределитьПараметрыПодключенияМобильнойКассы(Знач АдресИнтернетСервис) Экспорт
	
	АдресСервера = "";
	НеУдалосьОпределитьАдресСервера = Истина;
	ИмяБазы = 0;
	
	Если ЗначениеЗаполнено(АдресИнтернетСервис) Тогда
		
		СтрокаСоединения = НРег(АдресИнтернетСервис);
		
		РазделительСеанса = Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ=0");
		
		// убираем разделитель сеанса и все что далее
		ПозицияПодстроки = СтрНайти(СтрокаСоединения, РазделительСеанса);
		СтрокаСоединения = Лев(СтрокаСоединения, ПозицияПодстроки - 1);
		
		// убираем двойной слеш и все что до
		ПозицияПодстроки = СтрНайти(СтрокаСоединения, "//");
		СтрокаСоединения = Сред(СтрокаСоединения, ПозицияПодстроки + 2);
		
		// получаем адрес сервера
		ПозицияПодстроки = СтрНайти(СтрокаСоединения, "/");
		АдресСервера = Лев(СтрокаСоединения, ПозицияПодстроки - 1);
		
		// получаем имя базы данных без разделителя
		ИмяБазыБезРазделителя = Сред(СтрокаСоединения, ПозицияПодстроки + 1);
		ИмяБазы = ИмяБазыБезРазделителя + РазделительСеанса;
		
		Если СтрНайти(СтрокаСоединения, "1cfresh.com") > 0 Тогда
			АдресСервера = НСтр("ru='1С:Фреш'");
			НеУдалосьОпределитьАдресСервера = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("СтрокаПодключения", АдресИнтернетСервис);
	ПараметрыПодключения.Вставить("ИмяБазы", ИмяБазы);
	ПараметрыПодключения.Вставить("АдресСервера", АдресСервера);
	ПараметрыПодключения.Вставить("ИспользоватьHttps", Истина);
	ПараметрыПодключения.Вставить("НеУдалосьОпределитьАдресСервера", НеУдалосьОпределитьАдресСервера);
	
	Возврат ПараметрыПодключения;
	
КонецФункции

&НаСервере
Процедура ОтобразитьПодсказкуМобильнойКассыСервер(ПараметрыПодключения)
	
	Если Элементы.ГруппаQRКодНастроекМК.Видимость Тогда
		АдресКартинкиQRКодНастроек = СформироватьQRПодключенияМобильнойКассы(ПараметрыПодключения);
	КонецЕсли;
	
	Элементы.НадписьПодсказкаМК.Заголовок = СформироватьТекстПодсказкиПодключенияМобильнойКассы(ПараметрыПодключения);
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуПодсказкиПодключенияМобильнойКассы(МассивСтрок, ЗаголовокСтроки, ЗначениеСтроки,
	ПредставлениеПустогоЗначения = "", ПереходПоСсылке = "")
	
	Если НЕ МассивСтрок.Количество() = 0 Тогда
		МассивСтрок.Добавить(Символы.ПС);
	КонецЕсли;
	
	СтрокаЗаголовка = Новый ФорматированнаяСтрока(ЗаголовокСтроки + ":",,
		ЦветаСтиля.ПоясняющийТекст
	);
	
	МассивСтрок.Добавить(СтрокаЗаголовка);
	
	МассивСтрок.Добавить(Символы.ПС);
	
	Если ЗначениеЗаполнено(ЗначениеСтроки) Тогда
		
		СтрокаЗначения = Новый ФорматированнаяСтрока(ЗначениеСтроки,
			Новый Шрифт(,, Истина)
		);
	Иначе
		
		СтрокаЗначения = Новый ФорматированнаяСтрока(ПредставлениеПустогоЗначения,
			Новый Шрифт(,, Истина), WebЦвета.Кирпичный,, ПереходПоСсылке
		);
		
	КонецЕсли;
	
	МассивСтрок.Добавить(СтрокаЗначения);
	
	МассивСтрок.Добавить(Символы.ПС);
	
КонецПроцедуры

&НаСервере
Функция СформироватьДанныеQRПодключенияМобильнойКассы(ПараметрыПодключения)
	
	ПараметрJSON = "";
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "", Истина);
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	//
	ЗаписьJSON.ЗаписатьИмяСвойства("RN"); // RegNumber
	ЗаписьJSON.ЗаписатьЗначение(ПараметрыПодключения.РегистрационныйНомер);
	
	СтрокаПодключения = ПараметрыПодключения.СтрокаПодключения;
	
	Если ЗначениеЗаполнено(ПараметрыПодключения.Пользователь) Тогда
		
		ЗаписьJSON.ЗаписатьИмяСвойства("User"); // User
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыПодключения.Пользователь);
		
	КонецЕсли;
	
	Если ПараметрыПодключения.Свойство("ЭтоЯндексДиск") Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПодключения.Пароль) Тогда
			
			ЗаписьJSON.ЗаписатьИмяСвойства("Password"); // Password
			ЗаписьJSON.ЗаписатьЗначение(ПараметрыПодключения.Пароль);
			
		КонецЕсли;
		
		ЗаписьJSON.ЗаписатьИмяСвойства("YandexDisk"); // YandexDisk
		ЗаписьJSON.ЗаписатьЗначение(ПараметрыПодключения.ЭтоЯндексДиск);
		
		СтрокаПодключения = СформироватьСтрокуПодключенияЯндексДиск(СтрокаПодключения);
		
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("Path"); // Path
	ЗаписьJSON.ЗаписатьЗначение(СтрокаПодключения);
	//
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ПараметрJSON = ЗаписьJSON.Закрыть();
	
	Возврат ПараметрJSON;
	
КонецФункции

&НаСервере
Функция СформироватьТекстПодсказкиПодключенияМобильнойКассы(ПараметрыПодключения) Экспорт
	
	МассивСтрок = Новый Массив;
	
	ТекстЗаголовок = НСтр("ru = 'В приложении 1С:Мобильная касса перейдите:'");
	МассивСтрок.Добавить(ТекстЗаголовок);
	
	МассивСтрок.Добавить(Символы.ПС);
	
	ТекстПуть = Новый ФорматированнаяСтрока(НСтр("ru = 'Настройки → Параметры → Синхронизация'"),
			Новый Шрифт(,, Истина)
		);
		
	МассивСтрок.Добавить(ТекстПуть);
	МассивСтрок.Добавить(Символы.ПС);
	
	Если ПараметрыПодключения.Свойство("ЭтоЯндексДиск") Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПодключения.Пользователь) Тогда
			
			ДобавитьСтрокуПодсказкиПодключенияМобильнойКассы(МассивСтрок,
				НСтр("ru = 'Имя пользователя'"),
				ПараметрыПодключения.Пользователь
			);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыПодключения.Пароль) Тогда
			
			ДобавитьСтрокуПодсказкиПодключенияМобильнойКассы(МассивСтрок,
				НСтр("ru = 'Пароль'"),
				ПараметрыПодключения.Пароль
			);
			
		КонецЕсли;
		
		СтрокаПодключения = СформироватьСтрокуПодключенияЯндексДиск(ПараметрыПодключения.СтрокаПодключения);
		
		ДобавитьСтрокуПодсказкиПодключенияМобильнойКассы(МассивСтрок,
			НСтр("ru = 'Путь к каталогу Яндекс.Диске'"),
			СтрокаПодключения
		);
		
		ДобавитьСтрокуПодсказкиПодключенияМобильнойКассы(МассивСтрок,
			НСтр("ru = 'Идентификатор приложения'"),
			ПараметрыПодключения.РегистрационныйНомер
		);
		
	Иначе
		
		ДобавитьСтрокуПодсказкиПодключенияМобильнойКассы(МассивСтрок,
			НСтр("ru = 'Адрес сервера'"),
			ПараметрыПодключения.АдресСервера
		);
		
		ДобавитьСтрокуПодсказкиПодключенияМобильнойКассы(МассивСтрок,
			НСтр("ru = 'Имя базы данных'"),
			ПараметрыПодключения.ИмяБазы, НСтр("ru='<Не указано>'"),
			"ИмяБазыДанныхНеУказано"
		);
		
		ДобавитьСтрокуПодсказкиПодключенияМобильнойКассы(МассивСтрок,
			НСтр("ru = 'Защищенный протокол (https)'"),
			Формат(ПараметрыПодключения.ИспользоватьHttps, "БЛ=Нет; БИ=Да")
		);
		
		ДобавитьСтрокуПодсказкиПодключенияМобильнойКассы(МассивСтрок,
			НСтр("ru = 'Пользователь'"),
			ПараметрыПодключения.Пользователь
		);
		
		ДобавитьСтрокуПодсказкиПодключенияМобильнойКассы(МассивСтрок,
			НСтр("ru = 'Идентификатор приложения'"),
			ПараметрыПодключения.РегистрационныйНомер
		);
		
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(НСтр("ru = 'Укажите пароль от 1С:Бухгалтерия'"));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

&НаСервере
Функция СформироватьQRПодключенияМобильнойКассы(ПараметрыПодключения) Экспорт
	
	ДанныеQR = СформироватьДанныеQRПодключенияМобильнойКассы(ПараметрыПодключения);
	
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.Вставить("Ширина", 200);
	ПараметрыШтрихкода.Вставить("Высота", 200);
	ПараметрыШтрихкода.Вставить("Штрихкод", СокрЛП(ДанныеQR));
	ПараметрыШтрихкода.Вставить("ТипКода", 16);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", Ложь);
	
	Картинка = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
	ДвоичныеДанные = Картинка.ДвоичныеДанные;
	АдресКартинки = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор());
	
	Возврат АдресКартинки;
	
КонецФункции

&НаСервере
Функция ЗаполнитьАдресИнтернетСервиса()
	
	РазделительСеанса = РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	
	Попытка
		СвойстваПриложения = ПрограммныйИнтерфейсСервиса.СвойстваПриложения(РазделительСеанса);
		АдресИнтернетСервис = СвойстваПриложения.АдресПриложения;
	Исключение
		АдресИнтернетСервис = "";
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПечатьНастроекМКНаСервере()
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.Защита = Истина;
	
	Макет = Обработки.ПодключенныеКассы.ПолучитьМакет("ПараметрыПодключения");
	
	Область = Макет.ПолучитьОбласть("Настройки");
	
	ПараметрыТабДок = Новый Структура;
	ПараметрыТабДок.Вставить("Заголовок", НСтр("ru = 'Помощник подключения кассы'"));
	ПараметрыТабДок.Вставить("Организация", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Организация: ""%1"", Склад: ""%2""", Организация, Склад));
	ПараметрыТабДок.Вставить("ПараметрыПодключения", Элементы.НадписьПодсказкаМК.Заголовок);
	
	Область.Параметры.Заполнить(ПараметрыТабДок);
	ТабДокумент.Вывести(Область);
	
	ТабДокумент.Рисунки.QRКод.Картинка = Новый Картинка(ПолучитьИзВременногоХранилища(АдресКартинкиQRКодНастроек));
	ТабДокумент.Рисунки.QRКод.ЦветФона = Новый Цвет();
	ТабДокумент.Рисунки.QRКод.Линия    = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	
	Возврат ТабДокумент;
	
КонецФункции

#КонецОбласти

#Область ОффлайнОборудование

&НаКлиенте
Процедура СоздатьЭлементОффлайнОборудование()
	
	Если НЕ ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		СоздатьЭлементОффлайнОборудованиеНаСервере();
		
		Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
			Оповещение = Новый ОписаниеОповещения("НастроитьОфлайнОборудованиеЗавершение", ЭтотОбъект);
			МенеджерОфлайнОборудованияКлиент.ВыполнитьНастройкуОборудования(ПодключаемоеОборудование, Оповещение);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультат;
		Элементы.ГруппаРезультатСтраницы.ТекущаяСтраница = Элементы.ГруппаРезультатОффлайнОборудование;
		Элементы.ФормаДалее.Заголовок = "Готово";
		Элементы.ФормаНазад.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементОффлайнОборудованиеНаСервере(НаименованиеПодключаемогоОборудования = "")
	
	Если ТипПодключения = 7 Тогда
		ОбработчикОфлайнОборудования = Перечисления.ОбработчикиОфлайнОборудования.ОбработчикАтолККМОфлайн;
	ИначеЕсли ТипПодключения = 8 Тогда
		ОбработчикОфлайнОборудования  = Перечисления.ОбработчикиОфлайнОборудования.ОбработчикШтрихМККМОфлайн;
	ИначеЕсли ТипПодключения = 5 Тогда
		ОбработчикОфлайнОборудования = Перечисления.ОбработчикиОфлайнОборудования.Обработчик1СЭвоторККМОфлайн;
		Элементы.КодыТоваровОффлайнОборудования.Видимость = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПредставлениеПроизводителя = ОбработчикОфлайнОборудования;
	РабочееМесто               = ПараметрыСеанса.РабочееМестоКлиента;
	
	ПредставлениеПодключаемогоОборудования =  Строка(ПредставлениеПроизводителя)
						+ ?(ПустаяСтрока(Строка(Склад)),
							" " + НСтр("ru='в бухгалтерии'"),
							" " + НСтр("ru='в'") + " " + Строка(Склад));
	// Как в БПО.
	НаименованиеПодключаемогоОборудования  = ПредставлениеПодключаемогоОборудования
						+ ?(ПустаяСтрока(Строка(РабочееМесто)),
							" ",
							" " + НСтр("ru='на'") + " " + Строка(РабочееМесто));
						
	ПодключаемоеОборудование = СоздатьЭкземплярОфлайнОборудование(
			ПодключаемоеОборудование,
			ОбработчикОфлайнОборудования,
			НаименованиеПодключаемогоОборудования,
			РабочееМесто);
	
КонецПроцедуры

&НаСервере
Функция СоздатьЭкземплярОфлайнОборудование(ПодключаемоеОборудование, ОбработчикОфлайнОборудования, Наименование, РабочееМесто = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		НовыйЭкземпляр = ПодключаемоеОборудование.ПолучитьОбъект();
	Иначе
		НовыйЭкземпляр = Справочники.ОфлайнОборудование.СоздатьЭлемент();
	КонецЕсли;
	
	Если ОбработчикОфлайнОборудования = Перечисления.ОбработчикиОфлайнОборудования.Обработчик1СЭвоторККМОфлайн Тогда
		ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.WS;
	Иначе
		ВидТранспортаОфлайнОбмена = Перечисления.ВидыТранспортаОфлайнОбмена.FILE;
	КонецЕсли;
		
	НовыйЭкземпляр.Наименование                 = Наименование;
	НовыйЭкземпляр.РабочееМесто                 = РабочееМесто;
	НовыйЭкземпляр.Организация                  = Организация;
	НовыйЭкземпляр.ТипОфлайнОборудования        = Перечисления.ТипыОфлайнОборудования.ККМ;
	НовыйЭкземпляр.ТипПодключенияОборудования   = Перечисления.ТипыПодключенияОборудования.ЛокальноеПодключение;
	НовыйЭкземпляр.ВидТранспортаОфлайнОбмена    = ВидТранспортаОфлайнОбмена;
	НовыйЭкземпляр.ОбработчикОфлайнОборудования = ОбработчикОфлайнОборудования;
	
	НовыйЭкземпляр.Записать();
	
	Оборудование = НовыйЭкземпляр.Ссылка;
	
	МенеджерЗаписи = РегистрыСведений.ОборудованиеПоОрганизациям.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Оборудование = Оборудование;
	МенеджерЗаписи.Организация  = Организация;
	МенеджерЗаписи.Склад        = Склад;
	
	УзелОбъект = ПланыОбмена.ОбменСПодключаемымОборудованиемOffline.СоздатьУзел();
	УзелОбъект.УстановитьНовыйКод();
	УзелОбъект.Наименование = Наименование;
	УзелОбъект.Записать();
	
	МенеджерЗаписи.УзелОбмена = УзелОбъект.Ссылка;
	
	ПараметрыОбъекта = Новый Структура("УзелОбмена, Склад", УзелОбъект.Ссылка, Склад);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	ДлительныеОперации.ВыполнитьВФоне("ПланыОбмена.ОбменСПодключаемымОборудованиемOffline.ОбновитьРегистрКодовНоменклатуры", ПараметрыОбъекта, ПараметрыВыполнения);
	
	МенеджерЗаписи.Записать(Истина);
	
	Возврат Оборудование;
	
КонецФункции

&НаКлиенте
Процедура ПредставлениеПодключаемогоОборудования1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ПодключаемоеОборудование) Тогда
		ПараметрыФормы = Новый Структура("Ключ", ПодключаемоеОборудование);
		ОткрытьФорму("Справочник.ОфлайнОборудование.ФормаОбъекта", ПараметрыФормы, , , , , );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОфлайнОборудованиеЗавершение(РезультатВыполнения, ДопПараметры) Экспорт
	
	Если РезультатВыполнения Тогда
		Элементы.НастроитьОффлайнОборудование.Вид = ВидКнопкиФормы.Гиперссылка;
		Элементы.НастроитьОффлайнОборудование.Заголовок = "Параметры подключения";
		Элементы.НастроитьОффлайнОборудование.Отображение = ОтображениеКнопки.Текст;
		Элементы.ДекорацияОшибкаНастройки.Видимость = Ложь;
		ОписаниеОшибкиНастройкиОборудования = "";
	Иначе
		Элементы.НастроитьОффлайнОборудование.Картинка = БиблиотекаКартинок.Внимание16;
		Элементы.НастроитьОффлайнОборудование.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.ДекорацияОшибкаНастройки.Видимость = Истина;
		ОписаниеОшибкиНастройкиОборудования = НСтр("ru='Не удалось сохранить параметры устройства.'");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НастроитьВидыОплатОфлайнОборудованиеЗавершение(РезультатВыполнения, ДопПараметры) Экспорт
	
	Элементы.НастроитьВидыОплатыОффланОборудования.Вид = ВидКнопкиФормы.Гиперссылка;
	Элементы.НастроитьВидыОплатыОффланОборудования.Заголовок = "Виды оплаты";
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОстаткиЗавершение(РезультатВыполнения, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура")
		И РезультатВыполнения.Свойство("Результат") Тогда
		
		Если РезультатВыполнения.Результат Тогда
			Элементы.ГруппаОффлайнВыгрузка.ТекущаяСтраница = Элементы.ГруппаОффлайнВыгрузкаГотово;
			Элементы.ПервоначальнаяВыгрузкаОффлайнОборудование.Картинка = БиблиотекаКартинок.ИзмененияСохранены;
			Элементы.ПервоначальнаяВыгрузкаОффлайнОборудование.Отображение = ОтображениеКнопки.КартинкаИТекст;
			Элементы.ДекорацияОшибкаВыгрузкиПрайса.Видимость = Ложь;
			ОписаниеОшибкиВыгрузкиПрайса = "";
		Иначе
			Элементы.ГруппаОффлайнВыгрузка.ТекущаяСтраница = Элементы.ГруппаОффлайнВыгрузкаКоманда;
			Элементы.ПервоначальнаяВыгрузкаОффлайнОборудование.Картинка = БиблиотекаКартинок.Внимание16;
			Элементы.ПервоначальнаяВыгрузкаОффлайнОборудование.Отображение = ОтображениеКнопки.КартинкаИТекст;
			Элементы.ДекорацияОшибкаВыгрузкиПрайса.Видимость = Истина;
			ОписаниеОшибкиВыгрузкиПрайса = РезультатВыполнения.ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОФД

&НаКлиенте
Процедура ЗагрузкаИзОФДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Отказ Тогда
		
		ТекстСообщения = Результат.СообщениеОбОшибке;
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось сохранить настройки подключения.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПроверитьДоступностьДалее()
	
	Результат = Истина;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНастройкаОборудования Тогда
		Если Элементы.ГруппаСтраницыНастройкаОборудования.ТекущаяСтраница =  Элементы.ГруппаНастройкаПодключаемоеОборудование Тогда
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана организация!'"));
				Результат = Ложь;
			КонецЕсли;
			
			Если (НЕ ЗначениеЗаполнено(Склад)) И КассаБухгалтерии = 0 Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана торговая точка!'"));
				Результат = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ПроизводительКассовогоАппарата) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан производитель кассового аппарата!'"));
				Результат = Ложь;
			КонецЕсли;
			
		ИначеЕсли Элементы.ГруппаСтраницыНастройкаОборудования.ТекущаяСтраница =  Элементы.ГруппаНастройкаМобильнаяКасса Тогда
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана организация!'"));
				Результат = Ложь;
			КонецЕсли;
			
			Если (НЕ ЗначениеЗаполнено(Склад)) И КассаБухгалтерии = 0 Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана торговая точка!'"));
				Результат = Ложь;
			КонецЕсли;
			
			Если (НЕ ЗначениеЗаполнено(КаталогФайловогоОбмена)) И ОбменЧерезФайл Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указан каталог обмена!'"));
				Результат = Ложь;
			КонецЕсли;
			
		ИначеЕсли Элементы.ГруппаСтраницыНастройкаОборудования.ТекущаяСтраница =  Элементы.ГруппаНастройкаОффлайнОборудование Тогда
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана организация!'"));
				Результат = Ложь;
			КонецЕсли;
			
			Если (НЕ ЗначениеЗаполнено(Склад)) И КассаБухгалтерии = 0 Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана торговая точка!'"));
				Результат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ТипПодключенияПриИзменении(Элемент)
	
	Если ЭтоВебКлиент И ТипПодключения = 1 Тогда
		Элементы.ГруппаПредупреждение.Видимость = Истина;
		Элементы.ФормаДалее.Доступность = Ложь;
		Элементы.ГруппаСтраницыПредупреждение.ТекущаяСтраница = Элементы.ГруппаВебКлиент;
	ИначеЕсли ОтключенТипЦен И (ТипПодключения = 5 ИЛИ ТипПодключения = 4) Тогда
		Элементы.ГруппаПредупреждение.Видимость = Истина;
		Элементы.ФормаДалее.Доступность = Ложь;
		Элементы.ГруппаСтраницыПредупреждение.ТекущаяСтраница = Элементы.ГруппаТипЦен;
	Иначе
		Элементы.ГруппаПредупреждение.Видимость = Ложь;
		Элементы.ФормаДалее.Доступность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОшибкаВыгрузкиПрайсаНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сообщение", ОписаниеОшибкиВыгрузкиПрайса);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Не удалось выгрузить прайс-лист'"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаСообщение", ПараметрыФормы, ЭтаФорма, , , , ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОшибкаНастройкиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сообщение", ОписаниеОшибкиНастройкиОборудования);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Не удалось сохранить параметры подключения оборудования'"));
	
	ОткрытьФорму("ОбщаяФорма.ФормаСообщение", ПараметрыФормы, ЭтаФорма, , , , ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

