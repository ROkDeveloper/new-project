
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Считывает данные файла в табличный документ, определяет загружаемые колонки и тип цен.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ХранилищеДанныхФайла - ХранилищеЗначения - двоичные данные файла, упакованные в хранилище значений.
//      * РасширениеФайла - Строка - расширение файла.
//      * ОписаниеКолонок - ТаблицаЗначений - описание загружаемых колонок, см. НовыйОписаниеЗагружаемыхКолонок().
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура ОбработатьДанныеИзФайла(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ПараметрыЗадания.Вставить("МакетЗаголовка", ПолучитьМакет("МакетЗаголовка"));
	
	ТабличныйДокумент = ЗагрузкаДанныхИзВнешнихФайлов.ЗагрузитьФайлВТабличныйДокумент(ПараметрыЗадания);
	
	ТекстНезаполненногоЗаголовка = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.ТекстЗаголовкаНесопоставленнойКолонки();
	
	ТипЦен = Неопределено;
	Валюта = Неопределено;
	НайденоЦен = 0;
	СопоставленыВсеЯчейки = Истина;
	Для НомерКолонки = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
		
		Ячейка = ТабличныйДокумент.Область(1, НомерКолонки);
		Если Ячейка.ПараметрРасшифровки = "НеЗагружать" Тогда
			СопоставленыВсеЯчейки = Ложь;
		КонецЕсли;
		
		Если Не СтрНачинаетсяС(Ячейка.Текст, НСтр("ru = 'Цена'")) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденоЦен = НайденоЦен + 1;
		
		Если ТипЦен <> Неопределено Тогда
			Ячейка.Текст = ТекстНезаполненногоЗаголовка;
			Ячейка.ПараметрРасшифровки = "";
			Ячейка.ЦветТекста = ЦветаСтиля.НезаполненныйРеквизит;
		ИначеЕсли ЗначениеЗаполнено(Ячейка.ПараметрРасшифровки) Тогда
			СведенияОТипеЦен = ТипИВалютаЦеныПоИдентификатору(Ячейка.ПараметрРасшифровки);
			ТипЦен = СведенияОТипеЦен.ТипЦен;
			Валюта = СведенияОТипеЦен.Валюта;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СопоставленыВсеЯчейки И НайденоЦен = 1 Тогда
		// Структура колонок полностью соответствует стандарту обработки "Выгрузка номенклатуры и цен"
		УдаляемаяОбласть = ТабличныйДокумент.Область(2, , 2);
		ТабличныйДокумент.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеФайла", Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
	Результат.Вставить("ТипЦен", ТипЦен);
	Результат.Вставить("Валюта", Валюта);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// По данным табличного документа заполняет таблицу товаров для загрузки.
// Выполняет поиск существующей номенклатуры.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ХранилищеДанных - ХранилищеЗначения - табличный документ, содержащий данные.
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура ПолучитьТаблицуДанныхТоваров(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ДанныеФайла = ПараметрыЗадания.ХранилищеДанных.Получить();
	ШиринаТаблицы = ДанныеФайла.ШиринаТаблицы;
	ВысотаТаблицы = ДанныеФайла.ВысотаТаблицы;
	ЕдиницаИзмерения = ПараметрыЗадания.ЕдиницаИзмерения;
	СтавкаНДС = ПараметрыЗадания.СтавкаНДС;
	МассивУИД = Новый Массив;
	
	// Получаем соответствие номера колонки и его заголовка.
	СоответствиеКолонок = Новый Соответствие;
	Для НомерКолонки = 1 По ШиринаТаблицы Цикл
		
		Ячейка = ДанныеФайла.Область(1, НомерКолонки);
		Если СтрНайти(Ячейка.Текст, "Цена") > 0 Тогда
			ТекстЯчейки = "Цена";
		Иначе
			ТекстЯчейки = Ячейка.ПараметрРасшифровки;
		КонецЕсли;
		СоответствиеКолонок.Вставить(ТекстЯчейки, НомерКолонки);
		
	КонецЦикла;
	
	ЕстьКолонкаСтавкаНДС = СоответствиеКолонок.Получить("СтавкаНДС") <> Неопределено;
	ЕстьКолонкаЕдиницаИзмерения = СоответствиеКолонок.Получить("ЕдиницаИзмерения") <> Неопределено;
	ЕстьКолонкаАртикул = СоответствиеКолонок.Получить("Артикул") <> Неопределено;
	ЕстьКолонкаУИД = СоответствиеКолонок.Получить("УИД") <> Неопределено;
	ЕстьКолонкаШтрихкод = СоответствиеКолонок.Получить("Штрихкод") <> Неопределено;
	
	// Производим сериализацию данных, поиск номенклатуры, заполняем таб. часть.
	Товары = НовыйТаблицаЗагружаемыхДанных();
	
	Счетчик = 0;
	СоответствиеЕдиницИзмерения = Новый Соответствие;
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		
		// Наименование
		Наименование = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("Наименование")).Текст);
		Если ПустаяСтрока(Наименование) Тогда
			Продолжить; // пропускаем строки с пустым наименованием номенклатуры
		КонецЕсли;
		
		Если ДанныеФайла.Область(НомерСтроки, 1).ПараметрРасшифровки = "НеЗагружать" Тогда
			Продолжить; // пропускаем строки заголовков исходного файла
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
		СтрокаТаблицы = Товары.Добавить();
		СтрокаТаблицы.НомерСтроки = Счетчик;
		СтрокаТаблицы.Наименование = Наименование;
		СтрокаТаблицы.НаименованиеПолное = Наименование;
		
		// УИД
		Если СоответствиеКолонок.Получить("УИД") <> Неопределено Тогда
			
			СтрокаТаблицы.УИД = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("УИД")).Текст);
			Попытка
				УИДНоменклатуры = Новый УникальныйИдентификатор(СтрокаТаблицы.УИД);
				Если МассивУИД.Найти(УИДНоменклатуры) = Неопределено Тогда
					// Пользователь копированием может создать новую строку с одинаковым УИД,
					// поэтому по УИД сопоставляем только первый вариант
					НоменкалтураПоУИД = Справочники.Номенклатура.ПолучитьСсылку(УИДНоменклатуры);
					Если ОбщегоНазначения.СсылкаСуществует(НоменкалтураПоУИД) Тогда
						СтрокаТаблицы.Номенклатура = НоменкалтураПоУИД;
						СтрокаТаблицы.НайденоПоУИД = Истина;
						МассивУИД.Добавить(УИДНоменклатуры);
					КонецЕсли;
				КонецЕсли;
			Исключение
			КонецПопытки
			
		КонецЕсли;
		
		// Артикул
		Если СоответствиеКолонок.Получить("Артикул") <> Неопределено Тогда
			
			СтрокаТаблицы.Артикул = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("Артикул")).Текст);
			
		КонецЕсли;
		
		// Штрихкод
		Если СоответствиеКолонок.Получить("Штрихкод") <> Неопределено Тогда
			
			СтрокаТаблицы.Штрихкод = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("Штрихкод")).Текст);
			
		КонецЕсли;
		
		// Единица измерения
		Если СоответствиеКолонок.Получить("ЕдиницаИзмерения") <> Неопределено Тогда
			
			СтрЕдиницаИзмерения = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("ЕдиницаИзмерения")).Текст);
			Если Не ПустаяСтрока(СтрЕдиницаИзмерения) Тогда
				
				СтрокаТаблицы.ЕдиницаИзмерения = ПолучитьЕдиницуИзмерения(СтрЕдиницаИзмерения, СоответствиеЕдиницИзмерения);
				
			КонецЕсли;
			СтрокаТаблицы.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения), СтрокаТаблицы.ЕдиницаИзмерения, ЕдиницаИзмерения);
			
		КонецЕсли;
		
		// Ставка НДС
		Если СоответствиеКолонок.Получить("СтавкаНДС") <> Неопределено Тогда
			
			СтрСтавкаНДС = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("СтавкаНДС")).Текст);
			Если Не ПустаяСтрока(СтрСтавкаНДС) Тогда
				
				СтрокаТаблицы.СтавкаНДС = ПолучитьСтавкуНДСПеречислением(СтрСтавкаНДС);
				
			КонецЕсли;
			СтрокаТаблицы.СтавкаНДС = ?(ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС), СтрокаТаблицы.СтавкаНДС, СтавкаНДС);
			
		КонецЕсли;
		
		// Цена
		Если СоответствиеКолонок.Получить("Цена") <> Неопределено Тогда
			
			СтрЦена = СокрЛП(ДанныеФайла.Область(НомерСтроки, СоответствиеКолонок.Получить("Цена")).Текст);
			Если Не ПустаяСтрока(СтрЦена) Тогда
				
				СтрокаТаблицы.Цена = ПолучитьЦенуИзСтроки(СтрЦена);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы.Статус = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.СтатусНовый();
		СтрокаТаблицы.Представление = НСтр("ru = 'Новый: '") + СтрокаТаблицы.Наименование + ", " + СтрокаТаблицы.Артикул;
		
	КонецЦикла;
	
	ПоляПоиска = ПоляПоискаНоменклатуры(ЕстьКолонкаУИД, ЕстьКолонкаАртикул, ЕстьКолонкаЕдиницаИзмерения, ЕстьКолонкаШтрихкод);
	
	ПроизвестиПоискНоменклатуры(Товары, ПоляПоиска);
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьКолонкаСтавкаНДС", ЕстьКолонкаСтавкаНДС);
	Результат.Вставить("ЕстьКолонкаЕдиницаИзмерения", ЕстьКолонкаЕдиницаИзмерения);
	Результат.Вставить("ЕстьКолонкаШтрихкод", ЕстьКолонкаШтрихкод);
	Результат.Вставить("ПоляПоиска", ПоляПоиска);
	Результат.Вставить("Товары", Товары);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ПроизвестиПоискНоменклатурыВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	Товары = ПараметрыЗадания.Товары;
	Для Каждого СтрокаТаблицы Из Товары Цикл
		Если СтрокаТаблицы.НайденоПоУИД Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		СтрокаТаблицы.СписокНоменклатуры = Неопределено;
		СтрокаТаблицы.Статус = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.СтатусНовый();
		СтрокаТаблицы.Представление = НСтр("ru = 'Новый: '") + СтрокаТаблицы.Наименование + ", " + СтрокаТаблицы.Артикул;
	КонецЦикла;
	ПроизвестиПоискНоменклатуры(Товары, ПараметрыЗадания.ПоляПоиска);
	
	ПоместитьВоВременноеХранилище(Товары, АдресХранилища);
	
КонецПроцедуры

// Загружает подготовленные данные в информационную базу.
// Создает новую номенклатуру и документ установки цен.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * Товары - ТаблицаЗначений - таблица товаров для загрузки.
//      * Родитель - СправочникСсылка.Номенклатура - группа для новой номенклатуры.
//      * ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид новой номенклатуры.
//      * НоменклатурнаяГруппа - СправочникСсылка.НоменклатурныеГруппы - номенклатурная группа для новой номенклатуры.
//      * ЕдиницаИзмерения - СправочникСсылка.КлассификаторЕдиницИзмерения - единица измерения по умолчанию.
//      * СтавкаНДС - ПеречислениеСсылка.СтавкиНЛС - ставка НДС по умолчанию.
//      * ТипЦен - СправочникСсылка.ТипыЦенНоменклатуры - тип цен для регистрации цен номенклатуры.
//      * ДатаУстановкиЦен - Дата - дата регистрации цен номенклатуры.
//      * Валюта - СправочникСсылка.Валюты - валюта цены.
//      * ЕстьКолонкаЕдиницаИзмерения - Булево - признак наличия единицы измерения в загружаемом файле.
//      * ЕстьКолонкаСтавкаНДС - Булево - признак наличия ставки НДС в загружаемом файле.
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура ЗагрузитьДанныеФайла(ПараметрыЗадания, АдресХранилища) Экспорт
	
	Родитель					 = ПараметрыЗадания.Родитель;
	ВидНоменклатуры				 = ПараметрыЗадания.ВидНоменклатуры;
	ЭтоУслуга					 = ?(ЗначениеЗаполнено(ВидНоменклатуры),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "Услуга"),
		Ложь);
	НоменклатурнаяГруппа		 = ПараметрыЗадания.НоменклатурнаяГруппа;
	ЕдиницаИзмерения			 = ПараметрыЗадания.ЕдиницаИзмерения;
	СтавкаНДС					 = ПараметрыЗадания.СтавкаНДС;
	ТипЦен						 = ПараметрыЗадания.ТипЦен;
	ДатаУстановкиЦен			 = ПараметрыЗадания.ДатаУстановкиЦен;
	Валюта						 = ПараметрыЗадания.Валюта;
	Товары						 = ПараметрыЗадания.Товары;
	ЕстьКолонкаЕдиницаИзмерения	 = ПараметрыЗадания.ЕстьКолонкаЕдиницаИзмерения;
	ЕстьКолонкаСтавкаНДС		 = ПараметрыЗадания.ЕстьКолонкаСтавкаНДС;
	ЕстьКолонкаШтрихкод			 = ПараметрыЗадания.ЕстьКолонкаШтрихкод;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.Номенклатура КАК Номенклатура,
	               |	Таблица.Артикул КАК Артикул,
	               |	Таблица.Наименование КАК Наименование,
	               |	Таблица.Цена КАК Цена,
	               |	Таблица.Статус КАК Статус,
	               |	Таблица.Штрихкод КАК Штрихкод,
	               |	Таблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Таблица.СтавкаНДС КАК СтавкаНДС,
	               |	Таблица.НаименованиеПолное КАК НаименованиеПолное,
	               |	Таблица.НайденоПоУИД КАК НайденоПоУИД
	               |ПОМЕСТИТЬ Таблица
	               |ИЗ
	               |	&Таблица КАК Таблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЦеныНоменклатуры.Регистратор КАК Регистратор,
	               |	ЦеныНоменклатуры.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ЦеныНоменклатуры
	               |ИЗ
	               |	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	               |ГДЕ
	               |	ЦеныНоменклатуры.ТипЦен = &ТипЦен
	               |	И ЦеныНоменклатуры.Период = &Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ЦеныНоменклатуры.Регистратор, НЕОПРЕДЕЛЕНО) КАК Регистратор,
	               |	Таблица.Номенклатура КАК Номенклатура,
	               |	Таблица.Артикул КАК Артикул,
	               |	Таблица.Наименование КАК Наименование,
	               |	Таблица.Цена КАК Цена,
	               |	Таблица.Статус КАК Статус,
	               |	Таблица.Штрихкод КАК Штрихкод,
	               |	Таблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	Таблица.СтавкаНДС КАК СтавкаНДС,
	               |	Таблица.НаименованиеПолное КАК НаименованиеПолное,
	               |	Таблица.НайденоПоУИД КАК НайденоПоУИД
	               |ИЗ
	               |	Таблица КАК Таблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
	               |		ПО Таблица.Номенклатура = ЦеныНоменклатуры.Номенклатура
	               |ИТОГИ ПО
	               |	Регистратор";
	Запрос.УстановитьПараметр("Период", ДатаУстановкиЦен);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.УстановитьПараметр("Таблица", Товары);
	ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Ошибки = Неопределено;
	Пока ВыборкаРегистратор.Следующий() Цикл
		ИскатьНоменклатуру = Истина;
		Если ЗначениеЗаполнено(ВыборкаРегистратор.Регистратор) Тогда
			Документ = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
		Иначе
			Документ = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
			Документ.Дата								 = ДатаУстановкиЦен;
			Документ.НеПроводитьНулевыеЗначения			 = Истина;
			Документ.ТипЦен								 = ТипЦен;
			Документ.Комментарий						 = НСтр("ru = '#Загружен из файла.'");
			Документ.Ответственный						 = Пользователи.ТекущийПользователь();
			ИскатьНоменклатуру = Ложь;
		КонецЕсли;
		
		ВыборкаНоменклатура = ВыборкаРегистратор.Выбрать();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура) Тогда
				Номенклатура = ВыборкаНоменклатура.Номенклатура;
				Если ВыборкаНоменклатура.НайденоПоУИД Тогда
					НоменклатураОбъект = Номенклатура.ПолучитьОбъект();
					НоменклатураОбъект.Наименование = ВыборкаНоменклатура.Наименование;
                    НоменклатураОбъект.Артикул = ВыборкаНоменклатура.Артикул;
					Если ЕстьКолонкаЕдиницаИзмерения Тогда
						НоменклатураОбъект.ЕдиницаИзмерения = ВыборкаНоменклатура.ЕдиницаИзмерения;
					КонецЕсли;
					Если ЕстьКолонкаСтавкаНДС Тогда
						НоменклатураОбъект.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.ВидСтавки(
							?(ЕстьКолонкаСтавкаНДС, ВыборкаНоменклатура.СтавкаНДС, СтавкаНДС));
					КонецЕсли;
					
					Ошибка = "";
					ЗаписатьНоменклатуру(НоменклатураОбъект, Ошибка);
					Если ЗначениеЗаполнено(Ошибка) Тогда
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", Ошибка);
					ИначеЕсли ЕстьКолонкаШтрихкод Тогда
						РегистрыСведений.ШтрихкодыНоменклатуры.ЗаписатьШтрихкод(НоменклатураОбъект.Ссылка, ВыборкаНоменклатура.Штрихкод);
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоменклатураОбъект							 = Справочники.Номенклатура.СоздатьЭлемент();
				НоменклатураОбъект.Наименование				 = ВыборкаНоменклатура.Наименование;
				НоменклатураОбъект.НаименованиеПолное		 = ВыборкаНоменклатура.НаименованиеПолное;
				НоменклатураОбъект.Артикул					 = ВыборкаНоменклатура.Артикул;
				НоменклатураОбъект.ВидНоменклатуры			 = ВидНоменклатуры;
				НоменклатураОбъект.Родитель					 = Родитель;
				НоменклатураОбъект.НоменклатурнаяГруппа		 = НоменклатурнаяГруппа;
				НоменклатураОбъект.ВидСтавкиНДС				 = Перечисления.ВидыСтавокНДС.ВидСтавки(
					?(ЕстьКолонкаСтавкаНДС, ВыборкаНоменклатура.СтавкаНДС, СтавкаНДС));
				НоменклатураОбъект.ЕдиницаИзмерения			 = ?(ЕстьКолонкаЕдиницаИзмерения, ВыборкаНоменклатура.ЕдиницаИзмерения, ЕдиницаИзмерения);
				НоменклатураОбъект.Услуга 					 = ЭтоУслуга;
				
				Ошибка = "";
				ЗаписатьНоменклатуру(НоменклатураОбъект, Ошибка);
				Если ЗначениеЗаполнено(Ошибка) Тогда
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", Ошибка);
					Прервать;
				ИначеЕсли ЕстьКолонкаШтрихкод Тогда
					РегистрыСведений.ШтрихкодыНоменклатуры.ЗаписатьШтрихкод(НоменклатураОбъект.Ссылка, ВыборкаНоменклатура.Штрихкод);
				КонецЕсли;
				Номенклатура = НоменклатураОбъект.Ссылка;
				ИскатьНоменклатуру = Ложь;
			КонецЕсли;
			
			Если ИскатьНоменклатуру Тогда
				СтрокаТаблицы = Документ.Товары.Найти(Номенклатура, "Номенклатура");
				Если СтрокаТаблицы = Неопределено Тогда
					СтрокаТаблицы = Документ.Товары.Добавить();
				КонецЕсли;
			Иначе
				СтрокаТаблицы = Документ.Товары.Добавить();
			КонецЕсли;
			СтрокаТаблицы.Номенклатура = Номенклатура;
			СтрокаТаблицы.Валюта = Валюта;
			СтрокаТаблицы.Цена = ВыборкаНоменклатура.Цена;
		КонецЦикла;
		
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = "";
			Если ДатыЗапретаИзменения.ИзменениеЗапрещено(Документ,, ТекстСообщения) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru = 'Не удалось %1 документ для установки цен типа ""%2""
					|%3'");
				
				ТекстСообщения = СтрШаблон(
					ШаблонСообщения,
					?(ЗначениеЗаполнено(ВыборкаРегистратор.Регистратор), "записать", "создать"),
					ТипЦен, 
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
				
				ОписаниеОшибки = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(
					ИмяСобытияЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.УстановкаЦенНоменклатуры,
					?(ЗначениеЗаполнено(ВыборкаРегистратор.Регистратор), ВыборкаРегистратор.Регистратор, ""), 
					ОписаниеОшибки.Описание);
			КонецЕсли;
			
			Прервать;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Ошибки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Удаляет строки и колонки, не содержащие полезной информации для загрузки.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ХранилищеДанных - ХранилищеЗначения - табличный документ, содержащий данные.
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура УдалитьВсеНенужныеСтрокиТаблицы(ПараметрыЗадания, АдресХранилища) Экспорт
	
	ТабличныйДокумент = ПараметрыЗадания.ХранилищеДанных.Получить();
	
	НайденыНенужныеСтроки = Ложь;
	ЗагрузкаДанныхИзВнешнихФайлов.УдалитьВсеНенужныеСтрокиТаблицы(ТабличныйДокумент, НайденыНенужныеСтроки);
	
	Результат = Новый Структура;
	Результат.Вставить("НайденыНенужныеСтроки", НайденыНенужныеСтроки);
	Результат.Вставить("ХранилищеДанных", Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Возвращает тип цен и валюту цены по переданному уникальному идентификатору типа цен.
//
// Параметры:
//   ИдентификаторТипаЦен - Строка - уникальный идентификатор типа цен.
//
// Возвращаемое значение:
//   Структура - структура с ключами:
//      * ТипЦен - СправочникСсылка.ТипыЦенНоменклатуры, Неопределено - ссылка на тип цен или Неопределено (если не найден тип цен)
//      * Валюта - СправочникСсылка.Валюты, Неопределено - ссылка на валюту или Неопределено (если не найден тип цен)
//
Функция ТипИВалютаЦеныПоИдентификатору(ИдентификаторТипаЦен) Экспорт
	
	Результат = Новый Структура("ТипЦен, Валюта");
	
	Если ТипЗнч(ИдентификаторТипаЦен) <> Тип("Строка")
		Или ПустаяСтрока(ИдентификаторТипаЦен) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Обрабатывается случай, когда ИдентификаторТипаЦен не соответствует формату строки GUID.
	Попытка
		Результат.ТипЦен = Справочники.ТипыЦенНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторТипаЦен));
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	Результат.Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Результат.ТипЦен, "ВалютаЦены");
	
	// Проверим, что ТипЦен не содержит битую ссылку.
	Если Результат.Валюта = Неопределено Тогда
		Результат.ТипЦен = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Запрос для поиска номенклатуры по данным колонок таблицы
//
// Параметры:
//  Таблица				- 	ТаблицаЗначений - таблица с данными для поиска 
//  РеквизитыДляПоиска	- 	Строка - перечисление названий полей, по которым необходимо производить поиск. 
// 		Также важен порядок полей при поиске. Например, были указаны поля: "Наименование, Артикул, ЕдиницаИзмерения". Поиск в этомй случае будет производиться по следующим полям:
//		1. Наименование + Артикул + ЕдиницаИзмерения
//		2. Наименование + Артикул, если на предыдущем шаге ничего не найдено
//		3. Только Наименование, если на предыдущем шаге ничего не найдено
// 
// Возвращаемое значение:
//  Запрос - запрос для получения результата поиска
//
Функция ЗапросПоискаНоменклатуры(Таблица, РеквизитыДляПоиска) Экспорт
	
	ТаблицаДляПроверки = Таблица.Скопировать();
	
	ТипСтрока = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	
	Если ТаблицаДляПроверки.Колонки.Найти("Номенклатура") = Неопределено Тогда
		ТаблицаДляПроверки.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КонецЕсли;
	Если ТаблицаДляПроверки.Колонки.Найти("Наименование") = Неопределено Тогда
		ТаблицаДляПроверки.Колонки.Добавить("Наименование", ТипСтрока);
	КонецЕсли;
	Если ТаблицаДляПроверки.Колонки.Найти("НаименованиеПолное") = Неопределено Тогда
		ТаблицаДляПроверки.Колонки.Добавить("НаименованиеПолное", ТипСтрока);
	КонецЕсли;
	Если ТаблицаДляПроверки.Колонки.Найти("Артикул") = Неопределено Тогда
		ТаблицаДляПроверки.Колонки.Добавить("Артикул", ТипСтрока);
	КонецЕсли;
	Если ТаблицаДляПроверки.Колонки.Найти("ЕдиницаИзмерения") = Неопределено Тогда
		ТаблицаДляПроверки.Колонки.Добавить("ЕдиницаИзмерения",
			Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	КонецЕсли;
	Если ТаблицаДляПроверки.Колонки.Найти("НайденоПоУИД") = Неопределено Тогда
		ТаблицаДляПроверки.Колонки.Добавить("НайденоПоУИД", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если ТаблицаДляПроверки.Колонки.Найти("Штрихкод") = Неопределено Тогда
		ТаблицаДляПроверки.Колонки.Добавить("Штрихкод", ТипСтрока);
	КонецЕсли;
	Если ТаблицаДляПроверки.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный);
		ТаблицаДляПроверки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", КвалификаторЧисла));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ПараметрыЗапроса = ЗначенияВесовВыборки(РеквизитыДляПоиска);
	ПараметрыЗапроса.Вставить("Таблица", ТаблицаДляПроверки);
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК НоменклатураПоУИД,
	|	Таблица.Наименование КАК Наименование,
	|	Таблица.НаименованиеПолное КАК НаименованиеПолное,
	|	Таблица.Артикул КАК Артикул,
	|	Таблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Таблица.Штрихкод КАК Штрихкод,
	|	Таблица.НайденоПоУИД КАК НайденоПоУИД,
	|	Таблица.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаДляПроверки
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураПоУИД КАК НоменклатураПоУИД,
	|	Таблица.Наименование КАК Наименование,
	|	Таблица.Штрихкод КАК Штрихкод,
	|	Таблица.НаименованиеПолное КАК НаименованиеПолное,
	|	Таблица.Артикул КАК Артикул,
	|	Таблица.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Таблица.НайденоПоУИД КАК НайденоПоУИД,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоУИД,
	|	СправочникНоменклатура.ВидСтавкиНДС КАК ВидСтавкиНДСПоУИД
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	ТаблицаДляПроверки КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Таблица.НоменклатураПоУИД)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НайденоПоУИД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.НайденоПоУИД КАК НайденоПоУИД,
	|	Таблица.Наименование КАК НаименованиеТаблица,
	|	Таблица.НаименованиеПолное КАК НаименованиеПолноеТаблица,
	|	Таблица.Артикул КАК АртикулТаблица,
	|	Таблица.Штрихкод КАК ШтрихкодТаблица,
	|	Таблица.ЕдиницаИзмерения КАК ЕдиницаИзмеренияТаблица,
	|	ЕСТЬNULL(НоменклатураПоПолямПоиска.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Номенклатура,
	|	ЕСТЬNULL(НоменклатураПоПолямПоиска.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(НоменклатураПоПолямПоиска.НаименованиеПолное, """") КАК НаименованиеПолное,
	|	ЕСТЬNULL(НоменклатураПоПолямПоиска.Артикул, """") КАК Артикул,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	ЕСТЬNULL(НоменклатураПоПолямПоиска.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(НоменклатураПоПолямПоиска.ВидСтавкиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.ПустаяСсылка)) КАК ВидСтавкиНДС
	|ПОМЕСТИТЬ ВТНоменклатураПоПолямПоиска
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураПоПолямПоиска
	|		ПО (Таблица.НайденоПоУИД = ЛОЖЬ)
	|			И (НЕ НоменклатураПоПолямПоиска.ЭтоГруппа)
	|			И (НЕ НоменклатураПоПолямПоиска.ПометкаУдаления)
	|			И (&ПоискПоНаименованию
	|					И (Таблица.Наименование = НоменклатураПоПолямПоиска.Наименование
	|						ИЛИ Таблица.НаименованиеПолное = НоменклатураПоПолямПоиска.НаименованиеПолное)
	|				ИЛИ &ПоискПоАртикулу
	|					И Таблица.Артикул <> """"
	|					И Таблица.Артикул = НоменклатураПоПолямПоиска.Артикул
	|				ИЛИ &ПоискПоЕдиницеИзмерения
	|					И Таблица.ЕдиницаИзмерения <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|					И Таблица.ЕдиницаИзмерения = НоменклатураПоПолямПоиска.ЕдиницаИзмерения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (Таблица.Штрихкод <> """"
	|				И НоменклатураПоПолямПоиска.Ссылка = ШтрихкодыНоменклатуры.Номенклатура
	|				И Таблица.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод)
	|ГДЕ
	|	НоменклатураПоПолямПоиска.Ссылка <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки,
	|	Таблица.НайденоПоУИД,
	|	Таблица.Наименование,
	|	Таблица.НаименованиеПолное,
	|	Таблица.Артикул,
	|	Таблица.Штрихкод,
	|	Таблица.ЕдиницаИзмерения,
	|	ЕСТЬNULL(НоменклатураПоШтрихкоду.Ссылка, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
	|	ЕСТЬNULL(НоменклатураПоШтрихкоду.Наименование, """"),
	|	ЕСТЬNULL(НоменклатураПоШтрихкоду.НаименованиеПолное, """"),
	|	ЕСТЬNULL(НоменклатураПоШтрихкоду.Артикул, """"),
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """"),
	|	ЕСТЬNULL(НоменклатураПоШтрихкоду.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)),
	|	ЕСТЬNULL(НоменклатураПоШтрихкоду.ВидСтавкиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.ПустаяСсылка))
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (Таблица.НайденоПоУИД = ЛОЖЬ)
	|			И (&ПоискПоШтрихкоду)
	|			И (Таблица.Штрихкод <> """")
	|			И Таблица.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураПоШтрихкоду
	|		ПО (ШтрихкодыНоменклатуры.Номенклатура = НоменклатураПоШтрихкоду.Ссылка)
	|			И (НЕ НоменклатураПоШтрихкоду.ЭтоГруппа)
	|			И (НЕ НоменклатураПоШтрихкоду.ПометкаУдаления)
	|ГДЕ
	|	НоменклатураПоШтрихкоду.Ссылка <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНоменклатураПоПолямПоиска.НомерСтроки КАК НомерСтроки,
	|	ВТНоменклатураПоПолямПоиска.НайденоПоУИД КАК НайденоПоУИД,
	|	ВТНоменклатураПоПолямПоиска.Номенклатура КАК Номенклатура,
	|	ВТНоменклатураПоПолямПоиска.Артикул КАК Артикул,
	|	ВТНоменклатураПоПолямПоиска.Штрихкод КАК Штрихкод,
	|	ВТНоменклатураПоПолямПоиска.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВТНоменклатураПоПолямПоиска.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	ВЫБОР
	|		КОГДА ВТНоменклатураПоПолямПоиска.НаименованиеТаблица = ВТНоменклатураПоПолямПоиска.Наименование
	|				ИЛИ ВТНоменклатураПоПолямПоиска.НаименованиеПолноеТаблица = ВТНоменклатураПоПолямПоиска.НаименованиеПолное
	|			ТОГДА ВЫБОР
	|					КОГДА ВТНоменклатураПоПолямПоиска.НаименованиеПолноеТаблица = ВТНоменклатураПоПолямПоиска.НаименованиеПолное
	|						ТОГДА &ВесПоляНаименование + 1
	|					ИНАЧЕ &ВесПоляНаименование
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ВТНоменклатураПоПолямПоиска.АртикулТаблица <> """"
	|				И ВТНоменклатураПоПолямПоиска.АртикулТаблица = ВТНоменклатураПоПолямПоиска.Артикул
	|			ТОГДА &ВесПоляАртикул
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ВТНоменклатураПоПолямПоиска.Штрихкод <> """"
	|				И ВТНоменклатураПоПолямПоиска.ШтрихкодТаблица = ВТНоменклатураПоПолямПоиска.Штрихкод
	|			ТОГДА &ВесПоляШтрихкод
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ВТНоменклатураПоПолямПоиска.ЕдиницаИзмеренияТаблица <> ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
	|				И ВТНоменклатураПоПолямПоиска.ЕдиницаИзмеренияТаблица = ВТНоменклатураПоПолямПоиска.ЕдиницаИзмерения
	|			ТОГДА &ВесПоляЕдиницаИзмерения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВесВыборки
	|ИЗ
	|	ВТНоменклатураПоПолямПоиска КАК ВТНоменклатураПоПолямПоиска
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки,
	|	Таблица.НайденоПоУИД,
	|	Таблица.НоменклатураПоУИД,
	|	Таблица.Артикул,
	|	Таблица.Штрихкод,
	|	Таблица.ЕдиницаИзмерения,
	|	Таблица.ВидСтавкиНДСПоУИД,
	|	0
	|ИЗ
	|	Таблица КАК Таблица
	|ГДЕ
	|	Таблица.НайденоПоУИД = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ВесВыборки УБЫВ
	|ИТОГИ ПО
	|	НомерСтроки,
	|	ВесВыборки";
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ОписаниеЗагружаемыхКолонок() Экспорт
	
	ОписаниеКолонок = ЗагрузкаДанныхИзВнешнихФайлов.НовыйОписаниеЗагружаемыхКолонок();
	
	// Наименование
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "Наименование";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Наименование'");
	НоваяСтрока.ОбязательнаДляЗаполнения = Истина;
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиНаименования();
	
	// Уникальный идентификатор номенклатуры
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "УИД";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Уникальный идентификатор номенклатуры'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Уникальный идентификатор номенклатуры");
	
	// Артикул
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "Артикул";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Артикул'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Артикул");
	
	// Штрихкод
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "Штрихкод";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Штрихкод'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Штрихкод");
	
	// Типы цен
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "Цена";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Цена'");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦен,
	|	ТипыЦенНоменклатуры.Наименование КАК ПредставлениеКолонки
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|ГДЕ
	|	НЕ ТипыЦенНоменклатуры.ПометкаУдаления";
	ВыборкаТипыЦен = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаТипыЦен.Следующий() Цикл
		НоваяСтрока = ОписаниеКолонок.Добавить();
		НоваяСтрока.Идентификатор = Строка(ВыборкаТипыЦен.ТипЦен.УникальныйИдентификатор());
		НоваяСтрока.ПредставлениеКолонки = ВыборкаТипыЦен.ПредставлениеКолонки;
		НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыборкаТипыЦен.ПредставлениеКолонки);
		НоваяСтрока.Родитель = "Цена";
	КонецЦикла;
	
	// Единица измерения
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "ЕдиницаИзмерения";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Единица измерения'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Единица измерения");
	
	// Ставка НДС
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "СтавкаНДС";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru = 'Ставка НДС'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Ставка НДС");
	
	Возврат ОписаниеКолонок;
	
КонецФункции

Функция ПодходящиеЗаголовкиНаименования()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("Наименование");
	МассивЗаголовков.Добавить("Номенклатура");
	
	Возврат МассивЗаголовков;
	
КонецФункции

#Область ЗагрузкаДанных

Функция НовыйТаблицаЗагружаемыхДанных()
	
	ЗагружаемыеДанные = Новый ТаблицаЗначений;
	
	Для Каждого Реквизит Из Метаданные.Обработки.ЗагрузкаНоменклатурыИзФайла.ТабличныеЧасти.Товары.Реквизиты Цикл
	
		ЗагружаемыеДанные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	
	КонецЦикла;
	
	ЗагружаемыеДанные.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ЗагружаемыеДанные.Колонки.Добавить("СписокНоменклатуры", Новый ОписаниеТипов("СписокЗначений"));
	
	Возврат ЗагружаемыеДанные;
	
КонецФункции

Процедура ПроизвестиПоискНоменклатуры(Таблица, ПоляПоиска)
	
	СписокРеквизитов = Новый Массив;
	Для Каждого ЭлементСписка Из ПоляПоиска Цикл
		Если Не ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		СписокРеквизитов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	РеквизитыДляПоиска = СтрСоединить(СписокРеквизитов, ",");
	
	Запрос = ЗапросПоискаНоменклатуры(Таблица, РеквизитыДляПоиска);
	
	ВыборкаНомерСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		ВыборкаВесСтроки = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаВесСтроки.Следующий();
		ВыборкаНоменклатура = ВыборкаВесСтроки.Выбрать();
		
		СтрокаТаблицы = Таблица[ВыборкаНомерСтроки.НомерСтроки - 1];
		ОбработкаВыборкиНоменклатуры(СтрокаТаблицы, ВыборкаНоменклатура);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаВыборкиНоменклатуры(СтрокаТаблицы, ВыборкаНоменклатура)

	ВыборкаКоличество = ВыборкаНоменклатура.Количество();
	Если ВыборкаКоличество = 1 Тогда // найдено 1 значение
		СтрокаТаблицы.Статус = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.СтатусНайденный();
		ВыборкаНоменклатура.Следующий();
		СтрокаТаблицы.Номенклатура = ВыборкаНоменклатура.Номенклатура;
		РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицы.Номенклатура, "ВидСтавкиНДС, ЕдиницаИзмерения");
		Если СтрокаТаблицы.НайденоПоУИД Тогда
			СтрокаТаблицы.Представление = СтрокаТаблицы.Наименование + ", " + СтрокаТаблицы.Артикул;
		Иначе
			СтрокаТаблицы.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения;
			СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.СтавкаНДС(РеквизитыНоменклатуры.ВидСтавкиНДС, ТекущаяДатаСеанса());
		КонецЕсли;
	Иначе // дубли
		СтрокаТаблицы.Статус = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.СтатусДубль();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			СтрокаТаблицы.СписокНоменклатуры.Добавить(ВыборкаНоменклатура.Номенклатура);
			СтрокаТаблицы.Представление = НСтр("ru = 'Найдено '") + ВыборкаКоличество + ": "
				+ СтрокаТаблицы.Наименование + ", " + СтрокаТаблицы.Артикул;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры 

Функция ПолучитьСтавкуНДСПеречислением(ПредставлениеСтавкиНДС)
	
	ЗначениеНДС = Неопределено;
	
	Если СтрНайти(ВРЕГ(ПредставлениеСтавкиНДС), "БЕЗ НДС") > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.БезНДС;
		
	ИначеЕсли ПредставлениеСтавкиНДС = "0" ИЛИ ПредставлениеСтавкиНДС = "0%" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли СтрНайти(ПредставлениеСтавкиНДС, "10") > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли СтрНайти(ПредставлениеСтавкиНДС, "20") > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС20;
		
	ИначеЕсли СтрНайти(ПредставлениеСтавкиНДС, "18") > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18;
	
	КонецЕсли;
	
	Возврат ЗначениеНДС;
	
КонецФункции

Функция ПолучитьЕдиницуИзмерения(ПредставлениеЕдиницыИзмерения, СоответствиеЕдиницИзмерения)
	
	ЗначениеЕдиницы = СоответствиеЕдиницИзмерения.Получить(ПредставлениеЕдиницыИзмерения);
	Если ЗначениеЕдиницы = Неопределено Тогда
		
		// Поиск единицы измерения по точному соответствию наименования.
		ЗначениеЕдиницы = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(
				ПредставлениеЕдиницыИзмерения, Истина);
				
		Если ЗначениеЗаполнено(ЗначениеЕдиницы) Тогда
			СоответствиеЕдиницИзмерения.Вставить(ПредставлениеЕдиницыИзмерения, ЗначениеЕдиницы);
			Возврат ЗначениеЕдиницы;
		КонецЕсли;
		
		// Поиск единицы измерения по наименованию после удаления точек и запятых.
		НаименованиеЕдиницы = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(",.", ПредставлениеЕдиницыИзмерения, "");
		ЗначениеЕдиницы = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(НаименованиеЕдиницы, Истина);
		Если ЗначениеЗаполнено(ЗначениеЕдиницы) Тогда
			СоответствиеЕдиницИзмерения.Вставить(ПредставлениеЕдиницыИзмерения, ЗначениеЕдиницы);
			Возврат ЗначениеЕдиницы;
		КонецЕсли;
		
		// Если не находим по наименованию, подбираем по классификатору.
		МакетКлассификатора = Справочники.КлассификаторЕдиницИзмерения.ПолучитьМакет("КлассификаторЕдиницИзмерения");
		КолонкаЧисловогоКода = МакетКлассификатора.Области.КодЧисловой.Лево;
		Результат = МакетКлассификатора.НайтиТекст(НаименованиеЕдиницы,, МакетКлассификатора.Области.НаименованиеКраткое, Истина, Истина, Истина, Истина);
		Если Результат <> Неопределено Тогда
			
			НомерСтроки = Результат.Верх;
			КодЕдиницыИзмерения = МакетКлассификатора.Область(НомерСтроки, КолонкаЧисловогоКода).Текст;
			ЗначениеЕдиницы = Справочники.КлассификаторЕдиницИзмерения.ЕдиницаИзмеренияПоКоду(КодЕдиницыИзмерения);
			СоответствиеЕдиницИзмерения.Вставить(ПредставлениеЕдиницыИзмерения, ЗначениеЕдиницы);
			
			Возврат ЗначениеЕдиницы;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ЗначениеЕдиницы;
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

// Для преобразования строки в число, выделяем цифры из строки
Функция ПолучитьЦенуИзСтроки(СтрЦена)
	
	СтрЦена = НРег(СтрЦена);
	ДлинаСтроки = СтрДлина(СтрЦена);
	СтрРезультат = "";
	Для Н = 1 По ДлинаСтроки Цикл
		
		СимволСтроки = Сред(СтрЦена, Н, 1);
		Если (КодСимвола(СимволСтроки) >= 48 И КодСимвола(СимволСтроки) <= 57)
			ИЛИ СимволСтроки = "." ИЛИ СимволСтроки = "," Тогда
			
			СтрРезультат = СтрРезультат + СимволСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Убираем лишние символы перед числом
	Пока (СтрНачинаетсяС(СтрРезультат, ",") ИЛИ СтрНачинаетсяС(СтрРезультат, "."))
		И СтрДлина(СтрРезультат) > 1 Цикл
		
		СтрРезультат = Сред(СтрРезультат, 2);
		
	КонецЦикла;
	
	// Убираем лишние символы после числа
	Пока (СтрЗаканчиваетсяНа(СтрРезультат, ",") ИЛИ СтрЗаканчиваетсяНа(СтрРезультат, "."))
		И СтрДлина(СтрРезультат) > 1 Цикл
		
		СтрРезультат = Лев(СтрРезультат, СтрДлина(СтрРезультат) - 1);
		
	КонецЦикла;
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрРезультат);
	
КонецФункции

Функция ЗначенияВесовВыборки(РеквизитыДляПоиска)
	
	СписокПолей = СтрРазделить(РеквизитыДляПоиска, "," + " ", Ложь);
	
	ЗначенияВесов = Новый Структура;
	ЗначенияВесов.Вставить("ПоискПоНаименованию", Ложь);
	ЗначенияВесов.Вставить("ПоискПоАртикулу", Ложь);
	ЗначенияВесов.Вставить("ПоискПоШтрихкоду", Ложь);
	ЗначенияВесов.Вставить("ПоискПоЕдиницеИзмерения", Ложь);
	ЗначенияВесов.Вставить("ВесПоляНаименование", 0);
	ЗначенияВесов.Вставить("ВесПоляАртикул", 0);
	ЗначенияВесов.Вставить("ВесПоляШтрихкод", 0);
	ЗначенияВесов.Вставить("ВесПоляЕдиницаИзмерения", 0);
	
	УстановленоПолеПоиска = Ложь;
	ВесПоля = СписокПолей.Количество() * 10;
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		Если Не (УстановленоПолеПоиска Или ЭлементСписка = ПолеПоискаУникальныйИдентификатор()) Тогда
			ЗначенияВесов.ПоискПоНаименованию = (ЭлементСписка = ПолеПоискаНаименование());
			ЗначенияВесов.ПоискПоАртикулу = (ЭлементСписка = ПолеПоискаАртикул());
			ЗначенияВесов.ПоискПоШтрихкоду = (ЭлементСписка = ПолеПоискаШтрихкод());
			ЗначенияВесов.ПоискПоЕдиницеИзмерения = (ЭлементСписка = ПолеПоискаЕдиницаИзмерения());
			УстановленоПолеПоиска = Истина;
		КонецЕсли;
		Если ЭлементСписка = ПолеПоискаНаименование() Тогда
			ЗначенияВесов.ВесПоляНаименование = ВесПоля; 
		ИначеЕсли ЭлементСписка = ПолеПоискаАртикул() Тогда
			ЗначенияВесов.ВесПоляАртикул = ВесПоля;
		ИначеЕсли ЭлементСписка = ПолеПоискаШтрихкод() Тогда
			ЗначенияВесов.ВесПоляШтрихкод = ВесПоля;
		ИначеЕсли ЭлементСписка = ПолеПоискаЕдиницаИзмерения() Тогда
			ЗначенияВесов.ВесПоляЕдиницаИзмерения = ВесПоля;
		КонецЕсли;
		ВесПоля = ВесПоля - 10;
	КонецЦикла;
	
	Возврат ЗначенияВесов;
	
КонецФункции

Функция ПоляПоискаНоменклатуры(ЕстьКолонкаУИД, ЕстьКолонкаАртикул, ЕстьКолонкаЕдиницаИзмерения, ЕстьКолонкаШтрихкод)
	
	ПоляПоиска = Новый СписокЗначений;
	
	Если ЕстьКолонкаУИД Тогда
		ПоляПоиска.Добавить(ПолеПоискаУникальныйИдентификатор(), "Уникальный идентификатор", Истина);
	КонецЕсли;
	ПоляПоиска.Добавить(ПолеПоискаНаименование(), "Наименование", Истина);
	Если ЕстьКолонкаАртикул Тогда
		ПоляПоиска.Добавить(ПолеПоискаАртикул(), "Артикул", Истина);
	КонецЕсли;
	Если ЕстьКолонкаШтрихкод Тогда
		ПоляПоиска.Добавить(ПолеПоискаШтрихкод(), "Штрихкод", Истина);
	КонецЕсли;
	Если ЕстьКолонкаЕдиницаИзмерения Тогда
		ПоляПоиска.Добавить(ПолеПоискаЕдиницаИзмерения(), "Единица измерения", Истина);
	КонецЕсли;
	
	Возврат ПоляПоиска;
	
КонецФункции

Функция ПолеПоискаНаименование()
	
	Возврат "Наименование";
	
КонецФункции

Функция ПолеПоискаАртикул()
	
	Возврат "Артикул";
	
КонецФункции

Функция ПолеПоискаЕдиницаИзмерения()
	
	Возврат "ЕдиницаИзмерения";
	
КонецФункции

Функция ПолеПоискаУникальныйИдентификатор()
	
	Возврат "УникальныйИдентификатор";
	
КонецФункции

Функция ПолеПоискаШтрихкод()
	
	Возврат "Штрихкод";
	
КонецФункции

Процедура ЗаписатьНоменклатуру(НоменклатураОбъект, Ошибка = "")
	
	Попытка
		НоменклатураОбъект.Записать();
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать номенклатуру ""%1""
                                |%2'");
		Ошибка = СтрШаблон(ШаблонСообщения, НоменклатураОбъект.Наименование,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.Номенклатура,, 
			ОписаниеОшибки.Описание);
	КонецПопытки;
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Загрузка номенклатуры'", ОбщегоНазначения.КодОсновногоЯзыка())
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли