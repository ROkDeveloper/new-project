
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкаОбсужденийДоступна = ПравоДоступа("АдминистрированиеДанных", Метаданные);
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И ДоступныеОрганизации.Количество() > 1;
	
	ОрганизацияПоУмолчанию = Справочники.Организации.ОрганизацияПоУмолчанию();
	Организация = ОрганизацияПоУмолчанию;
	ЭтоЮрЛицо = Справочники.Организации.ЭтоЮрЛицо(ОрганизацияПоУмолчанию);
	НаименованияНаДату = Справочники.Организации.НаименованияНаДату(ОрганизацияПоУмолчанию, ТекущаяДата());
	НаименованиеОрганизации = НаименованияНаДату.СокращенноеНаименование;
	ЭтоПолныйИнтерфейс = ОбщегоНазначенияБП.ЭтоПолныйИнтерфейс();

	УстановитьСостояниеИнтеграции();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "БизнесСеть_РегистрацияОрганизаций" Тогда
		УстановитьСостояниеИнтеграции();
		Если ЭтотОбъект.СервисПодключен Тогда
			ВыполнитьДействияПоПодключениюСервисаВФоне();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбсужденияПодключены" Тогда
		УправлениеФормой(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "ФормированиеОтчетаПоРасхождениям" Тогда
		ОтобразитьРезультатыСверки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьРезультатыСверки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы И Не ЭтотОбъект.ЭтоПолныйИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияНавигацияПоРасхождениямОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СервисСверкиРасчетовКлиент.ОбработатьПереходПользователяПоСсылкеСОтбормПоПериоду(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодробнееОСервисе(Команда)
	
	СервисСверкиРасчетовКлиент.ОткрытьНавигационнуюСсылкуПодробнееОСервисе();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Команда)
	
	ПодключитьИнтернетПоддержкуПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникПодключенияКСервисуБизнесСеть(Команда)
	
	СервисСверкиРасчетовКлиент.ОткрытьПомощникПодключенияКСервисуБизнесСеть(ЭтотОбъект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОрганизациюОтБизнесСети(Команда)
	
	Если ЭтотОбъект.ИспользоватьНесколькоОрганизаций Тогда
		ОткрытьФорму("ОбщаяФорма.СервисСверкиРасчетовПодключенныеОрганизации");
	Иначе
		СервисСверкиРасчетовКлиент.ОтключитьОрганизациюОтБизнесСети(ЭтотОбъект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКоличествоПодключенныхНажатие(Элемент)
	
	ОткрытьФорму("ОбщаяФорма.СервисСверкиРасчетовПодключенныеОрганизации");
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьСервис(Команда)
	
	УстановитьПризнакПодключенияСервисаНаСервере(Истина);
	
	Если ЭтотОбъект.СервисПодключен Тогда
		ВыполнитьДействияПоПодключениюСервисаВФоне();
	КонецЕсли;

	Если ЭтотОбъект.ЭтоПолныйИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСервис(Команда)
	
	УстановитьПризнакПодключенияСервисаНаСервере(Ложь);
	
	Если ЭтотОбъект.ЭтоПолныйИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбсуждениня(Команда)
	
	МодульОбсужденияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияКлиент");
	МодульОбсужденияКлиент.ПоказатьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОбсуждения(Команда)
	
	МодульОбсужденияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияКлиент");
	МодульОбсужденияКлиент.ПоказатьОтключение();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	// Интернет-поддержка
	ИнтернетПоддержкаПодключена = ИнтернетПоддержкаПодключена();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ИнтернетПоддержка",
		"Видимость",
		Не ИнтернетПоддержкаПодключена);
		
	// Бизнес-сеть
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"БизнесСеть",
		"Видимость",
		ИнтернетПоддержкаПодключена);
		
	СтатусыОрганизацийБизнесСеть = КоличествоОрганизацийБизнесСети();

	Форма.Элементы.Организация.СписокВыбора.Очистить();
	ОрганизацииДляПодключения = ОрганизацииДляПодключения();
	Для Каждого Организация Из ОрганизацииДляПодключения Цикл
		Форма.Элементы.Организация.СписокВыбора.Добавить(Организация);
	КонецЦикла;
	
	Если СтатусыОрганизацийБизнесСеть.КоличествоПодключенных > 0
		И СтатусыОрганизацийБизнесСеть.КоличествоПодключенных <> СтатусыОрганизацийБизнесСеть.Количество Тогда
		Форма.Организация = Неопределено;
	Иначе
		Форма.Организация = Форма.ОрганизацияПоУмолчанию;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПодключениеКБизнесСетьПервойОрганизации",
		"Видимость",
		СтатусыОрганизацийБизнесСеть.КоличествоПодключенных = 0);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПодключенныеОрганизацииБизнесСеть",
		"Видимость",
		СтатусыОрганизацийБизнесСеть.КоличествоПодключенных > 0);
		
	Элементы.ДекорацияКоличествоПодключенных.Заголовок = СтрШаблон(
		"%1 из %2",
		СтатусыОрганизацийБизнесСеть.КоличествоПодключенных,
		СтатусыОрганизацийБизнесСеть.Количество);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПодключитьОрганизациюКБизнесСети",
		"Видимость",
		(Форма.ИспользоватьНесколькоОрганизаций И СтатусыОрганизацийБизнесСеть.КоличествоПодключенных <> СтатусыОрганизацийБизнесСеть.Количество)
		Или СтатусыОрганизацийБизнесСеть.КоличествоПодключенных = 0);
		
	Если Форма.ИспользоватьНесколькоОрганизаций Тогда
		Элементы.ГруппаБизнесСеть.Заголовок = НСтр("ru='Подключите организации к 1С:Бизнес-сети'");
		Элементы.ДекорацияКоличествоПодключенных.Видимость = Истина;
		Элементы.Организация.Видимость = Истина;
		Элементы.ГруппаОтключитьБизнесСеть.Видимость = Ложь;
	Иначе
		Элементы.Организация.Видимость = Ложь;
		Элементы.ДекорацияСостояниеБизнесСеть.Заголовок = 
			?(Форма.ЭтоЮрЛицо,
			СтрШаблон("Организация %1 подключена к 1С:Бизнес-сети", Форма.НаименованиеОрганизации),
			СтрШаблон("%1 подключен к 1С:Бизнес-сети", Форма.НаименованиеОрганизации)); 
		Элементы.ЗаголовокОрганизацииНеПодключены.Заголовок =
			?(Форма.ЭтоЮрЛицо,
			СтрШаблон("Организация %1 не подключена к 1С:Бизнес-сети", Форма.НаименованиеОрганизации),
			СтрШаблон("%1 не подключен к 1С:Бизнес-сети", Форма.НаименованиеОрганизации)); 
	КонецЕсли;
		
	// Включение сервиса
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВключениеСервисаСверки",
		"Видимость",
		ИнтернетПоддержкаПодключена);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ВключениеСервисаСверки",
		"Доступность",
		СтатусыОрганизацийБизнесСеть.КоличествоПодключенных > 0);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПодключитьСервис",
		"Видимость",
		Не Форма.СервисПодключен);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтключитьСервис",
		"Видимость",
		Форма.СервисПодключен);

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияНавигацияПоРасхождениямПростойИнтерфейс",
		"Видимость",
		Не Форма.ЭтоПолныйИнтерфейс);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияНавигацияПоРасхождениямПолныйИнтерфейс",
		"Видимость",
		Форма.ЭтоПолныйИнтерфейс);
		
	// Обсуждения
	МожноПодключитьОбсуждения = СервисСверкиРасчетовВызовСервера.МожноПодключитьОбсуждения()
		И ИнтернетПоддержкаПодключена;
		
	ОбсужденияПодключены = СервисСверкиРасчетовВызовСервера.ОбсужденияПодключены();
	
	Элементы.ОбратитесьКАдминистратору.Видимость =
		МожноПодключитьОбсуждения
		И Не Форма.НастройкаОбсужденийДоступна
		И Не ОбсужденияПодключены;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"УведомленияОРасхождениях",
		"Видимость",
		МожноПодключитьОбсуждения);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"УведомленияОРасхождениях",
		"Доступность",
		СтатусыОрганизацийБизнесСеть.КоличествоПодключенных > 0
		И Форма.СервисПодключен
		Или ОбсужденияПодключены);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПодключитьУведомления",
		"Видимость",
		Не ОбсужденияПодключены);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаОтключитьУведомления",
		"Видимость",
		ОбсужденияПодключены);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПодключитьОбсуждения",
		"Видимость",
		Форма.НастройкаОбсужденийДоступна);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОтключитьОбсуждения",
		"Видимость",
		Форма.НастройкаОбсужденийДоступна);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеИнтеграции()
	
	ЭтотОбъект.СервисПодключен = ИспользуетсяСервисСверкиРасчетов();
	
	СтатусыОрганизацийБизнесСеть = КоличествоОрганизацийБизнесСети(Ложь);
	Если СтатусыОрганизацийБизнесСеть.КоличествоПодключенных = 0
		И ЭтотОбъект.СервисПодключен Тогда
		УстановитьПризнакПодключенияСервиса(Ложь, ЭтотОбъект);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнтернетПоддержкаПодключена()

	МодульИПП = ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Возврат МодульИПП.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();

КонецФункции 

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуПользователей()

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП") Тогда
		Модуль = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтернетПоддержкаПользователейКлиент");
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект);
		Модуль.ПодключитьИнтернетПоддержкуПользователей(ОповещениеОЗакрытии, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, Параметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоОрганизацийБизнесСети(ТолькоДоступные = Истина)
	
	Если Не ТолькоДоступные Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	
	КоличествоОрганизаций = ТаблицаОрганизаций.Количество();
	КоличествоНеПодключенныхОрганизаций = ОрганизацииДляПодключения().Количество();
	КоличествоПодключенныхОрганизаций = КоличествоОрганизаций - КоличествоНеПодключенныхОрганизаций;
	
	Если Не ТолькоДоступные Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Новый Структура("Количество,КоличествоПодключенных",
		КоличествоОрганизаций,
		КоличествоПодключенныхОрганизаций);
		
КонецФункции
	
&НаСервереБезКонтекста
Функция ОрганизацииДляПодключения()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодключенныеОрганизации", БизнесСеть.ПодключенныеОрганизации());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключенныеОрганизации.Организация КАК Организация
	|ПОМЕСТИТЬ ПодключенныеОрганизации
	|ИЗ
	|	&ПодключенныеОрганизации КАК ПодключенныеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПодключенныеОрганизации КАК ПодключенныеОрганизации
	|		ПО Организации.Ссылка = ПодключенныеОрганизации.Организация
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И ПодключенныеОрганизации.Организация ЕСТЬ NULL";
	
	ОрганизацииДляПодключения = Запрос.Выполнить().Выгрузить();
	Возврат ОрганизацииДляПодключения.ВыгрузитьКолонку("Организация");
	
КонецФункции

&НаСервереБезКонтекста
Функция ИспользуетсяСервисСверкиРасчетов()
	
	Возврат СервисСверкиРасчетов.ИспользуетсяСервисСверкиРасчетов();
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакПодключенияСервисаНаСервере(СервисПодключен)
	
	УстановитьПризнакПодключенияСервиса(СервисПодключен, ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьПризнакПодключенияСервиса(СервисПодключен, Форма)
	
	Элементы = Форма.Элементы;
	
	Форма.СервисПодключен = СервисПодключен;
	Константы.ИспользуетсяСервисСверкиРасчетов.Установить(СервисПодключен);
	Если Не Форма.СервисПодключен Тогда
		Элементы.ГруппаРезультатыСверки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПоПодключениюСервисаВФоне()
	
	АктуализацияКэшаКонтрагентов = АктуализироватьКэшДанныхКонтрагентовВФоне(УникальныйИдентификатор);
	Если АктуализацияКэшаКонтрагентов.Статус = "Выполнено" Тогда
		ПослеЗавершенияАктуализацииКэшаКонтрагентов(АктуализацияКэшаКонтрагентов);
		Возврат
	КонецЕсли;
	
	Элементы.ГруппаОбновление.Видимость = Истина;
	Элементы.НадписьОбновление.Заголовок = НСтр("ru='Получаем информацию о контрагентах...'");
	
	ОповещениеОЗавершении   = Новый ОписаниеОповещения("ПослеЗавершенияАктуализацииКэшаКонтрагентов", ЭтотОбъект);
	ПараметрыОжидания       = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(АктуализацияКэшаКонтрагентов, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АктуализироватьКэшДанныхКонтрагентовВФоне(УникальныйИдентификатор)
	
	НаименованиеЗадания = СтрШаблон("%1. Актуализация данных о контрагентах", СервисСверкиРасчетов.ИмяСервиса());
	ИмяМетода           = "БизнесСеть.АктуализироватьКэшДанныхКонтрагентов";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияАктуализацииКэшаКонтрагентов(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Элементы.ГруппаОбновление.Видимость = Ложь;
	
	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	РегистрацияДокументовКСверке = ЗарегистрироватьКСверкеРанееВведенныеДокументыВФоне(УникальныйИдентификатор);
	Если РегистрацияДокументовКСверке.Статус = "Выполнено" Тогда
		ПослеЗавершенияРегистрацииДокументовКСверке(РегистрацияДокументовКСверке);
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОбновление.Видимость = Истина;
	Элементы.НадписьОбновление.Заголовок = НСтр("ru='Подготовка документов к сверке...'");
	
	ОповещениеОЗавершении   = Новый ОписаниеОповещения("ПослеЗавершенияРегистрацииДокументовКСверке", ЭтотОбъект);
	ПараметрыОжидания       = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РегистрацияДокументовКСверке, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗарегистрироватьКСверкеРанееВведенныеДокументыВФоне(УникальныйИдентификатор)
	
	НаименованиеЗадания = СтрШаблон("%1. Регистрация к сверке ранее введенных документов", СервисСверкиРасчетов.ИмяСервиса());
	ИмяМетода           = "СервисСверкиРасчетов.ЗарегистрироватьКСверкеРанееВведенныеДокументы";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияРегистрацииДокументовКСверке(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Элементы.ГруппаОбновление.Видимость = Ложь;
	
	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ОбменССервисом = ОбменятьсяССервисомВФоне(УникальныйИдентификатор);
	
	Если ОбменССервисом.Статус = "Выполнено" Тогда
		ПослеЗавершенияОбменаССервисом(ОбменССервисом);
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОбновление.Видимость = Истина;
	Элементы.НадписьОбновление.Заголовок = НСтр("ru='Сверка документов...'");
	
	ОповещениеОЗавершении   = Новый ОписаниеОповещения("ПослеЗавершенияОбменаССервисом", ЭтотОбъект);
	ПараметрыОжидания       = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ОбменССервисом, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбменятьсяССервисомВФоне(УникальныйИдентификатор)
	
	НаименованиеЗадания = СтрШаблон("%1. Обмен с сервисом", СервисСверкиРасчетов.ИмяСервиса());
	ИмяМетода           = "СервисСверкиРасчетов.ОбменятьсяССервисом";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияОбменаССервисом(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Элементы.ГруппаОбновление.Видимость = Ложь;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьРезультатыСверки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРезультатыСверки()
	
	Если Не ЭтотОбъект.СервисПодключен Тогда
		Возврат;
	КонецЕсли;
	
	ПолучениеИтоговСверки = ПолучитьИтогиСверкиВФоне(УникальныйИдентификатор);
	
	Если ПолучениеИтоговСверки.Статус = "Выполнено" Тогда
		ПослеПолученияИтоговСверки(ПолучениеИтоговСверки);
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершении   = Новый ОписаниеОповещения("ПослеПолученияИтоговСверки", ЭтотОбъект);
	ПараметрыОжидания       = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ПолучениеИтоговСверки, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатыСверкиНаСервере(АдресРезультата) 
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	КоличествоНеподключенныхКонтрагентов = Результат.КоличествоНеподключенныхКонтрагентов;
	КоличествоНеотправленныхДокументов   = Результат.КоличествоНеотправленныхДокументов;
	КоличествоОтправленныхДокументов     = Результат.КоличествоОтправленныхДокументов;
	КоличествоДокументовСРасхождениями   = Результат.КоличествоДокументовСРасхождениями;
	
	Элементы.ГруппаРезультатыСверки.Видимость = Истина;
	
	ТекстСверено = НСтр("ru='Сверено'");
	Если Прав(Строка(КоличествоОтправленныхДокументов), 1) = "1"
		И Прав(Строка(КоличествоОтправленныхДокументов), 2) <> "11" Тогда
		ТекстСверено = Лев(ТекстСверено, 6);
	КонецЕсли;
	
	СвереноДокументов = ПолучитьСклоненияСтрокиПоЧислу("документ", КоличествоОтправленныхДокументов,,,"ПД=Винительный");
	ТекстСвереноДокументов = СтрШаблон(НСтр("ru='%1 %2'"), ТекстСверено, СвереноДокументов[0]); 
	
	ТекстПодготовлен = НСтр("ru='подготовлены'");
	Если Прав(Строка(КоличествоНеотправленныхДокументов), 1) = "1"
		И Прав(Строка(КоличествоНеотправленныхДокументов), 2) <> "11" Тогда
		ТекстПодготовлен = Лев(ТекстПодготовлен, 11);
	КонецЕсли;
	СклоненияКоличествоНеотправленныхДокументов = ПолучитьСклоненияСтрокиПоЧислу("документ", КоличествоНеотправленныхДокументов,,,"ПД=Винительный");
	СклоненияКоличествоНеподключенныхКонтрагентов = ПолучитьСклоненияСтрокиПоЧислу("контрагент", КоличествоНеподключенныхКонтрагентов,,,"ПД=Именительный");
	
	ТекстПодключен = НСтр("ru='подключены'");
	Если Прав(Строка(КоличествоНеподключенныхКонтрагентов), 1) = "1"
		И Прав(Строка(КоличествоНеподключенныхКонтрагентов), 2) <> "11" Тогда
		ТекстПодключен = Лев(ТекстПодключен, 9);
	КонецЕсли;
	
	Если КоличествоОтправленныхДокументов = 0 Тогда
		
		// Сверку произвести не удалсь, ни один контрагент не подключен к сервису
		Элементы.ГруппаРезультатыСверки.ЦветФона = Новый Цвет(251, 237, 158);
		Если КоличествоНеотправленныхДокументов > 0 Тогда
			Элементы.ДекорацияРезультатСверки.Заголовок = СтрШаблон(НСтр("ru='Сверка не производилась.
				|К сверке %1 %2, но %3 еще не %4 к сервису.'"),
				ТекстПодготовлен, СклоненияКоличествоНеотправленныхДокументов[0], СклоненияКоличествоНеподключенныхКонтрагентов[0], ТекстПодключен);
		Иначе
			// Нет документов для сверки
			Элементы.ДекорацияРезультатСверки.Заголовок = НСтр("ru='Сверка не производилась.
				|Отсутствуют документы для сверки.'");
		КонецЕсли;
			
	ИначеЕсли КоличествоДокументовСРасхождениями > 0 Тогда
		
		// Сверка произведена, найдены расхождения
		Элементы.ГруппаРезультатыСверки.ЦветФона = Новый Цвет(251, 237, 158);
		
		ОбнаруженоРасхождений = ПолучитьСклоненияСтрокиПоЧислу("расхождение", КоличествоДокументовСРасхождениями,,,"ПД=Винительный");
		Если КоличествоНеотправленныхДокументов > 0 Тогда
			Элементы.ДекорацияРезультатСверки.Заголовок = СтрШаблон(НСтр("ru='%1: обнаружено %2.
				|К сверке %3 %4, но %5 еще не %6 к сервису.'"),
				ТекстСвереноДокументов, ОбнаруженоРасхождений[0],
				ТекстПодготовлен, СклоненияКоличествоНеотправленныхДокументов[0], СклоненияКоличествоНеподключенныхКонтрагентов[0], ТекстПодключен);
		Иначе
			Элементы.ДекорацияРезультатСверки.Заголовок = СтрШаблон(НСтр("ru='%1: обнаружено %2.'"),
				ТекстСвереноДокументов, ОбнаруженоРасхождений[0]);
		КонецЕсли;
		
	Иначе
		
		// Сверка произведена, расхождений нет
		Элементы.ГруппаРезультатыСверки.ЦветФона = ЦветаСтиля.ЦветФонаБаннер;
		
		Если КоличествоНеотправленныхДокументов > 0 Тогда
			Элементы.ДекорацияРезультатСверки.Заголовок = СтрШаблон(НСтр("ru='%1: расхождений не обнаружено.
				|К сверке %2 %3, но %4 еще не %5 к сервису.'"),
				ТекстСвереноДокументов,
				ТекстПодготовлен, СклоненияКоличествоНеотправленныхДокументов[0], СклоненияКоличествоНеподключенныхКонтрагентов[0], ТекстПодключен);
		Иначе
			Элементы.ДекорацияРезультатСверки.Заголовок = СтрШаблон(НСтр("ru='%1: расхождений не обнаружено.'"),
				ТекстСвереноДокументов);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИтогиСверкиВФоне(УникальныйИдентификатор)
	
	НаименованиеЗадания = СтрШаблон("%1. Получение итогов сверки", СервисСверкиРасчетов.ИмяСервиса());
	ИмяМетода           = "СервисСверкиРасчетов.ИтогиСверки";
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОтобразитьРезультатыСверки()
	
	ОтобразитьРезультатыСверки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияИтоговСверки(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ОтобразитьРезультатыСверкиНаСервере(Результат.АдресРезультата);
	
КонецПроцедуры

#КонецОбласти
