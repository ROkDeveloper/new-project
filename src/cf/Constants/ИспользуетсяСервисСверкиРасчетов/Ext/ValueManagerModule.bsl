
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ПриЗаписи(Отказ)
	
	// При записи преднамеренно не используется ОбменДанными.Загрузка.
	// После того, как константа попадет в узел, должно быть включено
	// регламентное задание для периодической сверки расчетов.
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользованиеРегЗадания         = Значение;
	СоздаватьСлужебногоПользователя = ИспользованиеРегЗадания;
	Расписание                = РасписаниеРегЗадания();
	ПараметрыИзмененияЗадания = Новый Структура("Использование, Расписание", ИспользованиеРегЗадания, Расписание);
	
	ПараметрыЗадания = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ОбменССервисомСверкиРасчетов);
	СписокЗаданий    = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	
	Для Каждого РегЗадание Из СписокЗаданий Цикл
		
		Если ИспользованиеРегЗадания Тогда
			РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание, ПараметрыИзмененияЗадания);
			ИспользованиеРегЗадания = Ложь;
		Иначе
			РегламентныеЗаданияСервер.УдалитьЗадание(РегЗадание);
		КонецЕсли;
	
	КонецЦикла;
	
	Пользователь = Неопределено;
	Если СоздаватьСлужебногоПользователя Тогда
		Пользователь = СервисСверкиРасчетов.СлужебныйПользовательДляОповещенияОРасхождениях(СоздаватьСлужебногоПользователя);
	КонецЕсли;
	
	// Не было найдено регламентных заданий.
	Если ИспользованиеРегЗадания Тогда // добавим новое рег.задание
		
		ПараметрыЗадания.Вставить("Наименование", СервисСверкиРасчетов.ИмяСервиса());
		ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении",    60);
		ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
		ПараметрыЗадания.Вставить("Использование",                            Истина);
		ПараметрыЗадания.Вставить("Расписание",                               Расписание);
		Если Пользователь <> Неопределено Тогда
			ПараметрыЗадания.Вставить("ИмяПользователя",                      СервисСверкиРасчетов.ИмяСлужебногоПользователя());
		КонецЕсли;
		
		РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	КонецЕсли;
	
	Если Значение Тогда
		// Для оптимальной работы сервиса требуется более частое обновление идентификаторов контрагентов Бизнес-сети.
		ИзменитьРасписаниеЗаданияБизнесСети();
	КонецЕсли;
	
КонецПроцедуры

Функция РасписаниеРегЗадания()
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Если Не Значение Тогда
		Возврат Расписание;
	КонецЕсли;
	
	МассивМесяцев = Новый Массив(12);
	Для инд = 0 По 11 Цикл
		МассивМесяцев[инд] = инд + 1;
	КонецЦикла;
	Генератор       = Новый ГенераторСлучайныхЧисел();
	МассивДней      = Новый Массив(2);
	МассивДней[0]   = Генератор.СлучайноеЧисло(1, 5); // случайный день среди рабочих
	СледующийЗапуск = МассивДней[0] + 2;              // 2 дня после предыдущего запуска
	МассивДней[1]   = ?(СледующийЗапуск <= 5, СледующийЗапуск, СледующийЗапуск%5);
	
	Расписание.Месяцы            = МассивМесяцев;
	Расписание.ДниНедели         = МассивДней;
	Расписание.ПериодПовтораДней = 1;
	Расписание.ПериодПовтораВТечениеДня = 0;
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		Расписание.ВремяНачала = ТекущаяДатаСеанса() + 600; // отложим старт рег. задания на 10 минут
	Иначе // в режиме сервиса действует механизм очереди заданий
		Расписание.ВремяНачала = Неопределено;
		Расписание.ВремяКонца  = Неопределено;
	КонецЕсли;
	
	Возврат Расписание;

КонецФункции

Процедура ИзменитьРасписаниеЗаданияБизнесСети()
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ПериодПовтораВТечениеДня = 3600;
	Расписание.ПериодПовтораДней        = 1;
	
	ПараметрыЗадания = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ОбновлениеИдентификаторовКонтрагентовБизнесСети);
	СписокЗаданий    = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	ПараметрыИзмененияЗадания = Новый Структура("Использование, Расписание", Истина, Расписание);
	
	ИспользованиеРегЗадания = Истина;
	Для Каждого РегЗадание Из СписокЗаданий Цикл
		
		Если ИспользованиеРегЗадания Тогда
			РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание, ПараметрыИзмененияЗадания);
			ИспользованиеРегЗадания = Ложь;
		Иначе
			РегламентныеЗаданияСервер.УдалитьЗадание(РегЗадание);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли