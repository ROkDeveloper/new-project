// Содержимое модуля отличается в версиях ПРОФ и КОРП.
// В версии ПРОФ отсутствует:
// - тело экспортных процедур (остаются только сигнатуры методов)
// - неэкспортные процедуры и все функции.
// Поэтому не допускается реализация в модуле экспортных функций: вместо них следует использовать процедуры с возвращаемым параметром.

#Область ПрограммныйИнтерфейс

// Расширяет перечень разрезов распределения: дополняет его информацией о субконто без флага "Только обороты",
// добавленных пользователем на счета затрат или обо всех субконто, за исключением предопределенных, заданных
// при конфигурировании на счетах расходов.
// 
// Параметры:
//  РазрезыРаспределения       - ТаблицаЗначений - см. НовыйРазрезыРаспределения(), дополняемая коллекция
//  МенеджерВременныхТаблиц    - МенеджерВременныхТаблиц - содержит таблицу СчетаРасходов
//  ТолькоСубконтоПользователя - Булево - Истина - дополнительно к предопределенной будет включена аналитика,
//                                        добавленная пользователем для использования в распределении затрат (необоротная).
//                                        Применяется, когда речь идет о закрытии счетов (проводках из Кт счетов),
//                                        Ложь - РазрезыРаспределения будет заполнена всей аналитикой, присутствующей на счете.
//                                        Применяется, когда речь идет о распределении на счета (проводках в Дт счетов).
//
Процедура ДополнитьРазрезыРаспределения(РазрезыРаспределения, МенеджерВременныхТаблиц, ТолькоСубконтоПользователя = Истина) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("РасширенныйФункционал") Тогда
		Возврат;
	КонецЕсли;
	
	ЗарезервированныеИмена = Новый Структура;
	ЗарезервированныеИмена.Вставить("Номенклатура");
	Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл
		ЗарезервированныеИмена.Вставить(ОписаниеРазрезаРаспределения.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПредопределенныеВидыСубконто", РазрезыРаспределения.ВыгрузитьКолонку("ВидСубконто"));
	Запрос.УстановитьПараметр("ВсяАналитика", Не ТолькоСубконтоПользователя);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыСубконто.ВидСубконто КАК ВидСубконто
	|ПОМЕСТИТЬ ВТ_ВидыСубконто
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаРасходов КАК СчетаРасходов
	|		ПО ВидыСубконто.Ссылка = СчетаРасходов.Счет
	|ГДЕ
	|	(&ВсяАналитика
	|			ИЛИ НЕ ВидыСубконто.ТолькоОбороты
	|				И НЕ ВидыСубконто.Предопределенное)
	|	И ВидыСубконто.Суммовой
	|	И НЕ ВидыСубконто.ВидСубконто В (&ПредопределенныеВидыСубконто)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	ВТ_ВидыСубконто.ВидСубконто.ТипЗначения КАК ТипЗначения,
	|	ВТ_ВидыСубконто.ВидСубконто.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	ВТ_ВидыСубконто КАК ВТ_ВидыСубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ВидыСубконто";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеРазрезаРаспределения = РазрезыРаспределения.Добавить();
		
		Имя = Выборка.ИмяПредопределенныхДанных;
		
		Если ПустаяСтрока(Имя) Или ЗарезервированныеИмена.Свойство(Имя) Тогда
			Имя = РаспределениеРасходов.ИмяСубконтоПользователя(Выборка.ВидСубконто);
		КонецЕсли;
		
		ОписаниеРазрезаРаспределения.Имя         = Имя;
		ОписаниеРазрезаРаспределения.ВидСубконто = Выборка.ВидСубконто;
		ОписаниеРазрезаРаспределения.Ключ        = Выборка.ВидСубконто;
		ОписаниеРазрезаРаспределения.ТипЗначения = Выборка.ТипЗначения;
		
	КонецЦикла;
	
КонецПроцедуры

// Расширяет перечень счетов: дополняет его предопределенным счетом учета потерь, связанных с браком в производстве.
//
// Параметры:
//  СчетаРасходов - Массив - дополняемый массив
//
Процедура ДобавитьСчетБракВПроизводстве(СчетаРасходов) Экспорт
	
	Если Не ПоддерживаетсяБракВПроизводстве() Тогда
		Возврат;
	КонецЕсли;
	
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	
КонецПроцедуры

// Определяет разрезы распределения расходов при их отнесении на финансовый результат.
//
// Параметры:
//  АналитикаРаспределения - Соответствие - разрезы, которые могут быть заполнены на счете финансового результата при распределении затрат на него.
//                           * Ключ - как в БухгалтерскийУчет.АналитикаСчета
//                           * Значение - описание разреза распределения (запись в РаспределенияРасходов.НовыйРазрезыРаспределения)
//  СчетРезультата         - ПланСчетовСсылка.Хозрасчетный - счет, на который относятся затраты в ходе распределения
//  РазрезыРаспределения   - ТаблицаЗначений - см. РаспределенияРасходов.НовыйРазрезыРаспределения;
//                           вся аналитика, в разрезе которой могут распределяться затраты
//
Процедура ЗаполнитьАналитикуРаспределенияНаФинансовыйРезультат(АналитикаРаспределения, СчетРезультата, РазрезыРаспределения) Экспорт

	Если Не ПоддерживаетсяРаспределениеНаФинансовыйРезультат() Тогда
		Возврат;
	КонецЕсли;

	НедоступныеРазрезыРаспределения = РазрезыРаспределенияНедоступныеНаФинансовыйРезультат();

	ЗаполнитьАналитикуРаспределенияСчета(АналитикаРаспределения, СчетРезультата, РазрезыРаспределения, НедоступныеРазрезыРаспределения);

КонецПроцедуры

// Определяет разрезы распределения счета.
// 
// Параметры:
//  АналитикаРаспределения - Соответствие - разрезы, которые могут быть заполнены на счете финансового результата при распределении
//                           затрат на него.
//                           * Ключ - как в БухгалтерскийУчет.АналитикаСчета
//                           * Значение - описание разреза распределения (запись в РаспределенияРасходов.НовыйРазрезыРаспределения)
//  СчетРезультата         - ПланСчетовСсылка.Хозрасчетный - Счет, для которого определяется аналитика
//  РазрезыРаспределения   - ТаблицаЗначений - см. РаспределенияРасходов.НовыйРазрезыРаспределения;
//                           вся аналитика, в разрезе которой могут распределяться затраты
//  НедоступныеРазрезыРаспределения - Массив - Состоит из строк, описывающих разрезы распределения,
//                                             см. РазрезыРаспределенияНедоступныеНаФинансовыйРезультат()
//
Процедура ЗаполнитьАналитикуРаспределенияСчета(АналитикаРаспределения, СчетРезультата, РазрезыРаспределения, 
                                               НедоступныеРазрезыРаспределения) Экспорт

	АналитикаСчета = БухгалтерскийУчет.АналитикаСчета(СчетРезультата);
	
	Если Не ЗначениеЗаполнено(АналитикаСчета) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеРазрезаРаспределения Из РазрезыРаспределения Цикл

		Если НедоступныеРазрезыРаспределения.Найти(ОписаниеРазрезаРаспределения.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если АналитикаСчета[ОписаниеРазрезаРаспределения.Ключ] = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		АналитикаРаспределения.Вставить(ОписаниеРазрезаРаспределения.Ключ, ОписаниеРазрезаРаспределения);

	КонецЦикла;
	
КонецПроцедуры

// Определяет возможность гибкой настройки правил распределения
//
// Параметры:
//  ГибкаяНастройкаПравилРаспределения - Булево - возвращаемый параметр
//
Процедура УстановитьГибкаяНастройкаПравилРаспределения(ГибкаяНастройкаПравилРаспределения) Экспорт
	
	Если Не ПоддерживаетсяГибкаяНастройкаПравилРаспределения() Тогда
		Возврат;
	КонецЕсли;
	
	ГибкаяНастройкаПравилРаспределения = Истина;
	
КонецПроцедуры

// Добавляет правило распределения затрат по счетам учета, указанным в собственной базе распределения.
//
// Параметры:
//  Процессор				- Структура - См. ПравилаРаспределенияРасходов.НовыйПроцессорЗаполненияПравилРаспределения()
//  ПараметрыРаспределения	- Структура - См. ПравилаРаспределенияРасходов.НовыйПараметрыРаспределенияСобственнаяБаза()
//                                        возвращаемый параметр, включает в себя текст запроса, 
//                                        имя временной таблицы коэффициентов, счета учета, используемые в базе имена этапов распределения
//  Модификатор				- Структура - См. Справочники.НастройкиУчетаЗатрат.НовыйМодификаторБазыРаспределения()
//  ОтборРасходов			- Структура - Отбор расходов, для которых применяется правило
//
Процедура ДобавитьПравилоРаспределитьПоКоэффициентамСчетовУчета(Процессор, ПараметрыРаспределения, Модификатор, ОтборРасходов) Экспорт

	Правило = ПравилаРаспределенияРасходов.ДобавитьПравилоРаспределения(
		Процессор, "РаспределениеПропорциональноКоэффициентам", "РаспределитьНаРасходы");

	Правило.Наименование = НСтр("ru = 'Разделить затраты пропорционально коэффициентам по этапам'");
	
	Если ЗначениеЗаполнено(ОтборРасходов) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Правило.ОтборРасходов, ОтборРасходов, Истина);
	КонецЕсли;
	
	Правило.ПоляПриемника = Новый Структура;
	Правило.ПоляПриемника.Вставить("ЭтапРаспределения");

	БазаПоСчетам = Модификатор.ТаблицаБазы.Скопировать( , "Счет, Коэффициент");
	БазаПоСчетам.Свернуть("Счет", "Коэффициент");
	БазаПоСчетам.Колонки.Добавить("ЭтапРаспределения", ОбщегоНазначения.ОписаниеТипаСтрока(255));

	Для Каждого СтрокаБазыПоСчетам Из БазаПоСчетам Цикл
		
		ИмяЭтапаРаспределения = Модификатор.ИдентификаторБазыРаспределения + "_" + XMLСтрока(СтрокаБазыПоСчетам.Счет);
		
		СтрокаБазыПоСчетам.ЭтапРаспределения = ИмяЭтапаРаспределения;
		ПараметрыРаспределения.ИменаЭтаповРаспределения.Вставить(СтрокаБазыПоСчетам.Счет, ИмяЭтапаРаспределения);
		ПараметрыРаспределения.СчетаУчета.Добавить(СтрокаБазыПоСчетам.Счет);
		
	КонецЦикла;
	
	ТекстЗапросаБазыРаспределения = 
	"ВЫБРАТЬ
	|	БазаПоСчетам.Коэффициент КАК База,
	|	БазаПоСчетам.ЭтапРаспределения КАК ЭтапРаспределения
	|ПОМЕСТИТЬ ВТ_БазаРаспределенияПоСчетам
	|ИЗ
	|	&БазаПоСчетам КАК БазаПоСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БазаРаспределенияПоСчетам.База КАК База,
	|	ВТ_БазаРаспределенияПоСчетам.ЭтапРаспределения КАК ЭтапРаспределения
	|ИЗ
	|	ВТ_БазаРаспределенияПоСчетам КАК ВТ_БазаРаспределенияПоСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_БазаРаспределенияПоСчетам";
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("БазаПоСчетам", БазаПоСчетам);
	ПравилаРаспределенияРасходов.НастроитьТекстБазыРаспределения(Правило, ТекстЗапросаБазыРаспределения);
	
	// Таблицу базы будем использовать в правиле для каждого счета собственной базы, применяя отбор.
	ДобавитьОписаниеВременнойТаблицыКоэффициентыРаспределения(ПараметрыРаспределения, Правило, Модификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоддерживаетсяБракВПроизводстве() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
	
КонецФункции

Функция ПоддерживаетсяГибкаяНастройкаПравилРаспределения() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
	
КонецФункции

Функция ПоддерживаетсяРаспределениеНаФинансовыйРезультат() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
	
КонецФункции

Функция РазрезыРаспределенияНедоступныеНаФинансовыйРезультат()
	
	НедоступныеРазрезыРаспределения = Новый Массив;
	
	// Общей логикой расчета себестоимости принято,
	// что подразделение на счете 90 остается тем же, что было на счете затрат (запасов)
	НедоступныеРазрезыРаспределения.Добавить("Подразделение");
	// На счетах финансового результата статья затрат имеет особый смысл: см. ЭлементыЗатрат
	НедоступныеРазрезыРаспределения.Добавить("СтатьяЗатрат");
	
	Возврат НедоступныеРазрезыРаспределения;
	
КонецФункции

Процедура ДобавитьОписаниеВременнойТаблицыКоэффициентыРаспределения(ПараметрыРаспределения, ПравилоРаспределенияПоЭтапам, Модификатор)

	ИмяВременнойТаблицыКоэффициентов = "КоэффициентыРаспределения" + СтрЗаменить(Модификатор.ИдентификаторБазыРаспределения, "-", "");

	ТочкаЗапросаТаблицыКоэффициентов = СхемыЗапросов.ПоместитьТаблицуЗначений(
		Модификатор.ТаблицаБазы, ИмяВременнойТаблицыКоэффициентов);
	
	ТекстЗапросаТаблицыКоэффициентов = ТочкаЗапросаТаблицыКоэффициентов.Схема.ПолучитьТекстЗапроса();
	ПараметрыЗапроса = Новый Структура(ИмяВременнойТаблицыКоэффициентов, Модификатор.ТаблицаБазы);
	
	ПравилаРаспределенияРасходов.ДобавитьПакетВременныхТаблиц(
		ПравилоРаспределенияПоЭтапам.БазаРаспределения, ИмяВременнойТаблицыКоэффициентов, ТекстЗапросаТаблицыКоэффициентов, ПараметрыЗапроса);
	
	ПараметрыРаспределения.Вставить("ТекстЗапросаТаблицыКоэффициентов", ТекстЗапросаТаблицыКоэффициентов);
	ПараметрыРаспределения.Вставить("ИмяВременнойТаблицыКоэффициентов", ИмяВременнойТаблицыКоэффициентов);
	
КонецПроцедуры


#КонецОбласти
