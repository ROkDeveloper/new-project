
#Область ПрограммныйИнтерфейс

#Область ПолучениеДанныхИзСервисаФормСтатистики

// Обработчик регламентного задания (в сервисе - задания очереди)
//
Процедура ПолучитьСписокТребуемыхФормПоРасписанию() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПолучениеСпискаТребуемыхСтатФорм);
	
	СообщениеОбОшибке = "";
	Если Не ДоступнаЗагрузкаФормИзСервиса(, СообщениеОбОшибке) Тогда
		ЗаписатьОшибкуВЖурнал(СообщениеОбОшибке,, УровеньЖурналаРегистрации.Информация);
		Возврат;
	КонецЕсли;
	
	ПолучитьСписокТребуемыхФорм();
	
КонецПроцедуры

// Подключает регламентное задание к подсистеме БСП Регламентные задания.
//
// Параметры:
//  Настройки - ТаблицаЗначений - см. комментарий 
//              к РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	// В копии ИБ регламентное задание блокируется
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание        = Метаданные.РегламентныеЗадания.ПолучениеСпискаТребуемыхСтатФорм;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	Настройка.ДоступноВПодчиненномУзлеРИБ = Ложь;
	
КонецПроцедуры

#Область ОчередьЗаданий

// Регистрирует метод в подсистеме ОчередьЗаданий
// См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
// Параметры:
//  МетодыОчередиЗаданий - см. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
//
Процедура ЗарегистрироватьМетодОчередиЗаданий(МетодыОчередиЗаданий) Экспорт
	
	МетодыОчередиЗаданий.Вставить(Метаданные.РегламентныеЗадания.ПолучениеСпискаТребуемыхСтатФорм.ИмяМетода);
	
КонецПроцедуры

#КонецОбласти

Функция ДоступнаЗагрузкаФормИзСервиса(ПричинаНедоступности = "", СообщениеОбОшибке = "") Экспорт
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		ПричинаНедоступности = "ЗаблокированаРаботаСВнешнимиРесурсами";
		СообщениеОбОшибке = НСтр("ru='Заблокирована работа с внешними ресурсами'");
		Возврат Ложь;
	КонецЕсли;

	// В режиме интерфейса интеграции с банком задачи по статистике не предусмотрены
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ПричинаНедоступности = "ЭтоИнтерфейсИнтеграцииСБанком";
		СообщениеОбОшибке = НСтр("ru='Загрузка списка форм статистики не предусмотрена в текущем режиме'");
		Возврат Ложь;
	КонецЕсли;

	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Запрос к сервису возможен только приналичии доступа к порталу ИТС
	УстановитьПривилегированныйРежим(Истина);
	ДанныеИнтернетПоддержки = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеИнтернетПоддержки = Неопределено Тогда
		ПричинаНедоступности = "НеЗаполненыДанныеИнтернетПоддержки";
		СообщениеОбОшибке = НСтр("ru='Не подключена интернет-поддержка'");
		Возврат Ложь;
	КонецЕсли;
	
	// Если загрузка данных выполнялась недавно, то считаем, что логин и пароль все еще валидны - не выполняем явную
	// проверку этих данных
	Если Не ПроверитьМинимальныйИнтервалОбращенияКСервису() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверим, что есть доступ
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьЛогинИПароль(ДанныеИнтернетПоддержки.Логин, ДанныеИнтернетПоддержки.Пароль);
	Если Не РезультатПроверки.Результат Тогда
		ПричинаНедоступности = РезультатПроверки.КодОшибки;
		СообщениеОбОшибке = РезультатПроверки.СообщениеОбОшибке;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ДатаПоследнейЗагрузкиСпискаФормСтатистики() Экспорт
	
	Возврат Константы.ДатаАктуальностиСпискаФормСтатистики.Получить();
	
КонецФункции

Функция АдресИнтерактивногоСервисаРосстата() Экспорт
	
	Возврат "https://websbor.rosstat.gov.ru/online/info";
	
КонецФункции

// Возвращает стандартное время ожидания результата запроса.
// 
// Возвращаемое значение:
//   Число - время ожидания в секундах
//  
Функция СтандартноеВремяОжиданияРезультатаЗапроса() Экспорт
	
	Возврат 5;
	
КонецФункции

Функция ПроверитьМинимальныйИнтервалОбращенияКСервису() Экспорт
	
	МинимальныйИнтервал = 1 * 24 * 3600; // 1 день
	
	ДатаПоследнегоЗапроса = ДатаПоследнейЗагрузкиСпискаФормСтатистики();
	
	// Дата в константе устанавливается без времени. Поэтому достаточно, чтобы сменилась дата -
	// тогда возможен повторный запрос.
	Возврат (ТекущаяДатаСеанса() - ДатаПоследнегоЗапроса) >= МинимальныйИнтервал;
	
КонецФункции

// Переносит запуск регламентного задания на указанное число дней вперед относительно текущей даты сеанса.
// Перенос означает установку/изменение дата начала расписания регл задания.
// 
// Параметры:
//  ИнтервалВДнях - Число - количество дней, на которые перененосится запуск задания
Процедура ПеренестиРегламентноеЗадание(ИнтервалВДнях) Экспорт
	
	// Для надежности оставляем обычную периодичность запуска регл. задания.
	// Только ограничиваем расписание "снизу" датой: сегодня плюс указанный ИнтервалВДнях.
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ПолучениеСпискаТребуемыхСтатФорм);
	Задания = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Истина);
	
	День = 24 * 3600;
	
	Если Задания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Расписание = Задания[0].Расписание;
	Расписание.ДатаНачала = НачалоДня(ТекущаяДатаСеанса() + ИнтервалВДнях * День);
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	РегламентныеЗаданияСервер.ИзменитьЗадание(Задания[0].УникальныйИдентификатор, ПараметрыЗадания);
		
КонецПроцедуры

#КонецОбласти

#Область ОбрабочикиОбновления

Процедура ВключитьРегламентноеЗаданиеПолучениеСпискаТребуемыхСтатФорм(ПараметрыОбработчика) Экспорт
	
	// По умолчанию регл. задание будет запланировано на случайное время суток (но при этом будет сгенерировано
	// конкретное время). Это позволит избежать резкого всплеска числа обращений к сервису стат. форм.
	ПараметрыРасписания = ОбщегоНазначенияБП.ПараметрыРасписанияЕжедневногоРегламентногоЗадания();
	
	// В клиент-серверном варианте и в области на сервисе (Fresh) спланируем расписание так, чтобы выполнение
	// заданий в разных ИБ или в разных областях сервиса осуществлялось в разное время суток.
	//
	// В файловом варианте время запуска тоже случайное, но здесь ограничим интервал установки времени запуска
	// периодом с 9 до 17. Предполагаем, что в это время (рабочие часы) больше вероятность, что в ИБ будет подключен
	// клиентский сеанс.
	// При этом указание точного времени позволяет избежать ситуации, когда сразу при запуске клиентского
	// сеанса выполняется много регл заданий (без уточнения времени запуска), что приводит к долгому запуску.
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ПараметрыРасписания.ВремяНачалаПериода = Дата(1, 1, 1, 9, 0, 0);
		ПараметрыРасписания.ВремяКонцаПериода = Дата(1, 1, 1, 17, 0, 0);
	КонецЕсли;
	
	ОбщегоНазначенияБП.ВключитьРегламентноеЗаданиеЕжедневно(
		Метаданные.РегламентныеЗадания.ПолучениеСпискаТребуемыхСтатФорм, ПараметрыРасписания);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает список стат. форм из сервиса по всем организациям в ИБ
//
Процедура ПолучитьСписокТребуемыхФорм()
	
	Подключение = ЗапросыREST.НовыйПодключение();
	Подключение.АдресСервиса = URLСервисаФормРеспондентов();
	Подключение.ПространствоИмен = ПространствоИмен();
	Подключение.ИсточникЗапроса = ИмяСобытияЖурналаРегистрации();
	
	ОтветНаЗапрос = ОтправитьЗапросКСервисуСтатФорм(Подключение);
	
	Если Не ЗначениеЗаполнено(ОтветНаЗапрос.ИдентификаторЗапроса) Тогда
		ЗаписатьОшибкуВЖурнал(НСтр("ru='В ответе сервиса не получен идентификатор запроса'"), "Метод POST");
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапросаСОжиданием(Подключение, ОтветНаЗапрос);
	
	Если РезультатЗапроса.Респонденты = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ЗаполнитьНастройкиОтчетовПоОтветуСервиса(РезультатЗапроса.Респонденты);
	
	// Список форм обновлен - обновляем отметку актуальности 
	Константы.ДатаАктуальностиСпискаФормСтатистики.Установить(ТекущаяДатаСеанса());
	
	// Запланируем следующий запрос (регл. задание) через интервал (в днях), полученный из сервиса.
	// Если по какой-то причине интервал не получен, то регл. задание продолжит работать с текущим расписанием.
	Если ЗначениеЗаполнено(РезультатЗапроса.ИнтервалДоСледующегоОбращения) Тогда
		ПеренестиРегламентноеЗадание(РезультатЗапроса.ИнтервалДоСледующегоОбращения);
	КонецЕсли;
	
	ПодтвердитьПолучениеРезультатаЗапроса(Подключение, ОтветНаЗапрос);

КонецПроцедуры

Функция ОтправитьЗапросКСервисуСтатФорм(Подключение)
	
	ОтветНаЗапрос = НовыйОтветСервисаНаЗапросСтатФорм();
	
	// Для авторизации нужен тикет ИТС
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(
		ИмяСервисаФормРеспондентов());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не ПустаяСтрока(ДанныеАутентификации.КодОшибки) Тогда
		ЗаписатьОшибкуВЖурнал(СтрШаблон("Ошибка при получении тикета ИТС: код ошибки - %1:
			|%2",
			ДанныеАутентификации.КодОшибки,
			ДанныеАутентификации.ИнформацияОбОшибке));
		Возврат ОтветНаЗапрос;
	КонецЕсли;
	
	ТикетИТС = ДанныеАутентификации.Тикет;
	Подключение.ЗаголовкиАутентификации.Вставить("Auth-Login-1C", ТикетИТС);
	
	Респонденты = РеспондентыРосстата();
	Если Респонденты.respondents.Количество() = 0 Тогда
		Возврат ОтветНаЗапрос;
	КонецЕсли;
	
	Ответ = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "POST", "forms_request", Респонденты);
		
	Если Ответ = Неопределено Тогда
		// Логирование выполняется на уровне модуля ЗапросыREST
		Возврат ОтветНаЗапрос;
	КонецЕсли;
	
	Если Ответ.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ТекстСообщения = "";
		Если Не Ответ.Содержимое.Свойство("message", ТекстСообщения) Тогда
			ТекстСообщения = Ответ.Текст;
		КонецЕсли;
		ЗаписатьОшибкуВЖурнал(СтрШаблон("Код ошибки - %1:
			|%2",
			Ответ.КодСостояния,
			ТекстСообщения),
			"Метод POST");
		Возврат ОтветНаЗапрос;
	КонецЕсли;
	
	Ответ.Содержимое.Свойство("request_id", ОтветНаЗапрос.ИдентификаторЗапроса);
	Ответ.Содержимое.Свойство("wait_time", ОтветНаЗапрос.Ожидание);
	
	Возврат ОтветНаЗапрос;
	
КонецФункции

Функция РезультатЗапросаСОжиданием(Подключение, ПараметрыЗапроса)
	
	ОтветНаЗапрос = НовыйОтветСервисаНаЗапросРезультата();
	
	// Выполняем три попытки получить результат с нарастающей паузой: через указанное время ожидания (t), через 2t и через 4t.
	// Ожидаем синхронно: это чуть проще, чем отдельное фоновое задание, и при этом допустимо
	// (считаем, что чаще всего дальше первой попытки не пойдем).
	// При трех неудачных попытках считаем, что уже нет смысла ждать результат.
	Ожидание = ?(ПараметрыЗапроса.Ожидание = Неопределено, 
		СтандартноеВремяОжиданияРезультатаЗапроса(),
		ПараметрыЗапроса.Ожидание);
	Ресурс = СтрШаблон("forms_request/%1", ПараметрыЗапроса.ИдентификаторЗапроса);
	
	Для n = 0 По 2 Цикл
		ОбщегоНазначенияБТС.Пауза(Ожидание*Pow(2,n));
		Ответ = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "GET", Ресурс);
		Если Ответ = Неопределено Тогда
			// Логирование выполняется на уровне модуля ЗапросыREST
			Продолжить;
		КонецЕсли;
		
		Если Ответ.КодСостояния = ЗапросыREST.КодСтандартногоСостояния() Тогда
			Прервать;
		КонецЕсли;
		
		ТекстСообщения = "";
		Если Не Ответ.Содержимое.Свойство("message", ТекстСообщения) Тогда
			ТекстСообщения = Ответ.Текст;
		КонецЕсли;
		ЗаписатьОшибкуВЖурнал(СтрШаблон("Попытка %1. Код ошибки - %2:
			|%3",
			n + 1,
			Ответ.КодСостояния,
			ТекстСообщения),
			"Метод GET");
		
		// При всех ошибках, кроме 204 (ответ еще не готов), нет смысла в новых попытках
		Если Ответ.КодСостояния <> ЗапросыREST.КодСостоянияОтсутствуетСодержимое() Тогда
			Возврат ОтветНаЗапрос;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Ответ = Неопределено Или Ответ.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		// Ошибка уже залогирована выше
		Возврат ОтветНаЗапрос;
	КонецЕсли;
	
	Ответ.Содержимое.Свойство("respondents", ОтветНаЗапрос.Респонденты);
	Ответ.Содержимое.Свойство("next_request_interval", ОтветНаЗапрос.ИнтервалДоСледующегоОбращения);
	
	Если ОтветНаЗапрос.Респонденты = Неопределено Тогда
		ЗаписатьОшибкуВЖурнал(НСтр("ru='В ответе сервиса отсутствует обязательный ключ ""respondents""'"), "Метод GET");
	КонецЕсли;
	
	Возврат ОтветНаЗапрос;
	
КонецФункции

Процедура ПодтвердитьПолучениеРезультатаЗапроса(Подключение, ПараметрыЗапроса)
	
	// Отправляем подтверждение о получении
	Ресурс = СтрШаблон("forms_request/%1", ПараметрыЗапроса.ИдентификаторЗапроса);
	Ответ = ЗапросыREST.ВыполнитьМетодСервиса(Подключение, "DELETE", Ресурс);
	
	Если Ответ = Неопределено Тогда
		// Логирование выполняется на уровне модуля ЗапросыREST
		Возврат;
	КонецЕсли;
	
	Если Ответ.КодСостояния <> ЗапросыREST.КодСтандартногоСостояния() Тогда
		ТекстСообщения = "";
		Если Не Ответ.Содержимое.Свойство("message", ТекстСообщения) Тогда
			ТекстСообщения = Ответ.Текст;
		КонецЕсли;
		ЗаписатьОшибкуВЖурнал(СтрШаблон("Код ошибки - %1:
			|%2",
			Ответ.КодСостояния,
			ТекстСообщения),
			"Метод DELETE");
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйОтветСервисаНаЗапросСтатФорм()
	
	Ответ = Новый Структура;
	Ответ.Вставить("ИдентификаторЗапроса");
	Ответ.Вставить("Ожидание");
	
	Возврат Ответ;
	
КонецФункции

Функция НовыйОтветСервисаНаЗапросРезультата()
	
	Ответ = Новый Структура;
	Ответ.Вставить("Респонденты");
	Ответ.Вставить("ИнтервалДоСледующегоОбращения");
	
	Возврат Ответ;
	
КонецФункции

Функция URLСервисаФормРеспондентов()
	Возврат "https://statforms.1cmycloud.com/a";
КонецФункции

Функция ПространствоИмен()
	Возврат "api/StatForms";
КонецФункции

Функция ИмяСервисаФормРеспондентов()
	Возврат "StatForms";
КонецФункции

Функция РеспондентыРосстата()
	
	// Если ведется учет по обособленным подразделениям, то в список респондентов добавляем и головные организации с
	// признаком наличия обособленных подразделений, и организации-обособленные подразделения (филиалы), у которых
	// код ОКПО заполнен и отличается от головного ОКПО.
	// Если учет по подразделениям не ведется, то фактически выполнится только первый подзапрос итогового запроса.
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Если БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		ЗаполнениеФормСтатистикиПоОбособленнымПодразделениям.УстановитьТекстЗапросаРеспондентыРосстата(ТекстЗапроса);
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Организация,
		|	Организации.КодПоОКПО КАК ОКПО,
		|	Организации.ИНН КАК ИНН,
		|	ЛОЖЬ КАК ЕстьОбособленныеПодразделения
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ИНН <> """"
		|	ИЛИ Организации.КодПоОКПО <> """"";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	// Пользователь, под которым выполняется фоновое задание в файловой базе, может не иметь полных прав.
	// Но для получения всех данных, требуются данные по всем организациям. 
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаРеспондентов = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	РеспондентыРосстата = НовыйСтруктураЗапросаСтатФормРеспондентов();
	
	Пока ВыборкаРеспондентов.Следующий() Цикл
		
		Респондент = НовыйСтруктураДанныеРеспондента();
		
		Респондент.OKPO = ВыборкаРеспондентов.ОКПО;
		Респондент.INN = ВыборкаРеспондентов.ИНН;
		Респондент.has_branches = ВыборкаРеспондентов.ЕстьОбособленныеПодразделения;
		
		РеспондентыРосстата.respondents.Добавить(Респондент);
	
	КонецЦикла;
	
	Возврат РеспондентыРосстата;
	
КонецФункции

Функция НовыйСтруктураЗапросаСтатФормРеспондентов()
	
	СтруктураЗапроса = Новый Структура;
	
	СтруктураЗапроса.Вставить("respondents", Новый Массив());
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция НовыйСтруктураДанныеРеспондента()
	
	ДанныеРеспондента = Новый Структура;
	
	ДанныеРеспондента.Вставить("INN", "");
	ДанныеРеспондента.Вставить("OKPO", "");
	ДанныеРеспондента.Вставить("has_branches", Ложь);	
	
	Возврат ДанныеРеспондента;
	
КонецФункции

Функция ИмяСобытияЖурналаРегистрации(Действие = "")
	
	ЭлементыИмени = Новый Массив;
	ЭлементыИмени.Добавить(НСтр("ru = 'Получение требований Росстата из сервиса'"));
	Если ЗначениеЗаполнено(Действие) Тогда
		ЭлементыИмени.Добавить(Действие);
	КонецЕсли;
		
	Возврат СтрСоединить(ЭлементыИмени, ".");
	
КонецФункции

Процедура ЗаписатьОшибкуВЖурнал(ТекстОшибки, Действие = "", Уровень = Неопределено)
	
	ИмяСобытия = ИмяСобытияЖурналаРегистрации(Действие);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		?(Уровень = Неопределено, УровеньЖурналаРегистрации.Ошибка, Уровень),
		,
		,
		ТекстОшибки);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиОтчетовПоОтветуСервиса(РеспондентыОтвет)
	
	// Для оптимизации сначала получим стат формы по всем респондентам, чтобы однократно запросить список правил,
	// соответствующих требуемым кодам ОКУД.
	МассивОКУД = Новый Массив;
	
	Для Каждого Респондент Из РеспондентыОтвет Цикл
		Для Каждого ОписаниеОтчета Из Респондент.forms Цикл
			Если МассивОКУД.Найти(ОписаниеОтчета.OKUD) = Неопределено Тогда
				МассивОКУД.Добавить(ОписаниеОтчета.OKUD);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если МассивОКУД.Количество() = 0 Тогда
		ЗаписатьОшибкуВЖурнал(
			НСтр("ru='В ответе сервиса пустой список форм'"),
			"Обработка ответа сервиса",
			УровеньЖурналаРегистрации.Информация);
		Возврат;
	КонецЕсли;
	
	ПравилаПоОКУД = РегламентированнаяОтчетность.ТребованияРосстатаПоОКУД(МассивОКУД);
	
	// Подготовим данные для отбора действующих правил по каждой организации
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.ИмяЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтатистика();
	
	ТекущаяДата = ТекущаяДатаСеанса();
	НачалоИнтервала = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -12));
	
	// В таблице актуальных правил идентификатор правила указан без префикса задачи. Ниже перед поиском уберем префикс
	// из идентификатора требования. 
	ПрефиксЗадачи = ОтборПравил.ИмяЗадачи + ".";
	
	// По каждой организации (респонденту) обновляем список требуемых стат отчетов.
	// В итоге это означает обновление записей в регистре НалогиОтчеты.
	Для Каждого Респондент Из РеспондентыОтвет Цикл
		
		// Приоритеты поиска организации такие:
		// - филиал (организация с признаком обособленного подразделения) ищем строго по ОКПО (ожидается 14-значный код)
		// - если указан ИНН, то ищем по нему
		// - если не указан ИНН, но указан ОКПО, то ищем по ОКПО
		Организация = Неопределено;
		Если Респондент.is_branch Тогда
			Организация = Справочники.Организации.НайтиПоРеквизиту("КодПоОКПО", СокрЛП(Респондент.OKPO));
		ИначеЕсли ЗначениеЗаполнено(Респондент.INN) Тогда
			Организация = Справочники.Организации.НайтиОрганизацию(СокрЛП(Респондент.INN));
		ИначеЕсли ЗначениеЗаполнено(Респондент.OKPO) Тогда
			Организация = Справочники.Организации.НайтиПоРеквизиту("КодПоОКПО", СокрЛП(Респондент.OKPO));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ЗаписатьОшибкуВЖурнал(СтрШаблон("Не найдена организация по ИНН ""%1"" и ОКПО ""%2""",
				Респондент.INN,
				Респондент.OKPO),
				"Обработка ответа сервиса");
			Продолжить;
		КонецЕсли;
		
		// Получаем действующие правила статистики по организации
		ОтборПравил.Организация = Организация;
		ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
		ОтборПравил.НачалоИнтервала = Макс(НачалоИнтервала, ДатаНачалаДеятельности);
		ОтборПравил.КонецИнтервала  = КонецГода(ДобавитьМесяц(ТекущаяДата, 12));
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		РегистрыСведений.ПорядокУплатыНалоговНаМестах.СоздатьПравилаУплатыНалоговНаМестах(
			МенеджерВременныхТаблиц,
			Организация,
			ЗадачиБухгалтераКлиентСервер.КодЗадачиСтатистика());
		
		Справочники.ПравилаПредставленияОтчетовУплатыНалогов.СоздатьАктуальныеПравила(МенеджерВременныхТаблиц, ОтборПравил);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АктуальныеПравила.Правило КАК Правило,
		|	ВЫРАЗИТЬ(АктуальныеПравила.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов).Код КАК Идентификатор,
		|	ВЫРАЗИТЬ(АктуальныеПравила.Правило КАК Справочник.ПравилаПредставленияОтчетовУплатыНалогов).Периодичность КАК
		|		Периодичность
		|ИЗ
		|	АктуальныеПравила КАК АктуальныеПравила";
		
		АктуальныеПравила = Запрос.Выполнить().Выгрузить();
		
		// Обновляем настройки по организации в регистре НалогиОтчеты
		Попытка
			
			НачатьТранзакцию();
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НалогиОтчеты");
			ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
			Блокировка.Заблокировать();
			
			НаборЗаписейНалогиОтчеты = РегистрыСведений.НалогиОтчеты.СоздатьНаборЗаписей();
			НаборЗаписейНалогиОтчеты.Отбор.Организация.Установить(Организация);
			
			НаборЗаписейНалогиОтчеты.Прочитать();
			
			ТЗНаборЗаписейНалогиОтчеты = НаборЗаписейНалогиОтчеты.ВыгрузитьКолонки();
			// Оставим те прежние настройки отчетов, которые добавлены пользователем, либо явно им отключены
			Для Каждого Запись Из НаборЗаписейНалогиОтчеты Цикл
				Если Не Запись.ПолученИзВнешнегоСервиса И Не Запись.ОтключенПользователем // добавлена пользователем
					 Или Запись.ОтключенПользователем Тогда                           // отключена пользователем
					Строка = ТЗНаборЗаписейНалогиОтчеты.Добавить();
					ЗаполнитьЗначенияСвойств(Строка, Запись);
					Строка.ПолученИзВнешнегоСервиса = Ложь; // может быть вновь установлен ниже
				КонецЕсли;
			КонецЦикла;
			
			Поиск = Новый Структура("Идентификатор, Периодичность"); // поиск правила в таблице актуальных правил
			
			Для Каждого ОписаниеОтчета Из Респондент.forms Цикл
				ПравилоПоОКУД = ПравилаПоОКУД.Найти(ОписаниеОтчета.OKUD, "ОКУД");
				// По одному ОКУД может быть несколько правил: если одна и та же форма имеет разную периодичность.
				// Среди правил выберем нужное с учетом полученной из сервиса периодичности.
				Если Не ЗначениеЗаполнено(ПравилоПоОКУД.Требования) Тогда
					ЗаписатьОшибкуВЖурнал(
						СтрШаблон("Не найдены правила подачи отчетов по ОКУД ""%1""", ОписаниеОтчета.OKUD),
						"Обработка ответа сервиса",
						УровеньЖурналаРегистрации.Информация);
					Продолжить;
				КонецЕсли;
				Поиск.Периодичность = ПериодичностьИзСтроки(ОписаниеОтчета.period);
				ПравилоНайдено = Ложь;
				Для Каждого Требование Из ПравилоПоОКУД.Требования Цикл
					// Ищем правило без учета идентификатора задачи
					Поиск.Идентификатор = СтрЗаменить(Требование, ПрефиксЗадачи, "");
					ВключитьПравила = АктуальныеПравила.НайтиСтроки(Поиск);
					Если ВключитьПравила.Количество() > 0 Тогда
						ПравилоНайдено = Истина;
						ВключитьПравило = ВключитьПравила[0];
						Строка = ТЗНаборЗаписейНалогиОтчеты.Найти(ВключитьПравило.Правило, "НалогОтчет");
						Если Строка = Неопределено Тогда
							Строка = ТЗНаборЗаписейНалогиОтчеты.Добавить();
							Строка.Организация = Организация;
							Строка.НалогОтчет = ВключитьПравило.Правило;
						КонецЕсли;
						Строка.ПолученИзВнешнегоСервиса = Истина;
						Строка.Комментарий = ОписаниеОтчета.comment;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ПравилоНайдено Тогда
					ЗаписатьОшибкуВЖурнал(
						СтрШаблон("В актуальных правилах по организации ""%1"" не найдено правило по ОКУД ""%2""",
							Организация,
							ОписаниеОтчета.OKUD),
						"Обработка ответа сервиса",
						УровеньЖурналаРегистрации.Информация);
				КонецЕсли;
				
			КонецЦикла;
		
			НаборЗаписейНалогиОтчеты.Загрузить(ТЗНаборЗаписейНалогиОтчеты);
			НаборЗаписейНалогиОтчеты.Записать();
	
			ЗафиксироватьТранзакцию();
		
		Исключение
			ОтменитьТранзакцию();
			ЗаписатьОшибкуВЖурнал(СтрШаблон("Ошибка обработки ответа по организации ""%1"":
				|%2",
				Организация,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
				"Обработка ответа сервиса");
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПериодичностьИзСтроки(знач ПериодичностьСтрокой)
	
	ПериодичностьСтрокой = СокрЛП(НРег(ПериодичностьСтрокой));
	
	Пер = Перечисления.Периодичность;
	
	Если ПериодичностьСтрокой = "месячная" Тогда
		Возврат Пер.Месяц;
	ИначеЕсли ПериодичностьСтрокой = "квартальная" Тогда
		Возврат Пер.Квартал;
	ИначеЕсли ПериодичностьСтрокой = "полугодовая" Тогда
		Возврат Пер.Полугодие;
	ИначеЕсли ПериодичностьСтрокой = "недельная" Тогда
		Возврат Пер.Неделя;
	Иначе
		Возврат Пер.Год;
	КонецЕсли;
	
КонецФункции

#КонецОбласти