// Содержимое модуля отличается в версиях ПРОФ и КОРП.
// В версии ПРОФ отсутствует:
// - тело экспортных процедур (остаются только сигнатуры методов)
// - неэкспортные процедуры и все функции.
// Поэтому не допускается реализация в модуле экспортных функций: вместо них следует использовать процедуры с возвращаемым параметром.

#Область Соглашения

Процедура ОпределитьПоддержкуУчетаПоЭлементамЗатрат(УчетПоддерживается) Экспорт
	
	УчетПоддерживается = ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеСчетаРасходов(СчетаРасходов) Экспорт
	
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыУчета(ПараметрыУчета) Экспорт
	
	ПараметрыУчета.Добавить("УчитыватьРасходыПоСтатьямЗатрат");
	ПараметрыУчета.Добавить("УчитыватьРасходыПоЭлементамЗатрат");
	
КонецПроцедуры

Процедура ОпределитьВидСубконтоПоимениПараметра(ВидСубконто, ИмяПараметра) Экспорт
	
	Если ИмяПараметра = "УчитыватьРасходыПоСтатьямЗатрат" Тогда
		ВидСубконто = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат");
	ИначеЕсли ИмяПараметра = "УчитыватьРасходыПоЭлементамЗатрат" Тогда
		ОпределитьВидСубконтоЭлементыЗатрат(ВидСубконто);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьВидСубконтоЭлементыЗатрат(ВидСубконто) Экспорт
	
	ВидСубконто = ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЭлементыЗатрат");
	
КонецПроцедуры

Функция ВидСубконто(ИмяЭлементаКлюча)
	
	Если ИмяЭлементаКлюча = "ЭлементЗатрат" Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЭлементыЗатрат;
	ИначеЕсли ИмяЭлементаКлюча = "СтатьяЗатрат" Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
	КонецЕсли;
	
КонецФункции

Функция ИмяЭлементаКлюча(ВидСубконто)
	
	Если ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЭлементыЗатрат Тогда
		Возврат "ЭлементЗатрат";
	ИначеЕсли ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
		Возврат "СтатьяЗатрат";
	КонецЕсли;
	
КонецФункции

Функция ИмяВарианта()
	
	Возврат "ЭлементыЗатрат";
	
КонецФункции

#КонецОбласти

#Область Инициализация

Процедура ДобавитьВариантСтруктурыЗатрат(ВариантыСтруктурыЗатрат, Период, Организация, ОценитьЗапасы, ОписаниеСумм) Экспорт
	
	РазрезыУчетаРасходов = ЭлементыЗатратНастройкаПараметровУчета.РазрезыУчетаРасходов(Период, Организация);
	
	Если Не ЗначениеЗаполнено(РазрезыУчетаРасходов) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеИсточники = Новый Массив;
	Если ОценитьЗапасы Тогда
		ДополнительныеИсточники.Добавить("СтруктураСтоимостиЗапасовНачальноеСальдо");
		ДополнительныеИсточники.Добавить("СтруктураСтоимостиЗапасовВыпуск");
	КонецЕсли;
	
	СтруктураЗатрат.ДобавитьВариантСтруктурыЗатрат(
		ВариантыСтруктурыЗатрат,
		ИмяВарианта(),
		СоставКлюча(РазрезыУчетаРасходов),
		ОписаниеСумм,
		ДополнительныеИсточники,
		Новый Структура("БухгалтерскийУчет"));
	
КонецПроцедуры

#КонецОбласти

#Область ИсходныеДанные

// СтруктураСтоимостиЗапасовНачальноеСальдо и СтруктураСтоимостиЗапасовВыпуск
Процедура СоздатьСтруктуруСтоимостиЗапасов(МенеджерВременныхТаблиц, Период, Организация, ВариантыСтруктурыЗатрат) Экспорт
	
	Вариант = ВариантыСтруктурыЗатрат.Найти(ИмяВарианта(), "Имя");
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыТекстаЗапроса = Новый Массив;
	Для Каждого ВнешнийИсточник Из Вариант.ВнешниеИсточники Цикл
		Если ВнешнийИсточник = "СтруктураСтоимостиЗапасовНачальноеСальдо" Тогда
			ЭлементыТекстаЗапроса.Добавить(ТекстЗапросаСоздатьСтруктураСтоимостиЗапасовНачальноеСальдо());
		ИначеЕсли ВнешнийИсточник = "СтруктураСтоимостиЗапасовВыпуск" Тогда
			ЭлементыТекстаЗапроса.Добавить(ТекстЗапросаСоздатьСтруктураСтоимостиЗапасовВыпуск());
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ЭлементыТекстаЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.Текст = СтрСоединить(ЭлементыТекстаЗапроса, ";" + Символы.ПС);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаСоздатьСтруктураСтоимостиЗапасовНачальноеСальдо()
	
	Возврат
	"ВЫБРАТЬ
	|	АналитикаУчетаЗатрат.КлючАналитики КАК Ключ,
	|	АналитикаУчетаЗатрат.СчетЗатрат КАК СчетЗатрат,
	|	АналитикаУчетаЗатрат.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА АналитикаУчетаЗатрат.Субконто1 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(ОборотныеСубконто.ЗначениеПоУмолчанию1, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ АналитикаУчетаЗатрат.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА АналитикаУчетаЗатрат.Субконто2 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(ОборотныеСубконто.ЗначениеПоУмолчанию2, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ АналитикаУчетаЗатрат.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА АналитикаУчетаЗатрат.Субконто3 = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(ОборотныеСубконто.ЗначениеПоУмолчанию3, НЕОПРЕДЕЛЕНО)
	|		ИНАЧЕ АналитикаУчетаЗатрат.Субконто3
	|	КОНЕЦ КАК Субконто3
	|ПОМЕСТИТЬ ВТ_АналитикаУчетаЗатрат
	|ИЗ
	|	РегистрСведений.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотныеСубконто КАК ОборотныеСубконто
	|		ПО АналитикаУчетаЗатрат.СчетЗатрат = ОборотныеСубконто.Счет
	|ГДЕ
	|	АналитикаУчетаЗатрат.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаУчетаЗатрат.Ключ КАК Ключ
	|ПОМЕСТИТЬ ВТ_КлючиАналитикиУчетаЗатрат
	|ИЗ
	|	ВТ_АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НачальноеСальдо КАК НачальноеСальдо
	|		ПО АналитикаУчетаЗатрат.СчетЗатрат = НачальноеСальдо.Счет
	|			И АналитикаУчетаЗатрат.Подразделение = НачальноеСальдо.Подразделение
	|			И АналитикаУчетаЗатрат.Субконто1 = НачальноеСальдо.Субконто1
	|			И АналитикаУчетаЗатрат.Субконто2 = НачальноеСальдо.Субконто2
	|			И АналитикаУчетаЗатрат.Субконто3 = НачальноеСальдо.Субконто3
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ключ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураСтоимостиЗапасов.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	МАКСИМУМ(СтруктураСтоимостиЗапасов.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_Периоды
	|ИЗ
	|	РегистрСведений.СтруктураСтоимостиЗапасов КАК СтруктураСтоимостиЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючиАналитикиУчетаЗатрат КАК КлючиАналитикиУчетаЗатрат
	|		ПО СтруктураСтоимостиЗапасов.АналитикаУчетаЗатрат = КлючиАналитикиУчетаЗатрат.Ключ
	|ГДЕ
	|	СтруктураСтоимостиЗапасов.Период < &НачалоПериода
	|	И СтруктураСтоимостиЗапасов.Активность
	|	И СтруктураСтоимостиЗапасов.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	СтруктураСтоимостиЗапасов.АналитикаУчетаЗатрат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаЗатрат,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураСтоимостиЗапасов.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	СтруктураСтоимостиЗапасов.Регистратор КАК Регистратор,
	|	ЕСТЬNULL(СтруктураСтоимостиЗапасов.Регистратор.ВидОперации.Порядок, 0) КАК Порядок,
	|	СтруктураСтоимостиЗапасов.Период КАК Период
	|ПОМЕСТИТЬ ВТ_Регистраторы
	|ИЗ
	|	РегистрСведений.СтруктураСтоимостиЗапасов КАК СтруктураСтоимостиЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК МаксимальныеПериоды
	|		ПО СтруктураСтоимостиЗапасов.АналитикаУчетаЗатрат = МаксимальныеПериоды.АналитикаУчетаЗатрат
	|			И СтруктураСтоимостиЗапасов.Период = МаксимальныеПериоды.Период
	|ГДЕ
	|	СтруктураСтоимостиЗапасов.Активность
	|	И СтруктураСтоимостиЗапасов.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаЗатрат,
	|	Период,
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистраторы.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	Регистраторы.Период КАК Период,
	|	МАКСИМУМ(Регистраторы.Порядок) КАК Порядок
	|ПОМЕСТИТЬ ВТ_МаксимальныйПорядок
	|ИЗ
	|	ВТ_Регистраторы КАК Регистраторы
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистраторы.АналитикаУчетаЗатрат,
	|	Регистраторы.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаЗатрат,
	|	Период,
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистраторы.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	Регистраторы.Период КАК Период,
	|	МАКСИМУМ(Регистраторы.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВТ_СрезПоследних
	|ИЗ
	|	ВТ_Регистраторы КАК Регистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныйПорядок КАК МаксимальныйПорядок
	|		ПО Регистраторы.АналитикаУчетаЗатрат = МаксимальныйПорядок.АналитикаУчетаЗатрат
	|			И Регистраторы.Период = МаксимальныйПорядок.Период
	|			И Регистраторы.Порядок = МаксимальныйПорядок.Порядок
	|
	|СГРУППИРОВАТЬ ПО
	|	Регистраторы.АналитикаУчетаЗатрат,
	|	Регистраторы.Период,
	|	Регистраторы.Порядок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаЗатрат,
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиАналитикаУчетаЗатрат.СчетЗатрат КАК Счет,
	|	КлючиАналитикаУчетаЗатрат.Подразделение КАК Подразделение,
	|	КлючиАналитикаУчетаЗатрат.Субконто1 КАК Субконто1,
	|	КлючиАналитикаУчетаЗатрат.Субконто2 КАК Субконто2,
	|	КлючиАналитикаУчетаЗатрат.Субконто3 КАК Субконто3,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(КлючиАналитикаУчетаЗатрат.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(КлючиАналитикаУчетаЗатрат.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(КлючиАналитикаУчетаЗатрат.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	СтруктураСтоимостиЗапасов.ЭлементЗатрат КАК ЭлементЗатрат,
	|	СтруктураСтоимостиЗапасов.СтатьяЗатрат КАК СтатьяЗатрат,
	|	СтруктураСтоимостиЗапасов.Сальдо КАК Сумма
	|ПОМЕСТИТЬ СтруктураСтоимостиЗапасовНачальноеСальдо
	|ИЗ
	|	РегистрСведений.СтруктураСтоимостиЗапасов КАК СтруктураСтоимостиЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АналитикаУчетаЗатрат КАК КлючиАналитикаУчетаЗатрат
	|		ПО СтруктураСтоимостиЗапасов.АналитикаУчетаЗатрат = КлючиАналитикаУчетаЗатрат.Ключ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СрезПоследних КАК СрезПоследних
	|		ПО СтруктураСтоимостиЗапасов.АналитикаУчетаЗатрат = СрезПоследних.АналитикаУчетаЗатрат
	|			И СтруктураСтоимостиЗапасов.Период = СрезПоследних.Период
	|			И СтруктураСтоимостиЗапасов.Регистратор = СрезПоследних.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО (КлючиАналитикаУчетаЗатрат.СчетЗатрат = СчетаЗапасов.Счет)
	|ГДЕ
	|	СтруктураСтоимостиЗапасов.Активность
	|	И СтруктураСтоимостиЗапасов.Сальдо <> 0
	|	И СтруктураСтоимостиЗапасов.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Периоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Регистраторы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_МаксимальныйПорядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_АналитикаУчетаЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_КлючиАналитикиУчетаЗатрат";
	
КонецФункции

Функция ТекстЗапросаСоздатьСтруктураСтоимостиЗапасовВыпуск()
	
	Возврат
	"ВЫБРАТЬ
	|	КлючиАналитикаУчетаЗатрат.СчетЗатрат КАК Счет,
	|	КлючиАналитикаУчетаЗатрат.Подразделение КАК Подразделение,
	|	КлючиАналитикаУчетаЗатрат.Субконто1 КАК Субконто1,
	|	КлючиАналитикаУчетаЗатрат.Субконто2 КАК Субконто2,
	|	КлючиАналитикаУчетаЗатрат.Субконто3 КАК Субконто3,
	|	ВЫБОР
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 1
	|			ТОГДА ВЫРАЗИТЬ(КлючиАналитикаУчетаЗатрат.Субконто1 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 2
	|			ТОГДА ВЫРАЗИТЬ(КлючиАналитикаУчетаЗатрат.Субконто2 КАК Справочник.Номенклатура)
	|		КОГДА СчетаЗапасов.НомерСубконтоНоменклатура = 3
	|			ТОГДА ВЫРАЗИТЬ(КлючиАналитикаУчетаЗатрат.Субконто3 КАК Справочник.Номенклатура)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК КорСчет,
	|	СтруктураСтоимостиЗапасов.ЭлементЗатрат КАК ЭлементЗатрат,
	|	СтруктураСтоимостиЗапасов.СтатьяЗатрат КАК СтатьяЗатрат,
	|	СтруктураСтоимостиЗапасов.Выпуск КАК Сумма
	|ПОМЕСТИТЬ СтруктураСтоимостиЗапасовВыпуск
	|ИЗ
	|	РегистрСведений.СтруктураСтоимостиЗапасов КАК СтруктураСтоимостиЗапасов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаЗатрат КАК КлючиАналитикаУчетаЗатрат
	|		ПО СтруктураСтоимостиЗапасов.АналитикаУчетаЗатрат = КлючиАналитикаУчетаЗатрат.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаЗапасов КАК СчетаЗапасов
	|		ПО (КлючиАналитикаУчетаЗатрат.СчетЗатрат = СчетаЗапасов.Счет)
	|ГДЕ
	|	СтруктураСтоимостиЗапасов.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СтруктураСтоимостиЗапасов.Активность
	|	И СтруктураСтоимостиЗапасов.Организация = &Организация
	|	И СтруктураСтоимостиЗапасов.Выпуск <> 0";
	
КонецФункции

#КонецОбласти

#Область Проводки

Процедура ЗаполнитьПараметрыФормированияПроводок(ПараметрыПроводок, ВариантыСтруктурыЗатрат, КлючиСтруктурыЗатрат, ОписаниеСуммПроводок) Экспорт
	
	Вариант = ВариантыСтруктурыЗатрат.Найти(ИмяВарианта(), "Имя");
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроводок = Новый Структура;
	ПараметрыПроводок.Вставить("ОписаниеСчетовРасходов",  ОписаниеСчетовРасходов(Вариант.СоставКлюча));
	ПараметрыПроводок.Вставить("ОписаниеЭлементовЗатрат", КлючиСтруктурыЗатрат[ИмяВарианта()]);
	ПараметрыПроводок.Вставить("ОписаниеСумм",            Вариант.ОписаниеСумм);
	ПараметрыПроводок.Вставить("ОписаниеСуммПроводок",    ОписаниеСуммПроводок);
	
КонецПроцедуры

Процедура ДобавитьПроводки(Проводки, СводнаяПроводка, Суммы, ПараметрыФормированияПроводок) Экспорт
	
	Если ПараметрыФормированияПроводок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСчетаРасходов = ПараметрыФормированияПроводок.ОписаниеСчетовРасходов.Найти(СводнаяПроводка.СчетДт, "Счет");
	Если ОписаниеСчетаРасходов = Неопределено Тогда
		Возврат;
	КонецЕслИ;
	
	ИтогДетальныхПроводок = КоллекцииСумм.ИтогПеременногоНабораСумм(Суммы, ИмяВарианта(), ПараметрыФормированияПроводок.ОписаниеСумм);
	ОбщаяСуммаДетальныхПроводок = ИтогДетальныхПроводок.Сумма;
	
	Если ОбщаяСуммаДетальныхПроводок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммыПоЭлементамЗатрат = СуммыПоЭлементамЗатрат(Суммы);
	
	// Если детальная проводка одна и она на ту же сумму, что и сводная, то достаточно в ней заполнить
	// расширенную аналитику
	Если СводнаяПроводка.Сумма = ОбщаяСуммаДетальныхПроводок 
		И СуммыПоЭлементамЗатрат.Количество() = 1 Тогда
		
		ДанныеДетальнойПроводки = СуммыПоЭлементамЗатрат[0];
		
		ОписаниеЭлементаЗатрат = ПараметрыФормированияПроводок.ОписаниеЭлементовЗатрат.Найти(
			ДанныеДетальнойПроводки.Идентификатор,
			"Идентификатор");
		Если ОписаниеЭлементаЗатрат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьЗначенияСубконто(СводнаяПроводка, ОписаниеЭлементаЗатрат, ОписаниеСчетаРасходов);
		
	КонецЕсли;
	
	// Уменьшим сумму сводной проводки
	СводнаяПроводка.Сумма = СводнаяПроводка.Сумма - ОбщаяСуммаДетальныхПроводок;
	
	// Добавим детальные проводки
	Для Каждого ДанныеДетальнойПроводки Из СуммыПоЭлементамЗатрат Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеДетальнойПроводки.Сумма) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеЭлементаЗатрат = ПараметрыФормированияПроводок.ОписаниеЭлементовЗатрат.Найти(
			ДанныеДетальнойПроводки.Идентификатор,
			"Идентификатор");
		Если ОписаниеЭлементаЗатрат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДетальнаяПроводка = Проводки.Вставить(Проводки.Индекс(СводнаяПроводка) + 1);
		ЗаполнитьЗначенияСвойств(ДетальнаяПроводка, СводнаяПроводка);
		УстановитьЗначенияСубконто(ДетальнаяПроводка, ОписаниеЭлементаЗатрат, ОписаниеСчетаРасходов);
		
		// Заполним суммы. Используем коллекцию, чтобы очистить суммы НУ и разниц
		СуммыПроводки = КоллекцииСумм.НовыйКоллекцияСумм(ПараметрыФормированияПроводок.ОписаниеСуммПроводок);
		СуммыПроводки.Сумма = ДанныеДетальнойПроводки.Сумма;
		ЗаполнитьЗначенияСвойств(ДетальнаяПроводка, СуммыПроводки);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОписаниеСчетовРасходов(СоставКлюча)
	
	Если Не ЗначениеЗаполнено(СоставКлюча) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидыСубконто = Новый Массив;
	Для Каждого ЭлементКлюча Из СоставКлюча Цикл
		ВидыСубконто.Добавить(ВидСубконто(ЭлементКлюча.Ключ));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СчетаРасходов", ЭлементыЗатратНастройкаПараметровУчета.ПредопределенныеСчетаРасходов());
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЭлементыЗатрат)
	|				ТОГДА ХозрасчетныйВидыСубконто.НомерСтроки
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НомерСубконтоЭлементыЗатрат,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат)
	|				ТОГДА ХозрасчетныйВидыСубконто.НомерСтроки
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НомерСубконтоСтатьиЗатрат
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&СчетаРасходов)
	|	И ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.Суммовой
	|	И ХозрасчетныйВидыСубконто.ВидСубконто В (&ВидыСубконто)
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйВидыСубконто.Ссылка";
	
	ОписаниеСчетовРасходов = Запрос.Выполнить().Выгрузить();
	ОписаниеСчетовРасходов.Индексы.Добавить("Счет");
	
	Возврат ОписаниеСчетовРасходов;
	
КонецФункции

Процедура УстановитьЗначенияСубконто(Проводка, ОписаниеЭлементаЗатрат, ОписаниеСчета)
	
	Если ОписаниеСчета.НомерСубконтоЭлементыЗатрат > 0 Тогда
		Проводка["СубконтоДт" + ОписаниеСчета.НомерСубконтоЭлементыЗатрат] = ОписаниеЭлементаЗатрат.ЭлементЗатрат;
	КонецЕсли;
	Если ОписаниеСчета.НомерСубконтоСтатьиЗатрат > 0 Тогда
		Проводка["СубконтоДт" + ОписаниеСчета.НомерСубконтоСтатьиЗатрат]   = ОписаниеЭлементаЗатрат.СтатьяЗатрат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьВспомогательныхДанных

Процедура ДополнитьРезультат(Результат, Протокол, ОписаниеСумм, МенеджерВременныхТаблиц, Организация, ВариантыСтруктурыЗатрат) Экспорт
	
	Вариант = ВариантыСтруктурыЗатрат.Найти(ИмяВарианта(), "Имя");
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Вариант.ВнешниеИсточники) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСтоимостиЗапасов = Новый ТаблицаЗначений;
	СтруктураСтоимостиЗапасов.Колонки.Добавить("ИдентификаторВершины",        УчетЗатрат.ТипИдентификатораВершины());
	СтруктураСтоимостиЗапасов.Колонки.Добавить("ИдентификаторЭлементаЗатрат", УчетЗатрат.ТипИдентификатораВершины());
	СтруктураСтоимостиЗапасов.Колонки.Добавить("Выпуск",                      БухгалтерскийУчетКлиентСервер.ТипСумма());
	СтруктураСтоимостиЗапасов.Колонки.Добавить("Сальдо",                      БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	ВыпрямитьДанныеИзПротокола(СтруктураСтоимостиЗапасов, Протокол.СальдоПослеРасчета,               "Сальдо");
	ВыпрямитьДанныеИзПротокола(СтруктураСтоимостиЗапасов, Протокол.СебестоимостьВыпущеннойПродукции, "Выпуск");
	
	// Выбирали данные из протокола, а в нем могут повторяться записи про одну и ту же вершину
	СтруктураСтоимостиЗапасов.Свернуть("ИдентификаторВершины, ИдентификаторЭлементаЗатрат", "Выпуск,Сальдо");
	
	// Удалим незначащие строки, чтобы не создавать ненужных ключей аналитики
	КоличествоСтрок = СтруктураСтоимостиЗапасов.Количество();
	Для НомерСКонца = 1 По КоличествоСтрок Цикл
		
		ИндексСтроки = КоличествоСтрок - НомерСКонца;
		ДанныеСтроки = СтруктураСтоимостиЗапасов[ИндексСтроки];
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Выпуск) 
			И Не ЗначениеЗаполнено(ДанныеСтроки.Сальдо) Тогда
			СтруктураСтоимостиЗапасов.Удалить(ИндексСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураСтоимостиЗапасов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Для того, чтобы данные можно было записать в информационную базу, заменим идентификаторы вершин ключами аналитики,
	// а идентификаторы элементов - ссылками на элементы и статьи затрат.
	
	Результат.Вставить("СтруктураСтоимостиЗапасов", НовыйДвиженияСтруктураСтоимостиЗапасов());
	
	КлючиЭлементовЗатрат = Протокол.КлючиСтруктурыЗатрат[ИмяВарианта()];
	
	КэшАналитикиУчетаЗатрат = Новый Соответствие; // Ключ - идентификатор вершины; значение - ключ аналитики
	
	Для Каждого ДанныеОбЭлементе Из СтруктураСтоимостиЗапасов Цикл
		
		АналитикаУчетаЗатрат = КэшАналитикиУчетаЗатрат[ДанныеОбЭлементе.ИдентификаторВершины];
		Если АналитикаУчетаЗатрат = Неопределено Тогда
			АналитикаУчетаЗатрат = АналитикаУчетаЗатрат(ДанныеОбЭлементе.ИдентификаторВершины, Протокол.КлючиВершин, Организация);
			КэшАналитикиУчетаЗатрат.Вставить(ДанныеОбЭлементе.ИдентификаторВершины, АналитикаУчетаЗатрат);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АналитикаУчетаЗатрат) Тогда
			Продолжить;
		КонецЕсли;
		
		АналитикаЭлементаЗатрат = КлючиЭлементовЗатрат.Найти(ДанныеОбЭлементе.ИдентификаторЭлементаЗатрат, "Идентификатор");
		Если АналитикаЭлементаЗатрат = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Результат.СтруктураСтоимостиЗапасов.Добавить();
		НоваяСтрока.АналитикаУчетаЗатрат = АналитикаУчетаЗатрат;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, АналитикаЭлементаЗатрат, Вариант.СоставКлючаСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОбЭлементе,        "Выпуск,Сальдо");
		
	КонецЦикла;
	
	// Вершины могут отличаться свойствами, которые не входят в ключ аналитики учета затрат
	Результат.СтруктураСтоимостиЗапасов.Свернуть("АналитикаУчетаЗатрат, ЭлементЗатрат, СтатьяЗатрат", "Выпуск, Сальдо"); 
	
КонецПроцедуры

Процедура СформироватьДвиженияСтруктураСтоимостиЗапасов(РезультатРасчета, Движения, Период, Организация) Экспорт
	
	Если Не РезультатРасчета.Свойство("СтруктураСтоимостиЗапасов") Тогда
		Возврат;
	КонецЕсли;
	
	// Для правильной работы СоздатьСтруктураСтоимостиЗапасовНачальноеСальдо() важно, 
	// чтобы данные регламентных операций за одинаковый месяц были записаны в регистр 
	// с одинаковым значением поля Период.
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(
		КонецМесяца(Период),
		Организация);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РезультатРасчета.СтруктураСтоимостиЗапасов,
		РеквизитыЗаписи,
		"СтруктураСтоимостиЗапасов");
	
КонецПроцедуры

Функция НовыйДвиженияСтруктураСтоимостиЗапасов()
	
	СтруктураСтоимости = Новый ТаблицаЗначений;
	СтруктураСтоимости.Колонки.Добавить("АналитикаУчетаЗатрат", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	СтруктураСтоимости.Колонки.Добавить("ЭлементЗатрат",        Новый ОписаниеТипов("ПеречислениеСсылка.ЭлементыЗатрат"));
	СтруктураСтоимости.Колонки.Добавить("СтатьяЗатрат",         Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат"));
	СтруктураСтоимости.Колонки.Добавить("Сальдо",               БухгалтерскийУчетКлиентСервер.ТипСумма());
	СтруктураСтоимости.Колонки.Добавить("Выпуск",               БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	Возврат СтруктураСтоимости;
	
КонецФункции

Процедура ВыпрямитьДанныеИзПротокола(СтруктураСтоимостиЗапасов, РазделПротокола, ИмяРесурса)
	
	// Записи в протоколе - в иерархическом виде, с группировкой по вершинам.
	// Приведем их к прямому виду.
	
	Если РазделПротокола.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеВершины Из РазделПротокола Цикл 
		
		Если Не ЗначениеЗаполнено(ОписаниеВершины.Сумма) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеЭлементаЗатрат Из СуммыПоЭлементамЗатрат(ОписаниеВершины) Цикл
		
			Если Не ЗначениеЗаполнено(ОписаниеЭлементаЗатрат.Сумма) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = СтруктураСтоимостиЗапасов.Добавить();
			НоваяСтрока.ИдентификаторВершины        = ОписаниеВершины.Идентификатор;
			НоваяСтрока.ИдентификаторЭлементаЗатрат = ОписаниеЭлементаЗатрат.Идентификатор;
			НоваяСтрока[ИмяРесурса]                 = ОписаниеЭлементаЗатрат.Сумма;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция АналитикаУчетаЗатрат(Идентификатор, КлючиВершин, Организация)
	
	КлючВершины = КлючиВершин.Найти(Идентификатор, "Идентификатор");
	Если КлючВершины = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АналитикаУчетаЗатрат = Новый Структура;
	АналитикаУчетаЗатрат.Вставить("Организация",   Организация);
	АналитикаУчетаЗатрат.Вставить("СчетЗатрат",    КлючВершины.Счет);
	АналитикаУчетаЗатрат.Вставить("Подразделение", КлючВершины.Подразделение);
	АналитикаУчетаЗатрат.Вставить("Субконто1",     КлючВершины.Субконто1);
	АналитикаУчетаЗатрат.Вставить("Субконто2",     КлючВершины.Субконто2);
	АналитикаУчетаЗатрат.Вставить("Субконто3",     КлючВершины.Субконто3);
	
	Возврат Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(АналитикаУчетаЗатрат);

КонецФункции

Процедура СформироватьДвиженияСтруктураСтоимостиЗапасовПриВводеНачальныхОстатков(ДанныеДокумента, Движения, Период, Организация, Подразделение) Экспорт
	
	КэшАналитикиУчетаЗатрат  = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ДанныеДокумента Цикл
		
		АналитикаУчетаЗатрат = КэшАналитикиУчетаЗатрат[СтрокаТаблицы.Ключ];
		Если АналитикаУчетаЗатрат = Неопределено Тогда
			АналитикаУчетаЗатрат = АналитикаУчетаЗатратПриВводеНачальныхОстатков(
				СтрокаТаблицы,
				Организация,
				Подразделение);
			КэшАналитикиУчетаЗатрат.Вставить(СтрокаТаблицы.Ключ, АналитикаУчетаЗатрат);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АналитикаУчетаЗатрат) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Движения.СтруктураСтоимостиЗапасов.Добавить();
		НоваяСтрока.Период               = Период;
		НоваяСтрока.Организация          = Организация;
		НоваяСтрока.АналитикаУчетаЗатрат = АналитикаУчетаЗатрат;
		НоваяСтрока.ЭлементЗатрат        = СтрокаТаблицы.ЭлементЗатрат;
		НоваяСтрока.СтатьяЗатрат         = СтрокаТаблицы.СтатьяЗатрат;
		НоваяСтрока.Сальдо               = СтрокаТаблицы.Сумма;
		
	КонецЦикла;
	
	Движения.СтруктураСтоимостиЗапасов.Записывать = Истина;
	
КонецПроцедуры

Функция АналитикаУчетаЗатратПриВводеНачальныхОстатков(СтрокаДокумента, Организация, Подразделение)
	
	АналитикаУчетаЗатрат = Новый Структура;
	АналитикаУчетаЗатрат.Вставить("Организация",   Организация);
	АналитикаУчетаЗатрат.Вставить("СчетЗатрат",    СтрокаДокумента.СчетУчета);
	АналитикаУчетаЗатрат.Вставить("Подразделение", Подразделение);
	АналитикаУчетаЗатрат.Вставить("Субконто1",     СтрокаДокумента.Субконто1);
	АналитикаУчетаЗатрат.Вставить("Субконто2",     СтрокаДокумента.Субконто2);
	АналитикаУчетаЗатрат.Вставить("Субконто3",     СтрокаДокумента.Субконто3);
	
	Возврат Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(АналитикаУчетаЗатрат);

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоставКлюча(РазрезыУчетаРасходов)
	
	СоставКлюча = Новый Структура;
	
	Для Каждого ВидСубконто Из РазрезыУчетаРасходов Цикл
		СоставКлюча.Вставить(ИмяЭлементаКлюча(ВидСубконто), ВидСубконто.ТипЗначения);
	КонецЦикла;
		
	Возврат СоставКлюча;
	
КонецФункции

Функция СуммыПоЭлементамЗатрат(Суммы)
	
	Возврат Суммы[ИмяВарианта()];
	
КонецФункции

#КонецОбласти
