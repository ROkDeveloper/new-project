// Модуль предназначен для работы с подсистемой ОбесценениеЗапасов, поставляемой в составе версии КОРП.
// Содержимое модуля отличается в версиях ПРОФ и КОРП.
// В версии ПРОФ отсутствует:
// - тело экспортных процедур (остаются только сигнатуры методов)
// - неэкспортные процедуры и все функции.
// Поэтому не допускается реализация в модуле экспортных функций: вместо них следует использовать процедуры с возвращаемым параметром.

#Область ПрограммныйИнтерфейс

// Выполняет действия регламентной операции, включая формирование движений
//
// Параметры:
//  Движения    - КоллекцияДвижений - заполняемая коллекция
//  Период      - Дата - дата регламентной операции, идентифицирует закрываемый месяц
//  Организация - СправочникСсылка.Организации - организация, по которой выполняется операция
//  Ссылка      - ДокументСсылка.РегламентнаяОперация - выполняемая операция
//
Процедура СформироватьДвиженияРегламентнойОперации(Движения, Период, Организация, Ссылка) Экспорт
	
	РасчетОбесцененияЗапасов = РассчитатьОбесценениеЗапасов(Период, Организация);
	
	СформироватьПроводки(Движения.Хозрасчетный, РасчетОбесцененияЗапасов, Период, Организация);
	
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(Период, Организация);
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		РасчетОбесцененияЗапасов,
		РеквизитыЗаписи,
		"РасчетОбесцененияЗапасов");
	
КонецПроцедуры

// Рассчитывает сумму выбытия обесценения запасов - для заполнения регламентированной отчетности.
//
// Параметры:
//  Выбытие       - Число - возвращаемый параметр, сумма выбытия обесценения
//  Организация   - СправочникСсылка.Организации - организация, по которой заполняется отчетность
//  НачалоПериода - Дата (без времени) - начало периода отчета
//  КонецПериода  - Дата (без времени) - конец периода отчета
//  Счет          - ПланСчетовСсылка.Хозрасчетный - счет резерва (субсчет счета 14 или счет 14 в целом)
//
Процедура РассчитатьВыбытиеОбесцененияЗапасов(Выбытие, Организация, НачалоПериода, КонецПериода, Счет) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("Организации",   БухгалтерскийУчетПереопределяемый.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("СчетаРезерва",  БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет));
	
	// В регистр записываются инвертированные величины, см. НовыйРасчетОбесцененияЗапасов()
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(-РасчетОбесцененияЗапасов.ОбесценениеВыбытие), 0) КАК ВыбытиеОбесценения
	|ИЗ
	|	РегистрСведений.РасчетОбесцененияЗапасов КАК РасчетОбесцененияЗапасов
	|ГДЕ
	|	РасчетОбесцененияЗапасов.Организация В(&Организации)
	|	И РасчетОбесцененияЗапасов.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетОбесцененияЗапасов.СчетРезерва В(&СчетаРезерва)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Выбытие = Выборка.ВыбытиеОбесценения;
	
КонецПроцедуры

#Область ПодключениеСтандартныхПодсистем

// Подключает объекты подсистемы к механизмам ограничения доступа.
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
//
// Параметры:
//  Списки - Соответствие:
//     * Ключ - ОбъектМетаданных - объекты подсистемы, имеющие списки, требующие подключения
//     * Значение - Булево - Истина
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.ОбесценениеЗапасов,              Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РасчетОбесцененияЗапасов, Истина);
	
КонецПроцедуры

// Подключает объекты подсистемы к механизмам даты запрета редактирования.
// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
//
// Параметры: см. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"Документ.ОбесценениеЗапасов",
		"Дата",
		"БухгалтерскийУчет",
		"Организация");
	
КонецПроцедуры

// Подключает объекты подсистемы к механизмам свойств.
// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств
//
// Параметры: см. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств
//
Процедура НастроитьНаборыСвойств(Наборы) Экспорт
	
	Документы.ОбесценениеЗапасов.НастроитьНаборыСвойств(Наборы);
	
КонецПроцедуры

// Включает наборы свойств объектов подсистемы.
//
// Параметры:
//  Значение - Булево - Истина для включения, Ложь для отключения.
//
Процедура ВключитьНаборыСвойств(Значение) Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = Значение;
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств(
		Документы.ОбесценениеЗапасов.ИмяНабораСвойств(),
		ПараметрыНабора);
	
КонецПроцедуры

// Подключает объекты подсистемы к механизмам печати.
// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати
//
// Параметры: см. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати
//
Процедура НастроитьКомандыПечати(СписокОбъектов) Экспорт
	СписокОбъектов.Добавить(Документы.ОбесценениеЗапасов);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйРасчетОбесцененияЗапасов()
	
	// В регистре контрактивные значения хранятся с противоположным знаком,
	// так как квалификатор числа позволяет описать неотрицательное число,
	// но не позволяет описать "неположительное".
	
	РасчетОбесцененияЗапасов = ЗакрытиеМесяца.НовыйЗаписиВспомогательногоРегистраСведений(
		Метаданные.РегистрыСведений.РасчетОбесцененияЗапасов);
	РасчетОбесцененияЗапасов.Колонки.Добавить(
		"НоменклатурнаяГруппа",
		Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"));
	РасчетОбесцененияЗапасов.Колонки.Добавить(
		"ВыбытиеДетально",
		Новый ОписаниеТипов("ТаблицаЗначений")); // НовыйВыбытиеДетально или не инициализированная таблица, если выбытия нет
		
	Возврат РасчетОбесцененияЗапасов;
	
КонецФункции

Функция НовыйВыбытиеДетально()
	
	ВыбытиеДетально = Новый ТаблицаЗначений;
	
	ВыбытиеДетально.Колонки.Добавить("Счет",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ВыбытиеДетально.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ВыбытиеДетально.Колонки.Добавить("Субконто1");
	ВыбытиеДетально.Колонки.Добавить("Субконто2");
	ВыбытиеДетально.Колонки.Добавить("Субконто3");
	ВыбытиеДетально.Колонки.Добавить("Количество",    Метаданные.РегистрыСведений.РасчетОбесцененияЗапасов.Ресурсы.Количество.Тип);
	ВыбытиеДетально.Колонки.Добавить("Сумма",         БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	Возврат ВыбытиеДетально;
	
КонецФункции

Функция РассчитатьОбесценениеЗапасов(Период, Организация)
	
	Если Не УчетнаяПолитика.ОбесценениеЗапасов(Организация, Период) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Сейчас остатки НЗП не учитываются с детализацией до продукции,
	// однако этот код написан на будущее - когда будут.
	
	// При уменьшении резерва важно выделять два компонента:
	// 1. уменьшение убытка от обесценения в связи с исчезновением признаков обесценения или увеличением NRV
	// 2. включение резерва в балансовую стоимость запаса при выбытии.
	// Потому что:
	// a. уменьшение убытка - это операция, требующая особого раскрытия
	// б. форма 66н предусматривает раздельные колонки для выбытия и изменения убытка
	// в. убыток должен включаться в расходы по обычным видам деятельности,
	//    а выбытие может включаться в прочие расходы,
	//    если запас реализован и выручка от реализации отражена в составе прочих доходов
	
	// Выбытие за отчетный период определяется как сумма выбытия учтенного ранее и выбытия за период расчета.
	// Выбытие за период расчета определяется как сумма резерва из прошлого расчета, 
	// уменьшенная на количество за период расчета
	
	// В регистре знак контрактивных значений инвертирован - см. НовыйРасчетОбесцененияЗапасов()
	// Поэтому и в этой процедуре контрактивные величины - неотрицательные числа
	// (ивертируют знак; вычитаются, а не складываются).
	
	СчетаОбесценения = РегистрыСведений.РасчетОбесцененияЗапасов.СчетаОбесценения();
	КонецПериода     = КонецМесяца(Период);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; // Запрос переиспользуется
	
	Запрос.УстановитьПараметр(
		"КонецПериода",
		КонецПериода);
	Запрос.УстановитьПараметр(
		"ОтчетнаяДата",
		КонецПериода + 1);
	Запрос.УстановитьПараметр(
		"Организация",
		Организация);
	Запрос.УстановитьПараметр(
		"АктуальныйПеречень",
		Документы.ОбесценениеЗапасов.АктуальныйПеречень(Период, Организация));
	Запрос.УстановитьПараметр(
		"ПериодПредыдущегоРасчета",
		РегистрыСведений.РасчетОбесцененияЗапасов.ПериодПредыдущегоРасчета(Период, Организация));
	Запрос.УстановитьПараметр(
		"НачалоПериодаРасчета",
		РегистрыСведений.РасчетОбесцененияЗапасов.ПериодСледующегоРасчета(Период, Организация));
	Запрос.УстановитьПараметр(
		"СчетаОбесценения",
		СчетаОбесценения);
	Запрос.УстановитьПараметр(
		"СчетаРезервов",
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(СчетаОбесценения.ВыгрузитьКолонку("СчетРезерва")));
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	МИНИМУМ(Запасы.Цена) КАК Цена
	|ПОМЕСТИТЬ ПризнакиОбесценения
	|ИЗ
	|	Документ.ОбесценениеЗапасов.Запасы КАК Запасы
	|ГДЕ
	|	Запасы.Ссылка = &АктуальныйПеречень
	|	И Запасы.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Запасы.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервСозданныйРанее.Счет КАК СчетРезерва,
	|	РезервСозданныйРанее.Субконто1 КАК Номенклатура,
	|	-РезервСозданныйРанее.СуммаОстаток КАК Сумма
	|ПОМЕСТИТЬ РезервСозданныйРанее
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ОтчетнаяДата, Счет В (&СчетаРезервов), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура), Организация = &Организация) КАК РезервСозданныйРанее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО РезервСозданныйРанее.Субконто1 = Номенклатура.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетРезерва
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПризнакиОбесценения.Номенклатура КАК Номенклатура
	|ИЗ
	|	ПризнакиОбесценения КАК ПризнакиОбесценения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РезервСозданныйРанее.Номенклатура
	|ИЗ
	|	РезервСозданныйРанее КАК РезервСозданныйРанее";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаОбесценения.СчетЗапаса КАК СчетЗапаса,
	|	СчетаОбесценения.СчетРезерва КАК СчетРезерва
	|ПОМЕСТИТЬ СчетаОбесценения
	|ИЗ
	|	&СчетаОбесценения КАК СчетаОбесценения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетаОбесценения.СчетЗапаса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Субконто.Ссылка КАК Счет,
	|	Субконто.НомерСтроки КАК НомерСубконтоНоменклатура
	|ПОМЕСТИТЬ СубконтоНоменклатура
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК Субконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаОбесценения КАК СчетаОбесценения
	|		ПО Субконто.Ссылка = СчетаОбесценения.СчетЗапаса
	|ГДЕ
	|	Субконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И Субконто.Количественный
	|	И Субконто.Ссылка.Количественный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СубконтоНоменклатура.Счет КАК Счет
	|ИЗ
	|	СубконтоНоменклатура КАК СубконтоНоменклатура";
	
	СчетаЗапасовНаСкладе = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	Запрос.УстановитьПараметр("СчетаЗапасовНаСкладе", СчетаЗапасовНаСкладе);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Субконто.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК Субконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаОбесценения КАК СчетаОбесценения
	|		ПО Субконто.Ссылка = СчетаОбесценения.СчетЗапаса
	|ГДЕ
	|	Субконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция)";
	
	СчетаНезавершенногоПроизводства = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	Запрос.УстановитьПараметр("СчетаНезавершенногоПроизводства", СчетаНезавершенногоПроизводства);
	
	
	СчетаФинансовогоРезультата = Новый Массив;
	СчетаФинансовогоРезультата.Добавить(ПланыСчетов.Хозрасчетный.Продажи);
	СчетаФинансовогоРезультата.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы);
	
	Запрос.УстановитьПараметр(
		"СчетаФинансовогоРезультата",
		БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаФинансовогоРезультата));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетОбесцененияЗапасов.Номенклатура КАК Номенклатура,
	|	РасчетОбесцененияЗапасов.СчетРезерва КАК СчетРезерва,
	|	СУММА(РасчетОбесцененияЗапасов.Количество) КАК Количество,
	|	СУММА(РасчетОбесцененияЗапасов.Обесценение) КАК Обесценение
	|ПОМЕСТИТЬ ВыбытиеУчтеноРанее
	|ИЗ
	|	РегистрСведений.РасчетОбесцененияЗапасов КАК РасчетОбесцененияЗапасов
	|ГДЕ
	|	РасчетОбесцененияЗапасов.Активность
	|	И РасчетОбесцененияЗапасов.Организация = &Организация
	|	И РасчетОбесцененияЗапасов.ПериодРасчета = &ПериодПредыдущегоРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетОбесцененияЗапасов.Номенклатура,
	|	РасчетОбесцененияЗапасов.СчетРезерва
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетРезерва
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выбытие.Номенклатура КАК Номенклатура,
	|	Выбытие.СчетРезерва КАК СчетРезерва,
	|	Выбытие.РасходыСчет КАК РасходыСчет,
	|	Выбытие.РасходыПодразделение КАК РасходыПодразделение,
	|	Выбытие.РасходыСубконто1 КАК РасходыСубконто1,
	|	Выбытие.РасходыСубконто2 КАК РасходыСубконто2,
	|	Выбытие.РасходыСубконто3 КАК РасходыСубконто3,
	|	СУММА(Выбытие.Количество) КАК Количество
	|ПОМЕСТИТЬ ВыбытиеДетально
	|ИЗ
	|	(ВЫБРАТЬ
	|		СчетаОбесценения.СчетРезерва КАК СчетРезерва,
	|		ЗапасыНаСкладе.Субконто1 КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА ЗапасыНаСкладе.КорСчет В (&СчетаФинансовогоРезультата)
	|				ТОГДА ЗапасыНаСкладе.КорСчет
	|			ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		КОНЕЦ КАК РасходыСчет,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА ЗапасыНаСкладе.КорСчет В (&СчетаФинансовогоРезультата)
	|					ТОГДА ЗапасыНаСкладе.ПодразделениеКор
	|			КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК РасходыПодразделение,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА ЗапасыНаСкладе.КорСчет В (&СчетаФинансовогоРезультата)
	|					ТОГДА ЗапасыНаСкладе.КорСубконто1
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК РасходыСубконто1,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА ЗапасыНаСкладе.КорСчет В (&СчетаФинансовогоРезультата)
	|					ТОГДА ЗапасыНаСкладе.КорСубконто2
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК РасходыСубконто2,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА ЗапасыНаСкладе.КорСчет В (&СчетаФинансовогоРезультата)
	|					ТОГДА ЗапасыНаСкладе.КорСубконто3
	|			КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК РасходыСубконто3,
	|		ЕСТЬNULL(ЗапасыНаСкладе.КоличествоОборотКт, 0) КАК Количество
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериодаРасчета,
	|				&КонецПериода,
	|				,
	|				Счет В (&СчетаЗапасовНаСкладе),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура),
	|				Организация = &Организация
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ВыбытиеУчтеноРанее.Номенклатура
	|						ИЗ
	|							ВыбытиеУчтеноРанее КАК ВыбытиеУчтеноРанее),
	|				,
	|				) КАК ЗапасыНаСкладе
	|			ЛЕВОЕ СОЕДИНЕНИЕ СубконтоНоменклатура КАК СубконтоНоменклатура
	|			ПО ЗапасыНаСкладе.КорСчет = СубконтоНоменклатура.Счет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаОбесценения КАК СчетаОбесценения
	|			ПО ЗапасыНаСкладе.Счет = СчетаОбесценения.СчетЗапаса
	|	ГДЕ
	|		ЗапасыНаСкладе.КоличествоОборотКт > 0
	|		И ВЫБОР
	|				КОГДА ЗапасыНаСкладе.КорСчет В (&СчетаФинансовогоРезультата)
	|					ТОГДА ИСТИНА
	|				КОГДА СубконтоНоменклатура.НомерСубконтоНоменклатура = 1
	|					ТОГДА ЗапасыНаСкладе.КорСубконто1 ЕСТЬ NULL
	|							ИЛИ ЗапасыНаСкладе.Субконто1 <> ЗапасыНаСкладе.КорСубконто1
	|				КОГДА СубконтоНоменклатура.НомерСубконтоНоменклатура = 2
	|					ТОГДА ЗапасыНаСкладе.КорСубконто2 ЕСТЬ NULL
	|							ИЛИ ЗапасыНаСкладе.Субконто1 <> ЗапасыНаСкладе.КорСубконто2
	|				КОГДА СубконтоНоменклатура.НомерСубконтоНоменклатура = 3
	|					ТОГДА ЗапасыНаСкладе.КорСубконто3 ЕСТЬ NULL
	|							ИЛИ ЗапасыНаСкладе.Субконто1 <> ЗапасыНаСкладе.КорСубконто3
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СчетаОбесценения.СчетРезерва,
	|		НезавершенноеПроизводство.Субконто1,
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка),
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериодаРасчета,
	|				&КонецПериода,
	|				,
	|				Счет В (&СчетаНезавершенногоПроизводства),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция),
	|				Организация = &Организация
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ВыбытиеУчтеноРанее.Номенклатура
	|						ИЗ
	|							ВыбытиеУчтеноРанее КАК ВыбытиеУчтеноРанее),
	|				,
	|				) КАК НезавершенноеПроизводство
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаОбесценения КАК СчетаОбесценения
	|			ПО НезавершенноеПроизводство.Счет = СчетаОбесценения.СчетЗапаса) КАК Выбытие
	|
	|СГРУППИРОВАТЬ ПО
	|	Выбытие.Номенклатура,
	|	Выбытие.СчетРезерва,
	|	Выбытие.РасходыСчет,
	|	Выбытие.РасходыПодразделение,
	|	Выбытие.РасходыСубконто1,
	|	Выбытие.РасходыСубконто2,
	|	Выбытие.РасходыСубконто3
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетРезерва
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выбытие.Номенклатура КАК Номенклатура,
	|	Выбытие.СчетРезерва КАК СчетРезерва,
	|	СУММА(Выбытие.Количество) КАК Количество
	|ПОМЕСТИТЬ ВыбытиеСуммарно
	|ИЗ
	|	ВыбытиеДетально КАК Выбытие
	|
	|СГРУППИРОВАТЬ ПО
	|	Выбытие.Номенклатура,
	|	Выбытие.СчетРезерва
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетРезерва
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БалансовыеДанные.Номенклатура КАК Номенклатура,
	|	БалансовыеДанные.СчетРезерва КАК СчетРезерва,
	|	СУММА(БалансовыеДанные.Количество) КАК Количество,
	|	СУММА(БалансовыеДанные.Себестоимость) КАК Себестоимость,
	|	СУММА(БалансовыеДанные.РезервСозданныйРанее) КАК РезервСозданныйРанее,
	|	СУММА(БалансовыеДанные.ОбесценениеВыбытие) КАК ОбесценениеВыбытие
	|ПОМЕСТИТЬ БалансовыеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыНаСкладе.Субконто1 КАК Номенклатура,
	|		СчетаОбесценения.СчетРезерва КАК СчетРезерва,
	|		ЕСТЬNULL(ЗапасыНаСкладе.КоличествоОстаток, 0) КАК Количество,
	|		ЕСТЬNULL(ЗапасыНаСкладе.СуммаОстаток, 0) КАК Себестоимость,
	|		0 КАК РезервСозданныйРанее,
	|		0 КАК ОбесценениеВыбытие
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ОтчетнаяДата,
	|				Счет В (&СчетаЗапасовНаСкладе),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура),
	|				Организация = &Организация
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ПризнакиОбесценения.Номенклатура
	|						ИЗ
	|							ПризнакиОбесценения)) КАК ЗапасыНаСкладе
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаОбесценения КАК СчетаОбесценения
	|			ПО ЗапасыНаСкладе.Счет = СчетаОбесценения.СчетЗапаса
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НезавершенноеПроизводство.Субконто1,
	|		СчетаОбесценения.СчетРезерва,
	|		0,
	|		ЕСТЬNULL(НезавершенноеПроизводство.СуммаОстаток, 0),
	|		0,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ОтчетнаяДата,
	|				Счет В (&СчетаНезавершенногоПроизводства),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Продукция),
	|				Организация = &Организация
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							ПризнакиОбесценения.Номенклатура
	|						ИЗ
	|							ПризнакиОбесценения)) КАК НезавершенноеПроизводство
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаОбесценения КАК СчетаОбесценения
	|			ПО НезавершенноеПроизводство.Счет = СчетаОбесценения.СчетЗапаса
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РезервСозданныйРанее.Номенклатура,
	|		РезервСозданныйРанее.СчетРезерва,
	|		0,
	|		0,
	|		РезервСозданныйРанее.Сумма,
	|		0
	|	ИЗ
	|		РезервСозданныйРанее КАК РезервСозданныйРанее
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		Выбытие.Номенклатура,
	|		Выбытие.СчетРезерва,
	|		0,
	|		0,
	|		0,
	|		ВЫБОР
	|			КОГДА Выбытие.Количество >= ВыбытиеУчтеноРанее.Количество
	|				ТОГДА ВыбытиеУчтеноРанее.Обесценение
	|			КОГДА ВыбытиеУчтеноРанее.Количество > 0
	|				ТОГДА ВыбытиеУчтеноРанее.Обесценение / ВыбытиеУчтеноРанее.Количество * Выбытие.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		ВыбытиеСуммарно КАК Выбытие
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбытиеУчтеноРанее КАК ВыбытиеУчтеноРанее
	|			ПО Выбытие.СчетРезерва = ВыбытиеУчтеноРанее.СчетРезерва
	|				И Выбытие.Номенклатура = ВыбытиеУчтеноРанее.Номенклатура) КАК БалансовыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	БалансовыеДанные.Номенклатура,
	|	БалансовыеДанные.СчетРезерва
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетРезерва
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БалансовыеДанные.Номенклатура КАК Номенклатура,
	|	БалансовыеДанные.Номенклатура.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
	|	БалансовыеДанные.СчетРезерва КАК СчетРезерва,
	|	БалансовыеДанные.Количество КАК Количество,
	|	БалансовыеДанные.Себестоимость КАК Себестоимость,
	|	ВЫБОР
	|		КОГДА БалансовыеДанные.Количество > 0
	|			ТОГДА ПризнакиОбесценения.Цена * БалансовыеДанные.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧистаяСтоимостьПродажи,
	|	БалансовыеДанные.РезервСозданныйРанее КАК РезервСозданныйРанее,
	|	-БалансовыеДанные.ОбесценениеВыбытие КАК ОбесценениеВыбытие,
	|	ПризнакиОбесценения.Цена ЕСТЬ НЕ NULL  КАК ЕстьПризнакиОбесценения,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК ВыбытиеСчет,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ВыбытиеПодразделение,
	|	НЕОПРЕДЕЛЕНО КАК ВыбытиеСубконто1,
	|	НЕОПРЕДЕЛЕНО КАК ВыбытиеСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК ВыбытиеСубконто3,
	|	0 КАК ВыбытиеКоличество
	|ИЗ
	|	БалансовыеДанные КАК БалансовыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПризнакиОбесценения КАК ПризнакиОбесценения
	|		ПО БалансовыеДанные.Номенклатура = ПризнакиОбесценения.Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыбытиеДетально.Номенклатура,
	|	ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка),
	|	ВыбытиеДетально.СчетРезерва,
	|	0,
	|	0,
	|	0,
	|	0,
	|	0,
	|	ЛОЖЬ,
	|	ВыбытиеДетально.РасходыСчет,
	|	ВыбытиеДетально.РасходыПодразделение,
	|	ВыбытиеДетально.РасходыСубконто1,
	|	ВыбытиеДетально.РасходыСубконто2,
	|	ВыбытиеДетально.РасходыСубконто3,
	|	ВыбытиеДетально.Количество
	|ИЗ
	|	ВыбытиеДетально КАК ВыбытиеДетально
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	СчетРезерва
	|ИТОГИ
	|	МАКСИМУМ(НоменклатурнаяГруппа),
	|	СУММА(Количество),
	|	СУММА(Себестоимость),
	|	СУММА(ЧистаяСтоимостьПродажи),
	|	СУММА(РезервСозданныйРанее),
	|	СУММА(ОбесценениеВыбытие),
	|	МАКСИМУМ(ЕстьПризнакиОбесценения),
	|	СУММА(ВыбытиеКоличество)
	|ПО
	|	Номенклатура,
	|	СчетРезерва";
	
	// Выбытие выбирается с отрицательным знаком, потому что оно выбытие
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	РасчетОбесцененияЗапасов = НовыйРасчетОбесцененияЗапасов();
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаСчетРезерва = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСчетРезерва.Следующий() Цикл
		
			Запись = РасчетОбесцененияЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаСчетРезерва);
			
			Если Не ВыборкаСчетРезерва.ЕстьПризнакиОбесценения Тогда
				Запись.Обесценение = 0;
			ИначеЕсли Запись.ЧистаяСтоимостьПродажи >= Запись.Себестоимость Тогда
				Запись.Обесценение = 0;
			Иначе
				Запись.Обесценение = Запись.Себестоимость - Запись.ЧистаяСтоимостьПродажи; // положительное
			КонецЕсли;
			
			ИзменениеОбесценения = Запись.Обесценение - ВыборкаСчетРезерва.РезервСозданныйРанее; // за период расчета
			Запись.ОбесценениеУбыток = ИзменениеОбесценения - Запись.ОбесценениеВыбытие;
			
			Если Запись.ОбесценениеВыбытие = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Запись.ВыбытиеДетально = НовыйВыбытиеДетально();
			
			ВыборкаВыбытие = ВыборкаСчетРезерва.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаВыбытие.Следующий() Цикл
				
				Если Не ЗначениеЗаполнено(ВыборкаВыбытие.ВыбытиеКоличество) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьВыбытиеДетально = Запись.ВыбытиеДетально.Добавить();
				ЗаписьВыбытиеДетально.Счет          = ВыборкаВыбытие.ВыбытиеСчет;
				ЗаписьВыбытиеДетально.Подразделение = ВыборкаВыбытие.ВыбытиеПодразделение;
				ЗаписьВыбытиеДетально.Субконто1     = ВыборкаВыбытие.ВыбытиеСубконто1;
				ЗаписьВыбытиеДетально.Субконто2     = ВыборкаВыбытие.ВыбытиеСубконто2;
				ЗаписьВыбытиеДетально.Субконто3     = ВыборкаВыбытие.ВыбытиеСубконто3;
				ЗаписьВыбытиеДетально.Количество    = ВыборкаВыбытие.ВыбытиеКоличество;
				
			КонецЦикла;
			
			ВыбытиеДетальноСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
				Запись.ОбесценениеВыбытие,
				Запись.ВыбытиеДетально.ВыгрузитьКолонку("Количество"),
				БухгалтерскийУчетКлиентСервер.РазрядностьДробнойЧастиСумм());
				
			Если ВыбытиеДетальноСуммы = Неопределено Тогда
				Запись.ВыбытиеДетально = Неопределено;
			Иначе
				Запись.ВыбытиеДетально.ЗагрузитьКолонку(ВыбытиеДетальноСуммы, "Сумма");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РасчетОбесцененияЗапасов;
	
КонецФункции

Процедура СформироватьПроводки(Проводки, РасчетОбесцененияЗапасов, Период, Организация)
	
	Если РасчетОбесцененияЗапасов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка(); // Для записи содержания проводок
	Валюта   = Строка(ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Суммы = Новый Структура;
	Суммы.Вставить("ОбесценениеВыбытие", 0);
	Суммы.Вставить("ОбесценениеУбыток",  0);
	
	Для Каждого Запись Из РасчетОбесцененияЗапасов Цикл
		
		ЗаполнитьЗначенияСвойств(Суммы, Запись);
		
		// Сначала сформируем проводки по выбытию с особенной аналитикой расходов
		Для Каждого НаправлениеВыбытия Из Запись.ВыбытиеДетально Цикл
		
			Если Не ЗначениеЗаполнено(НаправлениеВыбытия.Счет) Тогда
				// Выбытие не в расходы
				Продолжить;
			КонецЕсли;
			
			Если НаправлениеВыбытия.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Суммы.ОбесценениеВыбытие = Суммы.ОбесценениеВыбытие - НаправлениеВыбытия.Сумма;
		
			Проводка = ДобавитьПроводку(Проводки, Запись, НаправлениеВыбытия.Сумма, Период, Организация);
			
			Проводка.Сумма       = НаправлениеВыбытия.Сумма;
			Проводка.Содержание = НСтр("ru = 'Резерв списан в связи с выбытием (продажей) запаса'", КодЯзыка);
			
			Проводка.СчетДт = НаправлениеВыбытия.Счет;
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, НаправлениеВыбытия.Подразделение, "Дт");
			
			Для НомерСубконто = 1 По 3 Цикл
				ЗначениеСубконто = НаправлениеВыбытия[СтрШаблон("Субконто%1", XMLСтрока(НомерСубконто))];
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, НомерСубконто, ЗначениеСубконто);
			КонецЦикла;
			
		КонецЦикла;
		
		// Теперь сформируем проводки по корректировке расходов - источника резерва (расходов по обычным видам деятельности)
		// Это все проводки по убытку, а также часть проводок по выбытию, не связанная с конкретной аналитикой расходов
		
		Для Каждого СуммаПроводки Из Суммы Цикл
		
			Если СуммаПроводки.Значение = 0 Тогда
				Продолжить;
			КонецЕсли;
		
			Проводка = ДобавитьПроводку(Проводки, Запись, СуммаПроводки.Значение, Период, Организация);
			
			Если СуммаПроводки.Ключ = "ОбесценениеВыбытие" Тогда
				Проводка.Содержание = НСтр("ru = 'Резерв списан в связи с выбытием запаса'", КодЯзыка);
			ИначеЕсли Запись.ЧистаяСтоимостьПродажи >= Запись.Себестоимость Тогда
				Проводка.Содержание =
					НСтр("ru = 'Балансовая стоимость запаса восстановлена до фактической себестоимости'",
					КодЯзыка);
			Иначе
				ШаблонПроводки =
					НСтр("ru = 'Балансовая стоимость запаса доведена до чистой стоимости продажи %1 %2 (за %3 единиц)'",
					КодЯзыка);
				Проводка.Содержание = СтрШаблон(ШаблонПроводки, Запись.ЧистаяСтоимостьПродажи, Валюта, Запись.Количество);
			КонецЕсли;
				
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт,
				Проводка.СубконтоДт,
				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы,
				Запись.НоменклатурнаяГруппа);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Проводки.ЗаполнитьСуммыВременныхРазниц();
	
КонецПроцедуры

Функция ДобавитьПроводку(Проводки, ЗаписьРасчетОбесцененияЗапасов, Сумма, Период, Организация)
	
	Проводки.Записывать = Истина;
	
	Проводка = Проводки.Добавить();
	Проводка.Период      = Период;
	Проводка.Организация = Организация;
	
	Проводка.Сумма = Сумма;
	
	Проводка.СчетКт = ЗаписьРасчетОбесцененияЗапасов.СчетРезерва;
	БухгалтерскийУчет.УстановитьСубконто(
		Проводка.СчетКт,
		Проводка.СубконтоКт,
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура,
		ЗаписьРасчетОбесцененияЗапасов.Номенклатура);
		
	Возврат Проводка;
	
КонецФункции

Процедура ЗапросДанныхРетроспективногоОбесценения(Запрос) Экспорт
	// Получим данные обесценения
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбесценениеОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ОбесценениеОСОС.ВозмещаемаяСтоимость КАК ВозмещаемаяСтоимость,
	|	ОбесценениеОСОС.ИзменениеОбесценения КАК ИзменениеОбесценения
	|ПОМЕСТИТЬ ОбесценениеОСМежотчетногоПериода
	|ИЗ
	|	Документ.ОбесценениеОС.ОС КАК ОбесценениеОСОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОбесценениеОС КАК ОбесценениеОС
	|		ПО ОбесценениеОСОС.Ссылка = ОбесценениеОС.Ссылка
	|ГДЕ
	|	ОбесценениеОС.Проведен
	|	И ОбесценениеОСОС.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				СписокОС.ОсновноеСредство
	|			ИЗ
	|				СписокОССПараметрами КАК СписокОС)
	|	И ОбесценениеОС.МежотчетныйПериод
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура УчестьРетроспективноеОбесценение(ВыборкаПоОС, АмортизацияФСБУ6, УвеличениеАмортизацииБУ, УменьшениеАмортизацииБУ) Экспорт
	
	Если ВыборкаПоОС.ВозмещаемаяСтоимость <> 0 Тогда
		
		БалансоваяСтоимостьСУчетомИзмененияОбесценением = ВыборкаПоОС.СтоимостьБУ - ВыборкаПоОС.АмортизацияБУ - ВыборкаПоОС.ИзменениеОбесценения;
		РазницаСВозмещаемойСтоимостьюОбесценения = БалансоваяСтоимостьСУчетомИзмененияОбесценением - ВыборкаПоОС.ВозмещаемаяСтоимость;
		
		Если РазницаСВозмещаемойСтоимостьюОбесценения > 0 Тогда
			// Подразумевается увеличение обесценения, но в регистре будет отражено как увеличение амортизации
			УвеличениеАмортизацииБУ = РазницаСВозмещаемойСтоимостьюОбесценения;
			АмортизацияФСБУ6 = ВыборкаПоОС.АмортизацияБУ + РазницаСВозмещаемойСтоимостьюОбесценения;
			Возврат;
		ИначеЕсли РазницаСВозмещаемойСтоимостьюОбесценения < 0 Тогда
			// Возмещаемая стоимость выше балансовой, потому является нерелеватной, возвращаемся к корректировке по ФСБУ 6
		Иначе
			// Корректировка не требуется
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	Если АмортизацияФСБУ6 > ВыборкаПоОС.АмортизацияБУ Тогда
		УвеличениеАмортизацииБУ = АмортизацияФСБУ6 - ВыборкаПоОС.АмортизацияБУ;
	Иначе
		УменьшениеАмортизацииБУ = ВыборкаПоОС.АмортизацияБУ - АмортизацияФСБУ6;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
