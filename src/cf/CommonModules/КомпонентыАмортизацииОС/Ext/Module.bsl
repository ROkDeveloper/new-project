// Содержимое модуля отличается в версиях ПРОФ и КОРП
// В версии ПРОФ отсутствует:
// - тело экспортных процедур (остаются только сигнатуры методов)
// - неэкспортные процедуры и все функции.
// Поэтому не допускается реализация в модуле экспортных функций: вместо них следует использовать процедуры с возвращаемым параметром.

#Область ПрограммныйИнтерфейс

#Область ПодключениеПодсистем

// Подключает объекты подсистемы к механизмам ограничения доступа.
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
//
// Параметры:
//  Списки - Соответствие:
//     * Ключ - ОбъектМетаданных - объекты подсистемы, имеющие списки, требующие подключения
//     * Значение - Булево - Истина
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.КомпонентыАмортизацииОС,               Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РасчетСтоимостиКомпонентовАмортизации, Истина);
	Списки.Вставить(Метаданные.Документы.ЗавершениеРемонтаОС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.КапитализируемыеРемонтыОС, Истина);
	
КонецПроцедуры

// Подключает объекты подсистемы к механизмам даты запрета редактирования.
// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
//
// Параметры: см. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"РегистрСведений.КомпонентыАмортизацииОС",
		"Период",
		"БухгалтерскийУчет",
		"Организация");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных,
		"РегистрСведений.РасчетСтоимостиКомпонентовАмортизации",
		"Период",
		"БухгалтерскийУчет",
		"Организация");
		
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных, 
		"Документ.ЗавершениеРемонтаОС",
		"Дата", 
		"БухгалтерскийУчет", 
		"Организация");
		
КонецПроцедуры

// Подключает объекты подсистемы к механизмам печати.
// См. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати
//
// Параметры: см. УправлениеПечатьюПереопределяемый.ПриОпределенииОбъектовСКомандамиПечати
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.ЗавершениеРемонтаОС);
	
КонецПроцедуры

// Подключает объекты подсистемы к механизмам свойств.
// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств
//
// Параметры: см. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств
//
Процедура НастроитьНаборыСвойств(Наборы) Экспорт
	
	Документы.ЗавершениеРемонтаОС.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	
КонецПроцедуры

#КонецОбласти

#Область Амортизация

// Проверяет, применяется ли подсистема
//
// Параметры:
//  ПодсистемаПрименяется - Булево - возвращаемый параметр.
//                                   Истина, если подсистема применяется
//
Процедура ОпределитьПодсистемаПрименяется(ПодсистемаПрименяется) Экспорт
	
	ПодсистемаПрименяется = ПодсистемаПрименяется();
	
КонецПроцедуры

// Создает временную таблицу КомпонентыАмортизации, содержащую все сведения, необходимые для расчета амортизации.
// Таблица не создается, если подсистема не применяется.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - хранитель созданной таблицы.
//                            На момент вызова должен содержать таблицы
//                            * Активы с перечнем основных средств, по которым нужен расчет
//                              См. АмортизацияАктивов.СоздатьАктивы
//                            * ПотокЗатрат с информацией об изменениях стоимости в течение периода расчета.
//                              См. АмортизацияАктивов.СоздатьПотокЗатрат
//                            * ЭлементыАмортизации с сведениями о способе амортизации
//                              См. АмортизацияАктивов.СоздатьАктуальныеСведенияАктивов
//  Период                  - Дата          - Месяц (конец месяца), на который нужны сведения
//                          - МоментВремени - момент, до которого нужны сведения
//  Организация             - СправочникСсылка.Организация
//  ЗадерживатьАмортизацию  - Булево - Истина, если организация решила начинать и заканчивать амортизацию
//                             с месяца, следующего за месяцем признания в учете (списания с учета)
//
Процедура СоздатьКомпонентыАмортизации(МенеджерВременныхТаблиц, Период, Организация, ЗадерживатьАмортизацию) Экспорт
	
	Если Не ПодсистемаПрименяется() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Период) = Тип("МоментВремени") Тогда
		ПериодРасчета = Период.Дата;
	Иначе
		ПериодРасчета = КонецМесяца(Период);
	КонецЕсли;
	
	НачалоПериодаНастроек = НачалоМесяца(ПериодРасчета);
	Если ЗадерживатьАмортизацию Тогда
		НачалоПериодаНастроек = НачалоМесяца(НачалоПериодаНастроек - 1);
	КонецЕсли;
	КонецПериодаНастроек = КонецМесяца(НачалоПериодаНастроек);
	Если ТипЗнч(Период) = Тип("МоментВремени") Тогда
		КонецПериодаНастроек = Мин(КонецПериодаНастроек, ПериодРасчета - 1);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоРасчета",         НачалоМесяца(ПериодРасчета));
	Запрос.УстановитьПараметр("НачалоПериодаНастроек", НачалоПериодаНастроек);
	Запрос.УстановитьПараметр("КонецПериодаНастроек",  КонецПериодаНастроек);
	Запрос.УстановитьПараметр("Организация",           Организация);
	
	Запрос.УстановитьПараметр("НижняяГраница",  ПериодЗатратНеВажен());
	Запрос.УстановитьПараметр("ВерхняяГраница", КонецПериодаНастроек + 1);
	
	// Запрос разбит на два логических фрагмента.
	// Первый фрагмент выбирает данные о значениях элементов затрат, установленных пользователем.
	// Второй - о предыдущих результатах расчета амортизации, содержащих, в частности, актуальную балансовую стоимость.
	
	// 1. Значения, установленные пользователем (ВТ_УстановленныеЗначения)
	//
	// Для каждого из основных средств выполняется поиск наиболее свежего набора сведений о компонентах.
	// Таким образом учитывается, что компоненты могут как появляться, так и исчезать.
	// Для этого выполняется эмуляция СрезПоследних по неполному набору измерений.
	// Платформенный СрезПоследних по неполному набору не работает.
	//
	// Для амортизации объекта в целом, точка отсчета срока амортизации - дата признания,
	// соответственно наиболее надежная величина - общий срок.
	// Для компонентов точкой отсчета является дата установки (изменения) срока.
	// Соответственно, более надежным значением считаем остаток срока, отталкиваемся от него.
	//
	// Учитывается, что в общем случае начисление амортизации может начинаться с дня капитализации затрат.
	// В этом случае считается, что значения, установленные после любой капитализации затрат
	// действуют с момента такой капитализации.
	// Это соответствует такому жизненному сценарию: понесли существенные затраты,
	// эти затраты выделили в отдельный компонент.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.ОсновноеСредство КАК Объект,
	|	&НижняяГраница КАК ПериодДействия,
	|	МАКСИМУМ(Настройки.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ПериодыДействияНастроек
	|ИЗ
	|	РегистрСведений.КомпонентыАмортизацииОС КАК Настройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Активы КАК Активы
	|		ПО Настройки.ОсновноеСредство = Активы.Объект
	|ГДЕ
	|	Настройки.Период < &НачалоПериодаНастроек
	|	И Настройки.Организация = &Организация
	|	И Настройки.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	Настройки.ОсновноеСредство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Настройки.ОсновноеСредство,
	|	НАЧАЛОПЕРИОДА(Настройки.Период, ДЕНЬ),
	|	МАКСИМУМ(Настройки.Период)
	|ИЗ
	|	РегистрСведений.КомпонентыАмортизацииОС КАК Настройки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Активы КАК Активы
	|		ПО Настройки.ОсновноеСредство = Активы.Объект
	|ГДЕ
	|	Настройки.Период МЕЖДУ &НачалоПериодаНастроек И &КонецПериодаНастроек
	|	И Настройки.Организация = &Организация
	|	И Настройки.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	Настройки.Организация,
	|	Настройки.ОсновноеСредство,
	|	НАЧАЛОПЕРИОДА(Настройки.Период, ДЕНЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПотокЗатрат.Объект КАК Объект,
	|	ПотокЗатрат.Период КАК ПериодЗатрат
	|ПОМЕСТИТЬ ВТ_ПотокЗатратКомпонентов
	|ИЗ
	|	ПотокЗатрат КАК ПотокЗатрат
	|ГДЕ
	|	ПотокЗатрат.Объект В
	|			(ВЫБРАТЬ
	|				Настройки.Объект
	|			ИЗ
	|				ВТ_ПериодыДействияНастроек КАК Настройки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Настройки.Объект,
	|	&НижняяГраница
	|ИЗ
	|	ВТ_ПериодыДействияНастроек КАК Настройки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	ПериодЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начало.Объект КАК Объект,
	|	Начало.ПериодЗатрат КАК НачалоИнтервала,
	|	ЕСТЬNULL(МИНИМУМ(Конец.ПериодЗатрат), &ВерхняяГраница) КАК КонецИнтервала
	|ПОМЕСТИТЬ ВТ_ИнтервалыПотокаЗатратКомпонентов
	|ИЗ
	|	ВТ_ПотокЗатратКомпонентов КАК Начало
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПотокЗатратКомпонентов КАК Конец
	|		ПО Начало.Объект = Конец.Объект
	|			И Начало.ПериодЗатрат < Конец.ПериодЗатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	Начало.Объект,
	|	Начало.ПериодЗатрат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	КонецИнтервала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПотокЗатратКомпонентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПотокЗатрат.Объект КАК Объект,
	|	ПотокЗатрат.НачалоИнтервала КАК ПериодЗатрат,
	|	МАКСИМУМ(Настройки.ПериодДействия) КАК ПериодДействия
	|ПОМЕСТИТЬ ВТ_ПериодыДействияНастроекПотокаЗатрат
	|ИЗ
	|	ВТ_ИнтервалыПотокаЗатратКомпонентов КАК ПотокЗатрат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДействияНастроек КАК Настройки
	|		ПО ПотокЗатрат.Объект = Настройки.Объект
	|			И ПотокЗатрат.КонецИнтервала > Настройки.ПериодДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотокЗатрат.Объект,
	|	ПотокЗатрат.НачалоИнтервала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИнтервалыПотокаЗатратКомпонентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПотокЗатрат.ПериодЗатрат КАК ПериодЗатрат,
	|	Настройки.ОсновноеСредство КАК Объект,
	|	МАКСИМУМ(Настройки.Регистратор) КАК Регистратор,
	|	Настройки.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ДействующиеНастройки
	|ИЗ
	|	ВТ_ПериодыДействияНастроек КАК Периоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодыДействияНастроекПотокаЗатрат КАК ПотокЗатрат
	|		ПО Периоды.Объект = ПотокЗатрат.Объект
	|			И Периоды.ПериодДействия = ПотокЗатрат.ПериодДействия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КомпонентыАмортизацииОС КАК Настройки
	|		ПО Периоды.Объект = Настройки.ОсновноеСредство
	|			И Периоды.Период = Настройки.Период
	|ГДЕ
	|	Настройки.Организация = &Организация
	|	И Настройки.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотокЗатрат.ПериодЗатрат,
	|	Настройки.ОсновноеСредство,
	|	Настройки.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект,
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыДействияНастроек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодыДействияНастроекПотокаЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Значения.КомпонентАмортизации КАК КомпонентАмортизации,
	|	Периоды.ПериодЗатрат КАК ПериодЗатрат,
	|	МАКСИМУМ(Значения.ОсновноеСредство) КАК Объект,
	|	МАКСИМУМ(Значения.Период) КАК ПериодСведений,
	|	МАКСИМУМ(Значения.Регистратор) КАК Регистратор,
	|	МАКСИМУМ(Значения.Стоимость) КАК ЗатратыВсего,
	|	МАКСИМУМ(Значения.ОстаточнаяСтоимость) КАК БалансоваяСтоимость,
	|	МАКСИМУМ(ЭлементыАмортизации.СпособАмортизации) КАК СпособАмортизации,
	|	МАКСИМУМ(Значения.ОстатокСрокаПолезногоИспользования) КАК ОбщийРесурсМесяцев,
	|	МАКСИМУМ(Значения.ОстатокОбъемаПродукцииРабот) КАК ОстатокРесурса
	|ПОМЕСТИТЬ ВТ_УстановленныеЗначения
	|ИЗ
	|	РегистрСведений.КомпонентыАмортизацииОС КАК Значения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДействующиеНастройки КАК Периоды
	|		ПО Значения.ОсновноеСредство = Периоды.Объект
	|			И Значения.Период = Периоды.Период
	|			И Значения.Регистратор = Периоды.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлементыАмортизации КАК ЭлементыАмортизации
	|		ПО Значения.ОсновноеСредство = ЭлементыАмортизации.Объект
	|ГДЕ
	|	Значения.Организация = &Организация
	|	И Значения.Активность
	|	И Значения.ОстаточнаяСтоимость > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Значения.КомпонентАмортизации,
	|	Значения.ОсновноеСредство,
	|	Периоды.ПериодЗатрат
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КомпонентАмортизации,
	|	ПериодЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ДействующиеНастройки";
	
	Запрос.Выполнить();
	
	// 2. Значения, определенные в ходе предыдущего расчета амортизации, в частности, актуальная балансовая стоимость.
	//
	// Они используются, если пользователь не установил более актуальные.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Значения.КомпонентАмортизации КАК КомпонентАмортизации,
	|	Значения.Стоимость КАК Стоимость
	|ПОМЕСТИТЬ ВТ_РассчитаннаяСтоимость
	|ИЗ
	|	РегистрСведений.РасчетСтоимостиКомпонентовАмортизации.СрезПоследних(
	|			&НачалоРасчета,
	|			Организация = &Организация
	|				И КомпонентАмортизации В
	|					(ВЫБРАТЬ
	|						Отбор.КомпонентАмортизации
	|					ИЗ
	|						ВТ_УстановленныеЗначения КАК Отбор)) КАК Значения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КомпонентАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Значения.Объект КАК КомпонентАмортизации,
	|	Значения.Ресурс КАК Ресурс
	|ПОМЕСТИТЬ ВТ_РассчитанныйРесурс
	|ИЗ
	|	РегистрСведений.РасчетРесурсаВнеоборотныхАктивов.СрезПоследних(
	|			&НачалоРасчета,
	|			Организация = &Организация
	|				И Объект В
	|					(ВЫБРАТЬ
	|						Отбор.КомпонентАмортизации
	|					ИЗ
	|						ВТ_УстановленныеЗначения КАК Отбор
	|					ГДЕ
	|						Отбор.СпособАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции))) КАК Значения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КомпонентАмортизации";
	
	// Для сравнения с замерами КомпонентыАмортизацииОС.ВТ_ПериодРасчетаЗначений ознакомительной версии
	Замер = ОценкаПроизводительности.НачатьЗамерВремени();
	Запрос.Выполнить();
	ОценкаПроизводительности.ЗакончитьЗамерВремени("КомпонентыАмортизацииОС.ПредыдущийРасчет", Замер); 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Установленные.ПериодЗатрат КАК ПериодЗатрат,
	|	Установленные.Объект КАК Объект,
	|	Установленные.КомпонентАмортизации КАК КомпонентАмортизации,
	|	Установленные.ЗатратыВсего КАК ЗатратыВсего,
	|	Установленные.ОбщийРесурсМесяцев КАК ОбщийРесурсМесяцев,
	|	НАЧАЛОПЕРИОДА(Установленные.ПериодСведений, ДЕНЬ) КАК НачалоОтсчетаРесурсМесяцев,
	|	ВЫБОР
	|		КОГДА РассчитаннаяСтоимость.Стоимость ЕСТЬ NULL
	|			ТОГДА Установленные.БалансоваяСтоимость
	|		КОГДА Установленные.ПериодСведений >= &НачалоПериодаНастроек
	|			ТОГДА Установленные.БалансоваяСтоимость
	|		ИНАЧЕ РассчитаннаяСтоимость.Стоимость
	|	КОНЕЦ КАК АмортизируемаяВеличина,
	|	ВЫБОР
	|		КОГДА РассчитанныйРесурс.Ресурс ЕСТЬ NULL
	|			ТОГДА Установленные.ОстатокРесурса
	|		КОГДА Установленные.ПериодСведений >= &НачалоПериодаНастроек
	|			ТОГДА Установленные.ОстатокРесурса
	|		ИНАЧЕ РассчитанныйРесурс.Ресурс
	|	КОНЕЦ КАК ОстатокРесурсаЕдиницПродукции,
	|	ВЫБОР
	|		КОГДА РассчитанныйРесурс.Ресурс ЕСТЬ NULL
	|			ТОГДА &НачалоРасчета
	|		КОГДА Установленные.ПериодСведений >= &НачалоПериодаНастроек
	|			ТОГДА Установленные.ПериодЗатрат
	|		ИНАЧЕ &НачалоРасчета
	|	КОНЕЦ КАК НачалоИспользованияРесурса
	|ПОМЕСТИТЬ КомпонентыАмортизации
	|ИЗ
	|	ВТ_УстановленныеЗначения КАК Установленные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РассчитаннаяСтоимость КАК РассчитаннаяСтоимость
	|		ПО Установленные.КомпонентАмортизации = РассчитаннаяСтоимость.КомпонентАмортизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РассчитанныйРесурс КАК РассчитанныйРесурс
	|		ПО Установленные.КомпонентАмортизации = РассчитанныйРесурс.КомпонентАмортизации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РассчитаннаяСтоимость.Стоимость ЕСТЬ NULL
	|				ТОГДА Установленные.БалансоваяСтоимость
	|			КОГДА Установленные.ПериодСведений >= &НачалоПериодаНастроек
	|				ТОГДА Установленные.БалансоваяСтоимость
	|			ИНАЧЕ РассчитаннаяСтоимость.Стоимость
	|		КОНЕЦ > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_УстановленныеЗначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РассчитаннаяСтоимость
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РассчитанныйРесурс";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Инициализирует процесс разбиения на компоненты.
// Должна быть вызвана вне цикла, из которого вызывается РазбитьРасчет.
//
// Возвращаемые параметры:
//  ДанныеКомпонентов - Неопределено - расчет не поддерживается или для расчета нет данных
//                    - Структура, см. НовыйДанныеКомпонентов - сведения о компонентах
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - хранитель таблицы КомпонентыАмортизации, см. СоздатьКомпонентыАмортизации
//                  Поддерживается вызов с менеджером без этой таблицы. В этом случае процедура возвращает Неопределено.
//  ЗадерживатьАмортизацию   - Булево - Истина, если организация решила начинать и заканчивать амортизацию
//                             с месяца, следующего за месяцем признания в учете (списания с учета)
//  КонецЗадержкиАмортизации - Дата - период, с которого организация отказалась задерживать амортизацию
//
Процедура НачатьРазбиение(ДанныеКомпонентов, МенеджерВременныхТаблиц, ЗадерживатьАмортизацию, КонецЗадержкиАмортизации) Экспорт
	
	Если Не ПодсистемаПрименяется() Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("КомпонентыАмортизации") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеКомпонентов = НовыйДанныеКомпонентов();
	ДанныеКомпонентов.ЗадерживатьАмортизацию   = ЗадерживатьАмортизацию;
	ДанныеКомпонентов.КонецЗадержкиАмортизации = КонецЗадержкиАмортизации;
	ЗаполнитьРасчетКомпонентовАмортизации(ДанныеКомпонентов, МенеджерВременныхТаблиц);
	
	Если Не ЗначениеЗаполнено(ДанныеКомпонентов.Данные) Тогда
		ДанныеКомпонентов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Выделяет части оценки стоимости, соответствующие компонентам амортизации.
//
// Параметры:
//  ЗаписьОценка - СтрокаТаблицыЗначений - см. АмортизацияАктивов.НовыйОценкаСтоимостиАмортизируемыхАктивов
//  ДанныеВсехКомпонентов - Структура - см. НовыйДанныеКомпонентов
//                        - Неопределено
//                          Значение должно быть получено с помощью НачатьРазбиение
//
Процедура РазбитьРасчет(ЗаписьОценка, ДанныеВсехКомпонентов) Экспорт
	
	Если ДанныеВсехКомпонентов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОсновногоСредства = ДанныеВсехКомпонентов.Индекс[ЗаписьОценка.Объект];
	Если ДанныеОсновногоСредства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГраницаИсходныхЗаписей = ЗаписьОценка.РасчетАмортизации.Количество() - 1;
	
	Для ИндексЧастиРасчетаАмортизации = 0 По ГраницаИсходныхЗаписей Цикл
		
		Целое = ЗаписьОценка.РасчетАмортизации[ИндексЧастиРасчетаАмортизации]; // Часть расчета амортизации, разбиваемая на компоненты
		
		ВариантыПериода = Новый Массив;
		ВариантыПериода.Добавить(Целое.Начало);
		ВариантыПериода.Добавить(ПериодЗатратНеВажен());
		
		Компоненты = Неопределено;
		Для Каждого ПериодЗатрат Из ВариантыПериода Цикл
			
			Компоненты = ДанныеОсновногоСредства[ПериодЗатрат];
			
			Если Компоненты <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Компоненты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РасчетАмортизации = Целое.Владелец();
		
		Для Каждого Компонент Из Компоненты Цикл
			
			Часть = РасчетАмортизации.Добавить(); // Часть расчета амортизации, соответствующая компоненту
			ЗаписьОценка.РасчетАмортизации.Добавить(Часть);
			
			ЗаполнитьЗначенияСвойств(Часть, Целое);
			ЗаполнитьЗначенияСвойств(Часть, Компонент);
			
			Часть.Объект = Компонент.КомпонентАмортизации;
			Часть.БалансоваяСтоимость = Часть.АмортизируемаяВеличина;
			
			// Ограничим числовые параметры части расчета значениями компонента.
			
			ОграничитьЗначениеРасчета(Целое, Часть, "БалансоваяСтоимость");
			ОграничитьЗначениеРасчета(Целое, Часть, "ЗатратыВсего");
			ОграничитьЗначениеРасчета(Целое, Часть, "АмортизируемаяВеличина");
			
			Если ЗаписьОценка.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
				
				Часть.КонецСрокаПолезногоИспользования = Мин(
					Целое.КонецСрокаПолезногоИспользования,
					Часть.КонецСрокаПолезногоИспользования);
				
			ИначеЕсли ЗаписьОценка.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
				
				Часть.РесурсИспользованныйРанее = 0;
				Часть.РесурсОбщий = Макс(0,
					Мин(
						Целое.РесурсОбщий - Целое.РесурсИспользованныйРанее,
						Компонент.ОстатокРесурсаЕдиницПродукции));
						
				Если Компонент.НачалоИспользованияРесурса >= Часть.Начало
					И Компонент.НачалоИспользованияРесурса <= Часть.Конец Тогда
					// Отсчитываем ресурс от этого значения
					Часть.НачалоИспользованияРесурса = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет массив типами ссылок на компоненты амортизации, обслуживаемые этим модулем.
//
// Параметры:
//  Типы - Массив из Тип - дополняемый массив
//
Процедура ДобавитьТипыКомпонентовАмортизации(Типы) Экспорт
	Типы.Добавить(Тип("СправочникСсылка.КомпонентыАмортизацииОС"));
КонецПроцедуры

#Область РасчетРесурсаВнеоборотныхАктивов

// Дополняет коллекцию расчета амортизации способом, основанном на объеме продукции,
// сведениями для расчета итога ресурса.
//
// В отличие от способов амортизации, основанных на периодах времени, в способе,
// основанном на объеме продукции учитываются конкретные периоды времени, в которые зафикисировано потребление ресурса актива.
//
// Это связано с тем, что потребление ресурса в программе может отражаться несколько раз в месяц,
// за произвольные периоды (например, ежедневно).
//
// Например, 1 января установлен ресурс в 1000 единиц, а 15 января изменена стоимость актива,
// в результате чего оставшийся ресурс увеличен до 1500 единиц.
// В этом случае для расчета амортизации в период с 1 по 14 января учитывается
// - остаток ресурса 1000 единиц
// - потребление ресурса в период с 1 по 14 января.
//
// Аналогично, для расчета с 15 по 31 января учитывается остаток ресурса 1500 единиц и потребление с 15 января.
// Иными словами, устанавливая остаток ресурса, следует учесть его потребление, учтенное с начала месяца.
//
// Как следствие, для расчета остатка ресурса на конец месяца следует из остатка ресурса на 15 января (1500 единиц)
// вычесть потребление ресурса за период с 15 по 31 января.
//
// Коллекция расчета дополняется колонкой, показывающей, что эта запись является точкой отсчета остатка ресурса (в примере - 15 января).
//
// Параметры:
//  Расчет - ТаблицаЗначений - АмортизацияАктивов.НовыйРасчетАмортизацииПропорциональноОбъемуПродукции
//
Процедура ПодготовитьИтогРесурса(Расчет) Экспорт
	
	Если Не ПодсистемаПрименяется() Тогда
		Возврат;
	КонецЕсли;
	
	Расчет.Колонки.Добавить("НачалоИспользованияРесурса", Новый ОписаниеТипов("Булево"));
	
КонецПроцедуры

// Определяет итог ресурса в соответствии с логикой, описанной в ПодготовитьИтогРесурса.
//
// Параметры:
//  Итог   - Неопределено, Число - возвращаемый параметр. Может быть заполнен значением остатка ресурса.
//  Запись - СтрокаТаблицыЗначений - см. АмортизацияАктивов.НовыйРасчетАмортизацииПропорциональноОбъемуПродукции
//
Процедура ОпределитьИтогРесурса(Итог, Запись) Экспорт
	
	Если Не ПодсистемаПрименяется() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Запись.НачалоИспользованияРесурса Тогда
		Возврат;
	КонецЕсли;
	
	Итог = Запись.РесурсОставшийся;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетСтоимостиКомпонентовАмортизации

// Инициализирует контейнер для последующего заполнения результатами, сохраняемого для следующего расчета.
//
// Параметры:
//  Контейнер - Структура - заполняемая коллекция
//
Процедура ИнициализироватьКонтейнерИтогов(Контейнер) Экспорт
	
	Если Не ПодсистемаПрименяется() Тогда
		Возврат;
	КонецЕсли;
	
	Контейнер.Вставить(
		"СтоимостьКомпонентовАмортизации",
		РегистрыСведений.РасчетСтоимостиКомпонентовАмортизации.НовыйДанныеНабораЗаписей());
	
КонецПроцедуры

// Определяет значения показателей, сохраняемые для следующего расчета:
// корректирует балансовую стоимость на величину начисленной амортизации.
// Значения должны быть далее сохранены в регистры сведений РасчетСтоимостиКомпонентовАмортизации.
//
// Параметры:
//  Контейнер - Структура - контейнер, в который будут помещены результаты расчета.
//              Инициализируется с помощью ИнициализироватьКонтейнерИтогов.
//              Если не инициализирован, то расчет не выполняется.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - должен содержать таблицы, созданные в СоздатьКомпонентыАмортизации
//  РасчетАмортизации       - Соответствие - см. АмортизацияАктивов.НовыйРасчетАмортизации
//
Процедура РассчитатьИтоги(Контейнер, МенеджерВременныхТаблиц, РасчетАмортизации) Экспорт
	
	Если Не ПодсистемаПрименяется() Тогда
		Возврат;
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("КомпонентыАмортизации") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтоимость(Контейнер, МенеджерВременныхТаблиц, РасчетАмортизации);
	
КонецПроцедуры

// Помещает в коллекцию движений документа актуализированные значения балансовой стоимости компонентов амортизации.
//
// Параметры:
//  Движения         - КоллекцияДвижений - заполняемая коллекция
//  ТаблицаРеквизиты - ТаблицаЗначений - см. ЗакрытиеМесяца.ПодготовитьПараметрыТаблицаРеквизиты
//  Контейнер        - Структура - предполагается, что инициализирована с помощью ИнициализироватьКонтейнерИтогов
//
Процедура ЗаписатьИтоги(Движения, ТаблицаРеквизиты, Контейнер) Экспорт
	
	Если Не Контейнер.Свойство("СтоимостьКомпонентовАмортизации") Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		Контейнер.СтоимостьКомпонентовАмортизации,
		ТаблицаРеквизиты,
		Метаданные.РегистрыСведений.РасчетСтоимостиКомпонентовАмортизации.Имя);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеДокументов

// Определяет актуальные на указанный момент значения компонентов амортизации.
//
// Параметры:
//  АктуальныеЗначения - Неопределено - возвращаемый параметр;
//                Помещается ТаблицаЗначений - см. НовыйАктуальныеЗначения.
//                Значение остается неизменным, если учет компонентов амортизации не ведется.
//  Отбор       - Массив - перечень основных средств, компоненты которого нужны
//  Период      - МоментВремени - момент, на начало которого нужны значения
//  Организация - СправочникСсылка.Организации
// 
Процедура ЗаполнитьАктуальныеЗначения(АктуальныеЗначения, Отбор, Период, Организация) Экспорт
	
	Если Не ПодсистемаПрименяется() Тогда
		Возврат;
	КонецЕсли;
	
	АктуальныеЗначения = НовыйАктуальныеЗначения();
	
	АлгоритмРасчета = Перечисления.АлгоритмыПериодаАмортизации.АлгоритмРасчетаАмортизации(Период.Дата, Организация);
	Если АлгоритмРасчета <> Перечисления.АлгоритмыПериодаАмортизации.СДатыПризнания Тогда
		АлгоритмРасчета = Перечисления.АлгоритмыПериодаАмортизации.СМесяцаСледующегоПослеПризнания;
	КонецЕсли;
	
	Расчет = АмортизацияАктивов.РассчитатьАмортизацию(
		Тип("СправочникСсылка.ОсновныеСредства"),
		Период,
		Организация,
		Отбор,
		АлгоритмРасчета);
	
	// Результат должен содержать уникальные наборы ключевых полей.
	// Но в расчете может быть несколько записей про компонент - если данные о компонентах менялись в течение месяца.
	// В таком случае мгновенные данные (instant) берем для последнего, а продолжительные данные (duration) суммируем.
	КлючевыеПоля = "ОсновноеСредство,КомпонентАмортизации";
	ПоискСтрок = Новый Структура(КлючевыеПоля);
	
	НаСледующийМесяц = (АлгоритмРасчета <> Перечисления.АлгоритмыПериодаАмортизации.СДатыПризнания);
	
	Для Каждого ЗаписьОценкаСтоимости Из Расчет.ОценкаСтоимости Цикл
		Для Каждого ЗаписьРасчет Из ЗаписьОценкаСтоимости.РасчетАмортизации Цикл
			
			Если ТипЗнч(ЗаписьРасчет.Объект) <> Тип("СправочникСсылка.КомпонентыАмортизацииОС") Тогда
				Продолжить;
			КонецЕсли;
			
			ПоискСтрок.ОсновноеСредство     = ЗаписьОценкаСтоимости.Объект;
			ПоискСтрок.КомпонентАмортизации = ЗаписьРасчет.Объект;
			
			НайденныеСтроки = АктуальныеЗначения.НайтиСтроки(ПоискСтрок);
			Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
				ЗаписьРезультат = НайденныеСтроки[0];
			Иначе
				ЗаписьРезультат = АктуальныеЗначения.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьРезультат, ПоискСтрок);
			КонецЕсли;
			
			ЗаписьРезультат.АмортизацияЗаМесяц   = ЗаписьРезультат.АмортизацияЗаМесяц  + ЗаписьРасчет.Амортизация; // duration
			// остальные - instant
			ЗаписьРезультат.Стоимость            = ЗаписьРасчет.ЗатратыВсего;
			ЗаписьРезультат.ОстаточнаяСтоимость  = ЗаписьРасчет.БалансоваяСтоимость;
			Если НаСледующийМесяц Тогда
				ЗаписьРезультат.ОстаточнаяСтоимость  = ЗаписьРезультат.ОстаточнаяСтоимость - ЗаписьРезультат.АмортизацияЗаМесяц;
			КонецЕсли;
			
			Если ЗаписьОценкаСтоимости.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
				ЗаписьРезультат.СрокПолезногоИспользования         = ЗаписьРасчет.ОбщийРесурсМесяцев;
				ЗаписьРезультат.ОстатокСрокаПолезногоИспользования = ЗаписьРасчет.СрокИспользованияОставшийся;
				Если НаСледующийМесяц Тогда
					ЗаписьРезультат.ОстатокСрокаПолезногоИспользования = ЗаписьРезультат.ОстатокСрокаПолезногоИспользования
						- ЗаписьРасчет.СрокИспользованияПрошедший;
				КонецЕсли;
			ИначеЕсли ЗаписьОценкаСтоимости.СпособАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
				ЗаписьРезультат.ОбъемПродукцииРабот         = ЗаписьРасчет.РесурсОбщий;
				ЗаписьРезультат.ОстатокОбъемаПродукцииРабот = ЗаписьРасчет.РесурсОставшийся;
				ЗаписьРезультат.ОбъемПродукцииРаботЗаМесяц  = ЗаписьРасчет.РесурсИспользованный;
				Если НаСледующийМесяц Тогда
					ЗаписьРезультат.ОстатокОбъемаПродукцииРабот = ЗаписьРезультат.ОстатокОбъемаПродукцииРабот
						- ЗаписьРасчет.РесурсИспользованный;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет описание обработчика обновления данных подсистемы.
//
// Параметры:
//  Обработчики   - ТаблицаЗначений - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//  НомерВерсии - Строка - номер версии, в которой изменены метаданные
//
Процедура ДобавитьОбработчикОбновленияНовыйРегистрСведенийРасчетСтоимостиКомпонентовАмортизации(Обработчики, НомерВерсии) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = НомерВерсии;
	Обработчик.Процедура           = "РегистрыСведений.РасчетСтоимостиКомпонентовАмортизации.ЗаполнитьДаннымиРасчетАмортизации";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("f58acdb2-eaef-42eb-83cb-38ff6a65f5a9");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет стоимость компонентов, определенную в ходе расчетов амортизации.
                                           |До окончания обработки расчет амортизации недоступен.'");
	Обработчик.БлокируемыеОбъекты  = "Документ.РегламентнаяОперация";
	Обработчик.ПроцедураПроверки   = "РегистрыСведений.РасчетСтоимостиКомпонентовАмортизации.ЗаполненДаннымиРасчетАмортизации";
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПодсистемаПрименяется() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("КомпонентыАмортизацииОС");
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Проверяет, может ли потребоваться блокировка в пользовательском интерфейсе регламентной операции начисления амортизации
// на время выполнения обработчиков обновления данных подсистемы.
// Проверяются общие соображения.
// Прикладная обработка (собственно проверка обрабатываемых данных) должна быть выполнена вызывающим кодом, после вызова этого метода.
//
// Параметры:
//  РегламентнаяОперация - Неопределено - Возвращаемый параметр. В случае, если блокировка может потребоваться,
//                         возвращается ДокументСсылка.Регламентная операция - проверяемая операция.
//  ПроверяемыйОбъект - Структура - см. документацию к БСП раздел "Блокировка необработанных данных в пользовательском интерфейсе"
//
Процедура НачатьПроверкуБлокировкиНеобработанныхДанныхРасчетАмортизации(РегламентнаяОперация, ПроверяемыйОбъект) Экспорт
	
	Если Не ПодсистемаПрименяется() Тогда
		Возврат;
	КонецЕсли;
	
	АмортизацияАктивов.НачатьПроверкуБлокировкиНеобработанныхДанныхРасчетАмортизации(РегламентнаяОперация, ПроверяемыйОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ИзменениеПараметровАмортизацииОС

Процедура СформироватьДвиженияКомпонентыАмортизацииОС(Движения, ТаблицаРеквизиты, ЭлементыАмортизации) Экспорт
	
	Если Не ПодсистемаПрименяется() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭлементыАмортизации) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыКомпонентыАмортизацииОС(ЭлементыАмортизации, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаПараметров Цикл
		
		Движение = Движения.КомпонентыАмортизацииОС.Добавить();
		Движение.Период                             = Реквизиты.Период;
		Движение.ОсновноеСредство                   = СтрокаТаблицы.ОсновноеСредство;
		Движение.КомпонентАмортизации               = СтрокаТаблицы.КомпонентАмортизации;
		Движение.Организация                        = Реквизиты.Организация;
		Движение.Стоимость                          = СтрокаТаблицы.Стоимость;
		Движение.ОстаточнаяСтоимость                = СтрокаТаблицы.ОстаточнаяСтоимость;
		Движение.СрокПолезногоИспользования         = СтрокаТаблицы.СрокПолезногоИспользования;
		Движение.ОстатокСрокаПолезногоИспользования = СтрокаТаблицы.ОстатокСрокаПолезногоИспользования;
		Движение.ОбъемПродукцииРабот                = СтрокаТаблицы.ОбъемПродукцииРабот;
		Движение.ОстатокОбъемаПродукцииРабот        = СтрокаТаблицы.ОстатокОбъемаПродукцииРабот;
		
	КонецЦикла;

	Движения.КомпонентыАмортизацииОС.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыКомпонентыАмортизацииОС(ТаблицаПараметров, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПараметров

	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"                   // <СправочникСсылка.ОсновныеСредства>
	+ "КомпонентАмортизации,"               // <СправочникСсылка.КомпонентыАмортизацииОС>
	+ "Стоимость,"                          // <Число, 15, 2> - стоимость компонента
	+ "ОстаточнаяСтоимость,"                // <Число, 15, 2> - остаточная стоимость компонента
	+ "СрокПолезногоИспользования,"         // <Число, 4, 0> - срок полезного использования компонента
	+ "ОстатокСрокаПолезногоИспользования," // <Число, 4, 0> - остаток срока полезного использования компонента
	+ "ОбъемПродукцииРабот,"                // <Число, 10, 0> - предполагаемый объем продукции (работ)
	+ "ОстатокОбъемаПродукцииРабот";        // <Число, 10, 0> - остаток предполагаемого объема продукции (работ)

	Параметры.Вставить("ТаблицаПараметров",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПараметров, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                       // <Дата>
	+ "Организация";                  // <СправочникСсылка.Организации>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция НовыйАктуальныеЗначения()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить(
		"ОсновноеСредство",
		Метаданные.РегистрыСведений.КомпонентыАмортизацииОС.Измерения.ОсновноеСредство.Тип);
	Результат.Колонки.Добавить(
		"КомпонентАмортизации",
		Метаданные.РегистрыСведений.КомпонентыАмортизацииОС.Измерения.КомпонентАмортизации.Тип);
	Результат.Колонки.Добавить(
		"Стоимость",
		Метаданные.РегистрыСведений.КомпонентыАмортизацииОС.Ресурсы.Стоимость.Тип);
	Результат.Колонки.Добавить(
		"ОстаточнаяСтоимость",
		Метаданные.РегистрыСведений.КомпонентыАмортизацииОС.Ресурсы.ОстаточнаяСтоимость.Тип);
	Результат.Колонки.Добавить(
		"СрокПолезногоИспользования",
		Метаданные.РегистрыСведений.КомпонентыАмортизацииОС.Ресурсы.СрокПолезногоИспользования.Тип);
	Результат.Колонки.Добавить(
		"ОстатокСрокаПолезногоИспользования",
		Метаданные.РегистрыСведений.КомпонентыАмортизацииОС.Ресурсы.ОстатокСрокаПолезногоИспользования.Тип);
	Результат.Колонки.Добавить(
		"ОбъемПродукцииРабот",
		Метаданные.РегистрыСведений.КомпонентыАмортизацииОС.Ресурсы.ОбъемПродукцииРабот.Тип);
	Результат.Колонки.Добавить(
		"ОстатокОбъемаПродукцииРабот",
		Метаданные.РегистрыСведений.КомпонентыАмортизацииОС.Ресурсы.ОстатокОбъемаПродукцииРабот.Тип);
	Результат.Колонки.Добавить(
		"ОбъемПродукцииРаботЗаМесяц",
		Метаданные.РегистрыСведений.КомпонентыАмортизацииОС.Ресурсы.ОстатокОбъемаПродукцииРабот.Тип);
	Результат.Колонки.Добавить(
		"АмортизацияЗаМесяц",
		Метаданные.РегистрыСведений.КомпонентыАмортизацииОС.Ресурсы.Стоимость.Тип);
		
	Результат.Индексы.Добавить("ОсновноеСредство");
	Результат.Индексы.Добавить("ОсновноеСредство,КомпонентАмортизации");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("КомпонентыАмортизацииОС") Тогда
		Возврат;
	КонецЕсли;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "КомпонентыАмортизации";
	КомандаПечати.Представление = НСтр("ru = 'Компоненты амортизации'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 10;
	
КонецПроцедуры

Процедура ВывестиТабличныйДокументВКоллекцию(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"КомпонентыАмортизации",
		НСтр("ru = 'Компоненты амортизации'"),
		ПечатьКомпонентыАмортизации(МассивОбъектов, ОбъектыПечати),
		, // пиктограмма печатной формы отсутствует
		"Документ.ИзменениеПараметровНачисленияАмортизацииОС.ПФ_MXL_КомпонентыАмортизации");
	
КонецПроцедуры

Функция ПечатьКомпонентыАмортизации(Ссылки, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.Ссылка КАК Ссылка,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.Ссылка.Дата КАК Дата,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.Ссылка.СобытиеОС КАК СобытиеОС,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.Ссылка.Организация КАК Организация,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.Ссылка.Организация.НаименованиеСокращенное КАК ОрганизацияПредставление,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.Ссылка.Ответственный.ФизическоеЛицо КАК ОтветственныйФизическоеЛицо,
	|	ИзменениеПараметровНачисленияАмортизацииОСОС.НомерСтроки КАК НомерСтроки,
	|	ИзменениеПараметровНачисленияАмортизацииОСОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ИзменениеПараметровНачисленияАмортизацииОСОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.КомпонентАмортизации КАК КомпонентАмортизации,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.Стоимость КАК Стоимость,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.ОстаточнаяСтоимость КАК ОстаточнаяСтоимость,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.ОстатокСрокаПолезногоИспользования КАК ОстатокСрокаПолезногоИспользования,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.ОстатокОбъемаПродукцииРабот КАК ОстатокОбъемаПродукцииРабот
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС.КомпонентыАмортизации КАК ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровНачисленияАмортизацииОС.ОС КАК ИзменениеПараметровНачисленияАмортизацииОСОС
	|		ПО ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.Ссылка = ИзменениеПараметровНачисленияАмортизацииОСОС.Ссылка
	|			И ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.КлючСтроки = ИзменениеПараметровНачисленияАмортизацииОСОС.КлючСтроки
	|ГДЕ
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.Ссылка В(&Ссылки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.Ссылка.Дата,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.Ссылка,
	|	ИзменениеПараметровНачисленияАмортизацииОСОС.НомерСтроки,
	|	ИзменениеПараметровНачисленияАмортизацииОСКомпонентыАмортизации.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	Результат.АвтоМасштаб        = Истина;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Результат.КлючПараметровПечати = "Документ.ИзменениеПараметровНачисленияАмортизацииОС.ПФ_MXL_КомпонентыАмортизации";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ИзменениеПараметровНачисленияАмортизацииОС.ПФ_MXL_КомпонентыАмортизации");
	
	ОбластиМакета = Новый Структура("Шапка, Подпись");
	Для Каждого ОписаниеОбласти Из ОбластиМакета Цикл
		ОбластиМакета[ОписаниеОбласти.Ключ] = Макет.ПолучитьОбласть(ОписаниеОбласти.Ключ);
	КонецЦикла;
	
	ВыборкаДокумент = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НачалоОбластиПечати = Результат.ВысотаТаблицы + 1;
		
		// Начало документа
		ОбластиМакета.Шапка.Параметры.Заполнить(ВыборкаДокумент);
		ФорматированныеПараметры = Новый Структура;
		ФорматированныеПараметры.Вставить("ДатаДокумента", НРег(Формат(ВыборкаДокумент.Дата, "ДЛФ=D")));
		ФорматированныеПараметры.Вставить("ДействуетС", Формат(КонецМесяца(ВыборкаДокумент.Дата) + 1, "ДФ='MMMM yyyy ""г.""'"));
		ОбластиМакета.Шапка.Параметры.Заполнить(ФорматированныеПараметры);
		Результат.Вывести(ОбластиМакета.Шапка);
		
		// Строки таблицы
		ТаблицаСтрокОС = Новый ТаблицаЗначений;
		ТаблицаСтрокОС.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(32));
		ТаблицаСтрокОС.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
		ТаблицаСтрокОС.Колонки.Добавить("СпособНачисленияАмортизации", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС"));
		ТаблицаСтрокОС.Колонки.Добавить("КомпонентАмортизации", Новый ОписаниеТипов("СправочникСсылка.КомпонентыАмортизацииОС"));
		ТаблицаСтрокОС.Колонки.Добавить("Стоимость", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ТаблицаСтрокОС.Колонки.Добавить("ОстаточнаяСтоимость", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
		ТаблицаСтрокОС.Колонки.Добавить("СрокПолезногоИспользования", ОбщегоНазначения.ОписаниеТипаЧисло(4, 0));
		ТаблицаСтрокОС.Колонки.Добавить("ОстатокСрокаПолезногоИспользования", ОбщегоНазначения.ОписаниеТипаЧисло(4, 0));
		ТаблицаСтрокОС.Колонки.Добавить("ОбъемПродукцииРабот", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
		ТаблицаСтрокОС.Колонки.Добавить("ОстатокОбъемаПродукцииРабот", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
		
		ВыборкаСтрок = ВыборкаДокумент.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаСтрок.Следующий() Цикл
			НоваяСтрока = ТаблицаСтрокОС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСтрок);
		КонецЦикла;
		
		ТаблицаСтрокОС = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаСтрокОС,
			ВыборкаДокумент.Организация, ВыборкаДокумент.Дата);
		МассивСпособов = ТаблицаСтрокОС.ВыгрузитьКолонку("СпособНачисленияАмортизации");
		ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСпособов);
		
		НастройкиКолонок = Новый Структура;
		НастройкиКолонок.Вставить("ПоказатьСрокиИспользования", Ложь);
		НастройкиКолонок.Вставить("ПоказатьВыработку", Ложь);
		// Получим настройки таблицы
		НастройкиКолонок.ПоказатьСрокиИспользования 
			= (МассивСпособов.Найти(Перечисления.СпособыНачисленияАмортизацииОС.Линейный) <> Неопределено);
		НастройкиКолонок.ПоказатьВыработку 
			= (МассивСпособов.Найти(Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) <> Неопределено);
		Если Не НастройкиКолонок.ПоказатьВыработку Тогда
			НастройкиКолонок.ПоказатьСрокиИспользования = Истина;
		КонецЕсли;
		
		// Шапка таблицы
		ВывестиКолонкиКомпонентыАмортизации(Результат, "ШапкаТаблицы", НастройкиКолонок, Макет);
		
		// Параметры объединения ячеек
		ТекущееОС = Неопределено;
		НачалоОбъединения = Результат.ВысотаТаблицы + 1;
		
		НомераОбъединяемыхКолонок = Новый Массив;
		НомераОбъединяемыхКолонок.Добавить(2); // Номер строки
		НомераОбъединяемыхКолонок.Добавить(3); // Основное средство
		НомераОбъединяемыхКолонок.Добавить(4); // Инвентарный номер
		НомераОбъединяемыхКолонок.Добавить(5); // Способ начисления амортизации
		
		Для каждого СтрокаТаблицы Из ТаблицаСтрокОС Цикл
			// Объединение ячеек
			Если ТекущееОС <> Неопределено И ТекущееОС <> СтрокаТаблицы.ОсновноеСредство Тогда
				ОбъединитьЯчейки(Результат, НомераОбъединяемыхКолонок, НачалоОбъединения, Результат.ВысотаТаблицы);
				НачалоОбъединения = Результат.ВысотаТаблицы + 1;
			КонецЕсли;
			ТекущееОС = СтрокаТаблицы.ОсновноеСредство;
			
			// Основная часть
			СтрокаОсновнаяЧасть = Макет.ПолучитьОбласть("Строка|ОсновнаяЧасть");
			СтрокаОсновнаяЧасть.Параметры.Заполнить(СтрокаТаблицы);
			Ячейки = Результат.Вывести(СтрокаОсновнаяЧасть);
			Ячейки.АвтоВысотаСтроки = Истина;
			// Сроки использования
			Если НастройкиКолонок.ПоказатьСрокиИспользования Тогда
				СтрокаСрокиИспользования = Макет.ПолучитьОбласть("Строка|СрокиИспользования");
				Если СтрокаТаблицы.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
					ЗначенияПараметров = Новый Структура;
					ЗначенияПараметров.Вставить("СрокПолезногоИспользования", НСтр("ru = 'Не требуется'"));
					ЗначенияПараметров.Вставить("ОстатокСрокаПолезногоИспользования", НСтр("ru = 'Не требуется'"));
				Иначе
					ЗначенияПараметров = СтрокаТаблицы;
				КонецЕсли;
				СтрокаСрокиИспользования.Параметры.Заполнить(ЗначенияПараметров);
				Результат.Присоединить(СтрокаСрокиИспользования);
			КонецЕсли;
			// Выработка
			Если НастройкиКолонок.ПоказатьВыработку Тогда
				СтрокаВыработка = Макет.ПолучитьОбласть("Строка|ОбъемВыработки");
				Если СтрокаТаблицы.СпособНачисленияАмортизации <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
					ЗначенияПараметров = Новый Структура;
					ЗначенияПараметров.Вставить("ОбъемПродукцииРабот", НСтр("ru = 'Не требуется'"));
					ЗначенияПараметров.Вставить("ОстатокОбъемаПродукцииРабот", НСтр("ru = 'Не требуется'"));
				Иначе
					ЗначенияПараметров = СтрокаТаблицы;
				КонецЕсли;
				СтрокаВыработка.Параметры.Заполнить(ЗначенияПараметров);
				Результат.Присоединить(СтрокаВыработка);
			КонецЕсли;
			СтрокаПравыйКрай = Макет.ПолучитьОбласть("Строка|ПравыйКрай");
			Результат.Присоединить(СтрокаПравыйКрай);
		КонецЦикла;
		
		// Объединение ячеек
		Если НачалоОбъединения < Результат.ВысотаТаблицы Тогда
			ОбъединитьЯчейки(Результат, НомераОбъединяемыхКолонок, НачалоОбъединения, Результат.ВысотаТаблицы);
		КонецЕсли;
		
		// Конец таблицы
		ВывестиКолонкиКомпонентыАмортизации(Результат, "КонецТаблицы", НастройкиКолонок, Макет);
		
		// Конец документа
		ОбластиМакета.Подпись.Параметры.Заполнить(ВыборкаДокумент);
		
		Полномочия = ОтветственныеЛицаБП.ПолномочияОтветственного(
			ВыборкаДокумент.ОтветственныйФизическоеЛицо,
			ВыборкаДокумент.Организация,
			ВыборкаДокумент.Дата);
		СведенияПодписи = Новый Структура;
		СведенияПодписи.Вставить("ДолжностьПодписавшегоЛица", Полномочия.ДолжностьПредставление);
		СведенияПодписи.Вставить("ДокументПодписал",          Полномочия.ФИО.Представление);
		ОбластиМакета.Подпись.Параметры.Заполнить(СведенияПодписи);
		
		Результат.Вывести(ОбластиМакета.Подпись);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			Результат,
			НачалоОбластиПечати,
			ОбъектыПечати,
			ВыборкаДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ВывестиКолонкиКомпонентыАмортизации(Результат, ИмяОбласти, НастройкиКолонок, Макет)

	Результат.Вывести(Макет.ПолучитьОбласть(СтрШаблон("%1|ОсновнаяЧасть", ИмяОбласти)));
	Если НастройкиКолонок.ПоказатьСрокиИспользования Тогда
		Результат.Присоединить(Макет.ПолучитьОбласть(СтрШаблон("%1|СрокиИспользования", ИмяОбласти)));
	КонецЕсли;
	Если НастройкиКолонок.ПоказатьВыработку Тогда
		Результат.Присоединить(Макет.ПолучитьОбласть(СтрШаблон("%1|ОбъемВыработки", ИмяОбласти)));
	КонецЕсли;
	Результат.Присоединить(Макет.ПолучитьОбласть(СтрШаблон("%1|ПравыйКрай", ИмяОбласти)));
	
КонецПроцедуры

Процедура ОбъединитьЯчейки(Результат, НомераКолонок, НачалоОбъединения, КонецОбъединения)
	
	Для каждого НомерКолонки Из НомераКолонок Цикл
		Результат.Область(НачалоОбъединения, НомерКолонки, КонецОбъединения, НомерКолонки).Объединить();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйДанныеКомпонентов()
	
	ДанныеКомпонентов = Новый Структура;
	ДанныеКомпонентов.Вставить("ЗадерживатьАмортизацию",   Ложь);
	ДанныеКомпонентов.Вставить("КонецЗадержкиАмортизации", '0001-01-01');
	
	ДанныеКомпонентов.Вставить("Данные",    Новый ТаблицаЗначений);
	ДанныеКомпонентов.Данные.Колонки.Добавить(
		"КомпонентАмортизации",
		Новый ОписаниеТипов("СправочникСсылка.КомпонентыАмортизацииОС"));
	ДанныеКомпонентов.Данные.Колонки.Добавить(
		"ЗатратыВсего",
		БухгалтерскийУчетКлиентСервер.ТипСумма());
	ДанныеКомпонентов.Данные.Колонки.Добавить(
		"АмортизируемаяВеличина",
		БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	// В общем случае точка отсчета ресурса компонентов отличается от точки отсчета ресурса самого основного средства
	АмортизацияАктивов.ДобавитьКолонкиРасчетаСрокаПолезногоИспользования(ДанныеКомпонентов.Данные);
	
	ДанныеКомпонентов.Данные.Колонки.Добавить(
		"ОстатокРесурсаЕдиницПродукции",
		Метаданные.РегистрыСведений.РасчетРесурсаВнеоборотныхАктивов.Ресурсы.Ресурс.Тип); // Может быть установленным пользователем или расчетным
	ДанныеКомпонентов.Данные.Колонки.Добавить("НачалоИспользованияРесурса", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));

	ДанныеКомпонентов.Вставить("Индекс", Новый Соответствие);
	// Индекс обеспечивает оптимизированный поиск по Данные с сохранением порядка строк.
	// Ключ - Основное средство; Значение - Соответствие, ключ которого - период затрат, значение - массив записей Данные
	
	Возврат ДанныеКомпонентов;

КонецФункции

Процедура ЗаполнитьРасчетКомпонентовАмортизации(РасчетКомпонентовАмортизации, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Активы.Объект КАК Объект,
	|	Активы.Порядок КАК Порядок,
	|	Компоненты.ПериодЗатрат КАК ПериодЗатрат,
	|	Компоненты.КомпонентАмортизации КАК КомпонентАмортизации,
	|	Компоненты.ЗатратыВсего КАК ЗатратыВсего,
	|	Компоненты.АмортизируемаяВеличина КАК АмортизируемаяВеличина,
	|	ЭлементыАмортизации.СпособАмортизации КАК СпособАмортизации,
	|	Компоненты.ОбщийРесурсМесяцев КАК ОбщийРесурсМесяцев,
	|	Компоненты.НачалоОтсчетаРесурсМесяцев КАК НачалоОтсчетаРесурсМесяцев,
	|	Компоненты.ОстатокРесурсаЕдиницПродукции КАК ОстатокРесурсаЕдиницПродукции
	|ИЗ
	|	КомпонентыАмортизации КАК Компоненты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Активы КАК Активы
	|		ПО Компоненты.Объект = Активы.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭлементыАмортизации КАК ЭлементыАмортизации
	|		ПО Компоненты.Объект = ЭлементыАмортизации.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Объект,
	|	ПериодЗатрат,
	|	КомпонентАмортизации
	|ИТОГИ ПО
	|	Объект,
	|	ПериодЗатрат";
	
	ВыборкаОбъект = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъект.Следующий() Цикл
		
		ПериодыЗатрат = Новый Соответствие;
		РасчетКомпонентовАмортизации.Индекс.Вставить(ВыборкаОбъект.Объект, ПериодыЗатрат);
		
		ВыборкаПериодЗатрат = ВыборкаОбъект.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПериодЗатрат.Следующий() Цикл
		
			СодержимоеИндекса = Новый Массив;
			ПериодыЗатрат.Вставить(ВыборкаПериодЗатрат.ПериодЗатрат, СодержимоеИндекса);
			
			Выборка = ВыборкаПериодЗатрат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Выборка.Следующий() Цикл
				
				Запись = РасчетКомпонентовАмортизации.Данные.Добавить();
				СодержимоеИндекса.Добавить(Запись);
				
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				
				АмортизацияАктивов.УстановитьСрокПолезногоИспользования(
					Запись,
					Выборка.СпособАмортизации,
					РасчетКомпонентовАмортизации.ЗадерживатьАмортизацию,
					РасчетКомпонентовАмортизации.КонецЗадержкиАмортизации);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПериодЗатратНеВажен()
	
	// Идентифицирует служебную дату
	Возврат '0001-01-01';
	
КонецФункции

Процедура ОграничитьЗначениеРасчета(Целое, Часть, ИмяЗначения)
	
	Часть[ИмяЗначения] = Мин(Целое[ИмяЗначения], Часть[ИмяЗначения]);
	
	Если Часть[ИмяЗначения] > 0 Тогда
		Целое[ИмяЗначения] = Целое[ИмяЗначения] - Часть[ИмяЗначения];
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтоимость(Контейнер, МенеджерВременныхТаблиц, РасчетАмортизации)
	
	ИмяДанных = "СтоимостьКомпонентовАмортизации";
	Если Не Контейнер.Свойство(ИмяДанных) Тогда
		Возврат;
	КонецЕсли;
	СохраняемыеДанные = Контейнер[ИмяДанных];
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Компоненты.КомпонентАмортизации КАК КомпонентАмортизации,
	|	МАКСИМУМ(Компоненты.ПериодЗатрат) КАК ПериодЗатрат
	|ПОМЕСТИТЬ ВТ_ПериодСведений
	|ИЗ
	|	КомпонентыАмортизации КАК Компоненты
	|
	|СГРУППИРОВАТЬ ПО
	|	Компоненты.КомпонентАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КомпонентАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Компоненты.КомпонентАмортизации КАК КомпонентАмортизации,
	|	МАКСИМУМ(Компоненты.АмортизируемаяВеличина) КАК АмортизируемаяВеличина,
	|	МАКСИМУМ(Компоненты.Объект) КАК Объект
	|ИЗ
	|	КомпонентыАмортизации КАК Компоненты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПериодСведений КАК Период
	|		ПО Компоненты.КомпонентАмортизации = Период.КомпонентАмортизации
	|			И Компоненты.ПериодЗатрат = Период.ПериодЗатрат
	|
	|СГРУППИРОВАТЬ ПО
	|	Компоненты.КомпонентАмортизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект,
	|	КомпонентАмортизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПериодСведений";
	
	Амортизация = СвернутьРасчетАмортизации(РасчетАмортизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СуммаАмортизации = Амортизация[Выборка.КомпонентАмортизации];
		Если СуммаАмортизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = СохраняемыеДанные.Добавить();
		Запись.КомпонентАмортизации = Выборка.КомпонентАмортизации;
		Запись.Стоимость = Макс(0, Выборка.АмортизируемаяВеличина - СуммаАмортизации);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СвернутьРасчетАмортизации(РасчетАмортизации)
	
	Амортизация = Новый Соответствие;
	
	Для Каждого РезультатРасчета Из РасчетАмортизации Цикл
		
		// В РезультатРасчета.Значение ожидается АмортизацияАктивов.НовыйРасчетАмортизацииБазовый
		Для Каждого Запись Из РезультатРасчета.Значение Цикл
			
			Если ТипЗнч(Запись.Объект) <> Тип("СправочникСсылка.КомпонентыАмортизацииОС") Тогда
				Продолжить;
			КонецЕсли;
			
			Сумма = Амортизация[Запись.Объект];
			Если Сумма = Неопределено Тогда
				Сумма = 0;
			КонецЕсли;
			
			Сумма = Сумма + Запись.Амортизация;
			
			Амортизация.Вставить(Запись.Объект, Сумма);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Амортизация;
	
КонецФункции

#КонецОбласти

#Область Функциональность

Процедура ДобавитьОграниченияОпцииКомпонентыАмортизации(УсловияДоступности) Экспорт
	
	ОграничениеДокументАмортизация = Обработки.ФункциональностьПрограммы.ДобавитьОграничениеДоступности(
		УсловияДоступности,
		"КомпонентыАмортизацииОС", 
		Тип("ДокументСсылка.ИзменениеПараметровНачисленияАмортизацииОС"));
	УсловиеНаТабличнуюЧасть = Обработки.ФункциональностьПрограммы.ОграничениеЗаполненныеТабличныеЧасти(
		"КомпонентыАмортизации");
	ОграничениеДокументАмортизация.УсловияПроверки.Добавить(УсловиеНаТабличнуюЧасть);
	ОграничениеДокументАмортизация.ДополнениеЗаголовка = НСтр("ru = 'компоненты амортизации'");
	
	ОграничениеДокументЗавершениеРемонта = Обработки.ФункциональностьПрограммы.ДобавитьОграничениеДоступности(
		УсловияДоступности,
		"КомпонентыАмортизацииОС", 
		Тип("ДокументСсылка.ЗавершениеРемонтаОС"));
	
КонецПроцедуры

#КонецОбласти
