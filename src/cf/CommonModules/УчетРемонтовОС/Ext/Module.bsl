// Содержимое модуля отличается в версиях ПРОФ и КОРП
// В версии ПРОФ отсутствует:
// - тело экспортных процедур (остаются только сигнатуры методов)
// - неэкспортные процедуры и все функции.
// Поэтому не допускается реализация в модуле экспортных функций: вместо них следует использовать процедуры с возвращаемым параметром.

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИБ

// Добавляем в версии КОРП на счета 01.05 и 02.05 вид субконто "Ремонты основных средств".
//
Процедура УстановитьСубконтоРемонтыОС() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат; // В узлы РИБ измененные счета загружаются из главного узла.
	КонецЕсли;
	
	Счет0105 = ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтОС.ПолучитьОбъект();
	Если Счет0105.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РемонтыОС, "ВидСубконто") = Неопределено Тогда
		НовыйВидСубконто = Счет0105.ВидыСубконто.Добавить();
		НовыйВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РемонтыОС;
		НовыйВидСубконто.Суммовой = Истина;
		НовыйВидСубконто.Валютный = Истина;
		НовыйВидСубконто.Количественный = Истина;
		ПланыСчетов.Хозрасчетный.ЗаписатьОбъект(Счет0105, Истина);
	КонецЕсли;
	
	Счет0205 = ПланыСчетов.Хозрасчетный.АмортизацияЗатратНаРемонтОС.ПолучитьОбъект();
	Если Счет0205.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РемонтыОС, "ВидСубконто") = Неопределено Тогда
		НовыйВидСубконто = Счет0205.ВидыСубконто.Добавить();
		НовыйВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РемонтыОС;
		НовыйВидСубконто.Суммовой = Истина;
		НовыйВидСубконто.Валютный = Истина;
		НовыйВидСубконто.Количественный = Истина;
		ПланыСчетов.Хозрасчетный.ЗаписатьОбъект(Счет0205, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Амортизация

Процедура РассчитатьАмортизацию(Результаты, ТаблицаРеквизиты, ТаблицаОС, Отказ, Ошибки = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("КомпонентыАмортизацииОС") Тогда
		Возврат;
	КонецЕсли;
	
	Результаты = НовыйРезультатыРасчета();
	
	Результаты.Параметры = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	ОкончательныйРасчет = ТипЗнч(Результаты.Параметры.Регистратор) = Тип("ДокументСсылка.РегламентнаяОперация");
	ЗавершениеРемонта = ТипЗнч(Результаты.Параметры.Регистратор) = Тип("ДокументСсылка.ЗавершениеРемонтаОС");
	ПериодРасчета = НачалоДня(КонецМесяца(Результаты.Параметры.Период));
	Результаты.Параметры.Вставить("ОкончательныйРасчет", ОкончательныйРасчет);
	Результаты.Параметры.Вставить("ЗавершениеРемонта", ЗавершениеРемонта);
	Результаты.Параметры.Вставить("ПериодРасчета", ПериодРасчета);
	
	Результаты.ДанныеРасчетаАмортизации = ДанныеДляРасчетаАмортизации(Результаты.Параметры, ТаблицаОС);
	
	Счет01 = ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтОС;
	Счет02 = ПланыСчетов.Хозрасчетный.АмортизацияЗатратНаРемонтОС;
	
	Для каждого СтрокаДанных Из Результаты.ДанныеРасчетаАмортизации Цикл
		
		Если ЗавершениеРемонта Тогда
			ОстатокСПИ = 1;
			СуммаАмортизации = СтрокаДанных.ОстаточнаяСтоимость;
		Иначе
			ФактическийСрокИспользования = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(
				СтрокаДанных.ДатаПризнания, ПериодРасчета) - 1;
			ОстатокСПИ = Макс(СтрокаДанных.СрокАмортизации - ФактическийСрокИспользования, 0);
			Если ОстатокСПИ = 0 Тогда
				СуммаАмортизации = СтрокаДанных.ОстаточнаяСтоимость;
			Иначе
				СуммаАмортизации = Окр(СтрокаДанных.ОстаточнаяСтоимость / ОстатокСПИ, 2);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРасчет = Результаты.РасчетАмортизации.Добавить();
		СтрокаРасчет.ПериодРасчета = ПериодРасчета;
		СтрокаРасчет.Объект = СтрокаДанных.ОсновноеСредство;
		СтрокаРасчет.КомпонентАмортизации = СтрокаДанных.Ремонт;
		СтрокаРасчет.ОграничениеРаздела = Перечисления.РазделыРасчетаАмортизации.ТолькоБухгалтерскийУчет;
		СтрокаРасчет.СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
		СтрокаРасчет.АмортизационнаяГруппа = СтрокаДанных.АмортизационнаяГруппаОС;
		СтрокаРасчет.ИнвентарныйНомер = СтрокаДанных.ИнвентарныйНомерОС;
		СтрокаРасчет.ДатаВводаВЭксплуатацию = СтрокаДанных.ДатаВводаВЭксплуатациюОС;
		СтрокаРасчет.НачислятьАмортизациюБУ = Истина;
		СтрокаРасчет.СтоимостьБУ = СтрокаДанных.ПервоначальнаяСтоимость;
		СтрокаРасчет.СтоимостьВР = СтрокаДанных.ПервоначальнаяСтоимость;
		СтрокаРасчет.СтоимостьДляАмортизацииБУ = СтрокаДанных.ОстаточнаяСтоимость;
		СтрокаРасчет.ОстаточнаяСтоимостьБУ = СтрокаДанных.ОстаточнаяСтоимость;
		СтрокаРасчет.ОстаточнаяСтоимостьВР = СтрокаДанных.ОстаточнаяСтоимость;
		СтрокаРасчет.СрокПолезногоИспользованияБУ = СтрокаДанных.СрокАмортизации;
		СтрокаРасчет.ОстатокСрокаПолезногоИспользованияБУ = ОстатокСПИ;
		СтрокаРасчет.СуммаАмортизацииБУ = СуммаАмортизации;
		СтрокаРасчет.СуммаАмортизацииВР = СуммаАмортизации;
		СтрокаРасчет.СпособыОтраженияРасходовПоАмортизации = СтрокаДанных.СпособОтраженияРасходов;
		
		СтрокаПроводки = Результаты.АмортизацияДляПроводок.Добавить();
		СтрокаПроводки.ОбъектУчета = СтрокаДанных.ОсновноеСредство;
		СтрокаПроводки.Ремонт = СтрокаДанных.Ремонт;
		СтрокаПроводки.СчетУчета = Счет01;
		СтрокаПроводки.СчетНачисленияАмортизации = Счет02;
		СтрокаПроводки.НаправлениеАмортизации = СтрокаДанных.СпособОтраженияРасходов;
		СтрокаПроводки.СуммаАмортизацииБУ = СуммаАмортизации;
		СтрокаПроводки.СуммаАмортизацииВР = СуммаАмортизации;
		СтрокаПроводки.Подразделение = СтрокаДанных.Местонахождение;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьАмортизациюВУчете(Результаты, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Результаты) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПроводкиАмортизация(Результаты.АмортизацияДляПроводок, ТаблицаРеквизиты, Движения, Отказ);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения, Результаты.РасчетАмортизации, ТаблицаРеквизиты, "РасчетАмортизации");
	
КонецПроцедуры

#КонецОбласти

#Область Выбытие

Процедура РассчитатьВыбытие(Результаты, ТаблицаРеквизиты, ТаблицаОС, Отказ) Экспорт
	
	РассчитатьАмортизацию(Результаты, ТаблицаРеквизиты, ТаблицаОС, Отказ);
	
	Если Не ЗначениеЗаполнено(Результаты) Тогда
		Возврат;
	КонецЕсли;
	
	Результаты.ДанныеВыбытия = ДанныеДляРасчетаВыбытия(Результаты.Параметры, ТаблицаОС);
	
	Результаты.РасчетАмортизации.Индексы.Добавить("Объект,КомпонентАмортизации");
	ТаблицаОС.Индексы.Добавить("ОсновноеСредство");
	
	Для каждого СтрокаДанных Из Результаты.ДанныеВыбытия Цикл
		
		СтрокаВыбытие = Результаты.Выбытие.Добавить();
		СтрокаВыбытие.ОсновноеСредство = СтрокаДанных.ОсновноеСредство;
		СтрокаВыбытие.Подразделение = СтрокаДанных.Местонахождение;
		СтрокаВыбытие.Ремонт = СтрокаДанных.Ремонт;
		СтрокаВыбытие.ПервоначальнаяСтоимость = СтрокаДанных.ПервоначальнаяСтоимость;
		СтрокаВыбытие.СуммаАмортизации = СтрокаДанных.СуммаАмортизации;
		
		Отбор = Новый Структура("Объект,КомпонентАмортизации", 
			СтрокаДанных.ОсновноеСредство, СтрокаДанных.Ремонт);
		СтрокиАмортизации = Результаты.РасчетАмортизации.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(СтрокиАмортизации) Тогда
			СтрокаВыбытие.СуммаАмортизации = СтрокаВыбытие.СуммаАмортизации 
				+ СтрокиАмортизации[0].СуммаАмортизацииБУ;
		КонецЕсли;
		
		СтрокаОС = ТаблицаОС.Найти(СтрокаДанных.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаОС <> Неопределено Тогда
			СтрокаВыбытие.СчетВыбытия = СтрокаОС.СчетВыбытия;
			СтрокаВыбытие.Субконто1 = СтрокаОС.Субконто1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьВыбытиеВУчете(Результаты, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Результаты) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПроводкиАмортизация(Результаты.АмортизацияДляПроводок, ТаблицаРеквизиты, Движения, Отказ);
	
	СформироватьПроводкиВыбытие(Результаты.Выбытие, Результаты.Параметры, Движения, Отказ);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения, Результаты.РасчетАмортизации, ТаблицаРеквизиты, "РасчетАмортизации");
	
КонецПроцедуры

#КонецОбласти

#Область Перемещение

Процедура ОтразитьПеремещениеВУчете(Результаты, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Результаты) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПроводкиАмортизация(Результаты.АмортизацияДляПроводок, ТаблицаРеквизиты, Движения, Отказ);
	
	СформироватьПроводкиПеремещение(Результаты.Выбытие, Результаты.Параметры, Движения, Отказ);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения, Результаты.РасчетАмортизации, ТаблицаРеквизиты, "РасчетАмортизации");
	
КонецПроцедуры

#КонецОбласти

#Область Материалы

Процедура ОтразитьОприходованиеМатериалов(ТаблицаМатериалы, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаМатериалы) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПроводкиОприходованиеМатериалов(ТаблицаМатериалы, ТаблицаРеквизиты, Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ВводНачальныхОстатков

Процедура ЗаполнитьДокументыРемонтовПриВводеОстатков(ДокументВводаОстатков, Отказ) Экспорт
	
	ЗатратыБезДокументов = Новый Массив;
	ДокументыПоВидамРемонта = Новый Соответствие;
	Для каждого СтрокаЗатрат Из ДокументВводаОстатков.ЗатратыНаРемонтОС Цикл
		Если ЗначениеЗаполнено(СтрокаЗатрат.Ремонт) Тогда
			ДокументыПоВидамРемонта.Вставить(СтрокаЗатрат.ВидРемонта, СтрокаЗатрат.Ремонт);
		Иначе
			ЗатратыБезДокументов.Добавить(СтрокаЗатрат);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ЗатратыБезДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	ВидыРемонтаБезДокументов = Новый Массив;
	Для каждого СтрокаЗатрат Из ЗатратыБезДокументов Цикл
		ДокументРемонта = ДокументыПоВидамРемонта[СтрокаЗатрат.ВидРемонта];
		Если ЗначениеЗаполнено(ДокументРемонта) Тогда
			СтрокаЗатрат.Ремонт = ДокументРемонта;
		Иначе
			ВидыРемонтаБезДокументов.Добавить(СтрокаЗатрат.ВидРемонта);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВидыРемонтаБезДокументов) Тогда
		Возврат;
	КонецЕсли;
	ВидыРемонтаБезДокументов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыРемонтаБезДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗавершениеРемонта.ВидРемонта КАК ВидРемонта,
	|	МАКСИМУМ(ЗавершениеРемонта.Ссылка) КАК Документ
	|ПОМЕСТИТЬ ЗавершениеРемонта
	|ИЗ
	|	Документ.ЗавершениеРемонтаОС КАК ЗавершениеРемонта
	|ГДЕ
	|	ЗавершениеРемонта.Организация = &Организация
	|	И ЗавершениеРемонта.ПодразделениеОрганизации = &ПодразделениеОрганизации
	|	И ЗавершениеРемонта.ВидРемонта В(&ВидыРемонта)
	|	И ЗавершениеРемонта.СозданПриВводеНачальныхОстатков
	|	И ЗавершениеРемонта.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗавершениеРемонта.ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗавершениеРемонта.ВидРемонта КАК ВидРемонта,
	|	ЗавершениеРемонта.Документ КАК Документ,
	|	ЗавершениеРемонта.Документ.Дата КАК Дата
	|ИЗ
	|	ЗавершениеРемонта КАК ЗавершениеРемонта";
	
	Запрос.УстановитьПараметр("Организация", ДокументВводаОстатков.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ДокументВводаОстатков.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ВидыРемонта", ВидыРемонтаБезДокументов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Дата <> ДокументВводаОстатков.Дата Тогда
			ДокументРемонтаОбъект = Выборка.Документ.ПолучитьОбъект();
			ДокументРемонтаОбъект.Дата = ДокументВводаОстатков.Дата;
			ДокументРемонтаОбъект.Записать();
		КонецЕсли;
		ДокументыПоВидамРемонта.Вставить(Выборка.ВидРемонта, Выборка.Документ);
	КонецЦикла;
	
	Для каждого СтрокаЗатрат Из ЗатратыБезДокументов Цикл
		
		Если ЗначениеЗаполнено(СтрокаЗатрат.Ремонт) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументРемонта = ДокументыПоВидамРемонта[СтрокаЗатрат.ВидРемонта];
		Если ДокументРемонта = Неопределено Тогда
			ДокументРемонта = СоздатьЗавершениеРемонтаПриВводеОстатков(
				ДокументВводаОстатков.Дата,
				ДокументВводаОстатков.Организация,
				ДокументВводаОстатков.ПодразделениеОрганизации,
				СтрокаЗатрат.ВидРемонта,
				Отказ);
			ДокументыПоВидамРемонта.Вставить(СтрокаЗатрат.ВидРемонта, ДокументРемонта);
		КонецЕсли;
		СтрокаЗатрат.Ремонт = ДокументРемонта;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьНачальныеОстатки(ТаблицаЗатратыНаРемонтОС, СодержаниеПроводки, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаЗатратыНаРемонтОС) Тогда
		Возврат;
	КонецЕсли;
	
	Счет01 = ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтОС; //01.05
	Счет02 = ПланыСчетов.Хозрасчетный.АмортизацияЗатратНаРемонтОС; // 02.05
	
	Для каждого СтрокаЗатрат Из ТаблицаЗатратыНаРемонтОС Цикл
		
		// 1. Первоначальная стоимость
		ТекущаяСтоимостьБУ = СтрокаЗатрат.ТекущаяСтоимостьБУ;
		Если ТекущаяСтоимостьБУ > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = СтрокаЗатрат.Период;
			Проводка.Организация = СтрокаЗатрат.Организация;
			Проводка.Содержание = СодержаниеПроводки;
			
			Проводка.Сумма = ТекущаяСтоимостьБУ;
			
			Проводка.СчетДт = Счет01;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаЗатрат.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РемонтыОС", СтрокаЗатрат.Ремонт);
			
			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаЗатрат.ПодразделениеОрганизации, "Дт");
			
		КонецЕсли;
		
		// 2. Начисленная амортизация
		НакопленнаяАмортизацияБУ = СтрокаЗатрат.НакопленнаяАмортизацияБУ;
		Если НакопленнаяАмортизацияБУ > 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			Проводка.Период = СтрокаЗатрат.Период;
			Проводка.Организация = СтрокаЗатрат.Организация;
			Проводка.Содержание = СодержаниеПроводки;
			
			Проводка.Сумма	= НакопленнаяАмортизацияБУ;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
			
			Проводка.СчетКт = Счет02;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаЗатрат.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РемонтыОС", СтрокаЗатрат.Ремонт);
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаЗатрат.ПодразделениеОрганизации, "Кт");
			
		КонецЕсли;
		
		// 3. Запись служебного регистра 
		Запись = Движения.КапитализируемыеРемонтыОС.Добавить();
		Запись.Период = СтрокаЗатрат.Период;
		Запись.Организация = СтрокаЗатрат.Организация;
		Запись.ОсновноеСредство = СтрокаЗатрат.ОсновноеСредство;
		Запись.ВидРемонта = СтрокаЗатрат.ВидРемонта;
		Запись.Ремонт = СтрокаЗатрат.Ремонт;
		Запись.ДатаПризнания = СтрокаЗатрат.Период;
		Запись.СрокАмортизации = СтрокаЗатрат.ОстатокСрокаАмортизацииБУ;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	Движения.КапитализируемыеРемонтыОС.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СправкаРасчетАмортизации

Процедура ДополнитьТекстЗапросаСправкаРасчетАмортизации(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"ЕСТЬNULL(КомпонентыАмортизации.Ссылка, РасчетАмортизации.Объект)", 
		"ЕСТЬNULL(ЗавершениеРемонтаОС.Ссылка, ЕСТЬNULL(КомпонентыАмортизации.Ссылка, РасчетАмортизации.Объект))");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
		"		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КомпонентыАмортизацииОС КАК КомпонентыАмортизации
		|		ПО РасчетАмортизации.КомпонентАмортизации = КомпонентыАмортизации.Ссылка",
		"		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КомпонентыАмортизацииОС КАК КомпонентыАмортизации
		|		ПО РасчетАмортизации.КомпонентАмортизации = КомпонентыАмортизации.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗавершениеРемонтаОС КАК ЗавершениеРемонтаОС
		|		ПО РасчетАмортизации.КомпонентАмортизации = ЗавершениеРемонтаОС.Ссылка");
	
КонецПроцедуры

#КонецОбласти

#Область РегламентнаяОперация

// Дополняет список имен документов, оприходование материалов
// в которых определяется по фиксированной стоимости.
//
// Параметры:
//  ИменаДокументов - Массив из Строка - список имен документов.
//
Процедура ДополнитьИменамиДокументовРемонтыОС(ИменаДокументов) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("КомпонентыАмортизацииОС") Тогда
		Возврат;
	КонецЕсли;
	
	ИменаДокументов.Добавить(Метаданные.Документы.ЗавершениеРемонтаОС.Имя);
		
КонецПроцедуры

// Расширяет перечень счетов: дополняет его предопределенным счетом учета вложений в ремонты основных средств.
//
// Параметры:
//  СчетаРасходов - Массив из ПланСчетовСсылка.Хозрасчетный - дополняемый массив
//
Процедура ДобавитьСчетВложенияВРемонтыОсновныхСредств(СчетаРасходов) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("КомпонентыАмортизацииОС") Тогда
		Возврат;
	КонецЕсли;
	
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВРемонтыОсновныхСредств);
	
КонецПроцедуры

#КонецОбласти

#Область ПравилаРаспределенияРасходов

// Для капитализируемых затрат на ремонт основных средств отличаются правила бухгалтерского и налогового учета:
// в бухгалтерском учете такие затраты капитализируются, а в налоговом учете списываются на расходы периода.
// Расходы в налоговом учете распределяются правилом "ЗатратыТекущегоПериодаНаРемонтОС".
// Здесь добавляется правило распределения, выделяющие расходы в налоговом учете.
// 
// Параметры:
//   ПравилаРаспределения - ТаблицаЗначений - См. ПравилаРаспределенияРасходов.НовыеПравилаРаспределения
//   ПравилаПоСчету - Массив из СтрокаТаблицаЗначений - Строки таблицы ПравилаРаспределения с отбором по счету
//   Счет - ПланСчетовСсылка.Хозрасчетный
//   Организация - СправочникСсылка.Организации
//   Период - Дата
//
Процедура ДобавитьПравилоВыделитьНалоговыйУчетКапитализируемыеРемонтыОС(ПравилаРаспределения, ПравилаПоСчету, Счет, Организация, Период) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("КомпонентыАмортизацииОС") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоКапитализируемыеЗатратыРемонтОС = Неопределено;
	Для Каждого ОсновноеПравило Из ПравилаПоСчету Цикл
		Если ОсновноеПравило.ОтборРасходов.Свойство("ЭтапРаспределения")
			И ОсновноеПравило.ОтборРасходов.ЭтапРаспределения = ИмяЭтапаКапитализируемыеЗатратыРемонтОС() Тогда
			ПравилоКапитализируемыеЗатратыРемонтОС = ОсновноеПравило;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПравилоКапитализируемыеЗатратыРемонтОС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Правило следует сразу же за правилом, устанавливающим наименование этапа и перед правилом ПравилоКапитализируемыеЗатратыРемонтОС,
	// которое очищает значение поля ЭтапРаспределения.
	ПозицияПравила = ПравилаРаспределения.Индекс(ПравилоКапитализируемыеЗатратыРемонтОС);
	
	Правило = ПравилаРаспределения.Вставить(ПозицияПравила);
	ПравилаРаспределенияРасходов.УстановитьПравилоРаспределения(Правило, "КапитализацияРемонтовОСВыделитьНалоговыйУчет", "ВыделитьНалоговыйУчет");
	Правило.Наименование = НСтр("ru = 'Выделить налоговый учет капитализируемых затрат ремонтов основных средств.'");
	
	Правило.ОтборРасходов.Вставить("Счет", Счет);
	Правило.ОтборРасходов.Вставить("ЭтапРаспределения", ИмяЭтапаКапитализируемыеЗатратыРемонтОС());
	
	Правило.ПоляПриемника.Вставить("ЭтапРаспределения");
	Правило.ПоляПриемника.Вставить("НалоговыйУчет");
	
	Правило.БазаРаспределения.Имя = "БазаРаспределения_КапитализируемыеЗатратыРемонтовОС_ВыделитьНалоговыйУчет";
	
	Правило.БазаРаспределения.ТекстЗапроса =
	"ВЫБРАТЬ
	|	"""" КАК ЭтапРаспределения,
	|	ЗНАЧЕНИЕ(Перечисление.ОсобенностиНалоговогоУчетаРасходов.ТекущегоПериода) КАК НалоговыйУчет,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийРасчетСебестоимости.ВременныеРазницы) КАК ТипРазниц
	|ПОМЕСТИТЬ БазаРаспределения_КапитализируемыеЗатратыРемонтовОС_ВыделитьНалоговыйУчет";

КонецПроцедуры

Процедура ДобавитьПравилаКапитализируемыеРемонтыОС(Процессор) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("КомпонентыАмортизацииОС") Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПравилоВыделитьКапитализируемыеРемонтыОС(Процессор);
	
	ДобавитьПравилоКапитализацияРемонтовОС(Процессор);
	
	// Затраты на незавершенные капитализируемые ремонты, соотнесенные с основными средствами, остаются в составе НЗП.
	ДобавитьПравилоНезавершенноеПроизводствоРемонтыОС(Процессор);
	
КонецПроцедуры

Процедура ДобавитьПравилоЗатратыКапитализируемыеРемонтыНаСтоимостьОС(Процессор) Экспорт
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС  Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка этой функциональности для других правил, относящихся к капитализируемым ремонтам, выполняется
	// не отдельно при добавлении каждого правила, а в методе ДобавитьПравилаКапитализируемыеРемонтыОС
	Если Не ПолучитьФункциональнуюОпцию("КомпонентыАмортизацииОС") Тогда
		Возврат;
	КонецЕсли;
	
	// Правило применяется для счета 08.04.5, который не обязательно присутствует в списке используемых счетов:
	// расходы по нему образуются в результате добавления правил метода ДобавитьПравилоКапитализацияРемонтовОС.
	// Поэтому добавляем правило в цикле для самого первого счета и контролируем, чтобы оно было добавлено только один раз.
	ФункциональноеИмяПравила = "КапитализируемыеРемонтыНаСтоимостьОС";
	
	Если Процессор.Правила.Найти(ФункциональноеИмяПравила, "ФункциональноеИмя") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ПравилаРаспределенияРасходов.ДобавитьПравилоРаспределения(Процессор, "КапитализируемыеРемонтыНаСтоимостьОС", "РаспределитьНаСубконто");
	Правило.СодержаниеПроводки = НСтр("ru = 'Вложения в капитальные ремонты, завершенные в текущем периоде, включены в стоимость основных средств'");
	
	ДобавитьОписаниеВременнойТаблицыЗавершениеРемонтовОС(Правило.БазаРаспределения);
	
	Правило.ОтборРасходов.Счет = ПланыСчетов.Хозрасчетный.ВложенияВРемонтыОсновныхСредств;
	Правило.Наименование = НСтр("ru = 'Вложения в капитальные ремонты, завершенные в текущем периоде, включаются в стоимость основных средств.'");
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("ОсновноеСредство", "ОсновноеСредствоИсточник");
	Правило.ПоляИсточника.Вставить("ВидРемонтаОС",     "ВидРемонтаОСИсточник");
	
	Правило.ПоляПриемника.Вставить("Подразделение", "Подразделение");
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("СчетРезультата", ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтОС);
	
	// В стоимость ОС включаются все затраты по виду ремонта, накопленные к моменту завершения для объекта ОС на счете 08.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&СчетРезультата КАК Счет,
	|	ЗавершениеРемонтов.Подразделение КАК Подразделение,
	|	ЗавершениеРемонтов.ОсновноеСредство КАК ОсновноеСредствоИсточник,
	|	ЗавершениеРемонтов.ВидРемонтаОС КАК ВидРемонтаОСИсточник,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	|			ТОГДА ЗавершениеРемонтов.ОсновноеСредство
	|		КОГДА СубконтоЗатрат.ВидСубконто1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РемонтыОС)
	|			ТОГДА ЗавершениеРемонтов.РемонтОсновногоСредства
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	|			ТОГДА ЗавершениеРемонтов.ОсновноеСредство
	|		КОГДА СубконтоЗатрат.ВидСубконто2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РемонтыОС)
	|			ТОГДА ЗавершениеРемонтов.РемонтОсновногоСредства
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства)
	|			ТОГДА ЗавершениеРемонтов.ОсновноеСредство
	|		КОГДА СубконтоЗатрат.ВидСубконто3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РемонтыОС)
	|			ТОГДА ЗавершениеРемонтов.РемонтОсновногоСредства
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Субконто3,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	1 КАК База
	|ИЗ
	|	ЗавершениеРемонтовОС КАК ЗавершениеРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СубконтоЗатрат КАК СубконтоЗатрат
	|		ПО (СубконтоЗатрат.Счет = &СчетРезультата)";
		
	Правило.БазаРаспределения.Имя = "БазаРаспределения" + Правило.Имя;
	
	ПравилаРаспределенияРасходов.НастроитьТекстБазыРаспределения(Правило, ТекстЗапроса);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область АмортизацияСлужебные

Функция ДанныеДляРасчетаАмортизации(Реквизиты, ТаблицаОС)
	
	ОкончательныйРасчет = Реквизиты.ОкончательныйРасчет;
	ЗавершениеРемонта = Реквизиты.ЗавершениеРемонта;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапросаАмортизация(ОкончательныйРасчет, ЗавершениеРемонта);
	
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Реквизиты.Период));
	Если ОкончательныйРасчет Тогда
		Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Реквизиты.Период));
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", 
			Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	КонецЕсли;
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("ПериодРасчета", Реквизиты.ПериодРасчета);
	Запрос.УстановитьПараметр("ПериодСпособыАмортизации", КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("ПериодМестонахождение", НачалоМесяца(Реквизиты.Период) - 1);
	Запрос.УстановитьПараметр("МоментВремени", Реквизиты.Регистратор.МоментВремени());
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	ВидыСубконтоОСРемонты = Новый Массив;
	ВидыСубконтоОСРемонты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	ВидыСубконтоОСРемонты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РемонтыОС);
	Запрос.УстановитьПараметр("ВидыСубконтоОСРемонты", ВидыСубконтоОСРемонты);
	Запрос.УстановитьПараметр("СчетУчетаОС", ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтОС);
	Запрос.УстановитьПараметр("СчетАмортизацииОС", ПланыСчетов.Хозрасчетный.АмортизацияЗатратНаРемонтОС);
	Если ОкончательныйРасчет Тогда
		Запрос.УстановитьПараметр("ОсновныеСредства", Новый Массив);
	Иначе
		Запрос.УстановитьПараметр("ОсновныеСредства", ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	КонецЕсли;
	Запрос.УстановитьПараметр("ОтборСубконто1", Истина);
	Если ЗавершениеРемонта Тогда
		Запрос.УстановитьПараметр("ВидРемонта", Реквизиты.ВидРемонта);
	Иначе
		Запрос.УстановитьПараметр("ВидРемонта", Неопределено);
	КонецЕсли;
	Запрос.УстановитьПараметр("ОтборВидРемонта", Истина);
	
	Данные = Запрос.Выполнить().Выгрузить();
	Возврат Данные;
	
КонецФункции

Функция ТекстЗапросаАмортизация(ОкончательныйРасчет, ЗавершениеРемонта)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ПериодРасчета КАК ПериодРасчета,
	|	&Организация КАК Организация,
	|	Остатки.ОсновноеСредство КАК ОсновноеСредство,
	|	Остатки.Ремонт КАК Ремонт,
	|	СУММА(Остатки.ПервоначальнаяСтоимость) КАК ПервоначальнаяСтоимость,
	|	СУММА(Остатки.СуммаАмортизации) КАК СуммаАмортизации
	|ПОМЕСТИТЬ ОстаткиСПериодом
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки01.Субконто1 КАК ОсновноеСредство,
	|		Остатки01.Субконто2 КАК Ремонт,
	|		Остатки01.СуммаОстатокДт КАК ПервоначальнаяСтоимость,
	|		0 КАК СуммаАмортизации
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&НачалоМесяца,
	|				Счет = &СчетУчетаОС,
	|				&ВидыСубконтоОСРемонты,
	|				Организация = &Организация
	|					И &ОтборСубконто1) КАК Остатки01
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Остатки02.Субконто1,
	|		Остатки02.Субконто2,
	|		0,
	|		Остатки02.СуммаОстатокКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&НачалоМесяца,
	|				Счет = &СчетАмортизацииОС,
	|				&ВидыСубконтоОСРемонты,
	|				Организация = &Организация
	|					И &ОтборСубконто1) КАК Остатки02) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ОсновноеСредство,
	|	Остатки.Ремонт
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.ПервоначальнаяСтоимость) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодРасчета,
	|	Организация,
	|	ОсновноеСредство,
	|	Ремонт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиСПериодом.Организация КАК Организация,
	|	ОстаткиСПериодом.ОсновноеСредство КАК ОсновноеСредство,
	|	ОстаткиСПериодом.Ремонт КАК Ремонт
	|ПОМЕСТИТЬ НачисленоРанее
	|ИЗ
	|	ОстаткиСПериодом КАК ОстаткиСПериодом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|		ПО ОстаткиСПериодом.ПериодРасчета = РасчетАмортизации.ПериодРасчета
	|			И ОстаткиСПериодом.Организация = РасчетАмортизации.Организация
	|			И ОстаткиСПериодом.ОсновноеСредство = РасчетАмортизации.Объект
	|			И ОстаткиСПериодом.Ремонт = РасчетАмортизации.КомпонентАмортизации
	|ГДЕ
	|	РасчетАмортизации.МоментВремени < &МоментВремени
	|	И НЕ РасчетАмортизации.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|	И РасчетАмортизации.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОсновноеСредство,
	|	Ремонт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиСПериодом.Организация КАК Организация,
	|	ОстаткиСПериодом.ОсновноеСредство КАК ОсновноеСредство,
	|	ОстаткиСПериодом.Ремонт КАК Ремонт,
	|	ОстаткиСПериодом.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ОстаткиСПериодом.ПервоначальнаяСтоимость - ОстаткиСПериодом.СуммаАмортизации КАК ОстаточнаяСтоимость
	|ПОМЕСТИТЬ ОстаткиБУ
	|ИЗ
	|	ОстаткиСПериодом КАК ОстаткиСПериодом
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОсновноеСредство,
	|	Ремонт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ОстаткиБУ.Ремонт КАК Ремонт,
	|	ОстаткиБУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ОстаткиБУ.ОстаточнаяСтоимость КАК ОстаточнаяСтоимость,
	|	Ремонты.ДатаПризнания КАК ДатаПризнания,
	|	Ремонты.СрокАмортизации КАК СрокАмортизации
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	ОстаткиБУ КАК ОстаткиБУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КапитализируемыеРемонтыОС КАК Ремонты
	|		ПО ОстаткиБУ.Организация = Ремонты.Организация
	|			И ОстаткиБУ.ОсновноеСредство = Ремонты.ОсновноеСредство
	|			И ОстаткиБУ.Ремонт = Ремонты.Ремонт
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленоРанее КАК НачисленоРанее
	|		ПО ОстаткиБУ.Организация = НачисленоРанее.Организация
	|			И ОстаткиБУ.ОсновноеСредство = НачисленоРанее.ОсновноеСредство
	|			И ОстаткиБУ.Ремонт = НачисленоРанее.Ремонт
	|ГДЕ
	|	&ОтборВидРемонта
	|	И НачисленоРанее.ОсновноеСредство ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыАмортизации.ОсновноеСредство КАК ОсновноеСредство,
	|	СпособыАмортизации.СпособыОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходов
	|ПОМЕСТИТЬ СпособыОтраженияРасходов
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|			&ПериодСпособыАмортизации,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Остатки.ОсновноеСредство
	|					ИЗ
	|						Остатки КАК Остатки)) КАК СпособыАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Местонахождения.ОсновноеСредство КАК ОсновноеСредство,
	|	Местонахождения.Местонахождение КАК Местонахождение
	|ПОМЕСТИТЬ Местонахождения
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&ПериодМестонахождение,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Остатки.ОсновноеСредство
	|					ИЗ
	|						Остатки КАК Остатки)) КАК Местонахождения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведения.Период КАК ДатаВводаВЭксплуатацию,
	|	ПервоначальныеСведения.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ПОМЕСТИТЬ ПервоначальныеСведения
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Остатки.ОсновноеСредство
	|					ИЗ
	|						Остатки КАК Остатки)) КАК ПервоначальныеСведения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ОсновноеСредство КАК ОсновноеСредство,
	|	Остатки.ОсновноеСредство.АмортизационнаяГруппа КАК АмортизационнаяГруппаОС,
	|	Остатки.Ремонт КАК Ремонт,
	|	Остатки.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	Остатки.ОстаточнаяСтоимость КАК ОстаточнаяСтоимость,
	|	Остатки.ДатаПризнания КАК ДатаПризнания,
	|	Остатки.СрокАмортизации КАК СрокАмортизации,
	|	ЕСТЬNULL(СпособыОтраженияРасходов.СпособОтраженияРасходов, НЕОПРЕДЕЛЕНО) КАК СпособОтраженияРасходов,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаВводаВЭксплуатацию, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаВводаВЭксплуатациюОС,
	|	ЕСТЬNULL(ПервоначальныеСведения.ИнвентарныйНомер, """") КАК ИнвентарныйНомерОС,
	|	ЕСТЬNULL(Местонахождения.Местонахождение, НЕОПРЕДЕЛЕНО) КАК Местонахождение
	|ИЗ
	|	Остатки КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходов КАК СпособыОтраженияРасходов
	|		ПО Остатки.ОсновноеСредство = СпособыОтраженияРасходов.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведения КАК ПервоначальныеСведения
	|		ПО Остатки.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ Местонахождения КАК Местонахождения
	|		ПО Остатки.ОсновноеСредство = Местонахождения.ОсновноеСредство";
	
	Если Не ОкончательныйРасчет Тогда
		ТекстОтборОС = "Субконто1 В (&ОсновныеСредства)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборСубконто1", ТекстОтборОС);
	КонецЕсли;
	Если ЗавершениеРемонта Тогда
		ТекстОтборВидРемонта = "Ремонты.ВидРемонта = &ВидРемонта";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборВидРемонта", ТекстОтборВидРемонта);
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция НовыйТаблицаРасчетАмортизации()
	
	ОписаниеТипаСумма = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	ОписаниеТипаСПИ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПериодРасчета", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Результат.Колонки.Добавить("КомпонентАмортизации", Метаданные.ОпределяемыеТипы.ДокументыРемонтаОС.Тип);
	Результат.Колонки.Добавить("ОграничениеРаздела", Новый ОписаниеТипов("ПеречислениеСсылка.РазделыРасчетаАмортизации"));
	Результат.Колонки.Добавить("СпособНачисленияАмортизацииБУ", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС"));
	Результат.Колонки.Добавить("АмортизационнаяГруппа", Новый ОписаниеТипов("ПеречислениеСсылка.АмортизационныеГруппы"));
	Результат.Колонки.Добавить("ИнвентарныйНомер", ОбщегоНазначения.ОписаниеТипаСтрока(10));
	Результат.Колонки.Добавить("ДатаВводаВЭксплуатацию", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("НачислятьАмортизациюБУ", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("СтоимостьБУ", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("СтоимостьВР", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("СтоимостьДляАмортизацииБУ", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("ОстаточнаяСтоимостьБУ", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("ОстаточнаяСтоимостьВР", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("СрокПолезногоИспользованияБУ", ОписаниеТипаСПИ);
	Результат.Колонки.Добавить("ОстатокСрокаПолезногоИспользованияБУ", ОписаниеТипаСПИ);
	Результат.Колонки.Добавить("СуммаАмортизацииБУ", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("СуммаАмортизацииВР", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("СпособыОтраженияРасходовПоАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатыРасчета()
	
	Результаты = Новый Структура;
	Результаты.Вставить("Параметры");
	Результаты.Вставить("ДанныеРасчетаАмортизации");
	Результаты.Вставить("ДанныеВыбытия");
	Результаты.Вставить("РасчетАмортизации", НовыйТаблицаРасчетАмортизации());
	Результаты.Вставить("АмортизацияДляПроводок", УчетОС.ПолучитьПустуюТаблицуАмортизацииОС());
	Результаты.Вставить("Выбытие", НовыйТаблицаВыбытие());
	
	Возврат Результаты;
	
КонецФункции

Процедура СформироватьПроводкиАмортизация(ТаблицаАмортизации, ТаблицаРеквизиты, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаАмортизации) Тогда
		Возврат;
	КонецЕсли;
	
	Счет02 = ПланыСчетов.Хозрасчетный.АмортизацияЗатратНаРемонтОС;
	СвойстваСчета02 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет02);
	Реквизиты = ТаблицаРеквизиты[0];
	ТаблицаЗатрат = УправлениеВнеоборотнымиАктивамиПереопределяемый.ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл(
		ТаблицаАмортизации, ТаблицаРеквизиты, Отказ);
	СодержаниеПроводок = НСтр("ru='Амортизация затрат на ремонт ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Для каждого СтрокаЗатрат Из ТаблицаЗатрат Цикл
		
		// Проводка Дт Счет затрат Кт 02.05
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = СодержаниеПроводок;
		
		Проводка.СчетДт = СтрокаЗатрат.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаЗатрат.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтрокаЗатрат.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтрокаЗатрат.Субконто3);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаЗатрат.ПодразделениеЗатрат;
		КонецЕсли;
		
		Проводка.СчетКт = Счет02;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаЗатрат.ОбъектУчета);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РемонтыОС", СтрокаЗатрат.Ремонт);
		
		Если СвойстваСчета02.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаЗатрат.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаЗатрат.СуммаБУ;
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаВРДт = СтрокаЗатрат.СуммаБУ;
		КонецЕсли;
		Если СвойстваСчета02.НалоговыйУчет Тогда
			Проводка.СуммаВРКт = СтрокаЗатрат.СуммаБУ;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВыбытиеСлужебные

Функция ДанныеДляРасчетаВыбытия(Реквизиты, ТаблицаОС)
	
	ЗавершениеРемонта = Реквизиты.ЗавершениеРемонта;
	
	Запрос = Новый Запрос();
	Если Реквизиты.ЗавершениеРемонта Тогда
		Запрос.Текст = ТекстЗапросаВыбытиеСтарыхРемонтов();
		Запрос.УстановитьПараметр("ВидРемонта", Реквизиты.ВидРемонта);
	Иначе
		Запрос.Текст = ТекстЗапросаВыбытие();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МоментВыбытия", 
		Новый Граница(Реквизиты.Регистратор.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Регистратор", Реквизиты.Регистратор);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	ВидыСубконтоОСРемонты = Новый Массив;
	ВидыСубконтоОСРемонты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	ВидыСубконтоОСРемонты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РемонтыОС);
	Запрос.УстановитьПараметр("ВидыСубконтоОСРемонты", ВидыСубконтоОСРемонты);
	Запрос.УстановитьПараметр("СчетУчетаОС", ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтОС);
	Запрос.УстановитьПараметр("СчетАмортизацииОС", ПланыСчетов.Хозрасчетный.АмортизацияЗатратНаРемонтОС);
	Запрос.УстановитьПараметр("ОсновныеСредства", ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	Данные = Запрос.Выполнить().Выгрузить();
	Возврат Данные;
	
КонецФункции

Функция ТекстЗапросаВыбытие()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Остатки.ОсновноеСредство КАК ОсновноеСредство,
	|	Остатки.Ремонт КАК Ремонт,
	|	СУММА(Остатки.ПервоначальнаяСтоимость) КАК ПервоначальнаяСтоимость,
	|	СУММА(Остатки.СуммаАмортизации) КАК СуммаАмортизации
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки01.Субконто1 КАК ОсновноеСредство,
	|		Остатки01.Субконто2 КАК Ремонт,
	|		Остатки01.СуммаОстатокДт КАК ПервоначальнаяСтоимость,
	|		0 КАК СуммаАмортизации
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&МоментВыбытия,
	|				Счет = &СчетУчетаОС,
	|				&ВидыСубконтоОСРемонты,
	|				Организация = &Организация
	|					И Субконто1 В (&ОсновныеСредства)) КАК Остатки01
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Остатки02.Субконто1,
	|		Остатки02.Субконто2,
	|		0,
	|		Остатки02.СуммаОстатокКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&МоментВыбытия,
	|				Счет = &СчетАмортизацииОС,
	|				&ВидыСубконтоОСРемонты,
	|				Организация = &Организация
	|					И Субконто1 В (&ОсновныеСредства)) КАК Остатки02) КАК Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ОсновноеСредство,
	|	Остатки.Ремонт
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.ПервоначальнаяСтоимость) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Ремонт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Местонахождения.ОсновноеСредство КАК ОсновноеСредство,
	|	Местонахождения.Местонахождение КАК Местонахождение
	|ПОМЕСТИТЬ Местонахождения
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&МоментВыбытия,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Остатки.ОсновноеСредство
	|					ИЗ
	|						Остатки КАК Остатки)) КАК Местонахождения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ОсновноеСредство КАК ОсновноеСредство,
	|	Остатки.ОсновноеСредство.АмортизационнаяГруппа КАК АмортизационнаяГруппаОС,
	|	Остатки.Ремонт КАК Ремонт,
	|	Остатки.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	Остатки.СуммаАмортизации КАК СуммаАмортизации,
	|	ЕСТЬNULL(Местонахождения.Местонахождение, НЕОПРЕДЕЛЕНО) КАК Местонахождение
	|ИЗ
	|	Остатки КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Местонахождения КАК Местонахождения
	|		ПО Остатки.ОсновноеСредство = Местонахождения.ОсновноеСредство";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВыбытиеСтарыхРемонтов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	Остатки.ОсновноеСредство КАК ОсновноеСредство,
	|	Остатки.Ремонт КАК Ремонт,
	|	СУММА(Остатки.ПервоначальнаяСтоимость) КАК ПервоначальнаяСтоимость,
	|	СУММА(Остатки.СуммаАмортизации) КАК СуммаАмортизации
	|ПОМЕСТИТЬ ОстаткиБУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки01.Субконто1 КАК ОсновноеСредство,
	|		Остатки01.Субконто2 КАК Ремонт,
	|		Остатки01.СуммаОстатокДт КАК ПервоначальнаяСтоимость,
	|		0 КАК СуммаАмортизации
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&МоментВыбытия,
	|				Счет = &СчетУчетаОС,
	|				&ВидыСубконтоОСРемонты,
	|				Организация = &Организация
	|					И Субконто1 В (&ОсновныеСредства)) КАК Остатки01
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Остатки02.Субконто1,
	|		Остатки02.Субконто2,
	|		0,
	|		Остатки02.СуммаОстатокКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&МоментВыбытия,
	|				Счет = &СчетАмортизацииОС,
	|				&ВидыСубконтоОСРемонты,
	|				Организация = &Организация
	|					И Субконто1 В (&ОсновныеСредства)) КАК Остатки02) КАК Остатки
	|ГДЕ
	|	Остатки.Ремонт <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Остатки.ОсновноеСредство,
	|	Остатки.Ремонт
	|
	|ИМЕЮЩИЕ
	|	СУММА(Остатки.ПервоначальнаяСтоимость) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОсновноеСредство,
	|	Ремонт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиБУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ОстаткиБУ.Ремонт КАК Ремонт,
	|	ОстаткиБУ.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ОстаткиБУ.СуммаАмортизации КАК СуммаАмортизации
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	ОстаткиБУ КАК ОстаткиБУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КапитализируемыеРемонтыОС КАК Ремонты
	|		ПО ОстаткиБУ.Организация = Ремонты.Организация
	|			И ОстаткиБУ.ОсновноеСредство = Ремонты.ОсновноеСредство
	|			И ОстаткиБУ.Ремонт = Ремонты.Ремонт
	|ГДЕ
	|	Ремонты.ВидРемонта = &ВидРемонта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Местонахождения.ОсновноеСредство КАК ОсновноеСредство,
	|	Местонахождения.Местонахождение КАК Местонахождение
	|ПОМЕСТИТЬ Местонахождения
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&МоментВыбытия,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						Остатки.ОсновноеСредство
	|					ИЗ
	|						Остатки КАК Остатки)) КАК Местонахождения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ОсновноеСредство КАК ОсновноеСредство,
	|	Остатки.ОсновноеСредство.АмортизационнаяГруппа КАК АмортизационнаяГруппаОС,
	|	Остатки.Ремонт КАК Ремонт,
	|	Остатки.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	Остатки.СуммаАмортизации КАК СуммаАмортизации,
	|	ЕСТЬNULL(Местонахождения.Местонахождение, НЕОПРЕДЕЛЕНО) КАК Местонахождение
	|ИЗ
	|	Остатки КАК Остатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Местонахождения КАК Местонахождения
	|		ПО Остатки.ОсновноеСредство = Местонахождения.ОсновноеСредство";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция НовыйТаблицаВыбытие()
	
	ОписаниеТипаСумма = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Результат.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Результат.Колонки.Добавить("Ремонт", Метаданные.ОпределяемыеТипы.ДокументыРемонтаОС.Тип);
	Результат.Колонки.Добавить("ПервоначальнаяСтоимость", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("СуммаАмортизации", ОписаниеТипаСумма);
	Результат.Колонки.Добавить("СчетВыбытия", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Результат.Колонки.Добавить("Субконто1", Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип);
	
	Возврат Результат;
	
КонецФункции

Процедура СформироватьПроводкиВыбытие(ТаблицаВыбытие, Реквизиты, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаВыбытие) Тогда
		Возврат;
	КонецЕсли;
	
	Счет01 = ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтОС;
	СвойстваСчета01 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет01);
	Счет02 = ПланыСчетов.Хозрасчетный.АмортизацияЗатратНаРемонтОС;
	СвойстваСчета02 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет02);
	СодержаниеПроводок = Реквизиты.Содержание;
	
	Для каждого СтрокаВыбытие Из ТаблицаВыбытие Цикл
		
		// Проводка Дт 02.05 Кт 01.05
		
		Если СтрокаВыбытие.СуммаАмортизации <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = СодержаниеПроводок;
			
			Проводка.СчетДт = Счет02;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаВыбытие.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетДт, Проводка.СубконтоДт, "РемонтыОС", СтрокаВыбытие.Ремонт);
			
			Если СвойстваСчета02.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаВыбытие.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = Счет01;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаВыбытие.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "РемонтыОС", СтрокаВыбытие.Ремонт);
			
			Если СвойстваСчета01.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаВыбытие.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = СтрокаВыбытие.СуммаАмортизации;
			
		КонецЕсли;
		
		Если Реквизиты.ЗавершениеРемонта Тогда
			Продолжить;
		КонецЕсли;
		
		// Проводка Дт <Счет выбытия> Кт 01.05 - если затраты не полностью самортизированы.
		
		ОстаточнаяСтоимость = СтрокаВыбытие.ПервоначальнаяСтоимость - СтрокаВыбытие.СуммаАмортизации;
		Если ОстаточнаяСтоимость <> 0 Тогда
			
			Проводка = Движения.Хозрасчетный.Добавить();
			
			Проводка.Период = Реквизиты.Период;
			Проводка.Организация = Реквизиты.Организация;
			Проводка.Содержание = СодержаниеПроводок;
			
			Проводка.СчетДт = СтрокаВыбытие.СчетВыбытия;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтрокаВыбытие.Субконто1);
			
			СвойстваСчетаВыбытия = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаВыбытие.СчетВыбытия);
			Для Номер = 1 По СвойстваСчетаВыбытия.КоличествоСубконто Цикл
				ТипыСубконто = СвойстваСчетаВыбытия["ВидСубконто" + Номер + "ТипЗначения"];
				Если ЗначениеЗаполнено(ТипыСубконто.ПривестиЗначение(СтрокаВыбытие.ОсновноеСредство)) Тогда
					БухгалтерскийУчет.УстановитьСубконто(
						Проводка.СчетДт, Проводка.СубконтоДт, Номер, СтрокаВыбытие.ОсновноеСредство);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СвойстваСчетаВыбытия.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеДт = СтрокаВыбытие.Подразделение;
			КонецЕсли;
			
			Проводка.СчетКт = Счет01;
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаВыбытие.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(
				Проводка.СчетКт, Проводка.СубконтоКт, "РемонтыОС", СтрокаВыбытие.Ремонт);
			
			Если СвойстваСчета01.УчетПоПодразделениям Тогда
				Проводка.ПодразделениеКт = СтрокаВыбытие.Подразделение;
			КонецЕсли;
			
			Проводка.Сумма = ОстаточнаяСтоимость;
			
			Если СвойстваСчетаВыбытия.НалоговыйУчет Тогда
				Проводка.СуммаВРДт = ОстаточнаяСтоимость;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПеремещениеСлужебные

Процедура СформироватьПроводкиПеремещение(ТаблицаВыбытие, Реквизиты, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаВыбытие) Тогда
		Возврат;
	КонецЕсли;
	
	Счет01 = ПланыСчетов.Хозрасчетный.ЗатратыНаРемонтОС;
	СвойстваСчета01 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет01);
	Счет02 = ПланыСчетов.Хозрасчетный.АмортизацияЗатратНаРемонтОС;
	СвойстваСчета02 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет02);
	СодержаниеПроводок = Реквизиты.Содержание;
	
	Для каждого СтрокаВыбытие Из ТаблицаВыбытие Цикл
		
		// Проводка Дт 01.05 Получатель Кт 01.05 Отправитель 
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = СодержаниеПроводок;
		
		Проводка.СчетДт = Счет01;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаВыбытие.ОсновноеСредство);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "РемонтыОС", СтрокаВыбытие.Ремонт);
		
		Если СвойстваСчета01.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.ПодразделениеПолучатель;
		КонецЕсли;
		
		Проводка.СчетКт = Счет01;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаВыбытие.ОсновноеСредство);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "РемонтыОС", СтрокаВыбытие.Ремонт);
		
		Если СвойстваСчета01.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаВыбытие.Подразделение;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаВыбытие.ПервоначальнаяСтоимость;
		
		// Проводка Дт 02.05 Отправитель Кт 02.05 Получатель
		
		Если СтрокаВыбытие.СуммаАмортизации = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = СодержаниеПроводок;
		
		Проводка.СчетДт = Счет02;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаВыбытие.ОсновноеСредство);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "РемонтыОС", СтрокаВыбытие.Ремонт);
		
		Если СвойстваСчета02.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = СтрокаВыбытие.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = Счет02;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаВыбытие.ОсновноеСредство);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "РемонтыОС", СтрокаВыбытие.Ремонт);
		
		Если СвойстваСчета02.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.ПодразделениеПолучатель;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаВыбытие.СуммаАмортизации;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область МатериалыСлужебные

Процедура СформироватьПроводкиОприходованиеМатериалов(ТаблицаМатериалы, ТаблицаРеквизиты, Движения, Отказ)
	
	Если Не ЗначениеЗаполнено(ТаблицаМатериалы) Тогда
		Возврат;
	КонецЕсли;
	
	Счет23 = ПланыСчетов.Хозрасчетный.ВыполнениеРемонтовОС;
	СвойстваСчета23 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет23);
	Реквизиты = ТаблицаРеквизиты[0];
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	СодержаниеПроводок = НСтр("ru='Оприходование материалов от ремонта ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Для каждого СтрокаМатериала Из ТаблицаМатериалы Цикл
		
		// Проводка Дт 23.05 Кт <Счет учета> - бухгалтерский учет, сторно-проводка
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = СодержаниеПроводок;
		
		Проводка.СчетДт = Счет23;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаМатериала.ОсновноеСредство);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "ВидыРемонтовОС", Реквизиты.ВидРемонта);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат", СтрокаМатериала.СтатьяЗатрат);
		
		Если СвойстваСчета23.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчета23.НалоговыйУчет Тогда
			Проводка.СуммаВРДт = - СтрокаМатериала.Сумма;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаМатериала.СчетУчета;
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаМатериала.СчетУчета);
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаМатериала.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Реквизиты.Склад);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Реквизиты.Регистратор);
		
		Если СвойстваСчетаКт.Количественный Тогда
			Проводка.КоличествоКт = - СтрокаМатериала.Количество;
		КонецЕсли;
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.НалоговыйУчет Тогда
			Проводка.СуммаВРКт = - СтрокаМатериала.Сумма;
		КонецЕсли;
		
		Проводка.Сумма = - СтрокаМатериала.Сумма;
		
		Если Не ПлательщикНалогаНаПрибыль Тогда
			Продолжить;
		КонецЕсли;
		
		// Проводка Дт <Счет учета> Кт 91.01 - налоговый учет, только суммы, без количества
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = СодержаниеПроводок;
		
		Проводка.СчетДт = СтрокаМатериала.СчетУчета;
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаМатериала.СчетУчета);
		
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаМатериала.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Склады", Реквизиты.Склад);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Партии", Реквизиты.Регистратор);
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаДт.НалоговыйУчет Тогда
			Проводка.СуммаНУДт = СтрокаМатериала.Сумма;
			Проводка.СуммаВРДт = - СтрокаМатериала.Сумма;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаМатериала.СчетДоходов;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, 1, СтрокаМатериала.СубконтоДоходов1);
		
		СвойстваСчетаДоходов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаМатериала.СчетДоходов);
		Для Номер = 1 По СвойстваСчетаДоходов.КоличествоСубконто Цикл
			ТипыСубконто = СвойстваСчетаДоходов["ВидСубконто" + Номер + "ТипЗначения"];
			Если ЗначениеЗаполнено(ТипыСубконто.ПривестиЗначение(СтрокаМатериала.ОсновноеСредство)) Тогда
				БухгалтерскийУчет.УстановитьСубконто(
					Проводка.СчетКт, Проводка.СубконтоКт, Номер, СтрокаМатериала.ОсновноеСредство);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СвойстваСчетаДоходов.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаДоходов.НалоговыйУчет Тогда
			Проводка.СуммаНУКт = СтрокаМатериала.Сумма;
			Проводка.СуммаВРКт = - СтрокаМатериала.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВводНачальныхОстатковСлужебные

Функция СоздатьЗавершениеРемонтаПриВводеОстатков(Дата, Организация, ПодразделениеОрганизации, ВидРемонта, Отказ)
	
	ДокументОбъект = Документы.ЗавершениеРемонтаОС.СоздатьДокумент();
	ДокументОбъект.Дата = Дата;
	ДокументОбъект.Организация = Организация;
	ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
	ДокументОбъект.ВидРемонта = ВидРемонта;
	ДокументОбъект.СозданПриВводеНачальныхОстатков = Истина;
	ДокументОбъект.Комментарий = НСтр("ru='<Создан автоматически при вводе начальных остатков>'");
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Возврат ДокументОбъект.Ссылка;
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось создать документ завершения ремонта вида ""%1""'"), ВидРемонта);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , "Объект", Отказ);
		Возврат Документы.ЗавершениеРемонтаОС.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область ПравилаРаспределенияСлужебные

Процедура ДобавитьПравилоВыделитьКапитализируемыеРемонтыОС(Процессор)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС  Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ПравилаРаспределенияРасходов.ДобавитьПравилоРаспределения(Процессор, "ВыделитьКапитализируемыеРемонтыОС", "РаспределитьНаРасходы");
	
	Правило.Наименование = НСтр("ru = 'Идентифицировать затраты капитализируемых видов ремонтов.'");
	
	// Поля источника
	Правило.ПоляИсточника.Вставить("ВидРемонтаОС",     "ВидРемонтаОС");
	
	// Поля приемника
	Правило.ПоляПриемника.Вставить("ЭтапРаспределения");
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("ИмяЭтапаКапитализируемыеЗатратыРемонтОС", ИмяЭтапаКапитализируемыеЗатратыРемонтОС());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВидыРемонтовОС.Ссылка КАК ВидРемонтаОС,
	|	&ИмяЭтапаКапитализируемыеЗатратыРемонтОС КАК ЭтапРаспределения,
	|	1 КАК База
	|ИЗ
	|	Справочник.ВидыРемонтовОС КАК ВидыРемонтовОС
	|ГДЕ
	|	ВидыРемонтовОС.ЗатратыКапитализируются";
		
	Правило.БазаРаспределения.Имя = "БазаРаспределения" + Правило.Имя;
	
	ПравилаРаспределенияРасходов.НастроитьТекстБазыРаспределения(Правило, ТекстЗапроса);

КонецПроцедуры

Функция ИмяЭтапаКапитализируемыеЗатратыРемонтОС() Экспорт
	
	Возврат "КапитализируемыеЗатратыРемонтОС";

КонецФункции

Процедура ДобавитьПравилоКапитализацияРемонтовОС(Процессор)
	
	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС  Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ПравилаРаспределенияРасходов.ДобавитьПравилоРаспределения(Процессор, "КапитализацияЗатратНаРемонтОС", "РаспределитьНаРасходы");
	
	Правило.Наименование = НСтр("ru = 'Затраты капитализируемых видов ремонтов, завершенных в текущем периоде, включаются в стоимость капитальных вложений.'");
	Правило.СодержаниеПроводки = НСтр("ru = 'Капитализируемые затраты на ремонт ОС'");
	
	Правило.ОтборРасходов.Вставить("ЭтапРаспределения", ИмяЭтапаКапитализируемыеЗатратыРемонтОС());
	
	// Поля источник
	Правило.ПоляИсточника.Вставить("ВидРемонтаОС", "ВидРемонтаОС");
	Правило.ПоляИсточника.Вставить("ОсновноеСредство", "ОсновноеСредство");
	
	// Поля приемника
	Правило.ПоляПриемника.Вставить("Счет");
	Правило.ПоляПриемника.Вставить("Подразделение");
	Правило.ПоляПриемника.Вставить("ЭтапРаспределения");
	
	ДобавитьОписаниеВременнойТаблицыЗавершениеРемонтовОС(Правило.БазаРаспределения);
	
	Правило.БазаРаспределения.ПараметрыЗапроса.Вставить("СчетРезультата", ПланыСчетов.Хозрасчетный.ВложенияВРемонтыОсновныхСредств);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&СчетРезультата КАК Счет,
	|	ЗавершениеРемонтовОС.Подразделение КАК Подразделение,
	|	ЗавершениеРемонтовОС.ВидРемонтаОС КАК ВидРемонтаОС,
	|	ЗавершениеРемонтовОС.ОсновноеСредство КАК ОсновноеСредство,
	|	"""" КАК ЭтапРаспределения
	|ИЗ
	|	ЗавершениеРемонтовОС КАК ЗавершениеРемонтовОС";
		
	Правило.БазаРаспределения.Имя = "БазаРаспределения" + Правило.Имя;
	
	ПравилаРаспределенияРасходов.НастроитьТекстБазыРаспределения(Правило, ТекстЗапроса);

КонецПроцедуры

Процедура ДобавитьПравилоНезавершенноеПроизводствоРемонтыОС(Процессор)

	Если Процессор.Закрытие.Роль <> Перечисления.РолиСчетовЗатрат.КалькуляцияСтоимостиРемонтовОС Тогда
		Возврат;
	КонецЕсли;
	
	Правило = ПравилаРаспределенияРасходов.ДобавитьПравилоРаспределения(
		Процессор, "НезавершенноеПроизводствоРемонтыОСЗафиксировать", "Зафиксировать");
	
	Правило.Наименование = НСтр(
		"ru = 'До появления документов о завершении ремонтов, затраты на капитализируемые ремонты включаются в стоимость незавершенного производства'");
	
	Правило.ОтборРасходов.Вставить("ЭтапРаспределения", ИмяЭтапаКапитализируемыеЗатратыРемонтОС());
	
КонецПроцедуры

Процедура ДобавитьОписаниеВременнойТаблицыЗавершениеРемонтовОС(ОписаниеБазы)
	
	ПакетВременныхТаблиц = ПравилаРаспределенияРасходов.ДобавитьПакетВременныхТаблиц(ОписаниеБазы, "ЗавершениеРемонтовОС");
	
	ПакетВременныхТаблиц.ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗавершениеРемонтаОС.Организация КАК Организация,
	|	ЗавершениеРемонтаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ЗавершениеРемонтаОС.ВидРемонта КАК ВидРемонтаОС,
	|	ЗавершениеРемонтаОС.Ремонт КАК РемонтОсновногоСредства
	|ПОМЕСТИТЬ ВТ_ЗавершениеРемонтов
	|ИЗ
	|	РегистрСведений.КапитализируемыеРемонтыОС КАК ЗавершениеРемонтаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРемонтовОС КАК ВидыРемонтовОС
	|		ПО ЗавершениеРемонтаОС.ВидРемонта = ВидыРемонтовОС.Ссылка
	|ГДЕ
	|	ЗавершениеРемонтаОС.Организация = &Организация
	|	И ЗавершениеРемонтаОС.ДатаПризнания МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВидыРемонтовОС.ЗатратыКапитализируются
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК Подразделение
	|ПОМЕСТИТЬ ВТ_МестонахождениеОсновныхСредств
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			&КонецПериода,
	|			(Организация, ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					ВТ_ЗавершениеРемонтов.Организация,
	|					ВТ_ЗавершениеРемонтов.ОсновноеСредство
	|				ИЗ
	|					ВТ_ЗавершениеРемонтов КАК ВТ_ЗавершениеРемонтов)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОсновныхСредств.Подразделение КАК Подразделение,
	|	ЗавершениеРемонтов.ВидРемонтаОС КАК ВидРемонтаОС,
	|	ЗавершениеРемонтов.ОсновноеСредство КАК ОсновноеСредство,
	|	ЗавершениеРемонтов.РемонтОсновногоСредства КАК РемонтОсновногоСредства
	|ПОМЕСТИТЬ ЗавершениеРемонтовОС
	|ИЗ
	|	ВТ_ЗавершениеРемонтов КАК ЗавершениеРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МестонахождениеОсновныхСредств КАК МестонахождениеОсновныхСредств
	|		ПО ЗавершениеРемонтов.Организация = МестонахождениеОсновныхСредств.Организация
	|			И ЗавершениеРемонтов.ОсновноеСредство = МестонахождениеОсновныхСредств.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ЗавершениеРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_МестонахождениеОсновныхСредств";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

