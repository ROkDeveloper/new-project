// Модуль реализует алгоритм пересчета амортизации с начала года,
// выполняемый при закрытии года без повторного закрытия предыдущих месяцев.
// Методика основана на рекомендации БМЦ Р-6/2009-КпР 
// "Изменение срока полезного использования основных средств в течение эксплуатации" - 
// см. http://bmcenter.ru/Files/P91

// Алгоритм поставляется в составе версии КОРП, содержимое модуля отличается в версии КОРП и версии ПРОФ
// В версии ПРОФ отсутствует:
// - тело экспортных процедур (остаются только сигнатуры методов)
// - неэкспортные процедуры и все функции.
// Поэтому не допускается реализация в модуле экспортных функций: вместо них следует использовать процедуры с возвращаемым параметром.

#Область ПрограммныйИнтерфейс

// Проверяет, доступна (включена) ли функциональность, реализованная в модуле.
//
// Параметры:
//  Доступна - Булево - (возвращаемый) Истина, если доступна
//
Процедура ОпределитьФункциональностьДоступна(Доступна) Экспорт
	
	Доступна = ФункциональностьДоступна();
	
КонецПроцедуры

// Пересчитывает в бухгалтерском учете амортизацию с начала года с учетом изменений элементов амортизации,
// выполненных при подготовке финансовой отчетности и вызванных накоплением информации в течение года.
//
// Метод выполняет расчеты, но не записывает результат в информационную базу.
// Для записи можно использовать механику модуля УчетОС, ее дополнение для задач пересчета - 
// в ИнициализироватьЗаписиАмортизации и ДобавитьЗаписиАмортизации.
//
// Параметры:
//  Результат   - НовыйПроцессорПересчетаАмортизации - (возвращаемый) 
//                   Управляющая коллекция, содержащая результат и протокол расчета.
//              - Неопределено - пересчет не требуется
//  Год         - Дата - любая дата, характеризующая отчетный год
//  Организация - СправочникСсылка.Организация
// 
Процедура ПересчитатьАмортизацию(Результат, Год, Организация) Экспорт
	
	АлгоритмПериодаАмортизации =
		РегистрыСведений.УчетнаяПолитика.АлгоритмПериодаАмортизацииУчетнойПолитики(Организация, Год);
	
	Если Не ЗначениеЗаполнено(АлгоритмПериодаАмортизации) Тогда
		Возврат;
	КонецЕсли;
	
	ПересмотрЭлементовАмортизации = ПересмотрЭлементовАмортизации(Год, Организация);
	
	Если Не ЗначениеЗаполнено(ПересмотрЭлементовАмортизации) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = НовыйПроцессорПересчетаАмортизации(Организация, АлгоритмПериодаАмортизации);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.ОсновныеСредства, ПересмотрЭлементовАмортизации);
	
	// Пересчитываем все месяцы, кроме последнего
	ПоследнийМесяцГода = Дата(Год(Год), 12, 1);
	МесяцРасчета = НачалоГода(Год);
	Пока МесяцРасчета < ПоследнийМесяцГода Цикл
		
		Результат.МесяцРасчета = МесяцРасчета;
		ПересчитатьАмортизациюЗаМесяц(Результат);
		МесяцРасчета = ДобавитьМесяц(МесяцРасчета, 1);
		
	КонецЦикла;
	
КонецПроцедуры

// Обеспечивает в коллекции записей амортизации, используемой для формирования проводок по начислению амортизации,
// колонки для хранения данных, необходимых модулю.
// Следует вызвать из конструктора этой коллекции.
//
// Параметры:
//  ЗаписиАмортизации - УчетОС.ПолучитьПустуюТаблицуАмортизацииОС
//
Процедура ИнициализироватьЗаписиАмортизации(ЗаписиАмортизации) Экспорт
	
	Если Не ФункциональностьДоступна() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписиАмортизации.Колонки.Добавить("КорректируемыйПериод", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
КонецПроцедуры

// Готовит данные для формирования механизмами модуля УчетОС проводок по пересчету амортизации.
//
// Параметры:
//  ЗаписиАмортизации        - УчетОС.ПолучитьПустуюТаблицуАмортизацииОС - дополняемая коллекция
//  ПересчетЗаГод            - НовыйПроцессорПересчетаАмортизации, Неопределено - результат ПересчитатьАмортизацию
//  СведенияОС               - ВыборкаИзРезультатаЗапроса, Структура, СтрокаТаблицыЗначений - базовые данные об основном средстве,
//                             состав сведений см. в УчетОС.ДобавитьЗаписьАмортизации
//  СчетЗатрат               - ПланСчетовСсылка.Хозрасчетный - счет, в дебет которого относятся суммы амортизации
//  ДанныеПостоянныхРазниц   - УчетОС.НовыйРасчетПостоянныхРазниц, Неопределено - содержит балансовые данные,
//                             на основе которых рассчитываются постоянные разницы
//  Регистратор              - ДокументСсылка.РегламентнаяОперация - регистратор проводок
//
Процедура ДобавитьЗаписиАмортизации(ЗаписиАмортизации, ПересчетЗаГод, СведенияОС, СчетЗатрат, ДанныеПостоянныхРазниц, Регистратор) Экспорт
	
	Если ПересчетЗаГод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчетПоОбъекту = ПересчетЗаГод.Результат[СведенияОС.ОсновноеСредство];
	Если ПересчетПоОбъекту = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсеРазницыПостоянные = Ложь;
	Если ДанныеПостоянныхРазниц <> Неопределено Тогда
		// Постоянные разницы выделяем исключительно в случае, описанном в Рекомендации БМЦ Р-123 как допустимый.
		// Это связано с тем, что в остальных случаях:
		// 1. для более точного расчета разниц нужно анализировать данные за год в целом,
		//  так как начисление амортизации получается растянутым по времени - часть амортизации, например, за январь,
		//  отражена в январе, а часть - в декабре
		//  То есть, недостаточно контролировать ПР и ВР в балансовой стоимости на период расчета,
		//  нужно пересчитывать и контролировать их на каждый из месяцев.
		//  Для этого нужен нетривиальный, многопроходный алгоритм.
		// 2. вероятность получить практическую пользу мала: заметной проблема будет,
		//  разве что, при таком изменении срока, что к концу года стоимость основного средства окажется
		//  погашенной и в БУ и в НУ. Однако, к этому моменту ПР в стоимости объекта уже не должно быть,
		//  в том числе, и в случаях, "запрещенных" Р-123.
		ВсеРазницыПостоянные = (ДанныеПостоянныхРазниц.ОстатокПР <> 0) И (ДанныеПостоянныхРазниц.ОстатокВР = 0);
	КонецЕсли;
	
	Для Каждого ЗаписьПересчета Из ПересчетПоОбъекту Цикл
	
		СтрокаАмортизации = УчетОС.ДобавитьЗаписьАмортизации(ЗаписиАмортизации, СведенияОС, СчетЗатрат);
	
		СтрокаАмортизации.СуммаАмортизацииБУ   = ЗаписьПересчета.ОценкаСтоимости.СуммаПроводки;
		СтрокаАмортизации.СодержаниеОперации   = СодержаниеПроводки(ЗаписьПересчета);
		СтрокаАмортизации.КорректируемыйПериод = ЗаписьПересчета.Месяц;
		
		Если ВсеРазницыПостоянные Тогда
			СтрокаАмортизации.СуммаАмортизацииПР = СтрокаАмортизации.СуммаАмортизацииБУ;
		Иначе
			СтрокаАмортизации.СуммаАмортизацииВР = СтрокаАмортизации.СуммаАмортизацииБУ;
		КонецЕсли;
		
		ЗаписатьПротоколПересчета(ЗаписьПересчета, Регистратор);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает счет и аналитику, в дебет которого относятся корректировки амортизации при пересчете амортизации.
//
// Параметры:
//  ЗаписьАналитикиЗатрат - СтрокаТаблицыЗначений - строка в ТаблицаЗатрат,
//                          создаваемой в ПодготовитьТаблицуРаспределениеАмортизацииПоНаправлениямРегл.
//                          До вызова метода должна содержать значения аналитики Дт регулярной проводки начисления амортизации,
//                          после - аналитики корректировочной проводки
//  ЗаписьАмортизации     - СтрокаТаблицыЗначений - строка таблицы с рассчитанной амортизацией;
//                          см. ИнициализироватьЗаписиАмортизации
//  Кеш                   - Неопределено, Структура - переменная, с областью видимости,
//                          в которой обрабатываются все строки ЗаписьАмортизации,
//                          инициализированная значением Неопределено
//
Процедура УстановитьАналитикуЗатрат(ЗаписьАналитикиЗатрат, ЗаписьАмортизации, Кеш = Неопределено) Экспорт
	
	// Так как распределение корректировки амортизации между запасами и расходами периода
	// трудоемко, идем на упрощение: все суммы корректировки относим на расходы периода.
	// Для этого подменяем счет затрат на счет финансового результата.
	
	Если Не ПересчетАмортизацииВозможен(ЗаписьАмортизации, Кеш) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаписьАмортизации.КорректируемыйПериод) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоСчетФинансовогоРезультата(ЗаписьАналитикиЗатрат.СчетЗатрат) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Определяем новый счет (расходов)
	// Для простоты не выделяем расходы, относящиеся к особому порядку налогообложения
	
	Если БухгалтерскийУчетПовтИсп.СчетВИерархии(ЗаписьАналитикиЗатрат.СчетЗатрат, ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы) Тогда
		СчетРасходов = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД;
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(ЗаписьАналитикиЗатрат.СчетЗатрат, ПланыСчетов.Хозрасчетный.РасходыНаПродажу) Тогда
		СчетРасходов = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД;
	Иначе
		СчетРасходов = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
	КонецЕсли;
	
	// 2. Извлекаем аналитику из коллекции с нерегулярными именами
	СчетИСубконто = Кеш.СчетИСубконто;
	ЗаполнитьЗначенияСвойств(СчетИСубконто, ЗаписьАналитикиЗатрат);
	СчетИСубконто.Счет          = ЗаписьАналитикиЗатрат.СчетЗатрат;
	СчетИСубконто.Подразделение = ЗаписьАналитикиЗатрат.ПодразделениеЗатрат;
	
	АналитикаЗатрат = УчетЗатрат.АналитикаЗатратПоСчетуИСубконто(СчетИСубконто);
	
	// 3. Определяем аналитику расходов:
	// - где возможно, наследуем аналитику затрат
	// - устанавливаем элемент затрат
	АналитикаЗатрат.Вставить(
		УчетЗатрат.РазрезАналитикиСчет(),
		СчетРасходов);
	АналитикаЗатрат.Вставить(
		ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЭлементыЗатрат,
		Перечисления.ЭлементыЗатрат.Амортизация);
		
	// 4. Помещаем в коллекцию с нерегулярными именами
	СчетИСубконтоРасходов = УчетЗатрат.АналитикаЗатратНомераСубконто(АналитикаЗатрат);
	
	ЗаполнитьЗначенияСвойств(ЗаписьАналитикиЗатрат, СчетИСубконтоРасходов);
	СчетИСубконтоРасходов.Свойство("Счет",          ЗаписьАналитикиЗатрат.СчетЗатрат);
	СчетИСубконтоРасходов.Свойство("Подразделение", ЗаписьАналитикиЗатрат.ПодразделениеЗатрат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФункциональностьДоступна()
	
	Возврат ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
	
КонецФункции

#Область ПересчетАмортизации

Функция НовыйКорректировкаНакопленнойАмортизации()
	
	Корректировка = Новый ТаблицаЗначений;
	Корректировка.Колонки.Добавить(
		"Объект",
		Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Корректировка.Колонки.Добавить(
		"Сумма",
		БухгалтерскийУчетКлиентСервер.ТипСумма()); // Знак - как в балансе: отрицательное значение увеличивает накопленную амортизацию
	Корректировка.Индексы.Добавить("Объект");
	Возврат Корректировка;
	
КонецФункции

Функция НовыйПроцессорПересчетаАмортизации(Организация, АлгоритмПериодаАмортизации)
	
	Процессор = Новый Структура;
	Процессор.Вставить("Организация",                Организация);
	Процессор.Вставить("АлгоритмПериодаАмортизации", АлгоритмПериодаАмортизации);
	Процессор.Вставить("МесяцРасчета",               '0001-01-01');
	Процессор.Вставить("ОсновныеСредства",           Новый Массив);
	
	Процессор.Вставить("МенеджерВременныхТаблиц",    Новый МенеджерВременныхТаблиц);
	Процессор.Вставить(
		"КорректировкаНакопленнойАмортизации",
		НовыйКорректировкаНакопленнойАмортизации());
	
	Процессор.Вставить("Протокол",  Новый Соответствие); // Ключ - Месяц, Значение - НовыйПротоколПересчетаАмортизации
	Процессор.Вставить("Результат", Новый Соответствие); // Ключ - основное средство, Значение - НовыйРезультатПересчетаАмортизацииОбъекта
	
	Возврат Процессор;
	
КонецФункции

Функция НовыйПротоколПересчетаАмортизации(ПроцессорРасчета)
	
	// Помещаем только результирующие значения, чтобы освободить ресурсы от промежуточных данных расчета
	// Типы и назначение свойств см. в НовыйПроцессорРасчетаАмортизации
	Протокол = Новый Структура("ОценкаСтоимости, Амортизация, Итоги");
	ЗаполнитьЗначенияСвойств(Протокол, ПроцессорРасчета);
	
	Возврат Протокол;
	
КонецФункции

Функция НовыйРезультатПересчетаАмортизацииОбъекта()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Месяц", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("ОценкаСтоимости"); // Ссылка на строку НовыйОценкаСтоимостиАмортизируемыхАктивов
	
	Возврат Результат;
	
КонецФункции

Функция ПересмотрЭлементовАмортизации(Год, Организация)
	
	ОсновныеСредства = Новый Массив;
	
	ПериодВводаДокумента = Документы.ИзменениеПараметровНачисленияАмортизацииОС.ПериодДоступенПересчетАмортизации(Год);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериодаВводаДокумента", ПериодВводаДокумента.Начало);
	Запрос.УстановитьПараметр("КонецПериодаВводаДокумента",  ПериодВводаДокумента.Конец);
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзменениеЭлементовАмортизации.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	Документ.ИзменениеПараметровНачисленияАмортизацииОС.ОС КАК ИзменениеЭлементовАмортизации
	|ГДЕ
	|	ИзменениеЭлементовАмортизации.Ссылка.Дата МЕЖДУ &НачалоПериодаВводаДокумента И &КонецПериодаВводаДокумента
	|	И ИзменениеЭлементовАмортизации.Ссылка.НакоплениеИнформацииЗаГод
	|	И ИзменениеЭлементовАмортизации.Ссылка.Проведен
	|	И ИзменениеЭлементовАмортизации.Ссылка.Организация = &Организация
	|	И ИзменениеЭлементовАмортизации.Ссылка.ОтражатьВБухгалтерскомУчете";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОсновныеСредства.Добавить(Выборка.ОсновноеСредство);
	КонецЦикла;
	
	Возврат ОсновныеСредства;
	
КонецФункции

Процедура ПересчитатьАмортизациюЗаМесяц(Процессор)
	
	ЭтоПоследнийМесяцГода = (КонецМесяца(Процессор.МесяцРасчета) = КонецГода(Процессор.МесяцРасчета));
	Если ЭтоПоследнийМесяцГода Тогда
		Возврат;
	КонецЕсли;
		
	РасчетЗаМесяц = АмортизацияАктивов.РассчитатьАмортизацию(
		Тип("СправочникСсылка.ОсновныеСредства"),
		КонецМесяца(Процессор.МесяцРасчета),
		Процессор.Организация,
		Процессор.ОсновныеСредства,
		Процессор.АлгоритмПериодаАмортизации,
		Процессор.КорректировкаНакопленнойАмортизации);
		
	ПротоколРасчетаЗаМесяц = НовыйПротоколПересчетаАмортизации(РасчетЗаМесяц);
	Процессор.Протокол.Вставить(Процессор.МесяцРасчета, ПротоколРасчетаЗаМесяц);
	
	Для Каждого ЗаписьОценкаСтоимости Из ПротоколРасчетаЗаМесяц.ОценкаСтоимости Цикл
		
		КорректировкаБалансовойСтоимости = ЗаписьОценкаСтоимости.АмортизацияПредварительная - ЗаписьОценкаСтоимости.Амортизация;
		Если КорректировкаБалансовойСтоимости = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьОценкаСтоимости.СуммаПроводки = - КорректировкаБалансовойСтоимости;
		
		ДополнитьРезультатПересчетаАмортизации(Процессор, ЗаписьОценкаСтоимости);
		ОбновитьКорректировкаНакопленнойАмортизации(
			Процессор,
			ЗаписьОценкаСтоимости.Объект,
			КорректировкаБалансовойСтоимости);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКорректировкаНакопленнойАмортизации(Процессор, Объект, КорректировкаБалансовойСтоимости)
	
	ЗаписьОбъект = Процессор.КорректировкаНакопленнойАмортизации.Найти(
		Объект,
		"Объект");
		
	Если ЗаписьОбъект = Неопределено Тогда
		ЗаписьОбъект = Процессор.КорректировкаНакопленнойАмортизации.Добавить();
		ЗаписьОбъект.Объект = Объект;
	КонецЕсли;
	
	ЗаписьОбъект.Сумма = ЗаписьОбъект.Сумма + КорректировкаБалансовойСтоимости;
	
КонецПроцедуры

Процедура ДополнитьРезультатПересчетаАмортизации(Процессор, ЗаписьОценкаСтоимости)
	
	РезультатыПересчетаОбъекта = Процессор.Результат[ЗаписьОценкаСтоимости.Объект];
	Если РезультатыПересчетаОбъекта = Неопределено Тогда
		РезультатыПересчетаОбъекта = НовыйРезультатПересчетаАмортизацииОбъекта();
		Процессор.Результат.Вставить(ЗаписьОценкаСтоимости.Объект, РезультатыПересчетаОбъекта);
	КонецЕсли;
	
	ЗаписьРезультат = РезультатыПересчетаОбъекта.Добавить();
	ЗаписьРезультат.Месяц = Процессор.МесяцРасчета;
	ЗаписьРезультат.ОценкаСтоимости = ЗаписьОценкаСтоимости;
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаПроводок

Функция ПересчетАмортизацииВозможен(ЗаписьАмортизации, Кеш)
	
	Если Кеш = Неопределено Тогда
		
		Кеш = Новый Структура;
		Кеш.Вставить("ПересчетАмортизацииВозможен", Ложь);
		
		Если ФункциональностьДоступна()
			И ЗаписьАмортизации.Владелец().Колонки.Найти("КорректируемыйПериод") <> Неопределено Тогда
			Кеш.ПересчетАмортизацииВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Кеш.ПересчетАмортизацииВозможен Тогда
		Кеш.Вставить("СчетИСубконто", Новый Структура);
		Кеш.СчетИСубконто.Вставить("Счет",          ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		Кеш.СчетИСубконто.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
		Для НомерСубконто = 1 По БухгалтерскийУчет.МаксимальноеКоличествоСубконто() Цикл
			Кеш.СчетИСубконто.Вставить(СтрШаблон("Субконто%1", XMLСтрока(НомерСубконто)));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Кеш.ПересчетАмортизацииВозможен;
	
КонецФункции

Функция СодержаниеПроводки(Запись)
	
	Шаблон = НСтр(
		"ru = 'Пересчет амортизации за %1 в связи с пересмотром элементов амортизации в течение года'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	ПредставлениеПериода = НРег(Формат(Запись.Месяц, "Л=ru; ДФ='MMMM yyyy'"));
	
	Возврат СтрШаблон(Шаблон, ПредставлениеПериода);
	
КонецФункции

Функция ЭтоСчетФинансовогоРезультата(Счет)
	
	Возврат БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.Продажи)
		Или БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)
		Или БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ПрибылиИУбытки)
		Или БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.ДобавочныйКапитал)
		Или БухгалтерскийУчетПовтИсп.СчетВИерархии(Счет, ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыль);
		
КонецФункции

Процедура ЗаписатьПротоколПересчета(ЗаписьПересчета, Регистратор)
	
	// Записываем в ЖР JSON-представление записи пересчета
	
	ЗаписьПротокола = НовыйЗаписьПротоколаПересчета();
	
	ЗаписьПротокола.Месяц = ЗаписьПересчета.Месяц;
	ЗаписьПротокола.ОсновноеСредствоПредставление = Строка(ЗаписьПересчета.ОценкаСтоимости.Объект);
	ЗаписьПротокола.ОсновноеСредствоИдентификатор = XMLСтрока(ЗаписьПересчета.ОценкаСтоимости.Объект);
	
	ЗаполнитьЗначенияСвойств(ЗаписьПротокола.ОценкаСтоимости, ЗаписьПересчета.ОценкаСтоимости, , "РасчетАмортизации");
	
	ЗаписьПротокола.ОценкаСтоимости.СпособАмортизации = XMLСтрока(ЗаписьПересчета.ОценкаСтоимости.СпособАмортизации);
	
	Для Каждого РасчетАмортизации Из ЗаписьПересчета.ОценкаСтоимости.РасчетАмортизации Цикл
		
		ЗаписьАмортизации = НовыйЗаписьПротоколаРасчетаАмортизации();
		ЗаполнитьЗначенияСвойств(ЗаписьАмортизации, РасчетАмортизации);
		ЗаписьПротокола.ОценкаСтоимости.РасчетАмортизации.Добавить(ЗаписьАмортизации);
		
	КонецЦикла;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	ЗаписьПротоколаJSON = ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(ЗаписьПротокола, ПараметрыЗаписиJSON);
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Документы.РегламентнаяОперация,
		Регистратор,
		ЗаписьПротоколаJSON);
	
КонецПроцедуры

Функция ИмяСобытияЖурналаРегистрации()
	
	ПредставлениеВидаОперации = Строка(Перечисления.ВидыРегламентныхОпераций.АмортизацияИИзносОС);
	ОбщееСобытие = ЗакрытиеМесяцаКлиентСервер.СобытиеЖурналаРегистрации(ПредставлениеВидаОперации);
	
	Шаблон = НСтр(
		"ru = '%1.Пересчет корректировки амортизации за год'",
		ОбщегоНазначения.КодОсновногоЯзыка());
		
	Возврат СтрШаблон(Шаблон, ОбщееСобытие);
	
КонецФункции

Функция НовыйЗаписьПротоколаПересчета()
	
	// Для представления в JSON
	
	Запись = Новый Структура;
	Запись.Вставить("ОсновноеСредствоПредставление", "");
	Запись.Вставить("ОсновноеСредствоИдентификатор", "");
	Запись.Вставить("Месяц",                         '0001-01-01');
	
	Запись.Вставить("ОценкаСтоимости", Новый Структура);
	Запись.ОценкаСтоимости.Вставить("Амортизация",                0);
	Запись.ОценкаСтоимости.Вставить("АмортизацияПредварительная", 0);
	Запись.ОценкаСтоимости.Вставить("АмортизируемаяВеличина",     0);
	Запись.ОценкаСтоимости.Вставить("БалансоваяСтоимость",        0);
	Запись.ОценкаСтоимости.Вставить("ЗатратыВсего",               0);
	Запись.ОценкаСтоимости.Вставить("ЛиквидационнаяСтоимость",    0);
	Запись.ОценкаСтоимости.Вставить("СпособАмортизации",          "");// Имя
	Запись.ОценкаСтоимости.Вставить("РасчетАмортизации",          Новый Массив); // Из НовыйЗаписьПротоколаРасчетаАмортизации
	
	Возврат Запись;
	
КонецФункции

Функция НовыйЗаписьПротоколаРасчетаАмортизации()
	
	// Для представления в JSON
	
	РасчетАмортизации = Новый Структура;
	
	РасчетАмортизации.Вставить("Амортизация",                      0);
	РасчетАмортизации.Вставить("АмортизируемаяВеличина",           0);
	РасчетАмортизации.Вставить("БалансоваяСтоимость",              0);
	РасчетАмортизации.Вставить("ЗатратыВсего",                     0);
	РасчетАмортизации.Вставить("КонецСрокаПолезногоИспользования", '0001-01-01');
	РасчетАмортизации.Вставить("КоэффициентАмортизации",           0);
	РасчетАмортизации.Вставить("НачалоОтсчетаРесурсМесяцев",       '0001-01-01');
	РасчетАмортизации.Вставить("ОбщийРесурсМесяцев",               0);
	РасчетАмортизации.Вставить("СрокИспользованияОставшийся",      0);
	РасчетАмортизации.Вставить("СрокИспользованияПрошедший",       0);
	
	Возврат РасчетАмортизации;
	
КонецФункции

#КонецОбласти

#КонецОбласти
