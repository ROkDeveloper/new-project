////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ СВЕДЕНИЯ О НАЛОГОВОМ УЧЕТЕ ОБОСОБЛЕННЫХ ПОДРАЗДЕЛЕНИЙ
// Содержимое модуля отличается в версиях ПРОФ и КОРП.
// В версии ПРОФ отсутствует:
// - тело экспортных процедур (остаются только сигнатуры методов)
// - неэкспортные процедуры и все функции.
// Поэтому не допускается реализация в модуле экспортных функций: вместо них следует использовать процедуры с возвращаемым параметром.

Процедура ОпределитьВедениеУчетаВРазрезеНалоговыхОрганов(ВестиУчет) Экспорт
	
	ВестиУчет = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	
КонецПроцедуры

// Определяет ставки налога на прибыль, подлежащего уплате в региональные бюджеты
// по местам нахождения организации и ее обособленных подразделений
//
// Параметры:
//  Ставки - Соответствие - заполняемая коллекция
//        * Ключ - СправочникСсылка.РегистрацииВНалоговомОргане - все значения из параметра РегистрацииВНалоговомОргане
//        * Значение - ставка в виде доли от единицы (например, 0.135 для 13,5%)
//  Период	    - Дата - характеризует налоговый период
//  Организация - СправочникСсылка.Организации	- налогоплательщик
//  РегистрацииВНалоговомОргане - Массив - перечень регистраций в налоговом органе, в отношении которых нужно получить ставки
// 
Процедура ЗаполнитьНалоговыеСтавкиРегиональныйБюджет(Ставки, Период, Организация, РегистрацииВНалоговомОргане) Экспорт
	
	// Ставка может быть задана для организации в целом ...
	СтавкаНалога = НалоговыйУчет.НалоговаяСтавкаРегиональныйБюджет(Период, Организация);
	Для Каждого РегистрацияВНалоговомОргане Из РегистрацииВНалоговомОргане Цикл
		Ставки.Вставить(РегистрацияВНалоговомОргане, СтавкаНалога);
	КонецЦикла;
	
	// ... а может - для обособленных подразделений
	Если УчетнаяПолитика.ПрименяютсяРазныеСтавкиНалогаНаПрибыль(Организация, Период) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период",                      Период);
		Запрос.УстановитьПараметр("Организация",                 Организация); // Регистрации в налоговом органе всегда подчинены головной организации, но не обособленному подразделению
		Запрос.УстановитьПараметр("РегистрацииВНалоговомОргане", РегистрацииВНалоговомОргане);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтавкиНалога.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	МАКСИМУМ(СтавкиНалога.СтавкаСубъектРФ / 100) КАК СтавкаНалогаРегиональныйБюджет
		|ИЗ
		|	РегистрСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.СрезПоследних(
		|			&Период,
		|			Организация = &Организация
		|				И РегистрацияВНалоговомОргане В (&РегистрацииВНалоговомОргане)) КАК СтавкиНалога
		|
		|СГРУППИРОВАТЬ ПО
		|	СтавкиНалога.РегистрацияВНалоговомОргане";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Ставки.Вставить(Выборка.РегистрацияВНалоговомОргане, Выборка.СтавкаНалогаРегиональныйБюджет);
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

// Создает временную таблицу НалоговыеОрганыПоНалогуНаПрибыль
// (все регистрации организации в налоговых органах (налоговые органы), которые использовались в течение периода -
// по каждому налоговому органу определяется налоговый орган, в который подается декларация)
//
// В таблицу попадают все регистрации в налоговом органе, которые использовались с начала года, т.е.
//	- либо указаны в организациях / обособленных подразделениях
//	- либо были упомянуты в истории регистраций в течение года (и на начало года)
// Это нужно для того, чтобы в дальнейшем в таблицу распределения попали все регистрации (КПП),
// которые использовались в течение периода, даже если их доля равна 0
// (например, см. ПодготовитьРасчетРаспределенияНалоговойБазы())
//
// Если используется подача декларации по группам подразделений,
// то в итоговом запросе налоговый орган подразделения подменится на налоговый орган по группе
// (см. СписокОбособленныхПодразделений())
//
// Если используется отбор по временной таблице регистраций (параметр ИмяВременнойТаблицыРегистраций),
// то в этой таблице должны быть поля 
// 	- РегистрацияВНалоговомОргане
//  - КодРегиона
// Отбор по КодРегиона выполняется в том случае, если используется уплата налога на прибыль по группам подразделений.
// В этом случае таблица налоговых органов будет содержать кроме налогового органа - получателя декларации также и другие
// регистрации региона: это позволит далее правильно определить, отчитываемся ли мы за одно подразделение или за группу
// (см. ПолучитьРаспределениеНалогаДляЗаполненияДекларации())
//
Процедура СоздатьНалоговыеОрганыПоНалогуНаПрибыль(МенеджерВременныхТаблиц, Организации, Период, ИмяВременнойТаблицыРегистраций = "", УплачиватьНалогПоГруппамПодразделений = Ложь)
	
	НачалоНалоговогоПериода = Неопределено;
	Если ЗначениеЗаполнено(Организации) Тогда
		НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организации[0]);
	КонецЕсли;
	Если НачалоНалоговогоПериода = Неопределено Тогда
		НачалоНалоговогоПериода = Период;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокОрганизаций",       Организации);
	Запрос.УстановитьПараметр("Период",                  Период);
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода", НачалоНалоговогоПериода);
	
	// Ниже текст запроса дополняется в зависимости от настроек уплаты налога.
	// Также в текст запроса добавляются отборы, если передано имя временной таблицы менеджера, 
	// в которой содержатся ссылки на регистрации.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК СтруктурнаяЕдиница,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ СтруктурныеЕдиницы
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация,
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение
	|	И ПодразделенияОрганизаций.Владелец В(&СписокОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктурныеЕдиницы.ГоловнаяОрганизация КАК Организация,
	|	СтруктурныеЕдиницы.РегистрацияВНалоговомОргане.КодРегиона КАК КодРегиона,
	|	СтруктурныеЕдиницы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВсеРегистрацииПериода
	|ИЗ
	|	СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане.Владелец,
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане.КодРегиона,
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
	|			&НачалоНалоговогоПериода,
	|			СтруктурнаяЕдиница В
	|				(ВЫБРАТЬ
	|					СтруктурныеЕдиницы.СтруктурнаяЕдиница
	|				ИЗ
	|					СтруктурныеЕдиницы КАК СтруктурныеЕдиницы)) КАК ИсторияРегистраций
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане.Владелец,
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане.КодРегиона,
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
	|ГДЕ
	|	ИсторияРегистраций.Период МЕЖДУ &НачалоНалоговогоПериода И &Период
	|	И ИсторияРегистраций.СтруктурнаяЕдиница В
	|			(ВЫБРАТЬ
	|				СтруктурныеЕдиницы.СтруктурнаяЕдиница
	|			ИЗ
	|				СтруктурныеЕдиницы КАК СтруктурныеЕдиницы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	КодРегиона";
	
	// Если используется уплата налога по группам подразделений, то в пакет добавляются запросы временных таблиц
	// ОрганизацииУчетаНалогаПоГруппамПодразделений и НастройкиГруппПодразделений.
	Если УплачиватьНалогПоГруппамПодразделений Тогда
	
		ТекстЗапроса = ТекстЗапроса +
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Настройки.Организация КАК Организация
		|ПОМЕСТИТЬ ОрганизацииУчетаНалогаПоГруппамПодразделений
		|ИЗ
		|	РегистрСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(&Период, Организация В (&СписокОрганизаций)) КАК Настройки
		|ГДЕ
		|	Настройки.УплачиватьНалогПоГруппамОбособленныхПодразделений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиГруппПодразделений.Организация КАК Организация,
		|	НастройкиГруппПодразделений.КодРегиона КАК КодРегиона,
		|	НастройкиГруппПодразделений.РегистрацияВНалоговомОргане КАК НалоговыйОрган
		|ПОМЕСТИТЬ НастройкиГруппПодразделений
		|ИЗ
		|	РегистрСведений.НастройкиУчетаНалогаНаПрибыльГруппОбособленныхПодразделений.СрезПоследних(
		|			&Период,
		|			Организация В
		|				(ВЫБРАТЬ
		|					ОрганизацииУчетаНалогаПоГруппамПодразделений.Организация
		|				ИЗ
		|					ОрганизацииУчетаНалогаПоГруппамПодразделений КАК ОрганизацииУчетаНалогаПоГруппамПодразделений)) КАК НастройкиГруппПодразделений
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	КодРегиона
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеРегистрацииПериода.РегистрацияВНалоговомОргане КАК НалоговыйОрган,
		|	ЕСТЬNULL(НалоговыеОрганыПоРегионам.НалоговыйОрган, ВсеРегистрацииПериода.РегистрацияВНалоговомОргане) КАК НалоговыйОрганПодачиДекларации
		|ПОМЕСТИТЬ НалоговыеОрганыПоНалогуНаПрибыль
		|ИЗ
		|	ВсеРегистрацииПериода КАК ВсеРегистрацииПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиГруппПодразделений КАК НалоговыеОрганыПоРегионам
		|		ПО ВсеРегистрацииПериода.Организация = НалоговыеОрганыПоРегионам.Организация
		|			И ВсеРегистрацииПериода.КодРегиона = НалоговыеОрганыПоРегионам.КодРегиона
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НалоговыйОрган
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОрганизацииУчетаНалогаПоГруппамПодразделений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ НастройкиГруппПодразделений
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СтруктурныеЕдиницы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВсеРегистрацииПериода";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса +
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеРегистрацииПериода.РегистрацияВНалоговомОргане КАК НалоговыйОрган,
		|	ВсеРегистрацииПериода.РегистрацияВНалоговомОргане КАК НалоговыйОрганПодачиДекларации
		|ПОМЕСТИТЬ НалоговыеОрганыПоНалогуНаПрибыль
		|ИЗ
		|	ВсеРегистрацииПериода КАК ВсеРегистрацииПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НалоговыйОрган
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СтруктурныеЕдиницы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВсеРегистрацииПериода";
		
	КонецЕсли;	
	
	// Добавляем отбор по регистрациям в запросы пакета, если в менеджере есть таблица со ссылками на регистрации.
	// Если используется уплата налога по группам подразделений, то в запрос временной таблицы ВсеРегистрацииПериода
	// добавляем отбор по коду региона - чтобы корректно определить, подается ли декларация за группу подразделений
	// (см. ПолучитьРаспределениеНалогаДляЗаполненияДекларации()).
	// Также в запрос временной таблицы НастройкиГруппПодразделений добавляем отбор по регистрациям.
	// Если не используется уплата налога по группам подразделений, то добавляем отбор по регистрациям
	// в запрос ВсеРегистрацииПериода.
	// Таблицу СтруктурныеЕдиницы сразу не фильтруем, чтобы далее корректно отобрать историю регистраций.
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицыРегистраций) И МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВременнойТаблицыРегистраций) <> Неопределено Тогда
				
		// Далее модифицируем ТекстЗапроса с помощью СхемаЗапроса  
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
		// Используем шаблоны условия отбора по ссылке, либо по коду региона.
		// Ниже в шаблон отбора вместо %1 подставляется имя фильтруемой таблицы запроса. 
		ШаблонОтбораПоСсылке 		= "%1.РегистрацияВНалоговомОргане В (ВЫБРАТЬ ВременнаяТаблица.РегистрацияВНалоговомОргане ИЗ "+ ИмяВременнойТаблицыРегистраций + " КАК ВременнаяТаблица)";
		ШаблонОтбораПоКодуРегиона 	= "%1.РегистрацияВНалоговомОргане.КодРегиона В (ВЫБРАТЬ ВременнаяТаблица.КодРегиона ИЗ "+ ИмяВременнойТаблицыРегистраций + " КАК ВременнаяТаблица)";
		
		ШаблонОтбораТаблицыРегистраций = ?(УплачиватьНалогПоГруппамПодразделений, ШаблонОтбораПоКодуРегиона, ШаблонОтбораПоСсылке); 
		
		// Добавляем отбор во временную таблицу ВсеРегистрацииПериода - во все подзапросы
		Для Индекс = 0 По СхемаЗапроса.ПакетЗапросов[1].Операторы.Количество()-1 Цикл
			ИмяТаблицы = СхемаЗапроса.ПакетЗапросов[1].Операторы[Индекс].Источники[0].Источник.Псевдоним;
			СхемаЗапроса.ПакетЗапросов[1].Операторы[Индекс].Отбор.Добавить(СтрШаблон(ШаблонОтбораТаблицыРегистраций, ИмяТаблицы));
		КонецЦикла;	
		
		Если УплачиватьНалогПоГруппамПодразделений Тогда
			// Добавляем отбор во временную таблицу НастройкиГруппПодразделений
			СхемаЗапроса.ПакетЗапросов[3].Операторы[0].Отбор.Добавить(СтрШаблон(ШаблонОтбораПоСсылке, "НастройкиГруппПодразделений")); 
		КонецЕсли;
				
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
		
КонецПроцедуры

// Создает временную таблицу Регионы
// В ней содержатся все регионы, в которых у организации есть действующие регистрации в налоговых органах
// История налоговых органов читается на указанный период
// Также учитываются регионы подразделений, у которых нет истории изменения налоговых органов
//
Процедура СоздатьТаблицуРегионов(МенеджерВременныхТаблиц, Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      Период);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(Организации.РегистрацияВНалоговомОргане.КодРегиона, 0) КАК КодРегиона,
	|	НЕ Организации.ОбособленноеПодразделение КАК РегионГО
	|ПОМЕСТИТЬ СтруктурныеЕдиницы
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.Ссылка = &Организация
	|			ИЛИ Организации.ГоловнаяОрганизация = &Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка,
	|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане,
	|	ЕСТЬNULL(ПодразделенияОрганизаций.РегистрацияВНалоговомОргане.КодРегиона, 0),
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение
	|	И ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.КодРегиона КАК КодРегиона,
	|	СтруктурныеЕдиницы.РегионГО КАК РегионГО
	|ПОМЕСТИТЬ НезаполненнаяИстория
	|ИЗ
	|	СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистрацийВНалоговомОргане
	|		ПО СтруктурныеЕдиницы.Ссылка = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|ГДЕ
	|	СтруктурныеЕдиницы.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|	И ИсторияРегистрацийВНалоговомОргане.Период ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регионы.КодРегиона КАК КодРегиона,
	|	МАКСИМУМ(Регионы.РегионГО) КАК РегионГО
	|ПОМЕСТИТЬ Регионы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсторияРегистрацийВНалоговомОргане.РегистрацияВНалоговомОргане.КодРегиона КАК КодРегиона,
	|		СтруктурныеЕдиницы.РегионГО КАК РегионГО
	|	ИЗ
	|		СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
	|					&Период,
	|					СтруктурнаяЕдиница В
	|						(ВЫБРАТЬ
	|							СтруктурныеЕдиницы.Ссылка
	|						ИЗ
	|							СтруктурныеЕдиницы КАК СтруктурныеЕдиницы)) КАК ИсторияРегистрацийВНалоговомОргане
	|			ПО СтруктурныеЕдиницы.Ссылка = ИсторияРегистрацийВНалоговомОргане.СтруктурнаяЕдиница
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НезаполненнаяИстория.КодРегиона,
	|		НезаполненнаяИстория.РегионГО
	|	ИЗ
	|		НезаполненнаяИстория КАК НезаполненнаяИстория) КАК Регионы
	|
	|СГРУППИРОВАТЬ ПО
	|	Регионы.КодРегиона
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодРегиона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СтруктурныеЕдиницы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НезаполненнаяИстория";
	
	Запрос.Выполнить();
	
КонецПроцедуры	

// Создает временные таблицы 
// - Филиалы                   (список обособленных подразделений, выделенных на отдельный баланс)
// - ОбособленныеПодразделения (список обособленных подразделений, не выделенных на отдельный баланс)
// Во всех таблицах указан налоговый орган, в который подается декларация.
// 
//Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - в менеджере временных таблиц должна присутствовать 
//								таблица НалоговыеОрганыПоНалогуНаПрибыль (см. СоздатьНалоговыеОрганыПоНалогуНаПрибыль())
//  СписокОрганизаций - Массив - организация и ее обособленные подразделения
//								в справочнике организаций (на выделенном балансе) 
//  Период - Дата - характеризует налоговый период
//
Процедура СписокОбособленныхПодразделений(МенеджерВременныхТаблиц, СписокОрганизаций, Период)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.РегистрацияВНалоговомОргане КАК НалоговыйОрган
	|ПОМЕСТИТЬ ВТ_Филиалы
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&СписокОрганизаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.Владелец КАК Организация,
	|	Подразделения.Ссылка КАК Подразделение,
	|	Подразделения.РегистрацияВНалоговомОргане КАК НалоговыйОрган
	|ПОМЕСТИТЬ ВТ_ОбособленныеПодразделения
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец В(&СписокОрганизаций)
	|	И Подразделения.ОбособленноеПодразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияРегистраций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане КАК НалоговыйОрган
	|ПОМЕСТИТЬ ВТ_ИсторияРегистрацийФилиалов
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
	|			&Период,
	|			СтруктурнаяЕдиница В
	|				(ВЫБРАТЬ
	|					Филиалы.Организация
	|				ИЗ
	|					ВТ_Филиалы КАК Филиалы)) КАК ИсторияРегистраций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсторияРегистраций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане КАК НалоговыйОрган
	|ПОМЕСТИТЬ ВТ_ИсторияРегистрацийПодразделений
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
	|			&Период,
	|			СтруктурнаяЕдиница В
	|				(ВЫБРАТЬ
	|					ОбособленныеПодразделения.Подразделение
	|				ИЗ
	|					ВТ_ОбособленныеПодразделения КАК ОбособленныеПодразделения)) КАК ИсторияРегистраций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СтруктурнаяЕдиница
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Филиалы.Организация КАК Организация,
	|	ЕСТЬNULL(ИсторияРегистраций.НалоговыйОрган, Филиалы.НалоговыйОрган) КАК НалоговыйОрганФилиала,
	|	ЕСТЬNULL(ПолучателиДекларацийИстория.НалоговыйОрганПодачиДекларации, ПолучателиДеклараций.НалоговыйОрганПодачиДекларации) КАК НалоговыйОрган
	|ПОМЕСТИТЬ Филиалы
	|ИЗ
	|	ВТ_Филиалы КАК Филиалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсторияРегистрацийФилиалов КАК ИсторияРегистраций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НалоговыеОрганыПоНалогуНаПрибыль КАК ПолучателиДекларацийИстория
	|			ПО ИсторияРегистраций.НалоговыйОрган = ПолучателиДекларацийИстория.НалоговыйОрган
	|		ПО Филиалы.Организация = ИсторияРегистраций.СтруктурнаяЕдиница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НалоговыеОрганыПоНалогуНаПрибыль КАК ПолучателиДеклараций
	|		ПО Филиалы.НалоговыйОрган = ПолучателиДеклараций.НалоговыйОрган
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбособленныеПодразделения.Организация КАК Организация,
	|	ОбособленныеПодразделения.Подразделение КАК Подразделение,
	|	ЕСТЬNULL(ИсторияРегистраций.НалоговыйОрган, ОбособленныеПодразделения.НалоговыйОрган) КАК НалоговыйОрганПодразделения,
	|	ЕСТЬNULL(ПолучателиДекларацийИстория.НалоговыйОрганПодачиДекларации, ПолучателиДеклараций.НалоговыйОрганПодачиДекларации) КАК НалоговыйОрган
	|ПОМЕСТИТЬ ОбособленныеПодразделения
	|ИЗ
	|	ВТ_ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИсторияРегистрацийПодразделений КАК ИсторияРегистраций
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ НалоговыеОрганыПоНалогуНаПрибыль КАК ПолучателиДекларацийИстория
	|			ПО ИсторияРегистраций.НалоговыйОрган = ПолучателиДекларацийИстория.НалоговыйОрган
	|		ПО ОбособленныеПодразделения.Подразделение = ИсторияРегистраций.СтруктурнаяЕдиница
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НалоговыеОрганыПоНалогуНаПрибыль КАК ПолучателиДеклараций
	|		ПО ОбособленныеПодразделения.НалоговыйОрган = ПолучателиДеклараций.НалоговыйОрган
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_Филиалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОбособленныеПодразделения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИсторияРегистрацийФилиалов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ИсторияРегистрацийПодразделений
	|";

	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЕстьРазныеНалоговыеОрганы(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	Филиалы.НалоговыйОрганФилиала КАК НалоговыйОрган
	|ИЗ
	|	Филиалы КАК Филиалы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	ОбособленныеПодразделения.НалоговыйОрганПодразделения
	|ИЗ
	|	ОбособленныеПодразделения КАК ОбособленныеПодразделения";
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	Возврат (Выборка.Количество() > 1);
	
КонецФункции

Процедура ОпределитьЕстьОбособленныеПодразделения(ЕстьПодразделения, Организация) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		ЕстьПодразделения = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК ОбособленноеПодразделение
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.Ссылка <> &Организация
	|	И НЕ Организации.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Подразделения.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец = &Организация
	|	И Подразделения.ОбособленноеПодразделение
	|	И НЕ Подразделения.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Подразделения.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|ГДЕ
	|	Подразделения.Владелец.ГоловнаяОрганизация = &Организация
	|	И Подразделения.ОбособленноеПодразделение
	|	И НЕ Подразделения.ПометкаУдаления";
	
	ЕстьПодразделения = НЕ Запрос.Выполнить().Пустой();
	
КонецПроцедуры

// Функция определяет, как уплачивается налог на прибыль:
// - по каждому обособленному подразделению отдельно
// - или по группам обособленных подразделений.
//
//  Организация  - СправочникСсылка.Организации - организация, настройки которой требуется получить
//  Период       - Дата - дата, на которую читаются настройки.
//
// Возвращаемое значение:
//   Ложь   - налог рассчитывается по каждому обособленному подразделению (по умолчанию)
//   Истина - налог рассчитывается суммарно по группе подразделений, находящихся в одном регионе 
//
Функция УплачиватьНалогНаПрибыльПоГруппамПодразделений(Организация, Период)
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(
		Период,
		Новый Структура("Организация", Организация));
	
	Если Настройки.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Настройки[0].УплачиватьНалогПоГруппамОбособленныхПодразделений;
	КонецЕсли;

КонецФункции

// Находит налоговый орган, в который подается декларация по налогу на прибыль
// за указанный отчетный период по головной организации
//
// Параметры:
//  РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане
//               - переменная, в которую помещается найденная регистрация
//  Организация	 - СправочникСсылка.Организации - организация, по которой нужно найти регистрацию
//  Период		 - Дата - характеризует проверяемый период
//
Процедура ОпределитьТекущуюРегистрациюОрганизацииВНалоговомОргане(РегистрацияВНалоговомОргане, Организация, Период) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Период",        Период);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущаяРегистрация.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ТекущаяРегистрацияВИстории
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(&Период, СтруктурнаяЕдиница = &Организация) КАК ТекущаяРегистрация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ТекущаяРегистрацияВИстории.РегистрацияВНалоговомОргане, Организации.РегистрацияВНалоговомОргане) КАК Справочник.РегистрацииВНалоговомОргане) КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ТекущаяРегистрацияОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущаяРегистрацияВИстории КАК ТекущаяРегистрацияВИстории
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Настройки.Организация КАК Организация
	|ПОМЕСТИТЬ ОрганизацииУчетаНалогаПоГруппамПодразделений
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(&Период, Организация = &Организация) КАК Настройки
	|ГДЕ
	|	Настройки.УплачиватьНалогПоГруппамОбособленныхПодразделений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиГруппПодразделений.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ НастройкиГруппПодразделений
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНалогаНаПрибыльГруппОбособленныхПодразделений.СрезПоследних(
	|			&Период,
	|			Организация В
	|					(ВЫБРАТЬ
	|						ОрганизацииУчетаНалогаПоГруппамПодразделений.Организация
	|					ИЗ
	|						ОрганизацииУчетаНалогаПоГруппамПодразделений КАК ОрганизацииУчетаНалогаПоГруппамПодразделений)
	|				И КодРегиона В
	|					(ВЫБРАТЬ
	|						ТекущаяРегистрацияОрганизации.РегистрацияВНалоговомОргане.КодРегиона
	|					ИЗ
	|						ТекущаяРегистрацияОрганизации КАК ТекущаяРегистрацияОрганизации)) КАК НастройкиГруппПодразделений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НастройкиГруппПодразделений.РегистрацияВНалоговомОргане, ТекущаяРегистрацияОрганизации.РегистрацияВНалоговомОргане) КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ТекущаяРегистрацияОрганизации КАК ТекущаяРегистрацияОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиГруппПодразделений КАК НастройкиГруппПодразделений
	|		ПО (ИСТИНА)";
	
	Результат = Запрос.Выполнить();
		
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий(); // в выборке 1 запись
	
	РегистрацияВНалоговомОргане = Выборка.РегистрацияВНалоговомОргане;

КонецПроцедуры

// Для заполнения декларации по налогу на прибыль получает общую налоговую базу,
// рассчитанную для закрытых в течение текущего отчетного периода подразделений
//
// Параметры:
//  НалоговаяБазаЗакрытыхПодразделений
//             - Число        - возвращаемое значение, налоговая база закрытых подразделений
//             - Неопределено - возвращаемое значение, в отчетном периоде не закрывались подразделения
//  КонтекстРасчета	- см. НалогНаПрибыльДекларация.НовыйКонтекстРасчета() - описывает период и организацию, по которой готовится расчет
//
Процедура ОпределитьНалоговуюБазуЗакрытыхПодразделений(НалоговаяБазаЗакрытыхПодразделений, КонтекстРасчета) Экспорт
	
	НалоговаяБазаЗакрытыхПодразделений = РегистрыСведений.РасчетДолейБазыНалогаНаПрибыль.НалоговаяБазаЗакрытыхПодразделений(КонтекстРасчета);
	
КонецПроцедуры

// Заполняет массив регистраций в налоговых органах, в которые организация представляет декларацию по налогу на прибыль.
// Данный массив является фильтром для списка выбора налогового органа из формы декларации.
// Если массив пустой, то список выбора налогового органа не фильтруется. 
//
// Параметры:
//		Организация - СправочникСсылка.Организации - плательщик налога на прибыль
//		Период - Дата - дата, характеризующая отчетный период по налогу на прибыль
//      НалоговыеОрганы - Массив - налоговые органы, в которые организация представляет декларации
//
Процедура НалоговыеОрганыПолучателиДекларацийПоПрибыли(Организация, Период, НалоговыеОрганы) Экспорт
	
	УплачиватьНалогПоГруппамПодразделений = УплачиватьНалогНаПрибыльПоГруппамПодразделений(Организация, Период);
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	
	// Создаем временную таблицу НалоговыеОрганыПоНалогуНаПрибыль 
	СоздатьНалоговыеОрганыПоНалогуНаПрибыль(МенеджерВременныхТаблиц, Организации, Период,, УплачиватьНалогПоГруппамПодразделений);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НалоговыеОрганыПоНалогуНаПрибыль.НалоговыйОрганПодачиДекларации КАК НалоговыйОрган
	|ИЗ
	|	НалоговыеОрганыПоНалогуНаПрибыль КАК НалоговыеОрганыПоНалогуНаПрибыль";
	
	НалоговыеОрганы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НалоговыйОрган");
	
КонецПроцедуры	

// Выявляет неполноту настроек: указано, что декларация представляется в одну из налоговых каждого региона,
// но не выбрано, в какую именно.
//
// Параметры:
//  Ошибки		 - см. ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках() 
//               - коллекция с информацией об ошибках, может быть дополнена в процедуре
//  Период		 - Дата - характеризует проверяемый период (месяц)
//  Организация	 - СправочникСсылка.Организации - организация, настройки которой проверяются
//
Процедура ПроверитьНастроеныПолучателиДеклараций(Ошибки, Период, Организация) Экспорт
	
	Если Не УплачиватьНалогНаПрибыльПоГруппамПодразделений(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
		
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	СоздатьТаблицуРегионов(МенеджерВременныхТаблиц, Организация, Период); 
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период",      Период);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Настройки.КодРегиона КАК КодРегиона
	|ПОМЕСТИТЬ Настройки
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНалогаНаПрибыльГруппОбособленныхПодразделений.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И КодРегиона В
	|					(ВЫБРАТЬ
	|						Регионы.КодРегиона
	|					ИЗ
	|						Регионы)) КАК Настройки
	|ГДЕ
	|	Настройки.РегистрацияВНалоговомОргане <> ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодРегиона
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регионы.КодРегиона КАК КодРегиона,
	|	Регионы.РегионГО КАК РегионГО
	|ИЗ
	|	Регионы КАК Регионы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Настройки КАК Настройки
	|		ПО Регионы.КодРегиона = Настройки.КодРегиона
	|ГДЕ
	|	Настройки.РегистрацияВНалоговомОргане ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регионы.РегионГО УБЫВ,
	|	КодРегиона";
	
	Результат = Запрос.Выполнить();
		
	Если Результат.Пустой() Тогда
		// Ошибок нет
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		ШаблонЛокализацииОшибки = НСтр("ru = 'По состоянию на %1 получатель декларации не выбран в следующем регионе:'");
	Иначе
		ШаблонЛокализацииОшибки = НСтр("ru = 'По состоянию на %1 получатели декларации не выбраны в следующих регионах:'");
	КонецЕсли;
	
	ПредставлениеПериода = Формат(Период, "ДФ='MMMM yyyy'");
	ШаблонЛокализацииОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЛокализацииОшибки, ПредставлениеПериода);
	
	ШаблонСообщения = НСтр("ru = 'В настройках налога на прибыль указано, что декларация представляется только в одну инспекцию каждого региона.
                                    |Поэтому для каждого региона должна быть выбрана налоговая инспекция - получатель декларации.
                                    |%1'");// см. ШаблонЛокализацииОшибки
	
									
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
	Ошибка.Описание     = НСтр("ru = 'Невозможно распределить сумму налога на прибыль между регионами.'");
	Ошибка.Локализация  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ШаблонЛокализацииОшибки);
	
	ШаблонПредставленияРегиона = НСтр("ru='%1, %2'");  //например: "77, Москва г"
	
	Пока Выборка.Следующий() Цикл
		
		НаименованиеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(Выборка.КодРегиона);
		
		Ошибка.ЛокализацияДетально.Добавить().Локализация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставленияРегиона,
			Выборка.КодРегиона,
			НаименованиеРегиона);
	
	КонецЦикла;	
	
	ШаблонРекомендация   = НСтр("ru = 'Перейдите в настройки налога на прибыль и выберите получателей деклараций в указанных регионах.
									|Если в %1 году Вы представляете декларации отдельно по каждому обособленному подразделению,
									|то измените порядок представления декларации в настройках налога на прибыль'");
									
	ПредставлениеПериода = Формат(Период, "ДФ=yyyy");
	Ошибка.Рекомендация = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРекомендация, ПредставлениеПериода);
	Ошибка.Ссылка       = "e1cib/app/ОбщаяФорма.НалогиИОтчеты";

КонецПроцедуры

// Выявляет некорректность настроек: указано, что декларация представляется в налоговый орган, где организация снята с учета,
// но при этом в регионе есть другие действующие регистрации.
//
// Параметры:
//  Ошибки		 - см. ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках() 
//               - коллекция с информацией об ошибках, может быть дополнена в процедуре
//  Период		 - Дата - характеризует проверяемый период (месяц)
//  Организация	 - СправочникСсылка.Организации - организация, настройки которой проверяются
//
Процедура ПроверитьСнятыСУчетаОтветственныеПодразделения(Ошибки, Период, Организация) Экспорт
	
	Если Не УплачиватьНалогНаПрибыльПоГруппамПодразделений(Организация, Период) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("Период",       Период);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Настройки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Настройки.КодРегиона КАК КодРегиона
	|ПОМЕСТИТЬ СнятыеСУчета
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНалогаНаПрибыльГруппОбособленныхПодразделений.СрезПоследних(&Период, Организация = &Организация) КАК Настройки
	|ГДЕ
	|	Настройки.РегистрацияВНалоговомОргане.ДатаСнятияСУчета <> ДАТАВРЕМЯ(1, 1, 1)
	|	И Настройки.РегистрацияВНалоговомОргане.ДатаСнятияСУчета <= &Период";

	Запрос.Выполнить();
	
	// Далее создаем временную таблицу НалоговыеОрганыПоНалогуНаПрибыль - выбираем все регистрации по организации за период.
	// Передаем отбор по созданной временной таблице СнятыеСУчета.
	СоздатьНалоговыеОрганыПоНалогуНаПрибыль(
		МенеджерВременныхТаблиц,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация),
		Период,
		"СнятыеСУчета",
		Истина);  // Налог уплачивается по группам подразделений - см. проверку выше
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НалоговыеОрганыПоНалогуНаПрибыль.НалоговыйОрганПодачиДекларации КАК НалоговыйОрган,
	|	НалоговыеОрганыПоНалогуНаПрибыль.НалоговыйОрганПодачиДекларации.Наименование КАК Наименование,
	|	НалоговыеОрганыПоНалогуНаПрибыль.НалоговыйОрганПодачиДекларации.КПП КАК КПП,
	|	НалоговыеОрганыПоНалогуНаПрибыль.НалоговыйОрганПодачиДекларации.КодРегиона КАК КодРегиона
	|ИЗ
	|	НалоговыеОрганыПоНалогуНаПрибыль КАК НалоговыеОрганыПоНалогуНаПрибыль
	|ГДЕ
	|	НалоговыеОрганыПоНалогуНаПрибыль.НалоговыйОрган.ДатаСнятияСУчета = ДАТАВРЕМЯ(1, 1, 1)
	|		И НалоговыеОрганыПоНалогуНаПрибыль.НалоговыйОрган <> НалоговыеОрганыПоНалогуНаПрибыль.НалоговыйОрганПодачиДекларации
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодРегиона";
	
	Результат = Запрос.Выполнить();
		
	Если Результат.Пустой() Тогда
		// Ошибок нет
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Описание     = НСтр("ru = 'Данные для заполнения декларации по налогу на прибыль некорректны'");
	
	ЧтоСлучилось = Новый Массив;
	ЧтоСлучилось.Добавить(НСтр("ru = 'В настройках налога на прибыль указано, что на все подразделения, находящиеся в одном регионе, 
					|представляется единая декларация. 
					|В каждом регионе выбрано подразделение, ответственное за предоставление этой декларации.'"));
	
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		
		ШаблонЧтоСлучилось = НСтр("ru = 'В одном из регионов организация обязана платить налог, однако ответственное за это подразделение
						|снято с учета в налоговой инспекции.
						|Это подразделение ранее стояло на учете в %1 (%2) с КПП %3.'");
						// например, "... в ИФНС 2701 (Хабаровский край) с КПП 270143001"
						
		НаименованиеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(Выборка.КодРегиона);
		ЧтоСлучилось.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЧтоСлучилось,
			Выборка.Наименование,
			НаименованиеРегиона,
			Выборка.КПП));
						
	Иначе

		ЧтоСлучилось.Добавить(НСтр("ru = 'В некоторых регионах организация обязана платить налог, однако ответственные за это подразделения
						|сняты с учета в налоговой инспекции:'"));
	КонецЕсли;
	
									
	Ошибка = ВыводСообщенийОбОшибках.ДобавитьОписаниеОшибки(Ошибки);
	
	ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "Описание", Описание);
	ВыводСообщенийОбОшибках.ДобавитьРаздел(Ошибка, "ЧтоСлучилось", ЧтоСлучилось);
	
	// Если ошибки в нескольких регионах, то в описание добавляется таблица налоговых инспеций.
	// В ином случае данные налоговой инспекции уже указаны в тексте сообщения ЧтоСлучилось (см. выше).
	Если Выборка.Количество() > 1 Тогда
		
		ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, "ЗакрытоОтветственноеПодразделение_Шапка", Новый Структура);
		ШаблонПредставленияРегиона = НСтр("ru='%1, %2'");  //например: "77, Москва г"
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеДляВывода = Новый Структура("Регион, НалоговыйОрган, КПП, РасшифровкаНалоговыйОрган");
			
			НаименованиеРегиона = АдресныйКлассификатор.НаименованиеРегионаПоКоду(Выборка.КодРегиона);
			
			ПредставлениеРегиона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПредставленияРегиона,
				Выборка.КодРегиона,
				НаименованиеРегиона);
			
			ДанныеДляВывода.Регион 			= ПредставлениеРегиона;
			ДанныеДляВывода.НалоговыйОрган 	= Выборка.Наименование;
			ДанныеДляВывода.КПП 			= Выборка.КПП;
			
			// Расшифровка
			ДанныеДляВывода.РасшифровкаНалоговыйОрган = Выборка.НалоговыйОрган;			
						
			ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, 
													"ЗакрытоОтветственноеПодразделение_Строка", 
													ДанныеДляВывода);
		
		КонецЦикла;
		
	КонецЕсли;
	
	// ЧтоДелать
	ЧтоДелать = НСтр("ru = 'Проверьте настройки налога на прибыль, корректность данных о подразделениях, снятых с учета.
				|Если ответственным выбрано другое подразделение, укажите его в настройках налога на прибыль.'");
				
	ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, "Текст", ЧтоДелать);
	ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, "Ссылка", "e1cib/app/ОбщаяФорма.НалогиИОтчеты");
	
	Если Выборка.Количество() = 1 Тогда
				
		ЧтоДелать = НСтр("ru = 'Если в указанном регионе все подразделения прекратили деятельность, укажите это в сведениях
					|об этих подразделениях.'");
						
	Иначе

		ЧтоДелать = НСтр("ru = 'Если в указанных регионах все подразделения прекратили деятельность, укажите это в сведениях
					|об этих подразделениях.'");
					
	КонецЕсли;
	
					
	ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, "Текст", ЧтоДелать);
	ВыводСообщенийОбОшибках.ДобавитьСекцию(Ошибка, "Ссылка", "e1cib/list/Справочник.ПодразделенияОрганизаций");
				
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ НАЛОГОВОЙ БАЗЫ МЕЖДУ НАЛОГОВЫМИ ОРГАНАМИ

Процедура ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВНалоговомОргане);
	
КонецПроцедуры

// Готовит данные о распределении налоговой базы между обособленными подразделениями в соответствии со ст. 288 НК 
//
// Параметры:
//  РасчетРаспределенияНалоговойБазы	 - возвращаемый параметр, см. РасчетНалогаНаПрибыль.НовыйРасчетРаспределенияНалоговойБазы. Переданное значение игнорируется
//  КонтекстРасчета						 - см. РасчетНалогаНаПрибыль.НовыйКонтекстРасчета
//  НалоговаяБаза						 - Число - распределяемая налоговая база
//  МенеджерВременныхТаблиц				 - МенеджерВременныхТаблиц - может применяться для переиспользования (передачи из процедуры в вызывающий код)
//                                         создаваемой в процедуре временной таблицы СоответствиеПрежнихИТекущихНалоговыхОрганов
//
Процедура ПодготовитьРасчетРаспределенияНалоговойБазы(РасчетРаспределенияНалоговойБазы, КонтекстРасчета, НалоговаяБаза, МенеджерВременныхТаблиц) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	УплачиватьНалогПоГруппамПодразделений = УплачиватьНалогНаПрибыльПоГруппамПодразделений(КонтекстРасчета.Организация, КонтекстРасчета.КонецПериода);
	
	// Создаем временную таблицу НалоговыеОрганыПоНалогуНаПрибыль 
	СоздатьНалоговыеОрганыПоНалогуНаПрибыль(МенеджерВременныхТаблиц, КонтекстРасчета.Организации, КонтекстРасчета.КонецПериода,, УплачиватьНалогПоГруппамПодразделений);
	СписокОбособленныхПодразделений(МенеджерВременныхТаблиц, КонтекстРасчета.Организации, КонтекстРасчета.КонецПериода);
	
	// Убедимся, что имеет смысл рассчитывать базу распределения
	Если НЕ ЕстьРазныеНалоговыеОрганы(МенеджерВременныхТаблиц) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим, существует ли запись в РС РасчетДолейБазыНалогаНаПрибыль за прошлый месяц 
	// Если запись есть, то данные прошлых месяцев возьмем из нее, если нет - получим из регистра бухгалтерии.
	// Разница в том, что в РС РасчетДолейБазыНалогаНаПрибыль значения показателей (затраты на оплату труда и стоимость ОС)
	// уже разнесены по тем КПП, которые были актуальны на момент закрытия каждого месяца.
	// Таким образом, остается только выбрать данные текущего месяца (затраты на оплату труда за месяц и стоимость ОС на начало следующего),
	// разнести их по тем КПП, которые актуальны сейчас и сложить с данными из РС.
	// Если же расчет долей ранее не выполнялся (например, ранее не было обособленных подразделений),
	// то указанные показатели выбираются за период с начала года и разносятся по тем КПП, которые актуальны сейчас. 
	ПрошлыйМесяц = ДобавитьМесяц(КонтекстРасчета.КонецПериода, -1);
	ЕстьРасчетДолейЗаПрошлыйМесяц = РегистрыСведений.РасчетДолейБазыНалогаНаПрибыль.ЕстьРасчетДолейЗаМесяц(
		КонтекстРасчета.Организации,
		ПрошлыйМесяц);
	
	// Получим суммы расходов по оплате труда за текущий месяц
	РасходыПоОплатеТруда = Перечисления.ВидыРасходовНУ.ОплатаТруда;
	
	// Нормируемые расходы в налоговом учете являются косвенными, поэтому сумму определим по оборотам счетов затрат в корреспонденции
	// со счетами управленческих расходов и счетами расходов на продажу.
	НормируемыеРасходыОплатаТруда = Перечисления.ВидыРасходовНУ.НормируемыеРасходыОплатаТруда();
	
	СчетаРезультата = Новый Массив;
	СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
	СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД);
	СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);
	СчетаРезультата.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Если есть расчет долей за прошлый месяц, то расходы по оплате труда выбираем из регистра бухгалтерии только за текущий месяц.
	// В этом случае позже к ним добавим рассчитанные ранее расходы прошлых месяцев, хранящиеся в РС РасчетДолейБазыНалогаНаПрибыль
	// (см. запрос временной таблицы ДанныеДляРасчета в последнем пакете запросов).
	// Если РС РасчетДолейБазыНалогаНаПрибыль не заполнен, то выбираем здесь данные с начала года 
	Запрос.УстановитьПараметр("НачалоПериода",        ?(ЕстьРасчетДолейЗаПрошлыйМесяц, КонтекстРасчета.НачалоМесяца, КонтекстРасчета.НачалоНалоговогоПериода));
	Запрос.УстановитьПараметр("КонецПериода",         КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций",    КонтекстРасчета.Организации);
	Запрос.УстановитьПараметр("РасходыПоОплатеТруда", РасходыПоОплатеТруда);
	Запрос.УстановитьПараметр("СчетаРасходов",        БухгалтерскийУчет.СформироватьМассивСубсчетов(НалоговыйУчет.ПолучитьМассивСчетовУчетаРасходов()));
	Запрос.УстановитьПараметр("НормируемыеРасходыОплатаТруда", НормируемыеРасходыОплатаТруда);
	Запрос.УстановитьПараметр("СчетаУправленческиеРасходы",   БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаРезультата));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Статья
	|ПОМЕСТИТЬ СтатьиОплатыТруда
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ В(&РасходыПоОплатеТруда)
	|	И СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статья
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК Статья
	|ПОМЕСТИТЬ СтатьиНормируемыеРасходыОплатаТруда
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ В(&НормируемыеРасходыОплатаТруда)
	|	И СтатьиЗатрат.ВидДеятельностиДляНалоговогоУчетаЗатрат = ЗНАЧЕНИЕ(Перечисление.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсновнаяСистемаНалогообложения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Статья
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыПоОплатеТруда.Организация КАК Организация,
	|	РасходыПоОплатеТруда.Подразделение КАК Подразделение,
	|	СУММА(РасходыПоОплатеТруда.Сумма) КАК Сумма
	|ПОМЕСТИТЬ РасходыПоОплатеТруда
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Организация КАК Организация,
	|		ХозрасчетныйОбороты.Подразделение КАК Подразделение,
	|		ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотДт, 0) КАК Сумма
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В (&СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В (&СписокОрганизаций)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							СтатьиОплатыТруда.Статья
	|						ИЗ
	|							СтатьиОплатыТруда),
	|				НЕ КорСчет В (&СчетаРасходов),
	|				) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Организация,
	|		ХозрасчетныйОбороты.Подразделение,
	|		ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Счет В (&СчетаРасходов),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат),
	|				Организация В (&СписокОрганизаций)
	|					И Субконто1 В
	|						(ВЫБРАТЬ
	|							СтатьиНормируемыеРасходыОплатаТруда.Статья
	|						ИЗ
	|							СтатьиНормируемыеРасходыОплатаТруда),
	|				КорСчет В (&СчетаУправленческиеРасходы),
	|				) КАК ХозрасчетныйОбороты) КАК РасходыПоОплатеТруда
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоОплатеТруда.Организация,
	|	РасходыПоОплатеТруда.Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение";
	
	Запрос.Выполнить();
	
	// Письмо Минфина от 23 мая 2014 г. N 03-03-рз/24791 обращает внимание, что для целей ст. 288
	// под амортизируемым имуществом понимаются только основные средства.
	// Поэтому объекты, не являющиеся основными средствами, такие как капитальные вложения,
	// из расчета следует исключить.

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК Объект
	|ПОМЕСТИТЬ АрендованноеИмущество
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.КапитальныеВложенияВАрендованноеИмущество)
	|	ИЛИ ОсновныеСредства.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ЗемельныеУчастки)
	|	ИЛИ ОсновныеСредства.ТипОС = ЗНАЧЕНИЕ(Перечисление.ТипыОС.КапитальноеВложение)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Объект";
	Запрос.Выполнить();
	
	// Получим по каждому подразделению
	// - стоимость амортизируемого имущества на начало месяца расчета (СтоимостьОСПрошлыхМесяцев)
	// - стоимость амортизируемого имущества на начало следующего месяца (СтоимостьОССледующегоМесяца)
	
	// Стоимость ОС на начало следующего месяца всегда рассчитываем по данным регистра бухгалтерии.
	// Стоимость ОС на начало месяца расчета (т.е. сумму стоимости ОС на начало каждого месяца с начала года
	// до текущего месяца) получаем по данным РС РасчетДолейБазыНалогаНаПрибыль
	// (см. запрос временной таблицы ДанныеДляРасчета в последнем пакете запросов).
	// Если доли за прошлый месяц не рассчитаны, то стоимость ОС рассчитываем здесь же по данным регистра бухгалтерии - 
	// выбираем остатки на начало каждого месяца периода с начала года.
	
	СчетаАмортизируемогоИмущества = Новый Массив;
	СчетаАмортизируемогоИмущества.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	СчетаАмортизируемогоИмущества.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	СчетаАмортизируемогоИмущества.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);
	СчетаАмортизируемогоИмущества = БухгалтерскийУчет.СформироватьМассивСубсчетов(СчетаАмортизируемогоИмущества); // разворачиваем до субсчетов
	
	// На счете 01.К отражается сумма будущих расходов, подлежащих признанию в соответствии с подп. 10 п. 1. ст. 264.
	// Эти суммы не включаются в стоимость ОС.
	КорректировкаСтоимостиАрендованногоИмущества = БухгалтерскийУчетПовтИсп.СчетаВИерархии(
		ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества);
		
	СчетаАмортизируемогоИмущества = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		СчетаАмортизируемогоИмущества,
		КорректировкаСтоимостиАрендованногоИмущества);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СчетаАмортизируемогоИмущества", 	СчетаАмортизируемогоИмущества);
	Запрос.УстановитьПараметр("СписокОрганизаций",    			КонтекстРасчета.Организации);
	Запрос.УстановитьПараметр("НачалоПериода",        			КонтекстРасчета.НачалоМесяца);
	Запрос.УстановитьПараметр("НачалоСледующегоМесяца", 		КонтекстРасчета.КонецПериода + 1);
	
	// Текст запроса далее может быть модифицирован схемой запроса - см. ДобавитьПериодыВЗапросОстатковАмортизируемогоИмущества()
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	0 КАК СтоимостьОСПрошлыхМесяцев,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстаток, 0) КАК СтоимостьОССледующегоМесяца
	|ПОМЕСТИТЬ СтоимостьАмортизируемогоИмущества
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&НачалоСледующегоМесяца, 
	|		Счет В (&СчетаАмортизируемогоИмущества), 
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
	|		Организация В (&СписокОрганизаций)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.Подразделение,
	|	0,
	|	-ЕСТЬNULL(ХозрасчетныйОстатки.СуммаНУОстаток, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоСледующегоМесяца,
	|			Счет В (&СчетаАмортизируемогоИмущества),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						АрендованноеИмущество.Объект КАК Объект
	|					ИЗ
	|						АрендованноеИмущество КАК АрендованноеИмущество)) КАК ХозрасчетныйОстатки";
	
	// См. письма Минфина 
	// - от 10 марта 2006 г. N 03-03-04/1/199
	//   "Средняя (среднегодовая) остаточная стоимость указанных основных средств за отчетный (налоговый) период
	//    определяется аналогично порядку, изложенному в п. 4 ст. 376 Кодекса,
	//    как частное от деления суммы, полученной в результате сложения величин остаточной стоимости основных средств 
	//    на 1-е число каждого месяца отчетного (налогового) периода и 1-е число следующего за отчетным (налоговым) периодом месяца,
	//    на количество месяцев в отчетном (налоговом) периоде, увеличенное на единицу."
	// - от 30 декабря 2004 г. N 03-06-01-02/26
	//   "при определении средней стоимости имущества должно учитываться общее количество месяцев в календарном году,
	//    а также в соответствующем отчетном периоде (т.е. квартале, полугодии и 9 месяцах календарного года)."
	
	// С учетом этого 
	// - для организации, зарегистрированной в декабре
	//  -- в первый месяц (декабрь) средняя рассчитывается как 1/13 суммы на конец декабря
	//     (это значение используется лишь для того, чтобы примерно посчитать ставку для ПБУ 18, но не участвует в расчете показателей декларации)
	//  -- во второй месяц (январь) и далее - как средняя за календарный год (для января - средняя сумм на начало и конец января)
	// - для организации, зарегистрированной в другом месяце (например, сентябре) - как средняя за календарный год,
	//   предполагая учет значений за месяцы до регистрации организации - считая их равными 0.
	//   Например:
	//  -- за сентябрь - 1/10 стоимости на конец сентября 
	//  -- за год      - 1/13 стоимости на конец сентября, октября, ноября, декабря
	
	Если Не ЕстьРасчетДолейЗаПрошлыйМесяц Тогда
		
		ДобавляемыеПериоды = Новый Массив;
		
		ПрошлыйПериод = КонтекстРасчета.НачалоМесяца;
		
		Пока ПрошлыйПериод >= КонтекстРасчета.НачалоНалоговогоПериода Цикл
			
			// Если организация зарегистрирована 1 декабря, то в первом налоговом периоде будет добавляться избыточный запрос на 1 декабря года регистрации.
			// Такой запрос не кажется проблемой - он заведомо ничего не вернет, т.к. на момент регистрации в организации не может быть амортизируемого имущества
		
			ДобавляемыеПериоды.Добавить(ПрошлыйПериод);
			ПрошлыйПериод = ДобавитьМесяц(ПрошлыйПериод, -1);
			
		КонецЦикла;
		
		ДобавитьПериодыВЗапросОстатковАмортизируемогоИмущества(Запрос, ДобавляемыеПериоды);
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Численность.Организация КАК Организация,
	|	Численность.Подразделение КАК Подразделение,
	|	Численность.СреднесписочнаяЧисленностьСотрудников КАК СреднесписочнаяЧисленность
	|ПОМЕСТИТЬ Численность
	|ИЗ
	|	&Численность КАК Численность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение";
	
	Запрос.УстановитьПараметр(
		"Численность",
		СведенияОЧисленности(КонтекстРасчета.Организация, КонтекстРасчета.КонецПериода));
	Запрос.Выполнить();
	
	// Сложим в одну таблицу все данные в разрезе налоговых органов
	// - оплату труда
	// - стоимость амортизируемого имущества
	// - среднесписочная численность
	
	// В запросе временной таблицы ДанныеДляРасчета во 2-м и 3-м подзапросах объединения выбираем данные, рассчитанные в предыдущем месяце.
	// СтоимостьОСПрошлыхМесяцев в текущем месяце равна сумме СтоимостьОСПрошлыхМесяцев и СтоимостьОССледующегоМесяца, рассчитанных в прошлом месяце.
	// Но если текущий месяц - январь, то СтоимостьОСПрошлыхМесяцев равна СтоимостьОССледующегоМесяца, рассчитанная в декабре.
	// Если используется уплата налога по группам подразделений, то данные прошлых периодов по региону относим на текущий налоговый орган -
	// получатель декларации по региону (кроме случая, когда в прежнем периоде закрылась вся группа подразделений - см. условие соединения).
	// Если не используется уплата налога по группам подразделений, то данные по прежним регистрациям головной организации
	// относим на текущую регистрацию головной организации.
		
	// По закрытым подразделениям (КПП) в норме не должно быть остатков ОС и расходов по оплате труда после закрытия.
	// Но если остатки ОС и начисления по зарплате остались в учете на закрытых регистрациях,
	// то за периоды после закрытия относим эти данные на регистрацию (КПП) головной организации
	// (см. 1-й подзапрос объединения в запросе врем. табл. ПоказателиПоНалоговымОрганам)
	
	// Также в распределение должны попасть все регистрации (КПП),
	// которые использовались в течение периода, кроме тех, которые:
	//	- закрыты до начала года
	//	- открыты после окончания текущего отчетного периода
	// (см. 2-й подзапрос объединения в запросе врем. табл. ПоказателиПоНалоговымОрганам).
	// Здесь также если не используется уплата налога по группам подразделений, то прежние регистрации головной организации подменяются на текущую.
	
	Запрос.УстановитьПараметр("Организация",                           КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("НачалоНалоговогоПериода",               КонтекстРасчета.НачалоНалоговогоПериода);
	Запрос.УстановитьПараметр("НачалоПрошлогоМесяца",                  НачалоМесяца(ПрошлыйМесяц));
	Запрос.УстановитьПараметр("КонецПрошлогоМесяца",                   КонецМесяца(ПрошлыйМесяц));
	Запрос.УстановитьПараметр("КонецПериода",                          КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("УплачиватьНалогПоГруппамПодразделений", УплачиватьНалогПоГруппамПодразделений);
	Запрос.УстановитьПараметр("РегистрацияГоловнойОрганизации",        КонтекстРасчета.РегистрацияПоМестуНахожденияОрганизации);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДляРасчета.Организация КАК Организация,
	|	ДанныеДляРасчета.Подразделение КАК Подразделение,
	|	СУММА(ДанныеДляРасчета.СреднесписочнаяЧисленность) КАК СреднесписочнаяЧисленность,
	|	СУММА(ДанныеДляРасчета.РасходыПоОплатеТруда) КАК РасходыПоОплатеТруда,
	|	СУММА(ДанныеДляРасчета.СтоимостьОСПрошлыхМесяцев) КАК СтоимостьОСПрошлыхМесяцев,
	|	СУММА(ДанныеДляРасчета.СтоимостьОССледующегоМесяца) КАК СтоимостьОССледующегоМесяца
	|ПОМЕСТИТЬ ДанныеТекущегоПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		Численность.Организация КАК Организация,
	|		Численность.Подразделение КАК Подразделение,
	|		Численность.СреднесписочнаяЧисленность КАК СреднесписочнаяЧисленность,
	|		0 КАК РасходыПоОплатеТруда,
	|		0 КАК СтоимостьОСПрошлыхМесяцев,
	|		0 КАК СтоимостьОССледующегоМесяца
	|	ИЗ
	|		Численность КАК Численность
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОплатаТруда.Организация,
	|		ОплатаТруда.Подразделение,
	|		0,
	|		ОплатаТруда.Сумма,
	|		0,
	|		0
	|	ИЗ
	|		РасходыПоОплатеТруда КАК ОплатаТруда
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АмортизируемоеИмущество.Организация,
	|		АмортизируемоеИмущество.Подразделение,
	|		0,
	|		0,
	|		АмортизируемоеИмущество.СтоимостьОСПрошлыхМесяцев,
	|		АмортизируемоеИмущество.СтоимостьОССледующегоМесяца
	|	ИЗ
	|		СтоимостьАмортизируемогоИмущества КАК АмортизируемоеИмущество) КАК ДанныеДляРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.Организация,
	|	ДанныеДляРасчета.Подразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&РегистрацияГоловнойОрганизации КАК НалоговыйОрганТекущий,
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане КАК НалоговыйОрганПрежний
	|ПОМЕСТИТЬ СоответствиеПрежнихИТекущихНалоговыхОрганов
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
	|ГДЕ
	|	НЕ &УплачиватьНалогПоГруппамПодразделений
	|	И ИсторияРегистраций.СтруктурнаяЕдиница = &Организация
	|	И ИсторияРегистраций.Период МЕЖДУ &НачалоНалоговогоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&РегистрацияГоловнойОрганизации,
	|	ИсторияРегистраций.РегистрацияВНалоговомОргане
	|ИЗ
	|	РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних(
	|			&НачалоНалоговогоПериода,
	|			НЕ &УплачиватьНалогПоГруппамПодразделений
	|				И СтруктурнаяЕдиница = &Организация) КАК ИсторияРегистраций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговыеОрганыПодачиДеклараций.НалоговыйОрганПодачиДекларации,
	|	НалоговыеОрганыПодачиДеклараций.НалоговыйОрган
	|ИЗ
	|	НалоговыеОрганыПоНалогуНаПрибыль КАК НалоговыеОрганыПодачиДеклараций
	|ГДЕ
	|	&УплачиватьНалогПоГруппамПодразделений
	|	И (НалоговыеОрганыПодачиДеклараций.НалоговыйОрган.ДатаСнятияСУчета = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НалоговыеОрганыПодачиДеклараций.НалоговыйОрган.ДатаСнятияСУчета > &КонецПрошлогоМесяца
	|			ИЛИ НалоговыеОрганыПодачиДеклараций.НалоговыйОрганПодачиДекларации = &РегистрацияГоловнойОрганизации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НалоговыйОрганПрежний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляРасчета.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СУММА(ДанныеДляРасчета.СреднесписочнаяЧисленность) КАК СреднесписочнаяЧисленность,
	|	СУММА(ДанныеДляРасчета.РасходыПоОплатеТруда) КАК РасходыПоОплатеТруда,
	|	СУММА(ДанныеДляРасчета.СтоимостьОСПрошлыхМесяцев) КАК СтоимостьОСПрошлыхМесяцев,
	|	СУММА(ДанныеДляРасчета.СтоимостьОССледующегоМесяца) КАК СтоимостьОССледующегоМесяца
	|ПОМЕСТИТЬ ДанныеДляРасчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(ЕСТЬNULL(ОбособленныеПодразделения.НалоговыйОрган, Филиалы.НалоговыйОрган) КАК Справочник.РегистрацииВНалоговомОргане) КАК РегистрацияВНалоговомОргане,
	|		ДанныеТекущегоПериода.СреднесписочнаяЧисленность КАК СреднесписочнаяЧисленность,
	|		ДанныеТекущегоПериода.РасходыПоОплатеТруда КАК РасходыПоОплатеТруда,
	|		ДанныеТекущегоПериода.СтоимостьОСПрошлыхМесяцев КАК СтоимостьОСПрошлыхМесяцев,
	|		ДанныеТекущегоПериода.СтоимостьОССледующегоМесяца КАК СтоимостьОССледующегоМесяца
	|	ИЗ
	|		ДанныеТекущегоПериода КАК ДанныеТекущегоПериода
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбособленныеПодразделения КАК ОбособленныеПодразделения
	|			ПО ДанныеТекущегоПериода.Организация = ОбособленныеПодразделения.Организация
	|				И ДанныеТекущегоПериода.Подразделение = ОбособленныеПодразделения.Подразделение
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Филиалы КАК Филиалы
	|			ПО ДанныеТекущегоПериода.Организация = Филиалы.Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганТекущий, РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане),
	|		0,
	|		РасчетДолейБазыНалогаНаПрибыль.РасходыПоОплатеТруда,
	|		РасчетДолейБазыНалогаНаПрибыль.СтоимостьОСПрошлыхМесяцев,
	|		0
	|	ИЗ
	|		РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК РасчетДолейБазыНалогаНаПрибыль
	|			ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеПрежнихИТекущихНалоговыхОрганов КАК СоответствиеПрежнихИТекущихНалоговыхОрганов
	|			ПО РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане = СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганПрежний
	|	ГДЕ
	|		РасчетДолейБазыНалогаНаПрибыль.ПериодРасчета МЕЖДУ &НачалоПрошлогоМесяца И &КонецПрошлогоМесяца
	|		И РасчетДолейБазыНалогаНаПрибыль.ПериодРасчета >= &НачалоНалоговогоПериода
	|		И РасчетДолейБазыНалогаНаПрибыль.Организация В(&СписокОрганизаций)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЕСТЬNULL(СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганТекущий, РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане),
	|		0,
	|		0,
	|		РасчетДолейБазыНалогаНаПрибыль.СтоимостьОССледующегоМесяца,
	|		0
	|	ИЗ
	|		РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК РасчетДолейБазыНалогаНаПрибыль
	|			ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеПрежнихИТекущихНалоговыхОрганов КАК СоответствиеПрежнихИТекущихНалоговыхОрганов
	|			ПО РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане = СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганПрежний
	|	ГДЕ
	|		РасчетДолейБазыНалогаНаПрибыль.ПериодРасчета МЕЖДУ &НачалоПрошлогоМесяца И &КонецПрошлогоМесяца
	|		И РасчетДолейБазыНалогаНаПрибыль.Организация В(&СписокОрганизаций)
	|		И ЕСТЬNULL(СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганТекущий, РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане) В
	|				(ВЫБРАТЬ
	|					НалоговыеОрганыПоНалогуНаПрибыль.НалоговыйОрганПодачиДекларации
	|				ИЗ
	|					НалоговыеОрганыПоНалогуНаПрибыль КАК НалоговыеОрганыПоНалогуНаПрибыль)) КАК ДанныеДляРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляРасчета.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиПоНалоговымОрганам.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	СУММА(ПоказателиПоНалоговымОрганам.СреднесписочнаяЧисленность) КАК СреднесписочнаяЧисленность,
	|	СУММА(ПоказателиПоНалоговымОрганам.РасходыПоОплатеТруда) КАК РасходыПоОплатеТруда,
	|	СУММА(ПоказателиПоНалоговымОрганам.СтоимостьОСПрошлыхМесяцев) КАК СтоимостьОСПрошлыхМесяцев,
	|	СУММА(ПоказателиПоНалоговымОрганам.СтоимостьОССледующегоМесяца) КАК СтоимостьОССледующегоМесяца
	|ПОМЕСТИТЬ ПоказателиПоНалоговымОрганам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ДанныеДляРасчета.РегистрацияВНалоговомОргане.ДатаСнятияСУчета <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДанныеДляРасчета.РегистрацияВНалоговомОргане.ДатаСнятияСУчета <= &КонецПериода
	|				ТОГДА &РегистрацияГоловнойОрганизации
	|			ИНАЧЕ ДанныеДляРасчета.РегистрацияВНалоговомОргане
	|		КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|		ДанныеДляРасчета.СреднесписочнаяЧисленность КАК СреднесписочнаяЧисленность,
	|		ДанныеДляРасчета.РасходыПоОплатеТруда КАК РасходыПоОплатеТруда,
	|		ДанныеДляРасчета.СтоимостьОСПрошлыхМесяцев КАК СтоимостьОСПрошлыхМесяцев,
	|		ДанныеДляРасчета.СтоимостьОССледующегоМесяца КАК СтоимостьОССледующегоМесяца
	|	ИЗ
	|		ДанныеДляРасчета КАК ДанныеДляРасчета
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЕСТЬNULL(СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганТекущий, НалоговыеОрганыПодачиДеклараций.НалоговыйОрганПодачиДекларации),
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		НалоговыеОрганыПоНалогуНаПрибыль КАК НалоговыеОрганыПодачиДеклараций
	|			ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеПрежнихИТекущихНалоговыхОрганов КАК СоответствиеПрежнихИТекущихНалоговыхОрганов
	|			ПО (НЕ &УплачиватьНалогПоГруппамПодразделений)
	|				И НалоговыеОрганыПодачиДеклараций.НалоговыйОрганПодачиДекларации = СоответствиеПрежнихИТекущихНалоговыхОрганов.НалоговыйОрганПрежний
	|	ГДЕ
	|		НалоговыеОрганыПодачиДеклараций.НалоговыйОрганПодачиДекларации.ДатаПостановкиНаУчет <= &КонецПериода
	|		И (НалоговыеОрганыПодачиДеклараций.НалоговыйОрганПодачиДекларации.ДатаСнятияСУчета = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ НалоговыеОрганыПодачиДеклараций.НалоговыйОрганПодачиДекларации.ДатаСнятияСУчета >= &НачалоНалоговогоПериода)) КАК ПоказателиПоНалоговымОрганам
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоказателиПоНалоговымОрганам.РегистрацияВНалоговомОргане
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакрытыеПодразделения.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗакрытыеПодразделения.РегистрацияВНалоговомОргане.ДатаСнятияСУчета КАК ДатаСнятияСУчета
	|ИЗ
	|	ПоказателиПоНалоговымОрганам КАК ЗакрытыеПодразделения
	|ГДЕ
	|	ЗакрытыеПодразделения.РегистрацияВНалоговомОргане <> &РегистрацияГоловнойОрганизации
	|	И ЗакрытыеПодразделения.РегистрацияВНалоговомОргане.ДатаСнятияСУчета <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ЗакрытыеПодразделения.РегистрацияВНалоговомОргане.ДатаСнятияСУчета <= &КонецПериода";
	
	// По закрытым подразделениям (регистрациям) рассчитывается ПоследнийОтчетныйПериод - это конец последнего месяца того отчетного периода,
	// после которого закрылось подразделение. Этот отчетный период считается последним для закрытого подразделения, 
	// и из него берутся доля и налоговая база закрытого подразделения (регистрации).
	
	ЗакрытыеПодразделения = Новый ТаблицаЗначений;
	ЗакрытыеПодразделения.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ЗакрытыеПодразделения.Колонки.Добавить("ДатаСнятияСУчета",            Новый ОписаниеТипов("Дата"));
	ЗакрытыеПодразделения.Колонки.Добавить("ПоследнийОтчетныйПериод",     Новый ОписаниеТипов("Дата"));
	ЗакрытыеПодразделения.Колонки.Добавить("НачалоПоследнегоМесяца",      Новый ОписаниеТипов("Дата"));
	ЗакрытыеПодразделения.Колонки.Добавить("КонецПоследнегоМесяца",       Новый ОписаниеТипов("Дата"));
	
	НалоговыйПериодКеш = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Показатели закрытых подразделений учитываются особым образом с отчетного периода, следующего за его закрытием.
			
		ОписаниеПодразделения = ЗакрытыеПодразделения.Добавить();
		
		ЗаполнитьЗначенияСвойств(ОписаниеПодразделения, Выборка);
		ОписаниеПодразделения.ПоследнийОтчетныйПериод = НалоговыйУчет.КонецПредыдущегоОтчетногоПериода(
			Выборка.ДатаСнятияСУчета,
			КонтекстРасчета.Организация,
			НалоговыйПериодКеш);	
			
		// Если регистрация (КПП) закрыта в первом отчетном периоде, то декларация по ней не представляется
		// См. Письмо ИФНС по г.Москве от 13 апреля 2010 г. N 16-15/038587
		// То есть, если это первый отчетный период года, то расчеты по подразделениям, закрытым в этом периоде, не создаем
		
		Если Не ЗначениеЗаполнено(ОписаниеПодразделения.ПоследнийОтчетныйПериод) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеПодразделения.НачалоПоследнегоМесяца = НачалоМесяца(ОписаниеПодразделения.ПоследнийОтчетныйПериод);
		ОписаниеПодразделения.КонецПоследнегоМесяца  = КонецМесяца(ОписаниеПодразделения.ПоследнийОтчетныйПериод);
		
	КонецЦикла;
	
	Запрос.Параметры.Вставить("ЗакрытыеПодразделения", ЗакрытыеПодразделения);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗакрытыеПодразделения.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗакрытыеПодразделения.ДатаСнятияСУчета КАК ДатаСнятияСУчета,
	|	ЗакрытыеПодразделения.ПоследнийОтчетныйПериод КАК ПоследнийОтчетныйПериод,
	|	ЗакрытыеПодразделения.НачалоПоследнегоМесяца КАК НачалоПоследнегоМесяца,
	|	ЗакрытыеПодразделения.КонецПоследнегоМесяца КАК КонецПоследнегоМесяца
	|ПОМЕСТИТЬ ЗакрытыеПодразделения
	|ИЗ
	|	&ЗакрытыеПодразделения КАК ЗакрытыеПодразделения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакрытыеПодразделения.НачалоПоследнегоМесяца КАК ПоследнийОтчетныйПериод,
	|	МАКСИМУМ(РасчетПоследнегоОтчетногоПериода.ПериодРасчета) КАК ПериодРасчета,
	|	РасчетПоследнегоОтчетногоПериода.Организация КАК Организация,
	|	РасчетПоследнегоОтчетногоПериода.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ КлючиДанныхЗакрытыхПодразделений
	|ИЗ
	|	РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК РасчетПоследнегоОтчетногоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗакрытыеПодразделения КАК ЗакрытыеПодразделения
	|		ПО РасчетПоследнегоОтчетногоПериода.РегистрацияВНалоговомОргане = ЗакрытыеПодразделения.РегистрацияВНалоговомОргане
	|			И (РасчетПоследнегоОтчетногоПериода.Организация = &Организация)
	|			И (РасчетПоследнегоОтчетногоПериода.ПериодРасчета МЕЖДУ ЗакрытыеПодразделения.НачалоПоследнегоМесяца И ЗакрытыеПодразделения.КонецПоследнегоМесяца)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакрытыеПодразделения.НачалоПоследнегоМесяца,
	|	РасчетПоследнегоОтчетногоПериода.Организация,
	|	РасчетПоследнегоОтчетногоПериода.РегистрацияВНалоговомОргане
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодРасчета,
	|	Организация,
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетПоследнегоОтчетногоПериода.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетПоследнегоОтчетногоПериода.ДоляНалоговойБазы КАК ДоляНалоговойБазы,
	|	РасчетПоследнегоОтчетногоПериода.НалоговаяБаза КАК НалоговаяБаза
	|ПОМЕСТИТЬ РасчетПоследнегоОтчетногоПериода
	|ИЗ
	|	РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК РасчетПоследнегоОтчетногоПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиДанныхЗакрытыхПодразделений КАК КлючиДанныхЗакрытыхПодразделений
	|		ПО РасчетПоследнегоОтчетногоПериода.ПериодРасчета = КлючиДанныхЗакрытыхПодразделений.ПериодРасчета
	|			И РасчетПоследнегоОтчетногоПериода.Организация = КлючиДанныхЗакрытыхПодразделений.Организация
	|			И РасчетПоследнегоОтчетногоПериода.РегистрацияВНалоговомОргане = КлючиДанныхЗакрытыхПодразделений.РегистрацияВНалоговомОргане
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрацияВНалоговомОргане";
	
	Запрос.Выполнить();
	
	// Для читаемости кода данные выбираются на сервер приложения отдельными запросами - см. ниже.
	
	// Рассчитываем доли налоговой базы по закрытым и действующим КПП (подразделениям).
	
	Если КонтекстРасчета.КонецПериода < '2014-01-01' Тогда
		ТочностьРасчета = 2;
	Иначе
		ТочностьРасчета = 0; // с 2014 года налог на прибыль исчисляется в целых рублях
	КонецЕсли;
	
	// Сначала выполняем расчет долей и налоговых баз для закрытых КПП,
	// поскольку остаток общей налоговой базы по организации далее будем распределять между действующими КПП согласно рассчитанным долям.
	
	// Выбираются доля и налоговая база, рассчитанные в последнем перед их закрытием отчетном периоде.
	// Однако, база затем может быть уточнена - см. УточнитьБазуНалогаНаПрибыльЗакрытыхРегистраций().
	// Для этого данные о закрытых подразделениях упорядочены.
	//
	// Имена полей соответствуют таблице конструктора НовыйРасчетРаспределенияНалоговойБазы().
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗакрытыеПодразделения.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗакрытыеПодразделения.ПоследнийОтчетныйПериод КАК ПоследнийОтчетныйПериод,
	|	ЕСТЬNULL(РасчетПоследнегоОтчетногоПериода.ДоляНалоговойБазы, 0) КАК ДоляНалоговойБазы,
	|	ЕСТЬNULL(РасчетПоследнегоОтчетногоПериода.НалоговаяБаза, 0) КАК НалоговаяБаза
	|ИЗ
	|	ЗакрытыеПодразделения КАК ЗакрытыеПодразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетПоследнегоОтчетногоПериода КАК РасчетПоследнегоОтчетногоПериода
	|		ПО ЗакрытыеПодразделения.РегистрацияВНалоговомОргане = РасчетПоследнегоОтчетногоПериода.РегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	НалоговаяБаза УБЫВ,
	|	ДоляНалоговойБазы УБЫВ,
	|	ПоследнийОтчетныйПериод УБЫВ,
	|	РегистрацияВНалоговомОргане";
	
	РасчетЗакрытыхПодразделений = НовыйРасчетРаспределенияНалоговойБазы();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Если регистрация (КПП) закрыта в первом отчетном периоде, то декларация по ней не представляется
		// См. Письмо ИФНС по г.Москве от 13 апреля 2010 г. N 16-15/038587
		
		Если Не ЗначениеЗаполнено(Выборка.ПоследнийОтчетныйПериод) Тогда
			Продолжить;
		КонецЕсли;	
		
		ЗаполнитьЗначенияСвойств(РасчетЗакрытыхПодразделений.Добавить(), Выборка);
		
	КонецЦикла;
	
	РасчетЗакрытыхПодразделений.ЗаполнитьЗначения(Истина, "Закрыто");
	
	НалоговаяБазаЗакрытых = УточнитьБазуНалогаНаПрибыльЗакрытыхРегистраций(
		РасчетЗакрытыхПодразделений,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация,
		НалоговаяБаза,
		ТочностьРасчета);
	
	// Остаток текущей налоговой базы распределяем между действующими КПП в соответствии с долями.
	// При этом сумма долей по действующим КПП должна быть 1. 
	
	// Упорядочивание в запросе не выполняется - данные сортируются после расчета базы.
	// Имена полей соответствуют таблице конструктора НовыйРасчетРаспределенияНалоговойБазы().
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоказателиПоНалоговымОрганам.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ПоказателиПоНалоговымОрганам.СреднесписочнаяЧисленность КАК СреднесписочнаяЧисленность,
	|	ПоказателиПоНалоговымОрганам.РасходыПоОплатеТруда КАК РасходыПоОплатеТруда,
	|	ПоказателиПоНалоговымОрганам.СтоимостьОСПрошлыхМесяцев КАК СтоимостьОСПрошлыхМесяцев,
	|	ПоказателиПоНалоговымОрганам.СтоимостьОССледующегоМесяца КАК СтоимостьОССледующегоМесяца
	|ИЗ
	|	ПоказателиПоНалоговымОрганам КАК ПоказателиПоНалоговымОрганам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗакрытыеПодразделения КАК ЗакрытыеПодразделения
	|		ПО ПоказателиПоНалоговымОрганам.РегистрацияВНалоговомОргане = ЗакрытыеПодразделения.РегистрацияВНалоговомОргане
	|ГДЕ
	|	ЗакрытыеПодразделения.РегистрацияВНалоговомОргане ЕСТЬ NULL";
	
	РасчетДействующихПодразделений = НовыйРасчетРаспределенияНалоговойБазы();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РасчетДействующихПодразделений.Добавить(), Выборка);
	КонецЦикла;
	
	// Согласно п. 10.2 Порядка заполнения декларации:
	// "[Налоговая база подразделения] определяются путем умножения показателя [общая налоговая база по организации] ...
	// на [долю налоговой базы]."
	
	// Для определения остаточной стоимости основных средств за отчетный (налоговый) период 
	// рассчитывается показатель средней (среднегодовой) остаточной стоимости основных средств
	// аналогично порядку п. 4 ст. 376 НК - в соответствии с письмом Минфина от 10 марта 2006 г. N 03-03-04/1/199
	
	КоличествоМесяцевКалендарногоГода = Месяц(КонтекстРасчета.КонецПериода);
	
	НалоговаяБазаДействующих = НалоговаяБаза - НалоговаяБазаЗакрытых;
	
	ОпределениеДолиПрибылиПоСреднесписочной = 
		(КонтекстРасчета.ПоказательОпределенияДолиПрибыли = Перечисления.ПоказателиДляОпределенияДолиПрибыли.СреднесписочнаяЧисленность);
	
	Если ОпределениеДолиПрибылиПоСреднесписочной Тогда
		ИтогПоказательОпределенияДолиПрибыли = РасчетДействующихПодразделений.Итог("СреднесписочнаяЧисленность");
	Иначе
		ИтогПоказательОпределенияДолиПрибыли = РасчетДействующихПодразделений.Итог("РасходыПоОплатеТруда");
	КонецЕсли;
	
	ИтогСредняяСтоимостьИмущества =
		(РасчетДействующихПодразделений.Итог("СтоимостьОСПрошлыхМесяцев") + РасчетДействующихПодразделений.Итог("СтоимостьОССледующегоМесяца"))
		/ (КоличествоМесяцевКалендарногоГода + 1);
		
	Для Каждого Запись Из РасчетДействующихПодразделений Цикл
			
		// Расчет среднегодовой стоимости ОС по подразделению сохраняем в отдельную переменную, чтобы избежать округления
		СтоимостьАмортизируемогоИмущества = 
			(Запись.СтоимостьОСПрошлыхМесяцев + Запись.СтоимостьОССледующегоМесяца) 
			/ (КоличествоМесяцевКалендарногоГода + 1);
			
		Запись.СтоимостьАмортизируемогоИмущества = СтоимостьАмортизируемогоИмущества;
		
		Если ОпределениеДолиПрибылиПоСреднесписочной Тогда
			ПоказательОпределенияДолиПрибыли = Запись.СреднесписочнаяЧисленность;
		Иначе
			ПоказательОпределенияДолиПрибыли = Запись.РасходыПоОплатеТруда;
		КонецЕсли;
		
		Если ИтогПоказательОпределенияДолиПрибыли = 0 И ИтогСредняяСтоимостьИмущества = 0 Тогда
			Запись.ДоляНалоговойБазы = 0;
		ИначеЕсли ИтогПоказательОпределенияДолиПрибыли = 0 Тогда
			Запись.ДоляНалоговойБазы = СтоимостьАмортизируемогоИмущества / ИтогСредняяСтоимостьИмущества;
		ИначеЕсли ИтогСредняяСтоимостьИмущества = 0 Тогда
			Запись.ДоляНалоговойБазы = ПоказательОпределенияДолиПрибыли / ИтогПоказательОпределенияДолиПрибыли;
		Иначе
			Запись.ДоляНалоговойБазы = 
				(СтоимостьАмортизируемогоИмущества / ИтогСредняяСтоимостьИмущества
				+ ПоказательОпределенияДолиПрибыли / ИтогПоказательОпределенияДолиПрибыли)
				/2;
		КонецЕсли;
		
		Запись.НалоговаяБаза = Окр(Запись.ДоляНалоговойБазы * НалоговаяБазаДействующих, ТочностьРасчета);
		
	КонецЦикла;
	
	РасчетДействующихПодразделений.Сортировать("НалоговаяБаза УБЫВ, ДоляНалоговойБазы УБЫВ, ПоследнийОтчетныйПериод УБЫВ, РегистрацияВНалоговомОргане", Новый СравнениеЗначений);
	
	// Отклонение округления добавляем в самую большую долю
	ПогрешностьОкругления = 1 - РасчетДействующихПодразделений.Итог("ДоляНалоговойБазы");
	Если ЗначениеЗаполнено(РасчетДействующихПодразделений) И ПогрешностьОкругления <> 0 Тогда
		ЗаписьМаксимальнойДоли = РасчетДействующихПодразделений[0];
		ЗаписьМаксимальнойДоли.ДоляНалоговойБазы = ЗаписьМаксимальнойДоли.ДоляНалоговойБазы + ПогрешностьОкругления;
		ЗаписьМаксимальнойДоли.НалоговаяБаза     = Окр(ЗаписьМаксимальнойДоли.ДоляНалоговойБазы * НалоговаяБазаДействующих, ТочностьРасчета);
	КонецЕсли;
	
	РасчетРаспределенияНалоговойБазы = НовыйРасчетРаспределенияНалоговойБазы();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РасчетДействующихПодразделений, РасчетРаспределенияНалоговойБазы);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РасчетЗакрытыхПодразделений,    РасчетРаспределенияНалоговойБазы);
	
КонецПроцедуры

Функция СведенияОЧисленности(Организация, КонецПериода)
	
	// В соответствии с письмами Минфина России от 20.11.13 № 03-03-06/1/49980, от 27.12.2011 № 03-03-06/2/201,
	// в вопросах расчета численности ориентируемся на правила Росстата по заполнению формы П-4.
	// В частности, это Приказ от 30 ноября 2022 г. N 872
	НачалоПериода = НачалоГода(КонецПериода);
	
	// Про точность в правилах ничего не сказано, но в самой форме П-4 указано
	// "допускается заполнение с двумя десятичными знаками после запятой"
	Точность = 2;
	
	ВсяОрганизация   = Истина;
	ПоПодразделениям = Истина;
	
	Возврат УчетЗарплаты.СреднесписочнаяЧисленностьДетальная(
		Организация,
		НачалоПериода,
		КонецПериода,
		ВсяОрганизация,
		ПоПодразделениям,
		Точность);
	
КонецФункции

// Процедура определяет, как рассчитываются доли налога на прибыль пункт 2 статьи 288 НК РФ:
//  ПоказательДляОпределенияДолиПрибыли - ПеречислениеСсылка.ПоказателиДляОпределенияДолиПрибыли - Входящий параметр, значение игнорируется
//  Организация  - СправочникСсылка.Организации - организация, настройки которой требуется получить
//  Период       - Дата - дата, на которую читаются настройки.
//
Процедура ПоказательОпределенияДолиПрибыли(ПоказательДляОпределенияДолиПрибыли, Организация, Период) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		ПоказательДляОпределенияДолиПрибыли = Перечисления.ПоказателиДляОпределенияДолиПрибыли.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Настройки = РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(
		Период,
		Новый Структура("Организация", Организация));
	
	Если Настройки.Количество() = 0 Тогда
		ПоказательДляОпределенияДолиПрибыли = Перечисления.ПоказателиДляОпределенияДолиПрибыли.РасходыНаОплатуТруда;
	Иначе
		ПоказательДляОпределенияДолиПрибыли = Настройки[0].ПоказательОпределенияДолиПрибыли;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьПериодыВЗапросОстатковАмортизируемогоИмущества(Запрос, ДобавляемыеПериоды)
	
	Если Не ЗначениеЗаполнено(ДобавляемыеПериоды) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[0];
	ОператорыЗапроса = ЗапросВыбора.Операторы;
	
	ИсходноеКоличествоОператоров = ОператорыЗапроса.Количество();
	
	// Продублируем эти операторы столько раз, сколько добавляемых периодов, при этом
	// - в параметрах виртуальных таблиц установим другую дату
	// - поменяем местами выражения для СтоимостьОСПрошлыхМесяцев и СтоимостьОССледующегоМесяца
	
	Колонки = ЗапросВыбора.Колонки;
	ИндексПрошлыйПериод = Колонки.Индекс(Колонки.Найти("СтоимостьОСПрошлыхМесяцев"));
	ИндексТекущийПериод = Колонки.Индекс(Колонки.Найти("СтоимостьОССледующегоМесяца"));
	
	Для ИндексПериода = 0 По ДобавляемыеПериоды.ВГраница() Цикл
		
		Период = ДобавляемыеПериоды[ИндексПериода];
		
		Для ИндексОператора = 0 По ИсходноеКоличествоОператоров - 1 Цикл
			
			ОператорТекущийПериод = ОператорыЗапроса[ИндексОператора];
			ОператорПрошлыйПериод = ОператорыЗапроса.Добавить(ОператорТекущийПериод);
			
			// предполагается, что источник - один, и это виртуальная таблица Остатки,
			// первый параметр которой - дата получения остатков
			ИмяДатаОстатков = "ДатаОстатков" + ИндексПериода;
			ОператорПрошлыйПериод.Источники[0].Источник.Параметры[0].Выражение = Новый ВыражениеСхемыЗапроса("&" + ИмяДатаОстатков);
			Запрос.УстановитьПараметр(ИмяДатаОстатков, Период);
			
			// Обменяемся выражениями полей
			ОператорПрошлыйПериод.ВыбираемыеПоля[ИндексПрошлыйПериод] =
				Новый ВыражениеСхемыЗапроса(Строка(ОператорТекущийПериод.ВыбираемыеПоля[ИндексТекущийПериод]));
				
			ОператорПрошлыйПериод.ВыбираемыеПоля[ИндексТекущийПериод] =
				Новый ВыражениеСхемыЗапроса(Строка(ОператорТекущийПериод.ВыбираемыеПоля[ИндексПрошлыйПериод]));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		
КонецПроцедуры

// Рассчитывает базу налога по закрытым регистрациям (КПП) - добавляет записи в ТаблицаРаспределенияБазыНалогаНаПрибыль.
//
// Параметры:
//  ТаблицаРаспределенияБазыНалогаНаПрибыль 
//							- Таблица значений - таблица, содержащая результат распределения налога, т.е. доли и налоговые базы по регистрациям (КПП)
//  Период					- Дата - окончание текущего отчетного (налогового) периода
//  Организация				- СправочникСсылка.Организации - головная организация, по которой рассчитывается налог на прибыль
//  НалоговаяБаза			- Число - прибыль текущего отчетного (налогового) периода по всей организации
//  ТочностьРасчета			- Число - длина дробной части при округлении сумм налоговых баз по регистрациям (КПП)
//
// Возвращаемое значение:
//  Число - общая налоговая база (прибыль) по закрытым регистрациям (КПП)
//
Функция УточнитьБазуНалогаНаПрибыльЗакрытыхРегистраций(ТаблицаРаспределенияБазыНалогаНаПрибыль, Период, Организация, Знач ОбщаяНалоговаяБаза, ТочностьРасчета)
	
	Если Не ЗначениеЗаполнено(ТаблицаРаспределенияБазыНалогаНаПрибыль) Тогда
		Возврат 0;
	КонецЕсли;	
	
	// Определим, как рассчитывать базу налога по закрытым регистрациям.
	// Если выполняются 2 условия
	//	- уменьшилась прибыль по всей организации по сравнению с предыдущим отчетным периодом
	//	- уменьшилась прибыль по всей организации по сравнению с отчетным периодом, после которого закрыто ОП
	// тогда для расчета налоговой базы по КПП берется доля налоговой базы, рассчитанная за последний отчетный период до закрытия данного КПП,
	// и умножается на общую прибыль по организации за текущий период.
	// В ином случае налоговая база для КПП принимается равной налоговой базе, рассчитанной для данного КПП за последний отчетный период до закрытия.
	// Доля и налоговая база, рассчитанные за последний отчетный период до закрытия регистрации, уже заполнены в строках массива ЗакрытыеРегистрации
	
	НалоговаяБазаПрошлыхПериодов = Новый Соответствие;
	НалоговаяБазаСнизилась = Ложь;
	
	ПрошлыйОтчетныйПериод = НалоговыйУчет.КонецПредыдущегоОтчетногоПериода(Период, Организация);
	
	Если Не ЗначениеЗаполнено(ПрошлыйОтчетныйПериод) Тогда
		// Если регистрация (КПП) закрыта в первом отчетном периоде, то декларация по ней не представляется
		// См. Письмо ИФНС по г.Москве от 13 апреля 2010 г. N 16-15/038587
		// То есть, если это первый отчетный период года, то расчеты по подразделениям, закрытым в этом периоде, не создаем
		Возврат 0;
	Иначе
		ОбщаяНалоговаяБазаПрошлогоПериода = НалоговаяБаза(Организация, ПрошлыйОтчетныйПериод, НалоговаяБазаПрошлыхПериодов);
		НалоговаяБазаСнизилась = (ОбщаяНалоговаяБазаПрошлогоПериода > 0) И (ОбщаяНалоговаяБазаПрошлогоПериода > ОбщаяНалоговаяБаза);
	КонецЕсли;
		
	НалоговаяБазаОстаток = ОбщаяНалоговаяБаза; 	// Налоговая база текущего периода за вычетом налоговых баз тех регистраций,
												// по которым фиксируется налоговая база, рассчитанная в последнем до закрытия отченом периоде
	
	РегистрацииСФиксированнойДолей = Новый Массив;
	
	// В первую очередь считаем налоговые базы закрытых КПП, по которым зафиксирована база налога,
	// и вычитаем эти суммы из текущей общей базы налога.
	Для Каждого Запись Из ТаблицаРаспределенияБазыНалогаНаПрибыль Цикл
		
		// Считаем общую налоговую базу по организации за период, после которого закрылось подразделение.
		// Этот период считается последним для закрытого подразделения.
		ОбщаяНалоговаяБазаПередЗакрытием = НалоговаяБаза(Организация, Запись.ПоследнийОтчетныйПериод, НалоговаяБазаПрошлыхПериодов);
		
		Если ОбщаяНалоговаяБаза <= 0 Тогда
			// Если налоговая база до закрытия была не 0, то нужно сторнировать начисления налога по закрытому подразделению
			Запись.НалоговаяБаза = 0;
		ИначеЕсли НЕ НалоговаяБазаСнизилась ИЛИ ОбщаяНалоговаяБазаПередЗакрытием <= ОбщаяНалоговаяБаза Тогда
			
			// П. 10.11 Порядка заполнения декларации по прибыли:
			// "... по закрытому обособленному подразделению в Декларациях за последующие отчетные периоды и текущий налоговый период
			// ... указывается доля налоговой базы и налоговая база с учетом доли в размерах,
			// исчисленных и отраженных в Декларациях за отчетный период, предшествующий кварталу, в котором оно было закрыто".
			
			// По таким регистрациям фиксируются налоговая база и доля, рассчитанные в последнем до закрытия отчетном периоде.
			
			Если Запись.ДоляНалоговойБазы <> 0 И Запись.НалоговаяБаза = 0 Тогда
				// Запись.ДоляНалоговойБазы - это доля налоговой базы по подразделению в последнем отчетном периоде до закрытия.
				// Если она отлична от 0, но при этом не заполнена налоговая база в регистре сведений, то
				// возможно, закрытие соответствующего месяца выполнялось до обновления ИБ.
				// Рассчитаем налоговую базу исходя из доли, рассчитанной в последнем отчетном периоде перед закрытием, и общей налоговой базы того периода.
				Запись.НалоговаяБаза = Окр(Запись.ДоляНалоговойБазы * ОбщаяНалоговаяБазаПередЗакрытием, ТочностьРасчета);
			КонецЕсли;
			
			// Налоговая база уже заполнена, но нужно, чтобы она не превышала текущую налоговую базу
			Запись.НалоговаяБаза = Мин(Запись.НалоговаяБаза, НалоговаяБазаОстаток);
			
			НалоговаяБазаОстаток 		= НалоговаяБазаОстаток - Запись.НалоговаяБаза;
			
		Иначе
			
			// Общая налоговая база снизилась и по отношению к прошлому отченому периоду, 
			// и по отношению к тому отчетному периоду, после которого закрылось подразделение.
			
			// П. 10.11 Порядка заполнения декларации по прибыли:
			// "При снижении налоговой базы в целом по организации по сравнению с предыдущим отчетным периодом 
			// и отчетным периодом, после которого закрыто обособленное подразделение ... [налоговая база подразделения] ...
			// определяется путем умножения показателя [доли налоговой базы] на показатель [общей налоговой базы текущего периода]".
			
			// Запишем в массив - такие строки обработаем ниже.
			РегистрацииСФиксированнойДолей.Добавить(Запись);
			
		КонецЕсли;
					
	КонецЦикла;
	
	РаспределяемаяНалоговаяБаза = НалоговаяБазаОстаток; // Налоговая база текущего за вычетом налоговых баз всех закрытых регистраций
	
	// Далее считаем закрытые КПП, по которым зафиксированы доли налоговой базы.
	Для Каждого Запись Из РегистрацииСФиксированнойДолей Цикл
		
		// Считаем налоговую базу по фиксированной доле, рассчитанной в последнем отчетном периоде до закрытия.
		// За 100% берем текущую налоговую базу, уменьшенную на налоговые базы тех КПП, где база зафиксирована с прошлых периодов.
		Запись.НалоговаяБаза = Мин(Окр(Запись.ДоляНалоговойБазы * НалоговаяБазаОстаток, ТочностьРасчета), РаспределяемаяНалоговаяБаза);
		РаспределяемаяНалоговаяБаза = РаспределяемаяНалоговаяБаза - Запись.НалоговаяБаза;
		
	КонецЦикла;
	
	Возврат ОбщаяНалоговаяБаза - РаспределяемаяНалоговаяБаза;
	
КонецФункции

Функция НалоговаяБаза(Организация, Период, КэшНалоговойБазыПоПериодам)
	
	КонецПериода = КонецМесяца(Период);
	
	НалоговаяБаза = КэшНалоговойБазыПоПериодам[КонецПериода];
	Если НалоговаяБаза = Неопределено Тогда
		
		НачалоНалоговогоПериода = КэшНалоговойБазыПоПериодам["НачалоНалоговогоПериода"];
		Если НачалоНалоговогоПериода = Неопределено Тогда
			НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(КонецПериода, Организация);
			КэшНалоговойБазыПоПериодам.Вставить("НачалоНалоговогоПериода", НачалоНалоговогоПериода);
		КонецЕсли;
		
		Если НачалоНалоговогоПериода = Неопределено Тогда
			НалоговаяБаза = 0;
		Иначе
			НалоговаяБаза = РасчетНалогаНаПрибыль.НалоговаяБаза(НачалоНалоговогоПериода, КонецПериода, Организация);
		КонецЕсли;
		
		КэшНалоговойБазыПоПериодам.Вставить(КонецПериода, НалоговаяБаза);
		
	КонецЕсли;
	
	Возврат НалоговаяБаза;
	
КонецФункции

Функция НовыйРасчетРаспределенияНалоговойБазы()
	
	ОписаниеТипаЧисла15_2 = ОбщегоНазначения.ОписаниеТипаЧисло(15, 2);
	
	ЗаписьРаспределенияБазыНалогаНаПрибыль = Новый ТаблицаЗначений;
	ЗаписьРаспределенияБазыНалогаНаПрибыль.Колонки.Добавить("РегистрацияВНалоговомОргане",       Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ЗаписьРаспределенияБазыНалогаНаПрибыль.Колонки.Добавить("СтоимостьАмортизируемогоИмущества", ОписаниеТипаЧисла15_2);
	ЗаписьРаспределенияБазыНалогаНаПрибыль.Колонки.Добавить("СтоимостьОСПрошлыхМесяцев",         ОписаниеТипаЧисла15_2);
	ЗаписьРаспределенияБазыНалогаНаПрибыль.Колонки.Добавить("СтоимостьОССледующегоМесяца",       ОписаниеТипаЧисла15_2);
	ЗаписьРаспределенияБазыНалогаНаПрибыль.Колонки.Добавить("РасходыПоОплатеТруда",              ОписаниеТипаЧисла15_2);
	ЗаписьРаспределенияБазыНалогаНаПрибыль.Колонки.Добавить("СреднесписочнаяЧисленность",
		Метаданные.РегистрыСведений.РасчетДолейБазыНалогаНаПрибыль.Ресурсы.СреднесписочнаяЧисленность.Тип);
	ЗаписьРаспределенияБазыНалогаНаПрибыль.Колонки.Добавить("ДоляНалоговойБазы",                 Метаданные.РегистрыСведений.РасчетДолейБазыНалогаНаПрибыль.Ресурсы.ДоляНалоговойБазы.Тип);
	ЗаписьРаспределенияБазыНалогаНаПрибыль.Колонки.Добавить("НалоговаяБаза",                 	 Метаданные.РегистрыСведений.РасчетДолейБазыНалогаНаПрибыль.Ресурсы.НалоговаяБаза.Тип);
	ЗаписьРаспределенияБазыНалогаНаПрибыль.Колонки.Добавить("Закрыто",                 			 Новый ОписаниеТипов("Булево"));
	
	ЗаписьРаспределенияБазыНалогаНаПрибыль.Колонки.Добавить("ПоследнийОтчетныйПериод",   		 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	
	Возврат ЗаписьРаспределенияБазыНалогаНаПрибыль;
	
КонецФункции

Процедура РассчитатьСреднююСтавкуНалога(РасчетнаяСтавкаНалогаЗаМесяц, РасчетСреднейСтавки, ОбщаяСуммаНалога, РасчетРаспределенияНалоговойБазы, Организация, Период) Экспорт
	
	// Средняя ставка налога на прибыль за месяц (имеет смысл, если налог уплачивается по разным ставкам)
	ПрименяютсяРазныеСтавкиНалогаНаПрибыль = 
		(РасчетРаспределенияНалоговойБазы <> Неопределено                        // Налог уплачивается в разные регионы
		И УчетнаяПолитика.ПрименяютсяРазныеСтавкиНалогаНаПрибыль(Организация, Период)); // Пользователь установил, что в разных регионах могут быть разные ставки
		
	Если Не ПрименяютсяРазныеСтавкиНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;
			
	НалоговаяБазаОбщая = 0;
	
	 // В случае признания убытков расчетная ставка определяется по предыдущему месяцу
	Если ОбщаяСуммаНалога = 0 Тогда
		
		ПолучитьРасчетнуюСтавкуНалогаНаПрибыль(
			РасчетнаяСтавкаНалогаЗаМесяц,
			Организация, 
			НачалоМесяца(Период)-1);
			
	Иначе  
		// в случае признания прибыли расчетная ставка текущего месяца определяется по формуле:
		// налог на прибыль НУ / прибыль по данным БУ
		// (все показатели по данным текущего месяца)

		НалоговаяБазаЗаМесяц = РасчетНалогаНаПрибыль.НалоговаяБаза(     
			НачалоМесяца(Период), 
			КонецМесяца(Период), 
			Организация);
			
		НачалоНалоговогоПериода = НалоговыйУчет.НачалоНалоговогоПериода(Период, Организация);
		Если НачалоНалоговогоПериода = Неопределено Тогда
			НалоговаяБазаЗаГод = 0;
		Иначе
			НалоговаяБазаЗаГод = РасчетНалогаНаПрибыль.НалоговаяБаза(
				НачалоНалоговогоПериода,
				КонецМесяца(Период), 
				Организация);
		КонецЕсли;
			
		// если в прошлом периоде по итогам с начала года был убыток, а в текущем - прибыль,
		// то налог на прибыль по данным НУ, рассчитанный на текущий месяц, соответствует налогу на прибыль за год,
		// следовательно база берется за год
		НалоговаяБазаОбщая = ?(НалоговаяБазаЗаГод < НалоговаяБазаЗаМесяц, НалоговаяБазаЗаГод, НалоговаяБазаЗаМесяц);  	
		РасчетнаяСтавкаНалогаЗаМесяц = ?(НалоговаяБазаОбщая = 0, 0, ОбщаяСуммаНалога / НалоговаяБазаОбщая);
		
	КонецЕсли;
		
	РасчетСреднейСтавки = НовыйРасчетСреднейСтавкиНалога();
	СтрокаРасчета = РасчетСреднейСтавки.Добавить();
	СтрокаРасчета.Ставка      = РасчетнаяСтавкаНалогаЗаМесяц * 100;
	СтрокаРасчета.СуммаНалога = ОбщаяСуммаНалога;
	СтрокаРасчета.СуммаБазы   = НалоговаяБазаОбщая;  		
	
КонецПроцедуры

Функция НовыйРасчетСреднейСтавкиНалога()
	
	ТипСумма = БухгалтерскийУчетКлиентСервер.ТипСумма();
	
	Расчет = Новый ТаблицаЗначений;
	Расчет.Колонки.Добавить("Ставка",      Метаданные.РегистрыСведений.РасчетСтавкиНалогаНаПрибыльЗаМесяц.Ресурсы.Ставка.Тип);
	Расчет.Колонки.Добавить("СуммаНалога", ТипСумма);
	Расчет.Колонки.Добавить("СуммаБазы",   ТипСумма);
	
	Возврат Расчет;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕСЧЕТ ОНА И ОНО ПО РАСЧЕТНОЙ СТАВКЕ НАЛОГА НА ПРИБЫЛЬ


// Читает из информационной базы данные о фактическом распределении налоговой базы,
// рассчитанные и зарегистрированные регламентной операцией РасчетНалогаНаПрибыль.
//
// Параметры:
//  Расчет		 - ТаблицаЗначений - см. НовыйРасчетРаспределенияНалоговойБазы()
//                 Возвращаемый параметр. Следует передать неинициализированную переменную;
//                 процедура поместит в нее результат НовыйРасчетРаспределенияНалоговойБазы().
//  Период		 - Дата - дата, характеризующая отчетный период - любая дата последнего месяца отчетного периода.
//  Организация	 - СправочникСсылка.Организации - налогоплательщик.
//
Процедура ПрочитатьРасчетРаспределенияНалоговойБазы(Расчет, Период, Организация) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетДолейБазыНалогаНаПрибыль.СтоимостьАмортизируемогоИмущества КАК СтоимостьАмортизируемогоИмущества,
	|	РасчетДолейБазыНалогаНаПрибыль.СтоимостьОСПрошлыхМесяцев КАК СтоимостьОСПрошлыхМесяцев,
	|	РасчетДолейБазыНалогаНаПрибыль.СтоимостьОССледующегоМесяца КАК СтоимостьОССледующегоМесяца,
	|	РасчетДолейБазыНалогаНаПрибыль.РасходыПоОплатеТруда КАК РасходыПоОплатеТруда,
	|	РасчетДолейБазыНалогаНаПрибыль.ДоляНалоговойБазы КАК ДоляНалоговойБазы,
	|	РасчетДолейБазыНалогаНаПрибыль.НалоговаяБаза КАК НалоговаяБаза,
	|	РасчетДолейБазыНалогаНаПрибыль.Закрыто КАК Закрыто
	|ИЗ
	|	РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК РасчетДолейБазыНалогаНаПрибыль
	|ГДЕ
	|	РасчетДолейБазыНалогаНаПрибыль.Организация = &Организация
	|	И РасчетДолейБазыНалогаНаПрибыль.ПериодРасчета МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И РасчетДолейБазыНалогаНаПрибыль.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрацияВНалоговомОргане";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Расчет = НовыйРасчетРаспределенияНалоговойБазы();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Расчет.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьОтложенныйНалогПоСреднейСтавкеТекущегоМесяца(Движения, СуммаПересчетаУбытков, НоваяСтавкаНалога, Период, Организация) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	СтараяСтавкаНалога = 0; // на начало закрываемого месяца
	ПолучитьРасчетнуюСтавкуНалогаНаПрибыль(СтараяСтавкаНалога, Организация, НачалоМесяца(Период) - 1);
	СтараяСтавкаНалога = СтараяСтавкаНалога * 100;
	
	Корректировка = РасчетНалогаНаПрибыль.РассчитатьКорректировкуОтложенногоНалога(
		Период,
		Организация,
		СтараяСтавкаНалога, 
		НоваяСтавкаНалога);
		
	Если Не ЗначениеЗаполнено(Корректировка) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗаписи = ЗакрытиеМесяца.РеквизитыЗаписиВоВспомогательныеРегистрыСведений(Период, Организация);
	
	ЗакрытиеМесяца.ЗаписьВоВспомогательныеРегистрыСведений(
		Движения,
		Корректировка,
		РеквизитыЗаписи,
		"РасчетСтоимостиНалоговыхАктивовИОбязательствПослеИзмененияСтавкиНалогаНаПрибыль");
	
	РасчетНалогаНаПрибыль.СформироватьДвиженияКорректировкаОтложенногоНалога(
		Движения,
		Корректировка,
		Период, 
		Организация);
		
	РасчетНалогаНаПрибыль.СформироватьДвиженияКорректировкаУбыткаТекущегоПериода(
		Движения, 
		СуммаПересчетаУбытков, 
		Период, 
		Организация);

КонецПроцедуры

Процедура ПолучитьРасчетнуюСтавкуНалогаНаПрибыль(РасчетнаяСтавка, Организация, Дата) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Отбор  = Новый Структура("Организация,ПериодРасчета", Организация, Дата);
	Ставки = РегистрыСведений.РасчетСтавкиНалогаНаПрибыльЗаМесяц.Получить(Отбор);
	Если Ставки = Неопределено Или Ставки.Ставка = 0 Тогда
		
		РасчетнаяСтавка = РасчетНалогаНаПрибыль.СуммарнаяУстановленнаяСтавкаНалога(Дата, Организация);
		
	Иначе
			
		РасчетнаяСтавка = Ставки.Ставка / 100;
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ЛИСТА ДЕКЛАРАЦИИ С РАСЧЕТОМ БАЗЫ В РАЗРЕЗЕ НАЛОГОВЫХ ОРГАНОВ

// Для заполнения декларации по налогу на прибыль получает данные информационной базы
// о распределении налога между обособленными подразделениями
//
// Параметры:
//  Расчет							 - см. НалогНаПрибыльДекларация.НовыйРасчетРаспределенияНалоговойБазы() - коллекция, в которую помещаются собранные данные
//  КонтекстРасчета					 - см. НалогНаПрибыльДекларация.НовыйКонтекстРасчета() - описывает период и организацию, по которой готовится расчет
//  КППОбособленногоПодразделения	 - Строка - 
//   - идентификатор подразделения, по которому представляется декларация
//   - пустая строка, если декларация должна содержать данные по всем подразделениям организации
//
Процедура ПолучитьРаспределениеНалогаДляЗаполненияДекларации(Расчет, КонтекстРасчета) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	// Получим данные о распределении налога между налоговыми органами (КПП)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Распределение.Организация КАК Организация,
	|	Распределение.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Распределение.РегистрацияВНалоговомОргане.КодРегиона КАК КодРегиона,
	|	Распределение.ДоляНалоговойБазы * 100 КАК ДоляНалоговойБазы,
	|	Распределение.Закрыто КАК Закрыто,
	|	Распределение.НалоговаяБаза КАК НалоговаяБаза,
	|	ВЫБОР
	|		КОГДА Распределение.Закрыто 
	|			ТОГДА Распределение.НалоговаяБаза
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НалоговаяБазаЗакрытогоПодразделения,
	|	Распределение.РегистрацияВНалоговомОргане.КПП КАК КПП,
	|	НЕ Распределение.Организация.ОбособленноеПодразделение
	|		И Распределение.РегистрацияВНалоговомОргане = Распределение.Организация.РегистрацияВНалоговомОргане КАК ПоМестуНахожденияОрганизации,
	|	Распределение.РегистрацияВНалоговомОргане.НаименованиеОбособленногоПодразделения КАК НаименованиеОбособленногоПодразделения,
	|	Распределение.Организация.НаименованиеПолное КАК НаименованиеОрганизации,
	|	Распределение.РегистрацияВНалоговомОргане <> Распределение.Организация.РегистрацияВНалоговомОргане
	|		И ЕСТЬNULL(Распределение.РегистрацияВНалоговомОргане.НаименованиеОбособленногоПодразделения, """") = """" КАК НаименованиеСледуетОпределитьИзПодразделения
	|ПОМЕСТИТЬ РаспределениеНалоговойБазы
	|ИЗ
	|	РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК Распределение
	|ГДЕ
	|	Распределение.Организация = &Организация
	|	И Распределение.ПериодРасчета МЕЖДУ &НачалоМесяца И &КонецПериода";
	
	Если Не ПустаяСтрока(КонтекстРасчета.КППОбособленногоПодразделения) Тогда
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		
		СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор.Добавить("Распределение.РегистрацияВНалоговомОргане.КПП = &КППОбособленногоПодразделения");
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация",                   КонтекстРасчета.Организация);
	Запрос.УстановитьПараметр("НачалоМесяца",                  НачалоМесяца(КонтекстРасчета.КонецПериода)); // В каждом месяце формируются записи, характеризующие весь налоговый период
	Запрос.УстановитьПараметр("КонецПериода",                  КонтекстРасчета.КонецПериода);
	Запрос.УстановитьПараметр("КППОбособленногоПодразделения", КонтекстРасчета.КППОбособленногоПодразделения);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// Создаем временную таблицу НалоговыеОрганыПоНалогуНаПрибыль
	// Данная таблица требуется, чтобы определить, как отчитывается организация в данном налоговом органе:
	//	- только за один адрес регистрации в налоговых органах
	//	- или по нескольким адресам регистрации в одном регионе
	
	УплачиватьНалогПоГруппамПодразделений = УплачиватьНалогНаПрибыльПоГруппамПодразделений(КонтекстРасчета.Организация, КонтекстРасчета.КонецПериода);
	СоздатьНалоговыеОрганыПоНалогуНаПрибыль(
		МенеджерВременныхТаблиц,
		КонтекстРасчета.Организации,
		КонтекстРасчета.КонецПериода,
		?(ЗначениеЗаполнено(КонтекстРасчета.КППОбособленногоПодразделения), "РаспределениеНалоговойБазы", ""),
		УплачиватьНалогПоГруппамПодразделений);
	
	// Дополняем именами подразделений
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	МАКСИМУМ(Подразделения.НаименованиеПолное) КАК Наименование
	|ПОМЕСТИТЬ НаименованияПодразделенийНаОтдельномБалансе
	|ИЗ
	|	Справочник.Организации КАК Подразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспределениеНалоговойБазы КАК ДолиНалоговойБазы
	|		ПО (Подразделения.ОбособленноеПодразделение)
	|			И Подразделения.РегистрацияВНалоговомОргане = ДолиНалоговойБазы.РегистрацияВНалоговомОргане
	|			И (ДолиНалоговойБазы.НаименованиеСледуетОпределитьИзПодразделения)
	|ГДЕ
	|	Подразделения.НаименованиеПолное <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	Подразделения.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подразделения.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	МАКСИМУМ(Подразделения.НаименованиеПолное) КАК Наименование
	|ПОМЕСТИТЬ НаименованияПодразделенийНаОбщемБалансе
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК Подразделения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспределениеНалоговойБазы КАК ДолиНалоговойБазы
	|		ПО (Подразделения.ОбособленноеПодразделение)
	|			И Подразделения.РегистрацияВНалоговомОргане = ДолиНалоговойБазы.РегистрацияВНалоговомОргане
	|			И (ДолиНалоговойБазы.НаименованиеСледуетОпределитьИзПодразделения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаименованияПодразделенийНаОтдельномБалансе КАК НайденныеРанееНаименования
	|		ПО Подразделения.РегистрацияВНалоговомОргане = НайденныеРанееНаименования.РегистрацияВНалоговомОргане
	|ГДЕ
	|	Подразделения.НаименованиеПолное <> """"
	|	И НайденныеРанееНаименования.РегистрацияВНалоговомОргане ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	Подразделения.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеНалоговойБазы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РаспределениеНалоговойБазы.ПоМестуНахожденияОрганизации
	|				ТОГДА РаспределениеНалоговойБазы.НаименованиеОрганизации
	|			КОГДА НЕ РаспределениеНалоговойБазы.НаименованиеСледуетОпределитьИзПодразделения
	|				ТОГДА РаспределениеНалоговойБазы.НаименованиеОбособленногоПодразделения
	|			КОГДА НЕ НаименованияПодразделенийНаОтдельномБалансе.Наименование ЕСТЬ NULL
	|				ТОГДА НаименованияПодразделенийНаОтдельномБалансе.Наименование
	|			КОГДА НЕ НаименованияПодразделенийНаОбщемБалансе.Наименование ЕСТЬ NULL
	|				ТОГДА НаименованияПодразделенийНаОбщемБалансе.Наименование
	|			ИНАЧЕ РаспределениеНалоговойБазы.НаименованиеОрганизации
	|		КОНЕЦ) КАК НаименованиеПодразделения
	|ПОМЕСТИТЬ НаименованияПодразделений
	|ИЗ
	|	РаспределениеНалоговойБазы КАК РаспределениеНалоговойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаименованияПодразделенийНаОтдельномБалансе КАК НаименованияПодразделенийНаОтдельномБалансе
	|		ПО РаспределениеНалоговойБазы.РегистрацияВНалоговомОргане = НаименованияПодразделенийНаОтдельномБалансе.РегистрацияВНалоговомОргане
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаименованияПодразделенийНаОбщемБалансе КАК НаименованияПодразделенийНаОбщемБалансе
	|		ПО РаспределениеНалоговойБазы.РегистрацияВНалоговомОргане = НаименованияПодразделенийНаОбщемБалансе.РегистрацияВНалоговомОргане
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеНалоговойБазы.РегистрацияВНалоговомОргане
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспределениеНалоговойБазы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РаспределениеНалоговойБазы.КПП КАК КПП,
	|	РаспределениеНалоговойБазы.Закрыто КАК Закрыто,
	|	РаспределениеНалоговойБазы.ПоМестуНахожденияОрганизации КАК ПоМестуНахожденияОрганизации,
	|	НаименованияПодразделений.НаименованиеПодразделения КАК НаименованиеПодразделения,
	|	РаспределениеНалоговойБазы.ДоляНалоговойБазы КАК ДоляНалоговойБазы,
	|	РаспределениеНалоговойБазы.НалоговаяБаза КАК НалоговаяБазаПодразделения,
	|	РаспределениеНалоговойБазы.НалоговаяБазаЗакрытогоПодразделения КАК НалоговаяБазаЗакрытогоПодразделения
	|ИЗ
	|	РаспределениеНалоговойБазы КАК РаспределениеНалоговойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаименованияПодразделений КАК НаименованияПодразделений
	|		ПО РаспределениеНалоговойБазы.РегистрацияВНалоговомОргане = НаименованияПодразделений.РегистрацияВНалоговомОргане
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоМестуНахожденияОрганизации УБЫВ,
	|	КПП,
	|	РегистрацияВНалоговомОргане";

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Порядок заполнения декларации
	//
	// - Приказ ФНС России от 19.10.2016 N ММВ-7-3/572@
	// 4.2.3. Организации, имеющие обособленные подразделения, суммы авансовых платежей и налога к доплате или к уменьшению в бюджеты субъектов Российской Федерации
	//        по месту нахождения этих обособленных подразделений (ответственных обособленных подразделений) и своего места нахождения указывают в Приложениях N 5 к Листу 02
	// 5.7. Налогоплательщики, имеющие обособленные подразделения, исчисление налога в бюджеты субъектов Российской Федерации производят по отдельному расчету
	//      в Приложениях N 5 к Листу 02 в разрезе обособленных подразделений или групп обособленных подразделений.
	// 10.1. Приложение N 5 к Листу 02 "Расчет распределения авансовых платежей и налога на прибыль организаций в бюджет субъекта Российской Федерации организацией,
	//      имеющей обособленные подразделения" заполняется налогоплательщиком по организации без обособленных подразделений и по каждому обособленному подразделению,
	//      включая закрытые в текущем налоговом периоде, или группе обособленных подразделений. Количество расчетов зависит от количества обособленных подразделений
	//      или групп обособленных подразделений.
	//
	// - Приказ ФНС России от 11.09.2020 N ЕД-7-3/655@
	// 10.13. При составлении Приложений N 5 к Листу 02 Декларации с кодом "4" по реквизиту "Расчет составлен (код)"
	//        в группу обособленных подразделений может входить организация без входящих в ее состав обособленных подразделений, 
	//        если организация находится на территории этого же субъекта Российской Федерации.
	//        Если налогоплательщик, уплачивающий налог в бюджеты субъектов Российской Федерации в соответствии со вторым абзацем пункта 2 статьи 288 Кодекса,
	//        имеет в каком-либо субъекте Российской Федерации только одно обособленное подразделение,
	//        то Приложение N 5 к Листу 02 по этому обособленному подразделению составляется также с кодом "4" по реквизиту "Расчет составлен (код)".
	
	КоличествоСтраницОбособленныхПодразделений = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Расчет.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.Закрыто Тогда
			// Для расчета по закрытому подразделению предусмотрено отдельное значение признака "Расчет составлен (код)".
			// Если закрыта группа подразделений в регионе, то признак "Расчет составлен (код)" ставится как по закрытому подразделению.
			// Здесь группа подразделений считается закрытой, если закрыто ответственное подразделение (т.е. налоговый орган - получатель декларации)
			НоваяСтрока.МестоНахожденияНалоговогоОргана = "3"; // = "по обособленному подразделению, закрытому в течение текущего налогового периода", см. пояснение к полю на форме декларации
		ИначеЕсли УплачиватьНалогПоГруппамПодразделений Тогда
			НоваяСтрока.МестоНахожденияНалоговогоОргана = "4"; // = "по группе обособленных подразделений", см. пояснение к полю на форме декларации, п. 10.13 Порядка заполнения, письмо СД-4-3/2143@
		ИначеЕсли Выборка.ПоМестуНахожденияОрганизации Тогда
			НоваяСтрока.МестоНахожденияНалоговогоОргана = "1"; // = "по организации без входящих в нее обособленных подразделений", см. пояснение к полю на форме декларации
		Иначе
			НоваяСтрока.МестоНахожденияНалоговогоОргана = "2"; // = "по обособленному подразделению", см. пояснение к полю на форме декларации
		КонецЕсли;
		
		Если Выборка.ПоМестуНахожденияОрганизации Тогда
			НоваяСтрока.ВозложенаОбязанностьУплатыНалога = "1"; // = "возложена", см. пояснение к полю на форме декларации
		Иначе
			// Организация может возложить обязанность по уплате на обособленное подразделение.
			// При этом порядок такой: организация рассчитывает сумму налога и сообщает ее обособленному подразделению,
			// а подразделение (филиал или представительство) уплачивает со своего счета.
			// В программе нет сведений о выбранном порядке.
			// По умолчанию поле заполняем значением "0", т.к. по обращениям чаще заполняют "0".
			НоваяСтрока.ВозложенаОбязанностьУплатыНалога = "0";
			
			КоличествоСтраницОбособленныхПодразделений = КоличествоСтраницОбособленныхПодразделений + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоСтраницОбособленныхПодразделений = 0 Тогда
		// Письмо ФНС от 26 января 2011 г. N КЕ-4-3/935@
		// "При этом включение в состав налоговой декларации Приложения N 5 к листу 02 не требуется."
		Расчет.Очистить();
		Возврат;
	КонецЕсли;
	
	// Получим ставки налога на прибыль в региональный бюджет.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспределениеНалоговойБазы.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	РаспределениеНалоговойБазы КАК РаспределениеНалоговойБазы";
	РегистрацииВНалоговомОргане = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РегистрацияВНалоговомОргане");
		
	НалоговыеСтавкиРегиональныйБюджет = Новый Соответствие;
	ЗаполнитьНалоговыеСтавкиРегиональныйБюджет(
		НалоговыеСтавкиРегиональныйБюджет,
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация,
		РегистрацииВНалоговомОргане);
		
	Для Каждого Запись Из Расчет Цикл
		Запись.СтавкаНалогаРегиональныйБюджет = НалоговыеСтавкиРегиональныйБюджет[Запись.РегистрацияВНалоговомОргане] * 100; // Следует показывать в процентах, а не в долях
	КонецЦикла;
	
	// Налог может быть уменьшен на суммы торгового сбора
	
	// См. также НалогНаПрибыльДекларация.ПолучитьТорговыйСбор()
	
	ЕстьЗадолженностьПоТорговомуСбору = РасчетНалогаНаПрибыль.ЕстьЗадолженностьПоТорговомуСбору(
		КонтекстРасчета.Организация,
		КонтекстРасчета.ДатаПодписи);
		
	Если ЕстьЗадолженностьПоТорговомуСбору Тогда
		Возврат;
	КонецЕсли;	
		
	// РАСЧЕТ СУММ ТОРГОВОГО СБОРА, НА КОТОРЫЕ УМЕНЬШЕН НАЛОГ ЗА ТЕКУЩИЙ ОТЧЕТНЫЙ (НАЛОГОВЫЙ) ПЕРИОД
	УменьшениеНалога = РасчетНалогаНаПрибыль.НалогФактическиУменьшенныйНаСуммыТорговогоСбора(
		КонтекстРасчета.КонецПериода,
		КонтекстРасчета.Организация);
		
	Для Каждого ЗаписьУменьшениеНалога Из УменьшениеНалога Цикл
		
		ЗаписьРасчет = Расчет.Найти(ЗаписьУменьшениеНалога.РегистрацияВНалоговомОргане, "РегистрацияВНалоговомОргане");
		
		Если ЗаписьРасчет = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьРасчет.УменьшениеНалогаНаТорговыйСбор = ЗаписьУменьшениеНалога.Сумма;
		
	КонецЦикла;
	
	Если НЕ НалогНаПрибыльДекларация.ЗаполнятьДетальнуюИнформациюПоТорговомуСборуВДекларации(КонтекстРасчета.КонецПериода) Тогда
		Возврат;
	КонецЕсли;
	
	// РАСЧЕТ СУММ ТОРГОВОГО СБОРА, НА КОТОРЫЕ УМЕНЬШЕН НАЛОГ ЗА ПРОШЛЫЙ ОТЧЕТНЫЙ ПЕРИОД
	// Если текущий отчетный период является первым, то торговый сбор прошлого периода не заполняем
	КонецПрошлогоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(КонтекстРасчета.КонецПериода, КонтекстРасчета.Периодичность, -1);
	КонецПрошлогоПериода = КонецМесяца(КонецПрошлогоПериода);
	Если КонецПрошлогоПериода > КонтекстРасчета.НачалоПериода Тогда
		
		УменьшениеНалогаПрошлогоПериода = РасчетНалогаНаПрибыль.НалогФактическиУменьшенныйНаСуммыТорговогоСбора(
			КонецПрошлогоПериода,
			КонтекстРасчета.Организация);
		
		Для Каждого ЗаписьУменьшениеНалога Из УменьшениеНалогаПрошлогоПериода Цикл
			
			ЗаписьРасчет = Расчет.Найти(ЗаписьУменьшениеНалога.РегистрацияВНалоговомОргане, "РегистрацияВНалоговомОргане");
			
			Если ЗаписьРасчет = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьРасчет.УменьшениеНалогаНаТорговыйСборПрошлогоПериода = ЗаписьУменьшениеНалога.Сумма;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	// РАСЧЕТ СУММ УПЛАЧЕННОГО ТОРГОВОГО СБОРА
	// Для целей расчета сумму уплаченного торгового сбора признаем равной сумме начисленного.
	
	СуммаУменьшенияНалога = Расчет.Итог("УменьшениеНалогаНаТорговыйСбор");
	
	// Если налог не уменьшается на торговый сбор, то уплаченный торговый сбор также не считаем
	Если СуммаУменьшенияНалога = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	// 1. Возьмем сумму начисленного торгового сбора с начала года по конец закрываемого месяца
	// Это целое число
	СуммаТорговогоСбора = РасчетНалогаНаПрибыль.СуммаНачисленногоТорговогоСбора(КонтекстРасчета.КонецПериода, КонтекстРасчета.Организация);

	Если СуммаТорговогоСбора = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	// 2. Распределим сумму из п. 1 между регистрациями
	// Если сумма уплаченного торгового сбора равна сумме торгового сбора, на которую уменьшен налог,
	// то по каждой отдельной регистрации эти суммы также должны быть равны
	Если СуммаТорговогоСбора = СуммаУменьшенияНалога Тогда
		
		Для каждого ЗаписьРасчет Из Расчет Цикл
			ЗаписьРасчет.ТорговыйСборУплаченный = ЗаписьРасчет.УменьшениеНалогаНаТорговыйСбор;
		КонецЦикла; 
		
	Иначе
								
		// Распределим сумму торгового сбора пропорционально суммам уменьшения налога на торговый сбор
		// Это позволяет выполнить 2 ограничения:
		//	- сумма уплаченного торгового сбора распределяется только на те территории,
		//    где установлен торговый сбор (УменьшениеНалогаНаТорговыйСбор <> 0)
		//	- сумма уплаченного торгового сбора для каждой отдельной регистрации не меньше суммы уменьшения налога
		// Т.к. здесь СуммаТорговогоСбора > СуммаУменьшенияНалога (см. РасчетНалогаНаПрибыль.УменьшениеНалогаНаСуммуТорговогоСбора()),
		// то после распределения во всех строках расчета ТорговыйСборУплаченный >= УменьшениеНалогаНаТорговыйСбор
		РаспределеннаяСумма = 0;
		Для Каждого ЗаписьРасчет Из Расчет Цикл 
			ЗаписьРасчет.ТорговыйСборУплаченный = Окр(СуммаТорговогоСбора * ЗаписьРасчет.УменьшениеНалогаНаТорговыйСбор / СуммаУменьшенияНалога, 0);
			РаспределеннаяСумма = РаспределеннаяСумма + ЗаписьРасчет.ТорговыйСборУплаченный;
		КонецЦикла; 
		
		// Погрешность округления распределяем так, 
		// чтобы ни по какой регистрации не оказалось, что ТорговыйСборУплаченный < УменьшениеНалогаНаТорговыйСбор
		ПогрешностьОкругления = СуммаТорговогоСбора - РаспределеннаяСумма;
		Если ПогрешностьОкругления <> 0 Тогда
			
			// Для сохранения сортировки пронумеруем таблицу 
			ОбщегоНазначенияБПВызовСервера.ПронумероватьТаблицу(Расчет);  // Добавляется колонка "НомерСтроки"
			Расчет.Сортировать("УменьшениеНалогаНаТорговыйСбор Убыв");
						
			Если ПогрешностьОкругления > 0 Тогда
			    // Добавляем погрешность в строку с максимальной суммой торгового сбора 
				Расчет[0].ТорговыйСборУплаченный = Расчет[0].ТорговыйСборУплаченный + ПогрешностьОкругления;
			Иначе
				// Уменьшаем ТорговыйСборУплаченный с учетом ограничения (ТорговыйСборУплаченный >= УменьшениеНалогаНаТорговыйСбор)
				Для каждого ЗаписьРасчет Из Расчет Цикл
					// Из двух отрицательных чисел выбираем минимальное по модулю и добавляем к ТорговыйСборУплаченный
					СуммаУменьшения = Макс(ПогрешностьОкругления, ЗаписьРасчет.УменьшениеНалогаНаТорговыйСбор - ЗаписьРасчет.ТорговыйСборУплаченный); 
					ЗаписьРасчет.ТорговыйСборУплаченный = ЗаписьРасчет.ТорговыйСборУплаченный + СуммаУменьшения; 
					ПогрешностьОкругления = ПогрешностьОкругления - СуммаУменьшения; 
					
					Если ПогрешностьОкругления = 0 Тогда
						Прервать;
					КонецЕсли;	
					
				КонецЦикла; 
			КонецЕсли; 
			
			Расчет.Сортировать("НомерСтроки"); // Возвращаем исходную сортировку
			Расчет.Колонки.Удалить("НомерСтроки");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение декларации по формам до 2013 года

Процедура ЗаполнитьЛист2Приложение5ДекларацииПоПрибыли(Контейнер, ПараметрыОтчета, СписокОрганизаций, Лист02_Прил5) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////
	//// ЗАПОЛНЕНИЕ ЛИСТ 2 ПРИЛОЖЕНИЕ 5
	
	СтраницаЛист02_Прил5 = Лист02_Прил5[0].Данные[0].Значение;
	
	ОбнулитьПоказателиЛист2Приложение5ДекларацииПоПрибыли(СтраницаЛист02_Прил5);
	
	Пока Лист02_Прил5.Количество()>1 Цикл
		Лист02_Прил5.Удалить(1);
	КонецЦикла;
	
	КПП = ПараметрыОтчета.КПП;//РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(ЭтаФорма, "Титульный", "КПП1_");
	ПоВсем = Истина;
	Если КПП = ПараметрыОтчета.Организация.КПП Тогда
		РегистрацияВНалоговомОргане = ПараметрыОтчета.Организация.РегистрацияВНалоговомОргане; 
	Иначе
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоРеквизиту("КПП",КПП,,ПараметрыОтчета.Организация);
		ПоВсем = Ложь;
		Если РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По указанному КПП %1 не обнаружена регистрация в налоговом органе. Необходимо проверить правильность указания КПП или регистрации в налоговом органе. Приложение 5 листа 02 заполнено не будет'"), КПП));
			ЗаполнитьПриложение5Листа2 = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Создаем временную таблицу НалоговыеОрганыПоНалогуНаПрибыль 
	СоздатьНалоговыеОрганыПоНалогуНаПрибыль(МенеджерВременныхТаблиц, СписокОрганизаций, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	СписокОбособленныхПодразделений(МенеджерВременныхТаблиц, СписокОрганизаций, ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	
	Если НЕ ЕстьРазныеНалоговыеОрганы(МенеджерВременныхТаблиц) Тогда
		Возврат;
	КонецЕсли;
	
	Если КПП = ПараметрыОтчета.Организация.КПП Тогда
		РегистрацияВНалоговомОргане = ПараметрыОтчета.Организация.РегистрацияВНалоговомОргане; 
	Иначе
		РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.НайтиПоРеквизиту("КПП",КПП,,ПараметрыОтчета.Организация);
		ПоВсем = Ложь;
		Если РегистрацияВНалоговомОргане = Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По указанному КПП %1 не обнаружена регистрация в налоговом органе. Необходимо проверить правильность указания КПП или регистрации в налоговом органе. Приложение 5 листа 02 заполнено не будет'"), КПП));
			ЗаполнитьПриложение5Листа2 = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаНач",           ПараметрыОтчета.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаНачМесяца",     НачалоМесяца(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКон",           ПараметрыОтчета.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("РегистрацияВНалоговомОргане", РегистрацияВНалоговомОргане);
	Запрос.УстановитьПараметр("ДатаНачГода", НачалоГода(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасчетДолейБазыНалогаНаПрибыль.ДоляНалоговойБазы КАК ДоляНалоговойБазы,
	|	РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане.НаименованиеОбособленногоПодразделения КАК ОбособленноеПодразделение,
	|	РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане.КПП КАК КПП,
	|	РасчетДолейБазыНалогаНаПрибыль.Организация КАК Организация
	|ПОМЕСТИТЬ ДолиНалоговойБазы
	|ИЗ
	|	РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК РасчетДолейБазыНалогаНаПрибыль
	|ГДЕ
	|	РасчетДолейБазыНалогаНаПрибыль.Организация В(&СписокОрганизаций)
	|	И РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане
	|	И РасчетДолейБазыНалогаНаПрибыль.ПериодРасчета МЕЖДУ &ДатаНачМесяца И &ДатаКон
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних.СтавкаСубъектРФ КАК Ставка,
	|	СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ОбщаяСтавка
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(&ДатаНач, Организация В (&СписокОрганизаций)) КАК СтавкиНалогаНаПрибыльДляВсехОрганизацийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.РегистрацияВНалоговомОргане.КПП КАК КПП,
	|	СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних.СтавкаСубъектРФ КАК Ставка
	|ПОМЕСТИТЬ РазныеСтавки
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.СрезПоследних(
	|			&ДатаНач,
	|			Организация В (&СписокОрганизаций)
	|				И РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане) КАК СтавкиНалогаНаПрибыльВБюджетСубъектовРФСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтавкиНалогаНаПрибыль.ПрименяютсяРазныеСтавкиНалогаНаПрибыль КАК Значение
	|ПОМЕСТИТЬ ПрименяютсяРазныеСтавки
	|ИЗ
	|	РегистрСведений.НастройкиУчетаНалогаНаПрибыль.СрезПоследних(&ДатаНач, Организация В (&СписокОрганизаций)) КАК СтавкиНалогаНаПрибыль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДоляНалоговойБазы,
	|	ВложенныйЗапрос.ОбособленноеПодразделение,
	|	ВложенныйЗапрос.КПП,
	|	ВложенныйЗапрос.Ставка КАК СтавкаСубъектРФ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДолиНалоговойБазы.ДоляНалоговойБазы КАК ДоляНалоговойБазы,
	|		ДолиНалоговойБазы.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		ДолиНалоговойБазы.КПП КАК КПП,
	|		ОбщаяСтавка.Ставка КАК Ставка
	|	ИЗ
	|		ПрименяютсяРазныеСтавки КАК ПрименяютсяРазныеСтавки,
	|		ДолиНалоговойБазы КАК ДолиНалоговойБазы
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбщаяСтавка КАК ОбщаяСтавка
	|			ПО ДолиНалоговойБазы.Организация = ОбщаяСтавка.Организация
	|	ГДЕ
	|		НЕ ПрименяютсяРазныеСтавки.Значение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДолиНалоговойБазы.ДоляНалоговойБазы,
	|		ДолиНалоговойБазы.ОбособленноеПодразделение,
	|		ДолиНалоговойБазы.КПП,
	|		ЕСТЬNULL(ЕСТЬNULL(РазныеСтавки.Ставка, ОбщаяСтавка.Ставка), 0)
	|	ИЗ
	|		ПрименяютсяРазныеСтавки КАК ПрименяютсяРазныеСтавки,
	|		ДолиНалоговойБазы КАК ДолиНалоговойБазы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РазныеСтавки КАК РазныеСтавки
	|			ПО ДолиНалоговойБазы.КПП = РазныеСтавки.КПП
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбщаяСтавка КАК ОбщаяСтавка
	|			ПО ДолиНалоговойБазы.Организация = ОбщаяСтавка.Организация
	|	ГДЕ
	|		ПрименяютсяРазныеСтавки.Значение) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДоляНалоговойБазы,
	|	ВложенныйЗапрос.ОбособленноеПодразделение,
	|	ВложенныйЗапрос.КПП,
	|	ВложенныйЗапрос.Ставка";
	
	Если ПоВсем Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РегистрацияВНалоговомОргане = &РегистрацияВНалоговомОргане","");
	КонецЕсли;                                      
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Приложение 5 листа 02 заполнено не будет.
			|По указанному КПП %1 не обнаружено начисление налога на прибыль.
			|Необходимо проверить правильность указания КПП или регистрации в налоговом органе
			|или проведение операции закрытия месяца ""Расчет налога на прибыль""'"), КПП));
	Иначе
		ПерваяСтраница = Истина;
		ЕстьОбособленныеПодразделения = Ложь;
		
		Результат = Результат.Выгрузить();
		Для Каждого ДоляНалоговойБазы Из Результат Цикл
			Если Не ПерваяСтраница Тогда
				
				СтруктураНовойТаблицы = Новый Структура();
				
				Для Каждого Показатель Из СтраницаЛист02_Прил5 Цикл
					СтруктураНовойТаблицы.Вставить(Показатель.Ключ, Показатель.Значение);
				КонецЦикла;
				
				ОбнулитьПоказателиЛист2Приложение5ДекларацииПоПрибыли(СтруктураНовойТаблицы);
				
				Лист02_Прил5.Добавить().Данные = Новый СписокЗначений();
				Лист02_Прил5[Лист02_Прил5.Количество()-1].Данные.Добавить(СтруктураНовойТаблицы); 
				ЕстьОбособленныеПодразделения = Истина;
			Иначе
				// На последующих выполнениях цикла нужно будет создавать дополнительные страницы
				ПерваяСтраница = Ложь;
			КонецЕсли;
			
			СтраницаЛист02_Прил5 = Лист02_Прил5[Лист02_Прил5.Количество()-1].Данные[0].Значение;
			
			ЭтоОбособленноеПодразделение = ЗначениеЗаполнено(РегистрацияВНалоговомОргане);
			СтраницаЛист02_Прил5.П002050000100 = "1";
			Если ЭтоОбособленноеПодразделение Тогда
				СтраницаЛист02_Прил5.П002050001000 = "2"; 
				СтраницаЛист02_Прил5.П002050002003 = ДоляНалоговойБазы.ОбособленноеПодразделение;
				СтраницаЛист02_Прил5.П002050002001 = ДоляНалоговойБазы.КПП;
			Иначе
				СтраницаЛист02_Прил5.П002050001000 = "1";
				СтраницаЛист02_Прил5.П002050002003 = "";
				СтраницаЛист02_Прил5.П002050002001 = "";
			КонецЕсли;
			СтраницаЛист02_Прил5.П002050004003 = ДоляНалоговойБазы.ДоляНалоговойБазы * 100;
			СтраницаЛист02_Прил5.П002050006003 = ДоляНалоговойБазы.СтавкаСубъектРФ;
		КонецЦикла;
		
		Если ЕстьОбособленныеПодразделения Тогда 
			//Налогоплательщики, имеющие обособленные подразделения, проставляют только налоговую ставку для исчисления налога на прибыль, подлежащего уплате в федеральный бюджет 
			СтраницаЛист02 = Контейнер.Лист02[0].Данные[0].Значение;
			СтраницаЛист02.П002000016003 = 0;
			СтраницаЛист02.П002000017003 = 0;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбнулитьПоказателиЛист2Приложение5ДекларацииПоПрибыли(КоллекцияПоказателей)

	// Показатели из форм отчета до 2015Кв1
	КоллекцияПоказателей.П002050000100 = "";
	КоллекцияПоказателей.П002050001000 = "";
	КоллекцияПоказателей.П002050002001 = "";
	КоллекцияПоказателей.П002050002002 = "";
	КоллекцияПоказателей.П002050002003 = "";
	КоллекцияПоказателей.П002050003003 = 0;
	КоллекцияПоказателей.П002050003103 = 0;
	КоллекцияПоказателей.П002050004003 = 0;
	КоллекцияПоказателей.П002050005003 = 0;
	КоллекцияПоказателей.П002050006003 = 0;
	КоллекцияПоказателей.П002050007003 = 0;
	КоллекцияПоказателей.П002050008003 = 0;
	КоллекцияПоказателей.П002050009003 = 0;
	КоллекцияПоказателей.П002050010003 = 0;
	КоллекцияПоказателей.П002050011003 = 0;
	КоллекцияПоказателей.П002050012003 = 0;
	КоллекцияПоказателей.П002050012103 = 0;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДЕКЛАРАЦИИ ПО НАЛОГУ НА ПРИБЫЛЬ ОБОСОБЛЕННЫХ ПОДРАЗДЕЛЕНИЙ

// Получает данные по декларациям для обособленных подразделений на основании декларации по головной организации.
// Параметры:
//  РезультатВыполнения	 - Структура - заполняемая коллекция, см. НовыйРезультатВыполненияДекларацииПоОбособленнымПодразделениям
//                       - Неопределено - у организации нет обособленных подразделений
//  ОсновнаяДекларация	 - ДокументСсылка.РегламентированныйОтчет - декларация по головной организации
//  Организация			 - СправочникСсылка.Организации
//
Процедура ПолучитьДекларацииПоОбособленнымПодразделениям(РезультатВыполнения, ОсновнаяДекларация, Организация) Экспорт

	Если Не НалоговыйУчет.ЕстьОбособленныеПодразделения(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	// Автоматическое формирование деклараций по обособленным подразделениям доступно с 01.01.2023 г.
	ДатаНачала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнаяДекларация, "ДатаНачала");
	Если ДатаНачала < Дата(2023, 01, 01) Тогда
		 Возврат;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОсновнаяДекларация", ОсновнаяДекларация);
	Параметры.Вставить("Организация", Организация);
	Параметры.Вставить("СоздаватьДекларации", Ложь);

	РезультатВыполнения = ДекларацииПоОбособленнымПодразделениям(Параметры);

КонецПроцедуры

// Получает регистрации в налоговом органе для обособленных подразделений по данным КПП из ОсновнаяДекларация.
//
// Параметры:
//  РегистрацииВНалоговомОрганеОбособленныеПодразделения	 - Массив - заполняемая коллекция: список регистраций в налоговом органе
//  ОсновнаяДекларация										 - ДокументСсылка.РегламентированныйОтчет - декларация по головной организации
//  Организация												 - СправочникСсылка.Организации
//
Процедура РегистрацииВНалоговомОрганеОбособленныеПодразделения(РегистрацииВНалоговомОрганеОбособленныеПодразделения, ОсновнаяДекларация, Организация) Экспорт
	
	Если Не НалоговыйУчет.ЕстьОбособленныеПодразделения(Организация) Или Не ЗначениеЗаполнено(ОсновнаяДекларация) Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОтчета = ОсновнаяДекларация.ДанныеОтчета.Получить();
	ДеревоРаздела = СведенияОтчета.ДанныеМногоуровневыхРазделов.Лист02;
	ДанныеОсновнойДекларации = ДеревоРаздела.Строки[0].Строки[4].Строки;
	
	ДатаОкончания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнаяДекларация, "ДатаОкончания");
	ПерваяСтрока = Истина;
	Для Каждого Строка Из ДанныеОсновнойДекларации Цикл
		// первая строка по головной организации, пропускаем
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
			Продолжить;
		КонецЕсли;
		КПП = РегламентированнаяОтчетность.ПоказательОтчета(Строка.Данные, "П000250000400");
		ДанныеРасчетДолейБазыНалогаНаПрибыль = ДанныеРасчетДолейБазыНалогаНаПрибыль(КПП, Организация, ДатаОкончания);
		Если Не ЗначениеЗаполнено(ДанныеРасчетДолейБазыНалогаНаПрибыль) Тогда
			// Нет данных в РС "Расчет долей базы налога на прибыль". Основная декларация не актуальна.
			Продолжить;
		КонецЕсли;
		РегистрацииВНалоговомОрганеОбособленныеПодразделения.Добавить(ДанныеРасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане);
	КонецЦикла;
	
КонецПроцедуры

// Создает декларации по обособленным подразделениям.
//
// Параметры:
//  РезультатВыполнения - Структура - заполняемая коллекция,см. НовыйРезультатВыполненияДекларацииПоОбособленнымПодразделениям
//  Параметры - Структура - структура параметров фонового задания. Ключи структуры:
//    * ОсновнаяДекларация	 - ДокументСсылка.РегламентированныйОтчет - декларация по головной организации
//    * Организация			 - СправочникСсылка.Организации
//    * ТаблицаДекларацииПоОбособленнымПодразделениям - ТаблицаЗначений - см. НовыйТаблицаДекларацииПоОбособленнымПодразделениям
//
Процедура ФормированиеДекларацийПоОбособленнымПодразделениям(РезультатВыполнения, Параметры) Экспорт
	
	РезультатВыполнения = НовыйРезультатВыполненияДекларацииПоОбособленнымПодразделениям();
	
	ОсновнаяДекларация = Параметры.ОсновнаяДекларация;
	Организация = Параметры.Организация;
	ТаблицаДекларацииПоОбособленнымПодразделениям = Параметры.ТаблицаДекларацииПоОбособленнымПодразделениям;
	РезультатВыполнения.ТребуетсяИсправлениеДеклараций = Параметры.ТребуетсяИсправлениеДеклараций;
	
	РеквизитыОсновнойДекларации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта
		(ОсновнаяДекларация, "ИсточникОтчета, ВыбраннаяФорма, ДатаНачала, ДатаОкончания, Периодичность");
	ПараметрыДекларации = ПараметрыДекларации(РеквизитыОсновнойДекларации, ОсновнаяДекларация, Организация);
	СуществующиеДекларации = СуществующиеДекларацииПоОбособленнымПодразделениям(ПараметрыДекларации);

	Для Каждого СтрокаТаблицы Из ТаблицаДекларацииПоОбособленнымПодразделениям Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.РегламентированныйОтчет) Тогда
			СформироватьДекларацию(СтрокаТаблицы, ПараметрыДекларации);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьДекларацииКУдалению(
		ТаблицаДекларацииПоОбособленнымПодразделениям,
		СуществующиеДекларации,
		РезультатВыполнения.ТребуетсяИсправлениеДеклараций);
	ДекларацииПоОбособленнымПодразделениямПредставление = ДекларацииПоОбособленнымПодразделениямПредставление(ТаблицаДекларацииПоОбособленнымПодразделениям);
	
	РезультатВыполнения.ТаблицаДекларацииПоОбособленнымПодразделениям = ТаблицаДекларацииПоОбособленнымПодразделениям;
	РезультатВыполнения.ДекларацииПоОбособленнымПодразделениямПредставление = ДекларацииПоОбособленнымПодразделениямПредставление;
	
КонецПроцедуры

// Перезаполняет декларации по обособленным подразделениям, которые требуют исправления,
// либо помечает на удаление лишние декларации.
//
// Параметры:
//  РезультатВыполнения - Структура - заполняемая коллекция,см. НовыйРезультатВыполненияДекларацииПоОбособленнымПодразделениям
//  Параметры - Структура - структура параметров фонового задания. Ключи структуры:
//    * ОсновнаяДекларация	 - ДокументСсылка.РегламентированныйОтчет - декларация по головной организации
//    * Организация			 - СправочникСсылка.Организации
//    * ТаблицаДекларацииПоОбособленнымПодразделениям - ТаблицаЗначений - см. НовыйТаблицаДекларацииПоОбособленнымПодразделениям
//
Процедура ИсправлениеДекларацийПоОбособленнымПодразделениям(РезультатВыполнения, Параметры) Экспорт
	
	ОсновнаяДекларация = Параметры.ОсновнаяДекларация;
	Организация = Параметры.Организация;
	СведенияОтчета = ОсновнаяДекларация.ДанныеОтчета.Получить();
	ДеревоРаздела = СведенияОтчета.ДанныеМногоуровневыхРазделов.Лист02;
	ДанныеОсновнойДекларации = ДеревоРаздела.Строки[0].Строки[4].Строки;
	
	РеквизитыОсновнойДекларации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта
		(ОсновнаяДекларация, "ИсточникОтчета, ВыбраннаяФорма, ДатаНачала, ДатаОкончания, Периодичность");
	ПараметрыДекларации = ПараметрыДекларации(РеквизитыОсновнойДекларации, ОсновнаяДекларация, Организация);
	ТаблицаДекларацииПоОбособленнымПодразделениям = Параметры.ТаблицаДекларацииПоОбособленнымПодразделениям;
	
	СообщенияОбОшибках = Новый Массив;
	СтрокиКУдалению = Новый Массив;
	ТребуетсяИсправлениеДеклараций = Ложь;
	Для Каждого СтрокаТаблицы Из ТаблицаДекларацииПоОбособленнымПодразделениям Цикл
		Если СтрокаТаблицы.ТребуетсяИсправление Тогда
			
			Если СтрокаТаблицы.СостояниеОтправки = "Сдано" Тогда
				СообщенияОбОшибках.Добавить(СтрШаблон(НСтр("ru = 'Декларация по ""%1"" уже сдана, исправление невозможно.'"),
					СокрЛП(СтрокаТаблицы.НаименованиеПодразделения)));
				ТребуетсяИсправлениеДеклараций = Истина;
				Продолжить;
			КонецЕсли;
			СформироватьДекларацию(СтрокаТаблицы, ПараметрыДекларации, ДанныеОсновнойДекларации, ТаблицаДекларацииПоОбособленнымПодразделениям);

		ИначеЕсли СтрокаТаблицы.ТребуетсяУдаление Тогда
			
			ДекларацияОбъект = СтрокаТаблицы.РегламентированныйОтчет.ПолучитьОбъект();
			ДекларацияОбъект.УстановитьПометкуУдаления(Истина);
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из СтрокиКУдалению Цикл
		ТаблицаДекларацииПоОбособленнымПодразделениям.Удалить(Строка);
	КонецЦикла;
	
	ДекларацииПоОбособленнымПодразделениямПредставление = ДекларацииПоОбособленнымПодразделениямПредставление(ТаблицаДекларацииПоОбособленнымПодразделениям);
	
	РезультатВыполнения = НовыйРезультатВыполненияДекларацииПоОбособленнымПодразделениям();
	РезультатВыполнения.ТаблицаДекларацииПоОбособленнымПодразделениям = ТаблицаДекларацииПоОбособленнымПодразделениям;
	РезультатВыполнения.ДекларацииПоОбособленнымПодразделениямПредставление = ДекларацииПоОбособленнымПодразделениямПредставление;
	РезультатВыполнения.ТребуетсяИсправлениеДеклараций = ТребуетсяИсправлениеДеклараций;
	РезультатВыполнения.СообщенияОбОшибках = СообщенияОбОшибках;
	
КонецПроцедуры

// Получает данные по декларациям для обособленных подразделений на основании декларации по головной организации.
// Вызывается при изменении ОсновнаяДекларация.
//
// Параметры:
//  РезультатВыполнения - Структура - заполняемая коллекция,см. НовыйРезультатВыполненияДекларацииПоОбособленнымПодразделениям
//  Параметры - Структура - структура параметров фонового задания. Ключи структуры:
//    * ОсновнаяДекларация	 - ДокументСсылка.РегламентированныйОтчет - декларация по головной организации
//    * Организация			 - СправочникСсылка.Организации
//
Процедура ОбновитьДекларацииПоОбособленнымПодразделениям(РезультатВыполнения, Параметры) Экспорт
	
	РезультатВыполнения = ДекларацииПоОбособленнымПодразделениям(Параметры);
	
КонецПроцедуры

// Обновляет статусы деклараций по обособленным подразделениям.
//
// Параметры:
//  РезультатВыполнения - Структура - заполняемая коллекция,см. НовыйРезультатВыполненияДекларацииПоОбособленнымПодразделениям
//  Параметры - Структура - структура параметров фонового задания. Ключи структуры:
//    * ТаблицаДекларацииПоОбособленнымПодразделениям - ТаблицаЗначений - см. НовыйТаблицаДекларацииПоОбособленнымПодразделениям
//
Процедура ОбновитьСтатусыДекларацийПоОбособленнымПодразделениям(РезультатВыполнения, Параметры) Экспорт
	
	ТаблицаДекларацииПоОбособленнымПодразделениям = Параметры.ТаблицаДекларацииПоОбособленнымПодразделениям;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДекларацииПоОбособленнымПодразделениям Цикл
		СостояниеДекларации = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(СтрокаТаблицы.РегламентированныйОтчет);
		СтрокаТаблицы.СостояниеОтправки = СостояниеДекларации.Представление;
	КонецЦикла;
	
	ДекларацииПоОбособленнымПодразделениямПредставление = ДекларацииПоОбособленнымПодразделениямПредставление(ТаблицаДекларацииПоОбособленнымПодразделениям);

	РезультатВыполнения = НовыйРезультатВыполненияДекларацииПоОбособленнымПодразделениям();
	РезультатВыполнения.ТаблицаДекларацииПоОбособленнымПодразделениям = ТаблицаДекларацииПоОбособленнымПодразделениям;
	РезультатВыполнения.ДекларацииПоОбособленнымПодразделениямПредставление = ДекларацииПоОбособленнымПодразделениямПредставление;
	
КонецПроцедуры

// Получает параметры правила для декларации из задач бухгалтера по уплате налогов и сдаче отчетности.
//
// Параметры:
//  ПараметрыПравила - Структура - заполняемая коллекция, правила для списка задач бухгалтера, см. ВыполнениеЗадачБухгалтераКлиентСервер.НовыйПараметрыФормыПомощника()
//  Организация		 - СправочникСсылка.Организации
//  ДатаКонцаПериода - Дата - дата конца периода отчета
//
Процедура ПараметрыПравилаДекларации(ПараметрыПравила, Организация, ДатаКонцаПериода) Экспорт
	
	ВидНалога = Перечисления.ВидыНалогов.НалогНаПрибыль_ФедеральныйБюджет;
	
	ОтборПравил = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ОтборПравилЗаполнения();
	ОтборПравил.Организация     = Организация;
	ОтборПравил.НачалоИнтервала = НачалоДня(ДатаКонцаПериода); 
	ОтборПравил.КонецИнтервала  = ДатаКонцаПериода;
	ОтборПравил.ИмяЗадачи       = РасчетыСБюджетом.ИмяЗадачиБухгалтера(ВидНалога);
	ОтборПравил.Действие        = Перечисления.ВидыДействийКалендаряБухгалтера.Отчет;
	
	ПараметрыПравила = РегистрыСведений.ЗадачиБухгалтера.ПараметрыПравилаИзСуществующихЗадачБухгалтера(ОтборПравил);

КонецПроцедуры

// Заполняет строковое представление количества деклараций обособленных подразделений со статусами.
//
// Параметры:
//  ДекларацииПоОбособленнымПодразделениямПредставление	 - Строка - заполняемый параметр
//  ТаблицаДекларацииПоОбособленнымПодразделениям		 - ТаблицаЗначений - см. НовыйТаблицаДекларацииПоОбособленнымПодразделениям
//
Процедура ЗаполнитьДекларацииПоОбособленнымПодразделениямПредставление(
		ДекларацииПоОбособленнымПодразделениямПредставление, ТаблицаДекларацииПоОбособленнымПодразделениям) Экспорт
	
	ДекларацииПоОбособленнымПодразделениямПредставление = ДекларацииПоОбособленнымПодразделениямПредставление(ТаблицаДекларацииПоОбособленнымПодразделениям);
	
КонецПроцедуры

Функция ДекларацииПоОбособленнымПодразделениям(Параметры)

	РезультатВыполнения = НовыйРезультатВыполненияДекларацииПоОбособленнымПодразделениям();
	
	ОсновнаяДекларация = Параметры.ОсновнаяДекларация; 
	Организация = Параметры.Организация;
	
	СведенияОтчета = ОсновнаяДекларация.ДанныеОтчета.Получить();
	ДеревоРаздела = СведенияОтчета.ДанныеМногоуровневыхРазделов.Лист02;
	ДанныеОсновнойДекларации = ДеревоРаздела.Строки[0].Строки[4].Строки;
	РеквизитыОсновнойДекларации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта
		(ОсновнаяДекларация, "НаименованиеОтчета, ИсточникОтчета, ВыбраннаяФорма, ДатаНачала, ДатаОкончания, Периодичность");
	ПараметрыДекларации = ПараметрыДекларации(РеквизитыОсновнойДекларации, ОсновнаяДекларация, Организация);
	
	СуществующиеДекларации = СуществующиеДекларацииПоОбособленнымПодразделениям(ПараметрыДекларации);
	Если ДанныеОсновнойДекларации.Количество() = 1 Тогда 
		// Нет обособленных подразделений
		// Если есть ненужные декларации, то их надо пометить на удаление
		Если СуществующиеДекларации.Количество() > 0 Тогда
			ТаблицаДекларацииПоОбособленнымПодразделениям = НовыйТаблицаДекларацииПоОбособленнымПодразделениям();
			ДобавитьДекларацииКУдалению(
				ТаблицаДекларацииПоОбособленнымПодразделениям,
				СуществующиеДекларации, 
				РезультатВыполнения.ТребуетсяИсправлениеДеклараций);
			ДекларацииПоОбособленнымПодразделениямПредставление = ДекларацииПоОбособленнымПодразделениямПредставление(ТаблицаДекларацииПоОбособленнымПодразделениям);
			РезультатВыполнения.ТаблицаДекларацииПоОбособленнымПодразделениям = ТаблицаДекларацииПоОбособленнымПодразделениям;
			РезультатВыполнения.ДекларацииПоОбособленнымПодразделениямПредставление = ДекларацииПоОбособленнымПодразделениямПредставление;
		КонецЕсли;
		Возврат РезультатВыполнения;
	Иначе
		ТаблицаДекларацииПоОбособленнымПодразделениям = НовыйТаблицаДекларацииПоОбособленнымПодразделениям();
	КонецЕсли;

	НаименованиеОтчета = РеквизитыОсновнойДекларации.НаименованиеОтчета;
	ИсточникОтчета = РеквизитыОсновнойДекларации.ИсточникОтчета;
	ВидКонтролирующегоОргана = РегламентированнаяОтчетность.ВидКонтролирующегоОргана(ИсточникОтчета);
	НеОтправляетсяВКонтролирующийОрган = Не ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОбъектОтправляетсяВКонтролирующиеОрганы(ОсновнаяДекларация);
	СоздаватьДекларации = ?(Параметры.Свойство("СоздаватьДекларации"), Параметры.СоздаватьДекларации, Истина);

	ЕстьВсеДекларацииПоОбособленнымПодразделениям = Истина;
	н = 1;
	
	Для Каждого Строка Из ДанныеОсновнойДекларации Цикл
		// первая строка по головной организации, пропускаем
		Если н = 1 Тогда
			н = н + 1;
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаДекларацииПоОбособленнымПодразделениям.Добавить();
		СтрокаТаблицы.ДанныеОсновнойДекларации = Строка.Данные;
		СтрокаТаблицы.НомерСтраницы = Строка(н);
		
		КодРасчета = РегламентированнаяОтчетность.ПоказательОтчета(СтрокаТаблицы.ДанныеОсновнойДекларации, "П000250000300");
		КПП = РегламентированнаяОтчетность.ПоказательОтчета(СтрокаТаблицы.ДанныеОсновнойДекларации, "П000250000400");
		СтрокаТаблицы.НаименованиеПодразделения = РегламентированнаяОтчетность.ПоказательОтчета(СтрокаТаблицы.ДанныеОсновнойДекларации, "П000250000600");
		ДанныеРасчетДолейБазыНалогаНаПрибыль = ДанныеРасчетДолейБазыНалогаНаПрибыль(
		КПП, ПараметрыДекларации.Организация, ПараметрыДекларации.ДатаОкончания);
		Если Не ЗначениеЗаполнено(ДанныеРасчетДолейБазыНалогаНаПрибыль) Тогда
			// Нет данных в РС "Расчет долей базы налога на прибыль". Основная декларация не актуальна.
			РезультатВыполнения.ТаблицаДекларацииПоОбособленнымПодразделениям = ТаблицаДекларацииПоОбособленнымПодразделениям;
			РезультатВыполнения.ТребуетсяАктуализацияОсновнойДекларации = Истина;
			РезультатВыполнения.ДоступноФормированиеДекларацийПоПодразделениям = Ложь;
			Возврат РезультатВыполнения;
		КонецЕсли;
		ДоляНалоговойБазыОсновнаяДекларация = РегламентированнаяОтчетность.ПоказательОтчета(СтрокаТаблицы.ДанныеОсновнойДекларации, "П000250004003");
		НалоговаяБазаОсновнаяДекларация = РегламентированнаяОтчетность.ПоказательОтчета(СтрокаТаблицы.ДанныеОсновнойДекларации, "П000250005003");
		Если ДанныеРасчетДолейБазыНалогаНаПрибыль.ДоляНалоговойБазы <> ДоляНалоговойБазыОсновнаяДекларация
			Или ДанныеРасчетДолейБазыНалогаНаПрибыль.НалоговаяБаза <> НалоговаяБазаОсновнаяДекларация Тогда
			// Отличаются доля налоговой базы, налоговая база с РС "Расчет долей базы налога на прибыль".
			// Основная декларация не актуальна. Но возможность формирования деклараций по обособленным декларациям нужна.
			РезультатВыполнения.ТребуетсяАктуализацияОсновнойДекларации = Истина;
		КонецЕсли;
		СтрокаТаблицы.КодПоОКТМО = ДанныеРасчетДолейБазыНалогаНаПрибыль.КодПоОКТМО;
		// Для закрытого подразделения подается по месту нахождения головной организации
		Если КодРасчета = "3" Тогда
			СтрокаТаблицы.КППЗакрытогоПодразделения = КПП;
			РеквизитыНалоговогоОрганаОсновнойДекларации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОсновнаяДекларация, "КПП, КодНалоговогоОргана");
			КПП = РеквизитыНалоговогоОрганаОсновнойДекларации.КПП; 
			КодКонтролирующегоОргана = РеквизитыНалоговогоОрганаОсновнойДекларации.КодНалоговогоОргана;
			ДанныеРасчетДолейБазыНалогаНаПрибыль = ДанныеРасчетДолейБазыНалогаНаПрибыль
			(КПП, ПараметрыДекларации.Организация, ПараметрыДекларации.ДатаОкончания, КодКонтролирующегоОргана); 
		КонецЕсли;
		СтрокаТаблицы.КПП = КПП;
		СтрокаТаблицы.РегистрацияВНалоговомОргане = ДанныеРасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане;
		СтрокаТаблицы.КодКонтролирующегоОргана = ДанныеРасчетДолейБазыНалогаНаПрибыль.КодКонтролирующегоОргана;
		СтрокаТаблицы.РегистрацияВНалоговомОрганеНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ФНС %1 КПП %2'"),
		СтрокаТаблицы.КодКонтролирующегоОргана,
		СтрокаТаблицы.КПП);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбособленноеПодразделение", Истина);
		Декларация = ИнтерфейсыВзаимодействияБРО.АктуальныйОтчет(
			ПараметрыДекларации.ИсточникОтчета,
			ПараметрыДекларации.Организация,
			ПараметрыДекларации.ДатаОкончания,
			СтрокаТаблицы.РегистрацияВНалоговомОргане,
			,
			ДополнительныеПараметры);
		Если Не ЗначениеЗаполнено(Декларация) И СоздаватьДекларации Тогда
			СформироватьДекларацию(СтрокаТаблицы, ПараметрыДекларации);
		Иначе
			СтрокаТаблицы.РегламентированныйОтчет = Декларация;
		КонецЕсли;
		
		СтрокаТаблицы.ТребуетсяИсправление = Ложь;
		СтрокаТаблицы.НаименованиеОтчета = НаименованиеОтчета;
		СтрокаТаблицы.ВидКонтролирующегоОргана = ВидКонтролирующегоОргана;
		СтрокаТаблицы.НеОтправляетсяВКонтролирующийОрган = НеОтправляетсяВКонтролирующийОрган;
		СтрокаТаблицы.Организация = Организация;
		
		Если ЗначениеЗаполнено(Декларация) Тогда
			ЗаполнитьРеквизитыДекларации(СтрокаТаблицы, РезультатВыполнения.ТребуетсяИсправлениеДеклараций);
		Иначе
			ЕстьВсеДекларацииПоОбособленнымПодразделениям = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВсеДекларацииПоОбособленнымПодразделениям Тогда
		ДобавитьДекларацииКУдалению(
			ТаблицаДекларацииПоОбособленнымПодразделениям,
			СуществующиеДекларации, 
			РезультатВыполнения.ТребуетсяИсправлениеДеклараций);
		ДекларацииПоОбособленнымПодразделениямПредставление = ДекларацииПоОбособленнымПодразделениямПредставление(ТаблицаДекларацииПоОбособленнымПодразделениям);
	КонецЕсли;
	
	РезультатВыполнения.ТаблицаДекларацииПоОбособленнымПодразделениям = ТаблицаДекларацииПоОбособленнымПодразделениям;
	РезультатВыполнения.ДекларацииПоОбособленнымПодразделениямПредставление = ДекларацииПоОбособленнымПодразделениямПредставление;
	
	Возврат РезультатВыполнения;

КонецФункции

Процедура ДобавитьДекларацииКУдалению(
	ТаблицаДекларацииПоОбособленнымПодразделениям, СуществующиеДекларации, ТребуетсяИсправлениеДеклараций)

	ДекларацииКУдалению = ДекларацииКУдалению(ТаблицаДекларацииПоОбособленнымПодразделениям, СуществующиеДекларации);
	Для Каждого Декларация Из ДекларацииКУдалению Цикл
		СтрокаТаблицы = ТаблицаДекларацииПоОбособленнымПодразделениям.Добавить(); 
		СтрокаТаблицы.РегламентированныйОтчет = Декларация;
		СведенияОтчета = Декларация.ДанныеОтчета.Получить();
		ДеревоРаздела = СведенияОтчета.ДанныеМногоуровневыхРазделов.Лист02;
		ДанныеДекларации = ДеревоРаздела.Строки[0].Строки[4].Строки[0].Данные;
		СтрокаТаблицы.КПП = РегламентированнаяОтчетность.ПоказательОтчета(ДанныеДекларации, "П000250000400");  
		СтрокаТаблицы.КодКонтролирующегоОргана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Декларация, "КодНалоговогоОргана");
		СтрокаТаблицы.РегистрацияВНалоговомОрганеНаименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'ФНС %1 КПП %2'"),
			СтрокаТаблицы.КодКонтролирующегоОргана,
			СтрокаТаблицы.КПП); 
		СтрокаТаблицы.НаименованиеПодразделения = РегламентированнаяОтчетность.ПоказательОтчета(ДанныеДекларации, "П000250000600");
		СтрокаТаблицы.ТребуетсяИсправление = Ложь;
		СтрокаТаблицы.ТребуетсяУдаление = Истина;
		ТребуетсяИсправлениеДеклараций = Истина;
		ЗаполнитьРеквизитыДекларации(СтрокаТаблицы,, ДанныеДекларации);
	КонецЦикла;

КонецПроцедуры

Функция СуществующиеДекларацииПоОбособленнымПодразделениям(ПараметрыДекларации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентированныйОтчет.Ссылка КАК Ссылка,
	|	РегламентированныйОтчет.ДанныеОтчета КАК ДанныеОтчета
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ДатаНачала = &ДатаНачала
	|	И РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания
	|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.ВыбраннаяФорма = &ВыбраннаяФорма
	|	И НЕ РегламентированныйОтчет.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыДекларации.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ПараметрыДекларации.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПараметрыДекларации.ДатаОкончания);
	Запрос.УстановитьПараметр("ИсточникОтчета", ПараметрыДекларации.ИсточникОтчета);
	Запрос.УстановитьПараметр("ВыбраннаяФорма", ПараметрыДекларации.ИмяФормыОтчета);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СуществующиеДекларации = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ДанныеОтчета = Выборка.ДанныеОтчета.Получить();  
		Если ТипЗнч(ДанныеОтчета) <> Тип("Структура") Или (Не ДанныеОтчета.Свойство("ПоказателиОтчета")) Тогда
			Продолжить;
		КонецЕсли;
		ПоМесту = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ПоМесту;
		Если ПоМесту = "220" Или ПоМесту = "223" Тогда
			СуществующиеДекларации.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СуществующиеДекларации;
	
КонецФункции

Функция ДекларацииКУдалению(ТаблицаДекларацииПоОбособленнымПодразделениям, СуществующиеДекларации)

	ДекларацииКУдалению = Новый Массив;
	Для каждого Декларация Из СуществующиеДекларации Цикл
	
		НайденныеСтроки = ТаблицаДекларацииПоОбособленнымПодразделениям.НайтиСтроки(Новый Структура("РегламентированныйОтчет", Декларация));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ДекларацииКУдалению.Добавить(Декларация);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДекларацииКУдалению;

КонецФункции

Функция ДанныеРасчетДолейБазыНалогаНаПрибыль(КПП, Организация, ДатаОкончания, КодКонтролирующегоОргана = "")
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", ДатаОкончания);
	Запрос.УстановитьПараметр("КПП", КПП);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасчетДолейБазыНалогаНаПрибыль.ДоляНалоговойБазы * 100 КАК ДоляНалоговойБазы,
	|	РасчетДолейБазыНалогаНаПрибыль.НалоговаяБаза КАК НалоговаяБаза
	|ПОМЕСТИТЬ РегистрацииВНалоговомОргане
	|ИЗ
	|	РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК РасчетДолейБазыНалогаНаПрибыль
	|ГДЕ
	|	РасчетДолейБазыНалогаНаПрибыль.Организация = &Организация
	|	И РасчетДолейБазыНалогаНаПрибыль.ПериодРасчета = &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.Код КАК КодКонтролирующегоОргана,
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
	|	РегистрацииВНалоговомОргане.ДоляНалоговойБазы КАК ДоляНалоговойБазы,
	|	РегистрацииВНалоговомОргане.НалоговаяБаза КАК НалоговаяБаза
	|ИЗ
	|	РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|ГДЕ
	|	РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.КПП = &КПП";

	Если ЗначениеЗаполнено(КодКонтролирующегоОргана) Тогда
		Запрос.УстановитьПараметр("Код", КодКонтролирующегоОргана);
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		СхемаЗапроса.ПакетЗапросов[1].Операторы[0].Отбор.Добавить("РегистрацииВНалоговомОргане.РегистрацияВНалоговомОргане.Код = &Код");
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса; 
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;

КонецФункции

Процедура СформироватьДекларацию(
	СтрокаТаблицы, ПараметрыДекларации, ДанныеОсновнойДекларации = Неопределено, ТаблицаДекларации = Неопределено)
	
	ПараметрыДекларации.КПП = СтрокаТаблицы.КПП;
	ПараметрыДекларации.КодКонтролирующегоОргана = СтрокаТаблицы.КодКонтролирующегоОргана;
	ПараметрыДекларации.КодПоОКТМО = СтрокаТаблицы.КодПоОКТМО; 
	ПараметрыДекларации.КППЗакрытогоПодразделения = СтрокаТаблицы.КППЗакрытогоПодразделения;
	Если ДанныеОсновнойДекларации <> Неопределено Тогда // исправление
		ИндексСтроки = ТаблицаДекларации.Индекс(СтрокаТаблицы);
		ПараметрыДекларации.ДанныеОсновнойДекларации = ДанныеОсновнойДекларации[(ИндексСтроки + 1)].Данные;
		ПараметрыДекларации.СсылкаНаСохрРеглОтчет = СтрокаТаблицы.РегламентированныйОтчет;
		СтрокаТаблицы.ТребуетсяИсправление = Ложь;
	Иначе
		ПараметрыДекларации.ДанныеОсновнойДекларации = СтрокаТаблицы.ДанныеОсновнойДекларации;
	КонецЕсли;
	ПараметрыДекларации.НомерСтраницы = СтрокаТаблицы.НомерСтраницы; 
	ПараметрыДекларации.КППЗакрытогоПодразделения = СтрокаТаблицы.КППЗакрытогоПодразделения;
	
	Декларация = ИнтерфейсыВзаимодействияБРО.СформироватьАвтоматическиРеглОтчет(
		ПараметрыДекларации.ИсточникОтчета,
		ПараметрыДекларации.Организация,
		ПараметрыДекларации.ДатаНачала,
		ПараметрыДекларации.ДатаОкончания,
		,
		ПараметрыДекларации.ИмяФормыОтчета,
		ПараметрыДекларации);

	СтрокаТаблицы.РегламентированныйОтчет = Декларация;
	ЗаполнитьРеквизитыДекларации(СтрокаТаблицы);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДекларации(СтрокаТаблицы, ТребуетсяИсправлениеДеклараций = Неопределено, ДанныеДекларации = Неопределено)

	Если ДанныеДекларации = Неопределено Тогда
		СведенияОтчета = СтрокаТаблицы.РегламентированныйОтчет.ДанныеОтчета.Получить();
		ДеревоРаздела = СведенияОтчета.ДанныеМногоуровневыхРазделов.Лист02;
		ДанныеДекларации = ДеревоРаздела.Строки[0].Строки[4].Строки[0].Данные;
	КонецЕсли;
	СостояниеДекларации = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(СтрокаТаблицы.РегламентированныйОтчет);
	СтрокаТаблицы.СостояниеОтправки = СостояниеДекларации.Представление;
	СтрокаТаблицы.ДоляНалоговойБазы = РегламентированнаяОтчетность.ПоказательОтчета(ДанныеДекларации, "П000250004003");
	СтрокаТаблицы.СуммаНалога = РегламентированнаяОтчетность.ПоказательОтчета(ДанныеДекларации, "П000250007003");
	СтрокаТаблицы.Комментарий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.РегламентированныйОтчет, "Комментарий");
	
	Если ТребуетсяИсправлениеДеклараций <> Неопределено Тогда
		Если Не ОбщегоНазначения.ДанныеСовпадают(СтрокаТаблицы.ДанныеОсновнойДекларации, ДанныеДекларации) Тогда
			СтрокаТаблицы.ТребуетсяИсправление = Истина;
			ТребуетсяИсправлениеДеклараций = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПараметрыДекларации(РеквизитыОсновнойДекларации, ОсновнаяДекларация, Организация)
	
	ПараметрыДекларации = ИнтерфейсыВзаимодействияБРО.НовыйПараметрыАвтоформированияОтчета();
	ПараметрыДекларации.ИсточникОтчета = РеквизитыОсновнойДекларации.ИсточникОтчета;
	ПараметрыДекларации.ИмяФормыОтчета = РеквизитыОсновнойДекларации.ВыбраннаяФорма;
	ПараметрыДекларации.ДатаНачала = РеквизитыОсновнойДекларации.ДатаНачала;
	ПараметрыДекларации.ДатаОкончания = РеквизитыОсновнойДекларации.ДатаОкончания;
	ПараметрыДекларации.Организация = Организация;
	ПараметрыДекларации.Вставить("Периодичность", РеквизитыОсновнойДекларации.Периодичность);
	ПараметрыДекларации.Вставить("ПоОбособленномуПодразделению", Истина);
	ПараметрыДекларации.Вставить("КПП", "");
	ПараметрыДекларации.Вставить("КППЗакрытогоПодразделения", "");
	ПараметрыДекларации.Вставить("КодКонтролирующегоОргана", "");
	ПараметрыДекларации.Вставить("КодПоОКТМО", "");
	ПараметрыДекларации.Вставить("ДанныеОсновнойДекларации", Новый Структура);
	ПараметрыДекларации.Вставить("ОсновнаяДекларация", ОсновнаяДекларация);
	ПараметрыДекларации.Вставить("НомерСтраницы", "");
	
	Возврат ПараметрыДекларации;
	
КонецФункции

Функция НовыйТаблицаДекларацииПоОбособленнымПодразделениям()
	
	ТаблицаДекларации = Новый ТаблицаЗначений;
	
	ТаблицаДекларации.Колонки.Добавить("РегламентированныйОтчет", Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет"));
	ТаблицаДекларации.Колонки.Добавить("РегистрацияВНалоговомОргане", Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаДекларации.Колонки.Добавить("КПП", Метаданные.Справочники.РегистрацииВНалоговомОргане.Реквизиты.КПП.Тип);
	ТаблицаДекларации.Колонки.Добавить("КодКонтролирующегоОргана", Новый ОписаниеТипов("Строка"));
	ТаблицаДекларации.Колонки.Добавить("РегистрацияВНалоговомОрганеНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаДекларации.Колонки.Добавить("КППЗакрытогоПодразделения", Метаданные.Справочники.РегистрацииВНалоговомОргане.Реквизиты.КПП.Тип);
	ТаблицаДекларации.Колонки.Добавить("КодПоОКТМО", Новый ОписаниеТипов("Строка"));
	ТаблицаДекларации.Колонки.Добавить("НаименованиеПодразделения", Новый ОписаниеТипов("Строка"));
	ТаблицаДекларации.Колонки.Добавить("ДоляНалоговойБазы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19, 17)));
	ТаблицаДекларации.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ТаблицаДекларации.Колонки.Добавить("СостояниеОтправки", Новый ОписаниеТипов("Строка"));
	ТаблицаДекларации.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	ТаблицаДекларации.Колонки.Добавить("ДанныеОсновнойДекларации", Новый ОписаниеТипов("Структура"));
	ТаблицаДекларации.Колонки.Добавить("НомерСтраницы", Новый ОписаниеТипов("Строка"));
	ТаблицаДекларации.Колонки.Добавить("ТребуетсяИсправление", Новый ОписаниеТипов("Булево"));
	ТаблицаДекларации.Колонки.Добавить("ТребуетсяУдаление", Новый ОписаниеТипов("Булево"));
	ТаблицаДекларации.Колонки.Добавить("НаименованиеОтчета", Новый ОписаниеТипов("Строка"));
	ТаблицаДекларации.Колонки.Добавить("ВидКонтролирующегоОргана", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтролирующихОрганов"));
	ТаблицаДекларации.Колонки.Добавить("НеОтправляетсяВКонтролирующийОрган", Новый ОписаниеТипов("Булево"));
	ТаблицаДекларации.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Возврат ТаблицаДекларации;
	
КонецФункции

Функция ДекларацииПоОбособленнымПодразделениямПредставление(ТаблицаДекларацииПоОбособленнымПодразделениям)
	
	СостояниеВРаботе = ТаблицаДекларацииПоОбособленнымПодразделениям.НайтиСтроки(Новый Структура("СостояниеОтправки", "В работе")).Количество();
	СостояниеПодготовлено = ТаблицаДекларацииПоОбособленнымПодразделениям.НайтиСтроки(Новый Структура("СостояниеОтправки", "Подготовлено")).Количество();
	СостояниеОтправлено = ТаблицаДекларацииПоОбособленнымПодразделениям.НайтиСтроки(Новый Структура("СостояниеОтправки", "Отправлено")).Количество();
	СостояниеОтправленоОператору = ТаблицаДекларацииПоОбособленнымПодразделениям.НайтиСтроки(Новый Структура("СостояниеОтправки", "Отправлено оператору")).Количество();
	СостояниеОтправленоВФНС = ТаблицаДекларацииПоОбособленнымПодразделениям.НайтиСтроки(Новый Структура("СостояниеОтправки", "Отправлено в ФНС")).Количество();
	СостояниеПринятоВОбработку = ТаблицаДекларацииПоОбособленнымПодразделениям.НайтиСтроки(Новый Структура("СостояниеОтправки", "Принято в обработку")).Количество(); 
	СостояниеНеПринятоВОбработку = ТаблицаДекларацииПоОбособленнымПодразделениям.НайтиСтроки(Новый Структура("СостояниеОтправки", "Не принято в обработку")).Количество(); 
	СостояниеСдано = ТаблицаДекларацииПоОбособленнымПодразделениям.НайтиСтроки(Новый Структура("СостояниеОтправки", "Сдано")).Количество();
	
	ЭлементыСообщения = Новый Массив;
	Если СостояниеВРаботе > 0 Тогда 
		ЭлементыСообщения.Добавить(СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 декларация (В работе);;%1 декларации (В работе);%1 деклараций (В работе);%1 деклараций (В работе)'"),
			СостояниеВРаботе));
	КонецЕсли;
	Если СостояниеПодготовлено > 0 Тогда
		ЭлементыСообщения.Добавить(СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 декларация (Подготовлено);;%1 декларации (Подготовлено);%1 деклараций (Подготовлено);%1 деклараций (Подготовлено)'"),
			СостояниеПодготовлено));
	КонецЕсли;
	Если СостояниеОтправлено > 0 Тогда
		ЭлементыСообщения.Добавить(СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 декларация (Отправлено);;%1 декларации (Отправлено);%1 деклараций (Отправлено);%1 деклараций (Отправлено)'"),
			СостояниеОтправлено));
	КонецЕсли;
	Если СостояниеОтправленоОператору > 0 Тогда
		ЭлементыСообщения.Добавить(СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 декларация (Отправлено оператору);;%1 декларации (Отправлено оператору);%1 деклараций (Отправлено оператору);%1 деклараций (Отправлено оператору)'"),
			СостояниеОтправленоОператору));
	КонецЕсли; 
	Если СостояниеОтправленоВФНС > 0 Тогда
		ЭлементыСообщения.Добавить(СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 декларация (Отправлено в ФНС);;%1 декларации (Отправлено в ФНС);%1 деклараций (Отправлено в ФНС);%1 деклараций (Отправлено в ФНС)'"),
			СостояниеОтправленоВФНС));
	КонецЕсли;
	Если СостояниеПринятоВОбработку > 0 Тогда
		ЭлементыСообщения.Добавить(СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 декларация (Принято в обработку);;%1 декларации (Принято в обработку);%1 деклараций (Принято в обработку);%1 деклараций (Принято в обработку)'"),
			СостояниеПринятоВОбработку));
	КонецЕсли;
	Если СостояниеНеПринятоВОбработку > 0 Тогда
		ЭлементыСообщения.Добавить(СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 декларация (Не принято в обработку);;%1 декларации (Не принято в обработку);%1 деклараций (Не принято в обработку);%1 деклараций (Не принято в обработку)'"),
			СостояниеПринятоВОбработку));
	КонецЕсли;
	Если СостояниеСдано > 0 Тогда
		ЭлементыСообщения.Добавить(СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';%1 декларация (Сдано);;%1 декларации (Сдано);%1 деклараций (Сдано);%1 деклараций (Сдано)'"),
			СостояниеСдано));
	КонецЕсли;
	Возврат СтрСоединить(ЭлементыСообщения, "; ");
	
КонецФункции

Функция НовыйРезультатВыполненияДекларацииПоОбособленнымПодразделениям()
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ТаблицаДекларацииПоОбособленнымПодразделениям", Неопределено);
	РезультатВыполнения.Вставить("ДекларацииПоОбособленнымПодразделениямПредставление", "");
	РезультатВыполнения.Вставить("ТребуетсяИсправлениеДеклараций", Ложь);
	РезультатВыполнения.Вставить("ТребуетсяАктуализацияОсновнойДекларации", Ложь);
	РезультатВыполнения.Вставить("ДоступноФормированиеДекларацийПоПодразделениям", Истина);
	РезультатВыполнения.Вставить("СообщенияОбОшибках", Неопределено);
	
	Возврат РезультатВыполнения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СПРАВКИ-РАСЧЕТЫ
//

Процедура ДополнитьСписокСправокРасчетов(Список) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Список.Добавить("СправкаРасчетДолиНалоговойБазы","Распределение прибыли по бюджетам субъектов РФ");
	
КонецПроцедуры	

Процедура ВыполнитьЗапросРасчетСтавкиНалогаНаПрибыльЗаМесяц(РезультатЗапроса, Организация, КонецПериода) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоМесяца(КонецПериода));
	Запрос.УстановитьПараметр("КонецПериода",      КонецПериода);
	Запрос.УстановитьПараметр("СписокОрганизаций", ОбщегоНазначенияБП.СписокДоступныхОрганизаций(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетСтавкиНалогаНаПрибыльЗаМесяц.Ставка,
	|	РасчетСтавкиНалогаНаПрибыльЗаМесяц.СуммаНалога,
	|	РасчетСтавкиНалогаНаПрибыльЗаМесяц.СуммаБазы,
	|	РасчетСтавкиНалогаНаПрибыльЗаМесяц.Организация,
	|	РасчетСтавкиНалогаНаПрибыльЗаМесяц.Организация.ГоловнаяОрганизация
	|ИЗ
	|	РегистрСведений.РасчетСтавкиНалогаНаПрибыльЗаМесяц КАК РасчетСтавкиНалогаНаПрибыльЗаМесяц
	|ГДЕ
	|	РасчетСтавкиНалогаНаПрибыльЗаМесяц.ПериодРасчета МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетСтавкиНалогаНаПрибыльЗаМесяц.Организация В(&СписокОрганизаций)";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ВыполнитьЗапросРасчетНалогаНаПрибыль(РезультатЗапроса, Организация, КонецПериода) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СчетаДенежныхСредств
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СчетаДенежныхСредств)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Организация КАК Организация,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто3, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)) КАК РегистрацияВНалоговомОргане,
	|	ХозрасчетныйОбороты.Субконто2 КАК Бюджет,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаНалогГод,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Период = &НачалоМесяца
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНалогМесяц
	|ПОМЕСТИТЬ НалогПоПериодам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Месяц,
	|			Счет В (&СчетаРасчетыСБюджетом),
	|			&Субконто68_04_1,
	|			Организация В (&СписокОрганизаций)
	|				И Субконто1 = ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог)
	|				И Субконто2 В (ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.ФедеральныйБюджет), ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.РегиональныйБюджет)),
	|			НЕ КорСчет В
	|					(ВЫБРАТЬ
	|						СчетаДенежныхСредств.Ссылка
	|					ИЗ
	|						СчетаДенежныхСредств)
	|			И Не КорСчет = &СчетЕдиныйНалоговыйСчет,
	|			) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто2,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Субконто3, ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)),
	|	ХозрасчетныйОбороты.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалогПоПериодам.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ВЫБОР
	|		КОГДА НалогПоПериодам.Бюджет = ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.ФедеральныйБюджет)
	|			ТОГДА 1
	|		ИНАЧЕ РасчетДолейБазыНалогаНаПрибыль.ДоляНалоговойБазы
	|	КОНЕЦ КАК ДоляНалоговойБазы,
	|	ВЫБОР
	|		КОГДА НалогПоПериодам.Бюджет = ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.ФедеральныйБюджет)
	|			ТОГДА &СтавкаФедеральныйБюджет
	|		КОГДА НалогПоПериодам.Бюджет <> ЗНАЧЕНИЕ(Перечисление.УровниБюджетов.РегиональныйБюджет)
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(РегиональныеСтавки.СтавкаСубъектРФ, &СтавкаРегиональныйБюджет)
	|	КОНЕЦ КАК СтавкаСубъектРФ,
	|	НалогПоПериодам.СуммаНалогГод КАК СуммаНалогГод,
	|	НалогПоПериодам.СуммаНалогМесяц КАК СуммаНалогМесяц,
	|	НалогПоПериодам.СуммаНалогГод - НалогПоПериодам.СуммаНалогМесяц КАК СуммаНалогОстальныеМесяцы,
	|	НалогПоПериодам.Бюджет КАК Бюджет,
	|	НалогПоПериодам.Организация КАК Организация,
	|	НалогПоПериодам.Организация.ГоловнаяОрганизация КАК ОрганизацияГоловнаяОрганизация
	|ИЗ
	|	НалогПоПериодам КАК НалогПоПериодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасчетДолейБазыНалогаНаПрибыль КАК РасчетДолейБазыНалогаНаПрибыль
	|		ПО НалогПоПериодам.Организация = РасчетДолейБазыНалогаНаПрибыль.Организация
	|			И НалогПоПериодам.РегистрацияВНалоговомОргане = РасчетДолейБазыНалогаНаПрибыль.РегистрацияВНалоговомОргане
	|			И (РасчетДолейБазыНалогаНаПрибыль.ПериодРасчета МЕЖДУ &НачалоМесяца И &КонецПериода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.СрезПоследних(&КонецПериода, Организация В (&СписокОрганизаций)) КАК РегиональныеСтавки
	|		ПО НалогПоПериодам.Организация = РегиональныеСтавки.Организация
	|			И НалогПоПериодам.РегистрацияВНалоговомОргане = РегиональныеСтавки.РегистрацияВНалоговомОргане";
	
	СчетаДенежныхСредств = Новый Массив;
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ЦифровойРубль);
	
	Субконто68_04_1 = Новый Массив;
	Субконто68_04_1.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Субконто68_04_1.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.УровниБюджетов);
	Субконто68_04_1.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВНалоговомОргане);
	
	НачалоПериода = НалоговыйУчет.НачалоНалоговогоПериода(КонецПериода, Организация);
	Если НачалоПериода = Неопределено Тогда
		НачалоПериода = НачалоГода(КонецПериода);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СчетаДенежныхСредств",     СчетаДенежныхСредств);
	Запрос.УстановитьПараметр("СписокОрганизаций",        ОбщегоНазначенияБП.СписокДоступныхОрганизаций(Организация));
	Запрос.УстановитьПараметр("СчетаРасчетыСБюджетом",    БухгалтерскийУчетПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСБюджетом));
	Запрос.УстановитьПараметр("Субконто68_04_1",          Субконто68_04_1);
	Запрос.УстановитьПараметр("НачалоПериода",            НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",             КонецПериода);
	Запрос.УстановитьПараметр("НачалоМесяца",             НачалоМесяца(КонецПериода));
	Запрос.УстановитьПараметр("СтавкаФедеральныйБюджет",  НалоговыйУчет.НалоговаяСтавкаФедеральныйБюджет(КонецПериода, Организация, "%"));
	Запрос.УстановитьПараметр("СтавкаРегиональныйБюджет", НалоговыйУчет.НалоговаяСтавкаРегиональныйБюджет(КонецПериода, Организация, "%"));
	Запрос.УстановитьПараметр("СчетЕдиныйНалоговыйСчет",  ПланыСчетов.Хозрасчетный.ЕдиныйНалоговыйСчет);
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

Процедура ОпределитьСубконтоРегистрацияВНалоговомОргане(ЭтоСубконтоРегистрация, ВидСубконто) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСубконтоРегистрация = ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РегистрацияВНалоговомОргане;
	
КонецПроцедуры
