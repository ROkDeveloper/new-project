// Содержимое модуля отличается в версиях ПРОФ и КОРП.
// В версии ПРОФ отсутствует:
// - тело экспортных процедур (остаются только сигнатуры методов)
// - неэкспортные процедуры и все функции.
// Поэтому не допускается реализация в модуле экспортных функций: вместо них следует использовать процедуры с возвращаемым параметром.

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОпределитьПоддержкуДисконтированияОбязательств(УчетПоддерживается) Экспорт
	
	УчетПоддерживается = ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// Подключает объекты подсистемы к механизмам ограничения доступа.
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
//
// Параметры:
//  Списки - Соответствие:
//     * Ключ - ОбъектМетаданных - объекты подсистемы, имеющие списки, требующие подключения
//     * Значение - Булево - Истина
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.РегистрыСведений.ГрафикиПроцентныхРасходов, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РасчетНачисленияПроцентныхРасходов, Истина);
	Списки.Вставить(Метаданные.Документы.УсловияОплатыПоступления, Истина);
	
КонецПроцедуры

// Подключает объекты подсистемы к механизмам даты запрета редактирования.
// См. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
//
// Параметры: см. ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных, "РегистрСведений.ГрафикиПроцентныхРасходов", "Период", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(
		ИсточникиДанных, "Документ.УсловияОплатыПоступления", "Дата", "БухгалтерскийУчет", "Организация");
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.УсловияОплатыПоступления);
	
КонецПроцедуры

// Подключает объекты подсистемы к механизмам свойств.
// См. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств
//
// Параметры: см. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств
//
Процедура НастроитьНаборыСвойств(Наборы) Экспорт
	
	Документы.УсловияОплатыПоступления.ПриПолученииПредопределенныхНаборовСвойств(Наборы);
	
КонецПроцедуры

Процедура ДобавитьКомандуПечатиНачислениеПроцентныхРасходов(КомандыПечати) Экспорт
	
	// Справка-расчет "Начисление процентных расходов"
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ГрафикПлатежейПоДоговору";
	КомандаПечати.Идентификатор = "НачислениеПроцентныхРасходов";
	КомандаПечати.Представление = НСтр("ru = 'Справка-расчет ""Начисление процентных расходов""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.ФункциональныеОпции = "РасширенныйФункционал";
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвижений

#Область ПоступлениеВАренду

Процедура СформироватьДвиженияПоступлениеПроцентыПоАренде(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПоступлениеПроцентыПоАренды(ТаблицаОС, ТаблицаРеквизиты);
	
	СуммаПроцентовВал = ТаблицаОС.Итог("СуммаВзаиморасчетов") - ТаблицаОС.Итог("СуммаВалБУ");
	СуммаПроцентовРуб = ТаблицаОС.Итог("СуммаРуб") - ТаблицаОС.Итог("СуммаБУ");
	Если СуммаПроцентовВал = 0 И СуммаПроцентовРуб = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Не Реквизиты.РасчетыВВалюте Тогда
		СчетПроцентыПоАренде = ПланыСчетов.Хозрасчетный.ПроцентыПоАренде;
	ИначеЕсли Реквизиты.РасчетыВУсловныхЕдиницах Тогда
		СчетПроцентыПоАренде = ПланыСчетов.Хозрасчетный.ПроцентыПоАрендеУЕ;
	Иначе
		СчетПроцентыПоАренде = ПланыСчетов.Хозрасчетный.ПроцентыПоАрендеВал;
	КонецЕсли;
	
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Если Реквизиты.ПереходНаФСБУ25 Тогда
		Проводка.Содержание = НСтр("ru='Переход на ФСБУ 25'", ОбщегоНазначения.КодОсновногоЯзыка());
	Иначе
		Проводка.Содержание = НСтр("ru='Проценты по аренде'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
	Проводка.СчетДт = СчетПроцентыПоАренде;
	БухгалтерскийУчет.УстановитьСубконто(
		Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
	БухгалтерскийУчет.УстановитьСубконто(
		Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
	
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
	Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
		Проводка.ПодразделениеДт = Реквизиты.Подразделение;
	КонецЕсли;
	Если СвойстваСчетаДт.Валютный Тогда
		Проводка.ВалютаДт = Реквизиты.ВалютаВзаиморасчетов;
		Проводка.ВалютнаяСуммаДт = СуммаПроцентовВал;
	КонецЕсли;
	
	// Если учет обязательства по номинальной стоимости велся и до перехода на ФСБУ 25,
	// проценты при переходе относятся на нераспределенную прибыль.
	// В остальных случаях проценты формируют номинальную стоимость обязательства.
	Если Реквизиты.ПереходНаФСБУ25 
		И Реквизиты.Лизинг И Реквизиты.НалоговыйУчетИмуществаВедетЛизингополучатель Тогда
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрибыльПодлежащаяРаспределению; // 84.01
		
	Иначе
		
		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.Подразделение;
		КонецЕсли;
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СуммаПроцентовВал;
		КонецЕсли;
		
	КонецЕсли;
	
	Проводка.Сумма = СуммаПроцентовРуб;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДисконтированияОбязательстваПоАренде(ДокументОбъект, Отказ, РежимЗаписи, ИзменениеУсловий = Ложь, ЭтоПереходНаФСБУ25 = Ложь) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеДисконтированияОбязательства(
		ДокументОбъект, Отказ, РежимЗаписи, ИзменениеУсловий, ЭтоПереходНаФСБУ25, "ПредметыАренды", "СпособОценкиАрендыБУ");
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеУсловийАренды

Процедура СформироватьДвиженияИзменениеУсловийПроцентыПоАренде(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОС) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыИзменениеУсловийПроцентыПоАренды(ТаблицаОС, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	ИзменениеПроцентыВал = Параметры.ТаблицаОС.Итог("ИзменениеПроцентыВал");
	
	Если ИзменениеПроцентыВал = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИзменениеПроцентыРуб = Параметры.ТаблицаОС.Итог("ИзменениеПроцентыРуб");
	
	Если Не Реквизиты.РасчетыВВалюте Тогда
		СчетПроцентыПоАренде = ПланыСчетов.Хозрасчетный.ПроцентыПоАренде;
	ИначеЕсли Реквизиты.РасчетыВУсловныхЕдиницах Тогда
		СчетПроцентыПоАренде = ПланыСчетов.Хозрасчетный.ПроцентыПоАрендеУЕ;
	Иначе
		СчетПроцентыПоАренде = ПланыСчетов.Хозрасчетный.ПроцентыПоАрендеВал;
	КонецЕсли;
	
	Проводка = Движения.Хозрасчетный.Добавить();
	
	Проводка.Период      = Реквизиты.Период;
	Проводка.Организация = Реквизиты.Организация;
	Проводка.Содержание  = НСтр("ru='Изменение условий аренды'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Если ИзменениеПроцентыВал > 0 Тогда
		
		Проводка.СчетДт = СчетПроцентыПоАренде;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = ИзменениеПроцентыВал;
		КонецЕсли;
		
		Проводка.СчетКт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = ИзменениеПроцентыВал;
		КонецЕсли;
		
		Проводка.Сумма = ИзменениеПроцентыРуб;
		
	ИначеЕсли ИзменениеПроцентыВал < 0 Тогда
		
		Проводка.СчетКт = СчетПроцентыПоАренде;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = -ИзменениеПроцентыВал;
		КонецЕсли;
		
		Проводка.СчетДт = Реквизиты.СчетУчетаРасчетовСКонтрагентом;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = -ИзменениеПроцентыВал;
		КонецЕсли;
		
		Проводка.Сумма = -ИзменениеПроцентыРуб;
		
	КонецЕсли;
	
	БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, Реквизиты.Подразделение, Реквизиты.Подразделение); 
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПрекращениеАренды

Процедура ЗаполнитьТаблицыПроцентовПрекращениеАренды(СтруктураРезультат, ТаблицаПредметыАренды, ТаблицаРеквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПредметыАренды) Или Не ЗначениеЗаполнено(ТаблицаРеквизиты) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеГрафика = ДанныеГрафикаПлатежейПрекращениеАренды(ТаблицаПредметыАренды, ТаблицаРеквизиты);
	
	СтруктураГрафика = Новый Структура;
	ЗаполнитьГрафикПроцентов(СтруктураГрафика, 
		ДанныеГрафика.ГрафикПлатежей, ДанныеГрафика.ДанныеПредметовАренды, ДанныеГрафика.РеквизитыГрафика, "ОсновноеСредство");
	ГрафикПроцентов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураГрафика, "График");
	
	Проценты = Неопределено;
	Если ГрафикПроцентов <> Неопределено Тогда
		
		Проценты = ТаблицаРеквизиты.Скопировать(, 
			"Контрагент, ДоговорКонтрагента, Подразделение, ВалютаВзаиморасчетов,СчетУчетаПроцентов");
		Проценты.Колонки.Добавить("СуммаПроцентовВал", БухгалтерскийУчетКлиентСервер.ТипСумма());
		Проценты.Колонки.Добавить("СуммаПроцентов", БухгалтерскийУчетКлиентСервер.ТипСумма());
		
		СуммаПроцентовВал = ГрафикПроцентов.Итог("СуммаПроцентов");
		Проценты[0].СуммаПроцентовВал = СуммаПроцентовВал;
		Реквизиты = ТаблицаРеквизиты[0];
		Проценты[0].СуммаПроцентов = ?(Реквизиты.Кратность = 0, 0, 
			Окр(СуммаПроцентовВал * Реквизиты.Курс / Реквизиты.Кратность, 2));
		
	КонецЕсли;
	
	СтруктураРезультат.Вставить("График", ГрафикПроцентов);
	СтруктураРезультат.Вставить("Проценты", Проценты);
	СтруктураРезультат.Вставить("РеквизитыГрафика", ДанныеГрафика.РеквизитыГрафика);
	СтруктураРезультат.Вставить("СтоимостьОбязательства", ДанныеГрафика.СтоимостьОбязательства);
	
КонецПроцедуры

Функция ДанныеГрафикаПлатежейПрекращениеАренды(ТаблицаПредметыАренды, ТаблицаРеквизиты)
	
	Данные = Новый Структура;
	Данные.Вставить("СтоимостьОбязательства", НовыйТаблицаСтоимостьОбязательства());
	Данные.Вставить("ГрафикПлатежей", НовыйТаблицаГрафикПлатежей());
	Данные.Вставить("РеквизитыГрафика", ТаблицаРеквизиты.Скопировать());
	Для каждого Колонка Из Данные.СтоимостьОбязательства.Колонки Цикл
		Если Данные.РеквизитыГрафика.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
			Данные.РеквизитыГрафика.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("ДанныеПредметовАренды", НовыйТаблицаДанныеПредметовПрекращениеАренды());
	
	Реквизиты = ТаблицаРеквизиты[0];
	ОсновныеСредства = ТаблицаПредметыАренды.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеПредметовАренды.Период КАК Период,
	|	ДанныеПредметовАренды.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ДанныеПредметовАренды.Регистратор ССЫЛКА Документ.ПоступлениеВАренду
	|			ТОГДА ВЫРАЗИТЬ(ДанныеПредметовАренды.Регистратор КАК Документ.ПоступлениеВАренду).СпособОценкиАрендыБУ
	|		КОГДА ДанныеПредметовАренды.Регистратор ССЫЛКА Документ.ИзменениеУсловийАренды
	|			ТОГДА ВЫРАЗИТЬ(ДанныеПредметовАренды.Регистратор КАК Документ.ИзменениеУсловийАренды).СпособОценкиАрендыБУ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеПредметовАренды.СтавкаДисконтирования > 0
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыОценкиБУ.РассчитываетсяПоСтавке)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыОценкиБУ.РавнаСуммеДоговора)
	|			КОНЕЦ
	|	КОНЕЦ КАК СпособОценкиАрендыБУ,
	|	ВЫБОР
	|		КОГДА ДанныеПредметовАренды.Регистратор ССЫЛКА Документ.ПоступлениеВАренду
	|			ТОГДА ВЫРАЗИТЬ(ДанныеПредметовАренды.Регистратор КАК Документ.ПоступлениеВАренду).СтавкаДисконтирования
	|		КОГДА ДанныеПредметовАренды.Регистратор ССЫЛКА Документ.ИзменениеУсловийАренды
	|			ТОГДА ВЫРАЗИТЬ(ДанныеПредметовАренды.Регистратор КАК Документ.ИзменениеУсловийАренды).СтавкаДисконтирования
	|		ИНАЧЕ ДанныеПредметовАренды.СтавкаДисконтирования
	|	КОНЕЦ КАК СтавкаДисконтирования
	|ИЗ
	|	РегистрСведений.ДанныеПредметовАренды.СрезПоследних(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И ДоговорКонтрагента = &ДоговорКонтрагента
	|				И ПредметАренды В (&ОсновныеСредства)) КАК ДанныеПредметовАренды
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	Запрос.УстановитьПараметр("КонецПериода", НачалоДня(Реквизиты.Период) - 1);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ОсновныеСредства", ОсновныеСредства);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() 
		Или Выборка.СпособОценкиАрендыБУ = Перечисления.СпособыОценкиБУ.РавнаСуммеДоговора Тогда
		Возврат Данные;
	КонецЕсли; 
	
	СтрокаСтоимостьОбязательства = Данные.СтоимостьОбязательства.Добавить();
	СтрокаСтоимостьОбязательства.Период = Реквизиты.Период;
	СтрокаСтоимостьОбязательства.Организация = Реквизиты.Организация;
	СтрокаСтоимостьОбязательства.СпособОценкиАрендыБУ = Выборка.СпособОценкиАрендыБУ;
	СтрокаСтоимостьОбязательства.СтавкаДисконтирования = Выборка.СтавкаДисконтирования;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&НачалоПериода КАК Дата,
	|	ОстаткиНаНачало.Счет КАК Счет,
	|	ВЫБОР
	|		КОГДА ОстаткиНаНачало.Счет.Валютный
	|			ТОГДА ОстаткиНаНачало.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ОстаткиНаНачало.СуммаОстаток
	|	КОНЕЦ КАК ОстатокНаНачало,
	|	0 КАК Оборот
	|ПОМЕСТИТЬ ДанныеБУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоПериода,
	|			Счет В (&СчетаАренды),
	|			&КонтрагентыДоговоры,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент
	|				И Субконто2 = &ДоговорКонтрагента) КАК ОстаткиНаНачало
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Обороты.Период,
	|	Обороты.Счет,
	|	0,
	|	ВЫБОР
	|		КОГДА Обороты.Счет.Валютный
	|			ТОГДА Обороты.ВалютнаяСуммаОборот
	|		ИНАЧЕ Обороты.СуммаОборот
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			День,
	|			Счет В (&СчетаАренды),
	|			&КонтрагентыДоговоры,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент
	|				И Субконто2 = &ДоговорКонтрагента,
	|			НЕ КорСчет В (&СчетаАренды),
	|			) КАК Обороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеБУ.Дата КАК Дата,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеБУ.Счет = &СчетОбязательства
	|				ТОГДА -ДанныеБУ.ОстатокНаНачало
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбязательствоНаНачало,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеБУ.Счет = &СчетНДС
	|				ТОГДА ДанныеБУ.ОстатокНаНачало
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НДСНаНачало,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеБУ.Счет = &СчетПроцентов
	|				ТОГДА ДанныеБУ.ОстатокНаНачало
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПроцентыНаНачало,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеБУ.Счет В (&СчетаПлатежей)
	|				ТОГДА ДанныеБУ.ОстатокНаНачало
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлатежиНаНачало,
	|	СУММА(ВЫБОР
	|			КОГДА ДанныеБУ.Счет В (&СчетаПлатежей)
	|				ТОГДА ДанныеБУ.Оборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПлатежиЗаПериод
	|ИЗ
	|	ДанныеБУ КАК ДанныеБУ
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеБУ.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПредметовАренды.ПредметАренды КАК ОсновноеСредство,
	|	ДанныеПредметовАренды.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|ИЗ
	|	РегистрСведений.ДанныеПредметовАренды.СрезПоследних(
	|			&ГраницаНачалаПериода,
	|			Организация = &Организация
	|				И Контрагент = &Контрагент
	|				И ДоговорКонтрагента = &ДоговорКонтрагента) КАК ДанныеПредметовАренды";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("ГраницаНачалаПериода", Новый Граница(НачалоМесяца(Реквизиты.Период), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериода", НачалоДня(Реквизиты.Период) - 1);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Реквизиты.ДоговорКонтрагента);
	
	Запрос.УстановитьПараметр("ОсновныеСредства", ОсновныеСредства);
	
	СчетаАренды = Новый Массив;
	СчетаПлатежей = Новый Массив;
	
	Запрос.УстановитьПараметр("СчетОбязательства", Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	СчетаАренды.Добавить(Реквизиты.СчетУчетаРасчетовСКонтрагентом);
	
	СчетаПлатежей.Добавить(Реквизиты.СчетУчетаРасчетовПоАвансам);
	СчетаАренды.Добавить(Реквизиты.СчетУчетаРасчетовПоАвансам);
	Если Реквизиты.СчетПлатежей <> Реквизиты.СчетУчетаРасчетовПоАвансам Тогда
		СчетаПлатежей.Добавить(Реквизиты.СчетПлатежей);
		СчетаАренды.Добавить(Реквизиты.СчетПлатежей);
	КонецЕсли;
	Запрос.УстановитьПараметр("СчетаПлатежей", СчетаПлатежей);
	
	Запрос.УстановитьПараметр("СчетНДС", Реквизиты.СчетУчетаНДС);
	Если ЗначениеЗаполнено(Реквизиты.СчетУчетаНДС) Тогда
		СчетаАренды.Добавить(Реквизиты.СчетУчетаНДС);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СчетПроцентов", Реквизиты.СчетУчетаПроцентов);
	СчетаАренды.Добавить(Реквизиты.СчетУчетаПроцентов);
	
	Запрос.УстановитьПараметр("СчетаАренды", СчетаАренды);
	
	КонтрагентыДоговоры = Новый Массив;
	КонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	КонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("КонтрагентыДоговоры", КонтрагентыДоговоры);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	РасчетыПоДоговору = Результаты[1].Выгрузить();
	СуммыОС = Результаты[2].Выгрузить();
	
	СуммаВыбытияОС = 0;
	Для каждого СтрокаОС Из СуммыОС Цикл
		Если ОсновныеСредства.Найти(СтрокаОС.ОсновноеСредство) <> Неопределено Тогда
			СуммаВыбытияОС = СуммаВыбытияОС + СтрокаОС.СуммаВзаиморасчетов;
			СтрокаДанныеОС = Данные.ДанныеПредметовАренды.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДанныеОС, СтрокаОС);
		КонецЕсли;
	КонецЦикла;
	КоэффициентВыбытияОС = СуммаВыбытияОС / СуммыОС.Итог("СуммаВзаиморасчетов");
	
	ОбязательствоНаНачало = РасчетыПоДоговору.Итог("ОбязательствоНаНачало") - РасчетыПоДоговору.Итог("НДСНаНачало");
	ПроцентНДС = ?(РасчетыПоДоговору.Итог("НДСНаНачало") > 0, 20/120, 0);
	НДСПлатежейНаНачало = Окр(РасчетыПоДоговору.Итог("ПлатежиНаНачало") * ПроцентНДС, 2);
	ПлатежиБезНДСНаНачало = РасчетыПоДоговору.Итог("ПлатежиНаНачало") - НДСПлатежейНаНачало;
	ОбязательствоНаНачало = ОбязательствоНаНачало - ПлатежиБезНДСНаНачало;
	ОбязательствоНаНачало = Окр(ОбязательствоНаНачало * КоэффициентВыбытияОС, 2);
	
	ПроцентыНаНачало = Окр(РасчетыПоДоговору.Итог("ПроцентыНаНачало") * КоэффициентВыбытияОС, 2);
	СуммыОС = Данные.ДанныеПредметовАренды.ВыгрузитьКолонку("СуммаВзаиморасчетов");
	ОбязательстваОС = РаспределитьПропорционально(ОбязательствоНаНачало, СуммыОС);
	Данные.ДанныеПредметовАренды.ЗагрузитьКолонку(ОбязательстваОС, "СуммаВзаиморасчетов");
	Если ПроцентыНаНачало > 0 Тогда
		ПроцентыОС = РаспределитьПропорционально(ПроцентыНаНачало, СуммыОС);
	Иначе
		ПроцентыОС = Новый Массив;
		Для Индекс = 0 По СуммыОС.ВГраница() Цикл
			ПроцентыОС.Добавить(0);
		КонецЦикла;
	КонецЕсли;
	Для Индекс = 0 По ПроцентыОС.ВГраница() Цикл
		СтрокаОС = Данные.ДанныеПредметовАренды[Индекс];
		СтрокаОС.СуммаВалБУ = СтрокаОС.СуммаВзаиморасчетов - ПроцентыОС[Индекс];
	КонецЦикла;
	
	Для каждого СтрокаРасчетов Из РасчетыПоДоговору Цикл
		
		Если СтрокаРасчетов.ПлатежиЗаПериод = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаГрафика = Данные.ГрафикПлатежей.Добавить();
		СтрокаГрафика.ДатаПлатежа = СтрокаРасчетов.Дата;
		СуммаПлатежа = СтрокаРасчетов.ПлатежиЗаПериод;
		СуммаНДСПлатежа = Окр(СтрокаРасчетов.ПлатежиЗаПериод * ПроцентНДС, 2);
		СуммаБезНДСПлатежа = СуммаПлатежа - СуммаНДСПлатежа;
		СтрокаГрафика.СуммаБезНДСПлатежа = Окр(СуммаБезНДСПлатежа * КоэффициентВыбытияОС, 2);
		
	КонецЦикла;
	
	ОстатокПлатежей = ОбязательствоНаНачало - Данные.ГрафикПлатежей.Итог("СуммаБезНДСПлатежа");
	Если ОстатокПлатежей > 0 Тогда
		СтрокаГрафика = Данные.ГрафикПлатежей.Добавить();
		СтрокаГрафика.ДатаПлатежа = НачалоДня(Реквизиты.Период);
		СтрокаГрафика.СуммаБезНДСПлатежа = ОстатокПлатежей;
	КонецЕсли;
	
	Платежи = Данные.ГрафикПлатежей.ВыгрузитьКолонку("СуммаБезНДСПлатежа");
	Даты = Данные.ГрафикПлатежей.ВыгрузитьКолонку("ДатаПлатежа");
	Платежи.Вставить(0, 0);
	Даты.Вставить(0, НачалоДня(НачалоМесяца(Реквизиты.Период) - 1));
	СтоимостьОбязательства = Окр(ФинансовыеИнструменты.XNPV(
		СтрокаСтоимостьОбязательства.СтавкаДисконтирования / 100, Платежи, Даты), 2);
	СтрокаСтоимостьОбязательства.СтоимостьОбязательства = СтоимостьОбязательства;
	
	СтрокаРеквизитыГрафика = Данные.РеквизитыГрафика[0];
	ЗаполнитьЗначенияСвойств(СтрокаРеквизитыГрафика, СтрокаСтоимостьОбязательства);
	
	Возврат Данные;
	
КонецФункции

Функция НовыйТаблицаСтоимостьОбязательства()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("СтоимостьОбязательства", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("АвансовыеПлатежи", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("СпособОценкиАрендыБУ", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыОценкиБУ"));
	Результат.Колонки.Добавить("СтавкаДисконтирования", ОбщегоНазначения.ОписаниеТипаЧисло(10, 4));
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаГрафикПлатежей()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("ДатаПлатежа", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("СуммаБезНДСПлатежа", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаДанныеПредметовПрекращениеАренды()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("ОсновноеСредство", Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	Результат.Колонки.Добавить("СуммаВзаиморасчетов", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Результат.Колонки.Добавить("СуммаВалБУ", БухгалтерскийУчетКлиентСервер.ТипСумма());
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УсловияОплатыПоступления

Процедура СформироватьДвиженияПроцентыПоРассрочке(ТаблицаТМЦ, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаТМЦ) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыПроцентыПоРассрочке(ТаблицаТМЦ, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СпособОценкиМПЗ = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период);
	ВедетсяУчетПоПартиям = СпособОценкиМПЗ <> Перечисления.СпособыОценки.ПоСредней;
	
	Для Каждого СтрокаТМЦ Из Параметры.ТаблицаТМЦ Цикл
		Если СтрокаТМЦ.ПроцентПоРассрочкеРуб = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период      = Реквизиты.Период;
		Проводка.Содержание  = Реквизиты.Содержание;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Сумма       = СтрокаТМЦ.ПроцентПоРассрочкеРуб;
		
		Проводка.СчетДт = СтрокаТМЦ.СчетРассрочки;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", Реквизиты.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", Реквизиты.ДоговорКонтрагента);
		
		СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		Если СвойстваСчетаДт.Валютный Тогда
			Проводка.ВалютаДт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаДт = СтрокаТМЦ.ПроцентПоРассрочкеВал;
		КонецЕсли;
		
		Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеДт = Реквизиты.ПодразделениеДт;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТМЦ.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТМЦ.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады", Реквизиты.Склад);
		Если ВедетсяУчетПоПартиям Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии", Реквизиты.ДокументПартии);
		КонецЕсли;
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт        = Реквизиты.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТМЦ.ВалютнаяСумма;
		КонецЕсли;
		
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = Реквизиты.ПодразделениеКт;
		КонецЕсли;
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНачислениеПроцентныхРасходов(Движения, ТаблицаПроценты, ТаблицаРеквизиты) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаПроценты) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ПодготовитьПараметрыНачислениеПроцентныхРасходов(ТаблицаПроценты, ТаблицаРеквизиты);
	
	Реквизиты = Параметры.Реквизиты[0];
	
	СчетРасходов = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; // 91.02
	СтатьяРасходов = Справочники.ПрочиеДоходыИРасходы.ПредопределенныйЭлемент("ПроцентныеРасходы");
	СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетРасходов);
	УчетПоПодразделениямДт = СвойстваСчетаДт.УчетПоПодразделениям;
	
	Для Каждого СтрокаТаблицы Из Параметры.ТаблицаПроценты Цикл
		
		Проводка = Движения.Хозрасчетный.Добавить();
		
		Проводка.Период = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание = Реквизиты.Содержание;
		
		Проводка.СчетДт = СчетРасходов;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт, Проводка.СубконтоДт, "ПрочиеДоходыИРасходы", СтатьяРасходов);
		
		Если УчетПоПодразделениямДт Тогда
			Проводка.ПодразделениеДт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Проводка.СчетКт = СтрокаТаблицы.СчетУчетаПроцентов;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", СтрокаТаблицы.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", СтрокаТаблицы.ДоговорКонтрагента);
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетКт);
		Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
			Проводка.ПодразделениеКт = СтрокаТаблицы.Подразделение;
		КонецЕсли;
		
		Если СвойстваСчетаКт.Валютный Тогда
			Проводка.ВалютаКт = СтрокаТаблицы.ВалютаВзаиморасчетов;
			Проводка.ВалютнаяСуммаКт = СтрокаТаблицы.СуммаПроцентовВал;
		КонецЕсли;
		
		Проводка.Сумма = СтрокаТаблицы.СуммаПроцентов;
		
	КонецЦикла;
	
	Движения.Хозрасчетный.ЗаполнитьСуммыВременныхРазниц();
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДисконтированияОбязательстваПоРассрочке(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеДисконтированияОбязательства(
		ДокументОбъект, Отказ, РежимЗаписи, Ложь, Ложь, "ТМЦ", "СпособОценкиРассрочкиБУ");
	
КонецПроцедуры

#КонецОбласти

Процедура СформироватьДвиженияГрафикиПроцентныхРасходов(ТаблицаГрафик, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаГрафик) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Для Каждого СтрокаТаблицы Из ТаблицаГрафик Цикл
		НоваяЗапись = Движения.ГрафикиПроцентныхРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Реквизиты);
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		НоваяЗапись.ПериодНачисления = КонецМесяца(СтрокаТаблицы.ДатаНачисления);
	КонецЦикла;
	
	Движения.ГрафикиПроцентныхРасходов.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентнаяОперация

// Заполняем таблицы данных для движений регламентной операции "Начисление процентных расходов".
//
// Параметры:
//  СтруктураТаблиц  - Структура - на входе пустая структура, процедура добавляет в нее:
//                     * ТаблицаПроценты - ТаблицаЗначений - данные для формирования проводок
//                     * ТаблицаРасчет - ТаблицаЗначений - данные для регистра РасчетНачисленияПроцентныхРасходов
//  ТаблицаРеквизиты - ТаблицаЗначений - реквизиты документа РегламентнаяОперация
//  Отказ            - Булево - возвращается Истина при ошибках
//  Ошибки           - ДеревоЗначений - см. ВыводСообщенийОбОшибках.НовыйДетальнаяИнформацияОбОшибках
//
Процедура ЗаполнитьТаблицыНачислениеПроцентныхРасходов(СтруктураТаблиц, ТаблицаРеквизиты, Отказ, Ошибки) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	ТаблицаРасчет = Новый ТаблицаЗначений;
	ТаблицаРасчет.Колонки.Добавить("СчетУчетаПроцентов", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаРасчет.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаРасчет.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаРасчет.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаРасчет.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаРасчет.Колонки.Добавить("ДатаНачисления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРасчет.Колонки.Добавить("НомерЗаписи", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0, ДопустимыйЗнак.Неотрицательный));
	ТаблицаРасчет.Колонки.Добавить("Обязательство", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРасчет.Колонки.Добавить("СтавкаДисконтирования", ОбщегоНазначения.ОписаниеТипаЧисло(10, 4));
	ТаблицаРасчет.Колонки.Добавить("КоличествоДней", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаРасчет.Колонки.Добавить("СуммаПроцентовВал", БухгалтерскийУчетКлиентСервер.ТипСумма()); // В валюте договора
	ТаблицаРасчет.Колонки.Добавить("СуммаПроцентов", БухгалтерскийУчетКлиентСервер.ТипСумма()); // В рублях
	
	// Из регистра графиков процентных расходов выбираем только записи, относящиеся к месяцу регламентной операции,
	// и только по последнему регистратору изменений для каждого предмета начисленяи. Такой подход позволяет, например,
	// при сокращении срока аренды/рассрочки не записывать в регистр пустые суммы
	// за периоды после сокращенной даты конца аренды/рассрочки.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиБУ.Счет КАК СчетУчетаПроцентов,
	|	ОстаткиБУ.Субконто1 КАК Контрагент,
	|	ОстаткиБУ.Субконто2 КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ОстаткиБУ.Валюта, &ВалютаРеглУчета) КАК ВалютаВзаиморасчетов,
	|	ЕСТЬNULL(ОстаткиБУ.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ОстаткиБУ.Валюта, &ВалютаРеглУчета) = &ВалютаРеглУчета
	|				ТОГДА ОстаткиБУ.СуммаОстаток
	|			ИНАЧЕ ОстаткиБУ.ВалютнаяСуммаОстаток
	|		КОНЕЦ) КАК СуммаОстатка
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецМесяцаВключительно, Счет В (&СчетаПроцентов), &КонтрагентыДоговоры, Организация = &Организация) КАК ОстаткиБУ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЕСТЬNULL(ОстаткиБУ.Валюта, &ВалютаРеглУчета) = &ВалютаРеглУчета
	|				ТОГДА ОстаткиБУ.СуммаОстаток
	|			ИНАЧЕ ОстаткиБУ.ВалютнаяСуммаОстаток
	|		КОНЕЦ > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиБУ.Счет,
	|	ОстаткиБУ.Субконто1,
	|	ОстаткиБУ.Субконто2,
	|	ЕСТЬNULL(ОстаткиБУ.Валюта, &ВалютаРеглУчета),
	|	ЕСТЬNULL(ОстаткиБУ.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеПредметовАренды.Контрагент КАК Контрагент,
	|	ДанныеПредметовАренды.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДанныеПредметовАренды.ПредметАренды КАК ПредметАренды,
	|	ДанныеПредметовАренды.СтавкаДисконтирования КАК СтавкаДисконтирования
	|ПОМЕСТИТЬ ДанныеПредметовАренды
	|ИЗ
	|	РегистрСведений.ДанныеПредметовАренды.СрезПоследних(&КонецМесяца, Организация = &Организация) КАК ДанныеПредметовАренды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ПредметАренды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиПроцентныхРасходов.Контрагент КАК Контрагент,
	|	ГрафикиПроцентныхРасходов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ГрафикиПроцентныхРасходов.ПредметНачисления КАК ПредметАренды,
	|	ГрафикиПроцентныхРасходов.Период КАК Период,
	|	ГрафикиПроцентныхРасходов.ДатаНачисления КАК ДатаНачисления,
	|	ГрафикиПроцентныхРасходов.КоличествоДней КАК КоличествоДней,
	|	ГрафикиПроцентныхРасходов.Обязательство КАК Обязательство,
	|	ГрафикиПроцентныхРасходов.СтавкаДисконтирования КАК СтавкаДисконтирования,
	|	ГрафикиПроцентныхРасходов.СуммаПроцентов КАК СуммаПроцентов
	|ПОМЕСТИТЬ ГрафикиПроцентныхРасходов
	|ИЗ
	|	РегистрСведений.ГрафикиПроцентныхРасходов.СрезПоследних(
	|			&КонецМесяца,
	|			Организация = &Организация
	|				И ПериодНачисления = &ПериодНачисления) КАК ГрафикиПроцентныхРасходов
	|ГДЕ
	|	ГрафикиПроцентныхРасходов.СуммаПроцентов > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ПредметАренды,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикиПроцентныхРасходов.Контрагент КАК Контрагент,
	|	ГрафикиПроцентныхРасходов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ГрафикиПроцентныхРасходов.ПредметАренды КАК ПредметНачисления
	|ПОМЕСТИТЬ ПредметыНачисления
	|ИЗ
	|	ГрафикиПроцентныхРасходов КАК ГрафикиПроцентныхРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ПредметАренды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиПроцентныхРасходов.Контрагент КАК Контрагент,
	|	ГрафикиПроцентныхРасходов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ГрафикиПроцентныхРасходов.ПредметНачисления КАК ПредметАренды,
	|	МАКСИМУМ(ГрафикиПроцентныхРасходов.Период) КАК Период
	|ПОМЕСТИТЬ ПоследниеПериоды
	|ИЗ
	|	РегистрСведений.ГрафикиПроцентныхРасходов КАК ГрафикиПроцентныхРасходов
	|ГДЕ
	|	ГрафикиПроцентныхРасходов.Организация = &Организация 
	|		И ГрафикиПроцентныхРасходов.Период <= &КонецМесяца 
	|		И (ГрафикиПроцентныхРасходов.Контрагент, ГрафикиПроцентныхРасходов.ДоговорКонтрагента, ГрафикиПроцентныхРасходов.ПредметНачисления) В
	|			(ВЫБРАТЬ ПредметыНачисления.Контрагент, ПредметыНачисления.ДоговорКонтрагента, ПредметыНачисления.ПредметНачисления ИЗ ПредметыНачисления КАК ПредметыНачисления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиПроцентныхРасходов.Контрагент,
	|	ГрафикиПроцентныхРасходов.ДоговорКонтрагента,
	|	ГрафикиПроцентныхРасходов.ПредметНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	ПредметАренды,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиПроцентныхРасходов.Контрагент КАК Контрагент,
	|	ПРЕДСТАВЛЕНИЕ(ГрафикиПроцентныхРасходов.Контрагент) КАК КонтрагентПредставление,
	|	ГрафикиПроцентныхРасходов.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ПРЕДСТАВЛЕНИЕ(ГрафикиПроцентныхРасходов.ДоговорКонтрагента) КАК ДоговорПредставление,
	|	ЕСТЬNULL(ГрафикиПроцентныхРасходов.ДоговорКонтрагента.Валютный, ЛОЖЬ) КАК РасчетыВВалюте,
	|	ПРЕДСТАВЛЕНИЕ(ЕСТЬNULL(ГрафикиПроцентныхРасходов.ДоговорКонтрагента.ВалютаВзаиморасчетов, &ВалютаРеглУчета)) КАК ВалютаПредставление,
	|	ЕСТЬNULL(ДанныеПредметовАренды.СтавкаДисконтирования, ГрафикиПроцентныхРасходов.СтавкаДисконтирования) КАК СтавкаДисконтирования,
	|	ГрафикиПроцентныхРасходов.ДатаНачисления КАК ДатаНачисления,
	|	ГрафикиПроцентныхРасходов.КоличествоДней КАК КоличествоДней,
	|	ГрафикиПроцентныхРасходов.Обязательство КАК Обязательство,
	|	СУММА(ГрафикиПроцентныхРасходов.СуммаПроцентов) КАК СуммаПроцентов
	|ИЗ
	|	ГрафикиПроцентныхРасходов КАК ГрафикиПроцентныхРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеПериоды КАК ПоследниеПериоды
	|		ПО ГрафикиПроцентныхРасходов.Контрагент = ПоследниеПериоды.Контрагент
	|			И ГрафикиПроцентныхРасходов.ДоговорКонтрагента = ПоследниеПериоды.ДоговорКонтрагента
	|			И ГрафикиПроцентныхРасходов.ПредметАренды = ПоследниеПериоды.ПредметАренды
	|			И ГрафикиПроцентныхРасходов.Период = ПоследниеПериоды.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПредметовАренды КАК ДанныеПредметовАренды
	|		ПО ГрафикиПроцентныхРасходов.Контрагент = ДанныеПредметовАренды.Контрагент
	|			И ГрафикиПроцентныхРасходов.ДоговорКонтрагента = ДанныеПредметовАренды.ДоговорКонтрагента
	|			И ГрафикиПроцентныхРасходов.ПредметАренды = ДанныеПредметовАренды.ПредметАренды
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиПроцентныхРасходов.Контрагент,
	|	ГрафикиПроцентныхРасходов.ДоговорКонтрагента,
	|	ЕСТЬNULL(ГрафикиПроцентныхРасходов.ДоговорКонтрагента.Валютный, ЛОЖЬ),
	|	ЕСТЬNULL(ДанныеПредметовАренды.СтавкаДисконтирования, ГрафикиПроцентныхРасходов.СтавкаДисконтирования),
	|	ГрафикиПроцентныхРасходов.ДатаНачисления,
	|	ГрафикиПроцентныхРасходов.КоличествоДней,
	|	ГрафикиПроцентныхРасходов.Обязательство";
	
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("КонецМесяцаВключительно", Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая));
	// Приводим период к началу дня, чтобы использовать в запросе простое условие на "равно"
	Запрос.УстановитьПараметр("ПериодНачисления", НачалоДня(КонецМесяца(Реквизиты.Период)));
	ВалютаРеглУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	
	Запрос.УстановитьПараметр("СчетаПроцентов", ПланыСчетов.Хозрасчетный.СчетаПроцентовПоОбязательствам());
	
	КонтрагентыДоговоры = Новый Массив;
	КонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	КонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("КонтрагентыДоговоры", КонтрагентыДоговоры);
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаОстатки = Результат[0].Выгрузить();
	ТаблицаОстатки.Индексы.Добавить("Контрагент, ДоговорКонтрагента");
	ТаблицаГрафики = Результат[5].Выгрузить();
	
	КурсыВалют = Новый Соответствие;
	КурсРубля = Новый Структура("Валюта, Курс, Кратность", ВалютаРеглУчета, 1, 1);
	
	НомерЗаписи = 1;
	
	Для каждого СтрокаГрафика Из ТаблицаГрафики Цикл
		
		СуммаПоГрафику = СтрокаГрафика.СуммаПроцентов;
		
		Отбор = Новый Структура("Контрагент, ДоговорКонтрагента",
			СтрокаГрафика.Контрагент, СтрокаГрафика.ДоговорКонтрагента);
		СтрокиОстатков = ТаблицаОстатки.НайтиСтроки(Отбор);
		Для каждого СтрокаОстатка Из СтрокиОстатков Цикл
			
			СуммаПроцентовВал = Мин(СуммаПоГрафику, СтрокаОстатка.СуммаОстатка);
			
			Если СтрокаГрафика.РасчетыВВалюте Тогда
				КурсВалюты = КурсыВалют[СтрокаОстатка.ВалютаВзаиморасчетов];
				Если КурсВалюты = Неопределено Тогда
					КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтрокаОстатка.ВалютаВзаиморасчетов, Реквизиты.Период);
					КурсыВалют.Вставить(СтрокаОстатка.ВалютаВзаиморасчетов, КурсВалюты);
				КонецЕсли;
				СуммаПроцентовРуб = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СуммаПроцентовВал, КурсВалюты, КурсРубля);
			Иначе
				СуммаПроцентовРуб = СуммаПроцентовВал;
			КонецЕсли;
			
			СтрокаРасчет = ТаблицаРасчет.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасчет, СтрокаОстатка);
			ЗаполнитьЗначенияСвойств(СтрокаРасчет, СтрокаГрафика);
			СтрокаРасчет.СуммаПроцентовВал = СуммаПроцентовВал;
			СтрокаРасчет.СуммаПроцентов = СуммаПроцентовРуб;
			
			СтрокаРасчет.НомерЗаписи = НомерЗаписи;
			НомерЗаписи = НомерЗаписи + 1;
			
			// По одному договору иногда может быть несколько графиков по разным предметам начисления.
			// Например, при нескольких поступлениях со способом оценки "Равна расходам лизингодателя".
			// Уменьшаем нераспределенный остаток для таких случаев.
			СтрокаОстатка.СуммаОстатка = СтрокаОстатка.СуммаОстатка - СуммаПроцентовВал;
			
			СуммаПоГрафику = СуммаПоГрафику - СуммаПроцентовВал;
			Если СуммаПоГрафику <= 0 Тогда
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		// Если по графику нужно начислить больше, чем остаток на счете процентов по аренде - это ошибка в учете.
		// Возможная причина - ручные проводки по корректировке счетов 76.Х7.5 или 76.Х8
		Если СуммаПоГрафику > 0 Тогда
			
			ШаблонСообщения = НСтр("ru = 'Сумма по графику процентных расходов превышает остаток на счете процентов.
				|Контрагент: %1, договор: %2.
				|Процентные расходы в сумме %3 %4 не будут отражены в бухгалтерском учете.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
				СтрокаГрафика.КонтрагентПредставление, 
				СтрокаГрафика.ДоговорПредставление,
				Формат(СуммаПоГрафику, "ЧДЦ=2"),
				СтрокаГрафика.ВалютаПредставление);
			
			Ошибка = ВыводСообщенийОбОшибках.ДобавитьПростоеОписаниеОшибки(Ошибки);
			Ошибка.Описание = ТекстСообщения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПроценты = ТаблицаРасчет.Скопировать();
	ТаблицаПроценты.Свернуть("Контрагент, ДоговорКонтрагента, Подразделение,
		|СчетУчетаПроцентов, ВалютаВзаиморасчетов",
			"СуммаПроцентовВал,СуммаПроцентов");
	
	СтруктураТаблиц.Вставить("ТаблицаПроценты", ТаблицаПроценты);
	СтруктураТаблиц.Вставить("ТаблицаРасчет", ТаблицаРасчет);
	
КонецПроцедуры

#КонецОбласти

Процедура ПодготовитьТаблицуДокументаДляЦелейПриобретенияРеализации(ТаблицаТМЦ, Реквизиты) Экспорт
	
	Если Реквизиты.Свойство("СпособОценкиАрендыБУ") Тогда
		СпособОценки = Реквизиты.СпособОценкиАрендыБУ;
	ИначеЕсли Реквизиты.Свойство("СпособОценкиРассрочкиБУ") Тогда
		СпособОценки = Реквизиты.СпособОценкиРассрочкиБУ;
	Иначе
		СпособОценки = Перечисления.СпособыОценкиБУ.РавнаСуммеДоговора;
	КонецЕсли;
	
	Если СпособОценки = Перечисления.СпособыОценкиБУ.РавнаСуммеДоговора Тогда
		Возврат; // Дополнительная подготовка не требуется
	КонецЕсли;
	
	РасчетыВВалюте = Реквизиты.ВалютаВзаиморасчетов <> Реквизиты.ВалютаРеглУчета;
	ДокументВВалюте = Реквизиты.ВалютаДокумента <> Реквизиты.ВалютаРеглУчета;
	
	Если Не РасчетыВВалюте Тогда
		// Не нужно ничего пересчитывать
		ИмяКолонкиПересчета = "";
		КоэффициентПересчета = 1;
	ИначеЕсли СпособОценки = Перечисления.СпособыОценкиБУ.РассчитываетсяПоСтавке Тогда
		// Базовой суммой в этом режиме являются стоимость обязательства и авансовые платежи.
		// Они автоматически сохраняются в валюте договора, поэтому пересчитываем всегда рублевые суммы,
		// независимо от того, оформлен документ в валюте или в рублях.
		ИмяКолонкиПересчета = "СуммаБУ";
		КоэффициентПересчета = ?(ДокументВВалюте,
			Реквизиты.КурсДокумента/Реквизиты.КратностьДокумента,
			Реквизиты.КурсВзаиморасчетов / Реквизиты.КратностьВзаиморасчетов);
	Иначе
		// Базовые суммы указывает пользователь в документе - Оценка БУ или Расходы лизингодателя, они в валюте документа.
		// Если документ оформлен в валюте - пересчитываем рублевые суммы, если оформлен в рублях - валютные.
		ИмяКолонкиПересчета = ?(ДокументВВалюте, "СуммаБУ", "СуммаВалБУ");
		КоэффициентПересчета = ?(ДокументВВалюте,
			Реквизиты.КурсДокумента/Реквизиты.КратностьДокумента,
			Реквизиты.КратностьВзаиморасчетов / Реквизиты.КурсВзаиморасчетов);
	КонецЕсли;
	
	Если СпособОценки = Перечисления.СпособыОценкиБУ.РавнаРасходамЛизингодателя Тогда
		
		ИтогБазовый = ТаблицаТМЦ.Итог("РасходыЛизингодателя");
		СуммыБазовые = ТаблицаТМЦ.ВыгрузитьКолонку("РасходыЛизингодателя");
		
	ИначеЕсли СпособОценки = Перечисления.СпособыОценкиБУ.УказываетсяВручную
		Или СпособОценки = Перечисления.СпособыОценкиБУ.ПоЦенеБезРассрочки Тогда
		
		ИтогБазовый = ТаблицаТМЦ.Итог("ОценкаБУ");
		СуммыБазовые = ТаблицаТМЦ.ВыгрузитьКолонку("ОценкаБУ");
		
	Иначе // .РассчитываетсяПоСтавке
		
		ИтогБазовый = Реквизиты.АвансовыеПлатежи + Реквизиты.СтоимостьОбязательства;
		МассивСумм = ТаблицаТМЦ.ВыгрузитьКолонку("Сумма");
		СуммыБазовые = РаспределитьПропорционально(ИтогБазовый, МассивСумм);
		
	КонецЕсли;
	
	ПересчитатьИРаспределитьСумму(ТаблицаТМЦ, ИмяКолонкиПересчета, СуммыБазовые, ИтогБазовый, КоэффициентПересчета);
	
	Если Реквизиты.НДСВключенВСтоимость
		И СпособОценки <> Перечисления.СпособыОценкиБУ.РассчитываетсяПоСтавке Тогда
		
		Для Каждого СтрокаТаблицы Из ТаблицаТМЦ Цикл
			СтрокаТаблицы.СуммаБУ = СтрокаТаблицы.СуммаБУ + СтрокаТаблицы.НДС;
			СтрокаТаблицы.СуммаВалБУ = СтрокаТаблицы.СуммаВалБУ + СтрокаТаблицы.НДСВал;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьГрафикПроцентов(СтруктураРезультат,
								   ТаблицаГрафикПлатежей,
								   ТаблицаПредметыНачисления,
								   ТаблицаРеквизиты,
								   ВидПредмета) Экспорт
	
	Реквизиты = ТаблицаРеквизиты[0];
	
	Если Не ЗначениеЗаполнено(ТаблицаПредметыНачисления) Или Не ЗначениеЗаполнено(ТаблицаГрафикПлатежей) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПрекращениеАренды = ТипЗнч(Реквизиты.Регистратор) = Тип("ДокументСсылка.ПрекращениеАренды");
	ДатаОбязательства = ДатаОбязательства(
		Реквизиты.Период, Реквизиты.Организация, Реквизиты.ИзменениеУсловий, Реквизиты.ПереходНаФСБУ25, ЭтоПрекращениеАренды);
	
	ДатаПоследнегоПлатежа = ТаблицаГрафикПлатежей[ТаблицаГрафикПлатежей.Количество() - 1].ДатаПлатежа;
	
	ТаблицаРасчетПроцентов = Новый ТаблицаЗначений();
	ТаблицаРасчетПроцентов.Колонки.Добавить("ДатаНачисления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРасчетПроцентов.Колонки.Добавить("СуммаПлатежа", БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	// Расчет начисления процентных расходов делаем на дату будущих платежей и на конец каждого месяца.
	// Сначала добавляем даты и суммы платежей
	Для Каждого СтрокаГрафикПлатежей Из ТаблицаГрафикПлатежей Цикл
		Если СтрокаГрафикПлатежей.ДатаПлатежа <= ДатаОбязательства Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаРасчетПроцентов.Добавить();
		НоваяСтрока.ДатаНачисления = СтрокаГрафикПлатежей.ДатаПлатежа;
		НоваяСтрока.СуммаПлатежа = СтрокаГрафикПлатежей.СуммаБезНДСПлатежа;
	КонецЦикла;
	
	// Затем добавляем даты конца каждого месяца.
	// Конец месяца последнего платежа не добавляем - на эту дату задолженности уже нет, процентных расходов не будет.
	ДатаНачисления = ДатаОбязательства;
	Пока ДатаНачисления < ДатаПоследнегоПлатежа Цикл
		НоваяСтрока = ТаблицаРасчетПроцентов.Добавить();
		НоваяСтрока.ДатаНачисления = ДатаНачисления;
		ДатаНачисления = КонецМесяца(ДатаНачисления + 1);
	КонецЦикла;
	
	ТаблицаРасчетПроцентов.Свернуть("ДатаНачисления", "СуммаПлатежа");
	ТаблицаРасчетПроцентов.Сортировать("ДатаНачисления");
	
	ТаблицаРасчетПроцентов.Колонки.Добавить("КоличествоДней", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	ТаблицаРасчетПроцентов.Колонки.Добавить("Обязательство", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРасчетПроцентов.Колонки.Добавить("СуммаПроцентов", БухгалтерскийУчетКлиентСервер.ТипСумма());
	ТаблицаРасчетПроцентов.Колонки.Добавить("СтавкаДисконтирования", ОбщегоНазначения.ОписаниеТипаЧисло(10, 4));
	
	ПараметрыТекущегоКурса = Новый Структура("Валюта, Курс, Кратность",
		Реквизиты.ВалютаДокумента, 1, 1);
	ПараметрыНовогоКурса = Новый Структура("Валюта, Курс, Кратность",
		Реквизиты.ВалютаВзаиморасчетов, Реквизиты.Курс, Реквизиты.Кратность);
	
	ПересчитатьКолонкуВДругуюВалюту(ТаблицаРасчетПроцентов, "СуммаПлатежа", ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
	
	ДатаПрошлогоНачисления = ДатаОбязательства;
	ОстатокОбязательства = Реквизиты.СтоимостьОбязательства;
	СуммаПроцентов = ТаблицаРасчетПроцентов.Итог("СуммаПлатежа") - ОстатокОбязательства;
	Для Каждого СтрокаТаблицы Из ТаблицаРасчетПроцентов Цикл
		КоличествоДней = (СтрокаТаблицы.ДатаНачисления - ДатаПрошлогоНачисления) / 60 / 60 / 24;
		СтрокаТаблицы.КоличествоДней = КоличествоДней;
		СтрокаТаблицы.Обязательство = ОстатокОбязательства;
		СтрокаТаблицы.СуммаПроцентов = ФинансовыеИнструменты.ПроцентыЗаПериод(
			ОстатокОбязательства, Реквизиты.СтавкаДисконтирования, КоличествоДней);
		ДатаПрошлогоНачисления = СтрокаТаблицы.ДатаНачисления;
		ОстатокОбязательства = ОстатокОбязательства + СтрокаТаблицы.СуммаПроцентов - СтрокаТаблицы.СуммаПлатежа;
		
		// Для целей учета аренды ставка дисконтирования сохраняется в отдельном регистре ДанныеПредметовАренды.
		Если ВидПредмета = "Номенклатура" Тогда
			СтрокаТаблицы.СтавкаДисконтирования = Реквизиты.СтавкаДисконтирования;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаПроцентов <> ТаблицаРасчетПроцентов.Итог("СуммаПроцентов") Тогда
		// Убираем погрешности округления
		РассчитанныеПроценты = ТаблицаРасчетПроцентов.ВыгрузитьКолонку("СуммаПроцентов");
		СкорректированныеПроценты = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
			СуммаПроцентов, РассчитанныеПроценты);
		Если СкорректированныеПроценты <> Неопределено Тогда
			ТаблицаРасчетПроцентов.ЗагрузитьКолонку(СкорректированныеПроценты, "СуммаПроцентов");
		КонецЕсли;
	КонецЕсли;
	
	ПредметыНачисления = ТаблицаПредметыНачисления.ВыгрузитьКолонку(ВидПредмета);
	Суммы = ТаблицаПредметыНачисления.ВыгрузитьКолонку("СуммаВзаиморасчетов");
	СуммыБазыПроцентов = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаПредметыНачисления Цикл
		СуммыБазыПроцентов.Добавить(СтрокаТаблицы.СуммаВзаиморасчетов - СтрокаТаблицы.СуммаВалБУ);
	КонецЦикла;
	Количество = ПредметыНачисления.Количество();
	
	График = НовыйГрафикПроцентныхРасходов();
	Для Каждого СтрокаТаблицы Из ТаблицаРасчетПроцентов Цикл
		
		Если Количество = 1 Тогда
			
			НоваяСтрока = График.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.ПредметНачисления = ПредметыНачисления[0];
			
		Иначе
			
			СуммыОбязательства = РаспределитьПропорционально(
				СтрокаТаблицы.Обязательство, Суммы);
			СуммыПлатежа = РаспределитьПропорционально(СтрокаТаблицы.СуммаПлатежа, Суммы);
			СуммыПроцентов = РаспределитьПропорционально(СтрокаТаблицы.СуммаПроцентов, СуммыБазыПроцентов);
			
			Для Индекс = 0 По ПредметыНачисления.ВГраница() Цикл
				НоваяСтрока = График.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ПредметНачисления = ПредметыНачисления[Индекс];
				НоваяСтрока.Обязательство = СуммыОбязательства[Индекс];
				НоваяСтрока.СуммаПлатежа = СуммыПлатежа[Индекс];
				НоваяСтрока.СуммаПроцентов = СуммыПроцентов[Индекс];
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРезультат.Вставить("График", График);
	
КонецПроцедуры

Процедура ДополнитьМассивИменамиДокументовПоРассрочке(ИмяМассива) Экспорт
	
	ИмяМассива.Добавить("УсловияОплатыПоступления");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Распределяем сумму по массиву коэффициентов. Для нулевой суммы и при ошибке распределения возвращаем пустой массив 
// той же размерности, что массив коэффициентов.
//
Функция РаспределитьПропорционально(Знач РаспределяемаяСумма, МассивКоэффициентов)
	
	Результат = Новый Массив(МассивКоэффициентов.Количество());
	Если РаспределяемаяСумма <= 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	СуммаКоэффициентов = 0;
	Для каждого Коэффициент Из МассивКоэффициентов Цикл
		Если Коэффициент < 0 Тогда
			Возврат Результат;
		КонецЕсли;
		СуммаКоэффициентов = СуммаКоэффициентов + Коэффициент;
	КонецЦикла;
	Если СуммаКоэффициентов = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Индекс = 0 По МассивКоэффициентов.ВГраница() Цикл
		Коэффициент = МассивКоэффициентов[Индекс];
		СуммаРаспределения = ?(СуммаКоэффициентов > 0, Окр(РаспределяемаяСумма * (Коэффициент / СуммаКоэффициентов), 2), 0);
		Результат[Индекс] = СуммаРаспределения;
		РаспределяемаяСумма = РаспределяемаяСумма - СуммаРаспределения;
		СуммаКоэффициентов = СуммаКоэффициентов - Коэффициент;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПараметрыПроцентыПоРассрочке(ТаблицаПроцентыПоРассрочке, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.РасшифровкаПлатежа
	
	СписокОбязательныхКолонок = ""
	+ "СчетУчета,"             // <ПланСчетовСсылка.Хозрасчетный> - счет по дебету проводки (счет учета рассрочки)
	+ "СчетРассрочки,"         // <ПланСчетовСсылка.Хозрасчетный> - счет по кредиту проводки (счет учета ТМЦ)
	+ "Номенклатура,"          // <СправочникСсылка.Номенклатура> - субконто Номенклатура
	+ "ПроцентПоРассрочкеРуб," // <Число,15,2> - рублевая сумма рассрочки
	+ "ПроцентПоРассрочкеВал"; // <Число,15,2> - сумма рассрочки в валюте документа
	
	Параметры.Вставить("ТаблицаТМЦ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаПроцентыПоРассрочке, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"               // <Дата> - период движений - дата документа
	+ "Организация,"          // <СправочникСсылка.Организации>
	+ "Контрагент,"           // <СправочникСсылка.Контрагенты> - субконто Конрагенты
	+ "ДоговорКонтрагента,"   // <СправочникСсылка.ДоговорыКонтрагентов> - субконто Договор
	+ "ВалютаВзаиморасчетов," // <СправочникСсылка.Валюты> - валюта взаиморасчетов
	+ "ПодразделениеДт,"      // <Ссылка на справочник подразделений> - подразделение по дебету проводки
	+ "ПодразделениеКт,"      // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение по кредиту проводки
	+ "ДокументПартии,"       // <ДокументСсылка> - субконто Партии
	+ "Склад,"                // <СправочникСсылка.Склады> - субконто Склады
	+ "Содержание";           // <Строка,150> - содержание проводок
	
	Параметры.Вставить("Реквизиты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьПараметрыНачислениеПроцентныхРасходов(ТаблицаПроценты, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаПроценты
	
	СписокОбязательныхКолонок = ""
	+ "Подразделение,"              // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение учета остатка процентов
	+ "Контрагент,"                 // <СправочникСсылка.Контрагенты> - арендодатель
	+ "ДоговорКонтрагента,"         // <СправочникСсылка.ДоговорыКонтрагентов> - договор аренды
	+ "СчетУчетаПроцентов,"         // <ПланСчетовСсылка.Хозрасчетный> - счет учета остатка процентов
	+ "ВалютаВзаиморасчетов,"       // <СправочникСсылка.Валюты> - валюта взаиморасчетов по договору
	+ "СуммаПроцентовВал,"          // <Число,15,2> - сумма начисленных процентов в валюте договора
	+ "СуммаПроцентов";             // <Число,15,2> - сумма начисленных процентов в рублях
	
	Параметры.Вставить("ТаблицаПроценты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПроценты, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"           // <Дата> - период движений - дата документа
	+ "Организация,"      // <СправочникСсылка.Организация>
	+ "Содержание";       // <Строка> - содержание проводок
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйГрафикПроцентныхРасходов()
	
	График = Новый ТаблицаЗначений;
	График.Колонки.Добавить("ПредметНачисления",
		Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства, СправочникСсылка.Номенклатура"));
	График.Колонки.Добавить("Обязательство", БухгалтерскийУчетКлиентСервер.ТипСумма());
	График.Колонки.Добавить("ДатаНачисления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	График.Колонки.Добавить("КоличествоДней", ОбщегоНазначения.ОписаниеТипаЧисло(5, 0));
	График.Колонки.Добавить("СуммаПлатежа", БухгалтерскийУчетКлиентСервер.ТипСумма());
	График.Колонки.Добавить("СуммаПроцентов", БухгалтерскийУчетКлиентСервер.ТипСумма());
	График.Колонки.Добавить("СтавкаДисконтирования", ОбщегоНазначения.ОписаниеТипаЧисло(10, 4));
	
	Возврат График;
	
КонецФункции

Функция ПодготовитьПараметрыПоступлениеПроцентыПоАренды(ТаблицаОС, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаОС

	СписокОбязательныхКолонок = ""
	+ "СуммаВзаиморасчетов,"   // <Число,15,2> - сумма по договору в валюте договора
	+ "СуммаРуб,"              // <Число,15,2> - сумма по договору в рублях
	+ "СуммаВалБУ,"            // <Число,15,2> - сумма оценки БУ в валюте договора
	+ "СуммаБУ";               // <Число,15,2> - сумма оценки БУ в рублях

	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация, в которую поступает предмет аренды
	+ "Подразделение,"                  // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение, в которое поступает предмет аренды
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - арендодатель
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор аренды
	+ "РасчетыВВалюте,"                 // <Булево> - признак расчетов по договору не в валюте регламентированного учета
	+ "РасчетыВУсловныхЕдиницах,"       // <Булево> - признак расчетов по договору в условных единицах
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов по договору аренды
	+ "ВалютаВзаиморасчетов,"           // <СправочникСсылка.Валюты> - валюта взаиморасчетов
	+ "ПереходНаФСБУ25,"                // <Булево> - признак режима перехода на применение ФСБУ 25
	+ "Лизинг,"                         // <Булево> - признак поступления по договору лизинга
	+ "НалоговыйУчетИмуществаВедетЛизингополучатель"; // <Булево> - признак ведения НУ лизингополучателем

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыИзменениеУсловийПроцентыПоАренды(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ИзменениеПроцентыВал,"     // <Число,15,2> - сумма изменения процентов в валюте договора
	+ "ИзменениеПроцентыРуб";     // <Число,15,2> - сумма изменения процентов в рублях
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организация> - организация-арендатор
	+ "Подразделение,"                  // <СправочникСсылка.ПодразделенияОрганизаций> - подразделение-арендатор
	+ "Контрагент,"                     // <СправочникСсылка.Контрагенты> - арендодатель
	+ "ДоговорКонтрагента,"             // <СправочникСсылка.ДоговорыКонтрагентов> - договор аренды
	+ "РасчетыВВалюте,"                 // <Булево> - признак расчетов по договору не в валюте регламентированного учета
	+ "РасчетыВУсловныхЕдиницах,"       // <Булево> - признак расчетов по договору в условных единицах
	+ "СчетУчетаРасчетовСКонтрагентом," // <ПланСчетовСсылка.Хозрасчетный> - счет расчетов по договору аренды
	+ "ВалютаВзаиморасчетов";           // <СправочникСсылка.Валюты> - валюта взаиморасчетов
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

Функция ДатаОбязательства(ДатаДокумента, Организация, ЭтоИзменениеУсловий, ЭтоПереходНаФСБУ25, ЭтоПрекращениеАренды)
	
	Если ЭтоПрекращениеАренды Тогда
		ПоследнийДеньПрошлогоМесяца = НачалоДня(НачалоМесяца(ДатаДокумента) - 1);
		ДатаОбязательства = ПоследнийДеньПрошлогоМесяца;
	ИначеЕсли ЭтоИзменениеУсловий Тогда
		НачалоПредыдущегоДня = НачалоДня(НачалоДня(ДатаДокумента) - 1);
		ДатаОбязательства = НачалоПредыдущегоДня;
	ИначеЕсли ЭтоПереходНаФСБУ25 Тогда
		НачалоПримененияФСБУ25 = УчетнаяПолитика.НачалоПримененияФСБУ25(Организация);
		ДатаОбязательства = НачалоДня(НачалоПримененияФСБУ25 - 1);
	Иначе
		ДатаОбязательства = НачалоДня(ДатаДокумента);
	КонецЕсли;
	
	Возврат ДатаОбязательства;
	
КонецФункции

Процедура ЗаполнитьДанныеДисконтированияОбязательства(ДокументОбъект,
													  Отказ,
													  РежимЗаписи,
													  ЭтоИзменениеУсловий,
													  ЭтоПереходНаФСБУ25,
													  ТабЧасть,
													  СпособОценки)
	
	УказываетсяВручную = ДокументОбъект[СпособОценки] <> Перечисления.СпособыОценкиБУ.УказываетсяВручную
		Или ДокументОбъект[СпособОценки] <> Перечисления.СпособыОценкиБУ.ПоЦенеБезРассрочки;
	
	Если ДокументОбъект[ТабЧасть].Количество() > 0
		И Не УказываетсяВручную
		И Не ЭтоПереходНаФСБУ25 Тогда
		ПустойМассив = Новый Массив(ДокументОбъект[ТабЧасть].Количество());
		ДокументОбъект[ТабЧасть].ЗагрузитьКолонку(ПустойМассив, "ОценкаБУ");
	КонецЕсли;
	
	Если ДокументОбъект[СпособОценки] = Перечисления.СпособыОценкиБУ.РавнаСуммеДоговора Тогда
		ДокументОбъект.СтавкаДисконтирования = 0;
		ДокументОбъект.СтоимостьОбязательства = 0;
		ДокументОбъект.АвансовыеПлатежи = 0;
		ДокументОбъект.ГрафикПлатежей.Очистить();
		Возврат;
	КонецЕсли;
	
	ТаблицаПлатежей = ДокументОбъект.ГрафикПлатежей.Выгрузить();
	Если Не ЗначениеЗаполнено(ТаблицаПлатежей) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОбязательства = ДатаОбязательства(ДокументОбъект.Дата, ДокументОбъект.Организация, ЭтоИзменениеУсловий, ЭтоПереходНаФСБУ25, Ложь);
	
	ИтогНДС = ДокументОбъект[ТабЧасть].Итог("СуммаНДС");
	ТаблицаПлатежей.Колонки.Добавить("СуммаБезНДСПлатежа", БухгалтерскийУчетКлиентСервер.ТипСумма());
	
	СуммыСтрок = ТаблицаПлатежей.ВыгрузитьКолонку("СуммаПлатежа");
	НДССтрок = РаспределитьПропорционально(ИтогНДС, СуммыСтрок);
	ТаблицаПлатежей.ЗагрузитьКолонку(НДССтрок, "СуммаНДСПлатежа");
	
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		// Если НДС включается в стоимость активов, платежи тоже учитываются с НДС
		СтрокаТаблицы.СуммаБезНДСПлатежа = ?(ДокументОбъект.НДСВключенВСтоимость, 
			СтрокаТаблицы.СуммаПлатежа,
			СтрокаТаблицы.СуммаПлатежа - СтрокаТаблицы.СуммаНДСПлатежа);
	КонецЦикла;
	
	ДокументОбъект.ГрафикПлатежей.Загрузить(ТаблицаПлатежей);
	
	ТаблицаПлатежей.Свернуть("ДатаПлатежа", "СуммаБезНДСПлатежа");
	ТаблицаПлатежей.Сортировать("ДатаПлатежа");
	
	ВалютаРасчетов = ?(ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДоговорКонтрагента, "ВалютаВзаиморасчетов"),
		ДокументОбъект.ВалютаДокумента);
	
	ПараметрыТекущегоКурса = Новый Структура("Валюта, Курс, Кратность",
		ДокументОбъект.ВалютаДокумента, 1, 1);
	ПараметрыНовогоКурса = Новый Структура("Валюта, Курс, Кратность",
		ВалютаРасчетов, ДокументОбъект.КурсВзаиморасчетов, ДокументОбъект.КратностьВзаиморасчетов);
	
	ПересчитатьКолонкуВДругуюВалюту(ТаблицаПлатежей, "СуммаБезНДСПлатежа", ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
	
	ДокументОбъект.АвансовыеПлатежи = 0;
	ПрошедшиеПлатежи = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		Если СтрокаТаблицы.ДатаПлатежа > ДатаОбязательства Тогда
			Прервать;
		КонецЕсли;
		ДокументОбъект.АвансовыеПлатежи = ДокументОбъект.АвансовыеПлатежи + СтрокаТаблицы.СуммаБезНДСПлатежа;
		ПрошедшиеПлатежи.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	Если СпособОценки = "СпособОценкиРассрочкиБУ" Тогда
		ДокументОбъект.СуммаВзаиморасчетов = ТаблицаПлатежей.Итог("СуммаБезНДСПлатежа");
	КонецЕсли;
	
	Для Каждого СтрокаПрошедшегоПлатежа Из ПрошедшиеПлатежи Цикл
		ТаблицаПлатежей.Удалить(СтрокаПрошедшегоПлатежа);
	КонецЦикла;
	
	Платежи = ТаблицаПлатежей.ВыгрузитьКолонку("СуммаБезНДСПлатежа");
	Даты = ТаблицаПлатежей.ВыгрузитьКолонку("ДатаПлатежа");
	
	// Дополняем массивы для корректной работы функций ФинансовыеИнструменты.XNPV и ФинансовыеИнструменты.XIRR
	// Первая дата в массиве - дата обязательства, относительно которой идет расчет
	// Если считаем обязательство по ставке (XNPV) - первая сумма 0
	// Если считаем ставку по обязательству (XIRR) - первая сумма равна приведенной стоимости обязательства со знаком "-"
	
	Даты.Вставить(0, ДатаОбязательства);
	
	Если ДокументОбъект[СпособОценки] = Перечисления.СпособыОценкиБУ.РассчитываетсяПоСтавке Тогда
		
		Платежи.Вставить(0, 0);
		ДокументОбъект.СтоимостьОбязательства = Окр(ФинансовыеИнструменты.XNPV(
			ДокументОбъект.СтавкаДисконтирования / 100, Платежи, Даты), 2);
		
	Иначе
		
		Если ДокументОбъект[СпособОценки] = Перечисления.СпособыОценкиБУ.РавнаРасходамЛизингодателя Тогда
			ОценкаБУ = ДокументОбъект[ТабЧасть].Итог("РасходыЛизингодателя");
		Иначе
			ОценкаБУ = ДокументОбъект[ТабЧасть].Итог("ОценкаБУ");
		КонецЕсли;
		
		Если ДокументОбъект.НДСВключенВСтоимость Тогда
			ОценкаБУ = ОценкаБУ + ИтогНДС;
		КонецЕсли;
		
		ОценкаБУ = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
			ОценкаБУ, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
		
		ДокументОбъект.СтоимостьОбязательства = ОценкаБУ - ДокументОбъект.АвансовыеПлатежи;
		Платежи.Вставить(0, - ДокументОбъект.СтоимостьОбязательства);
		
		Ставка = ФинансовыеИнструменты.XIRR(Платежи, Даты);
		
		Если Ставка = Неопределено Тогда
			Если ДокументОбъект[СпособОценки] = Перечисления.СпособыОценкиБУ.РавнаРасходамЛизингодателя Тогда
				ТекстСуммаОценки =
					НСтр("ru = 'Проверьте, что сумма платежей, сумма расходов лизингодателя и график платежей заполнены правильно.'");
			ИначеЕсли ДокументОбъект[СпособОценки] = Перечисления.СпособыОценкиБУ.ПоЦенеБезРассрочки Тогда
				ТекстСуммаОценки =
					НСтр("ru = 'Проверьте, что цена без рассрочки и график платежей заполнены правильно.'");
			Иначе
				ТекстСуммаОценки =
					НСтр("ru = 'Проверьте, что сумма платежей, сумма оценки в БУ и график платежей заполнены правильно.'");
			КонецЕсли;
			
			ТекстШаблона = НСтр("ru = 'Не удалось рассчитать ставку дисконтирования.
				|%1'");
			
			ТекстОшибки = СтрШаблон(ТекстШаблона, ТекстСуммаОценки);
			// Запрещаем только проведение документа, запись без проведения не запрещаем.
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект, , , Отказ);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект);
			КонецЕсли;
			
			Ставка = 0;
		КонецЕсли;
		
		ДокументОбъект.СтавкаДисконтирования = Окр(Ставка * 100, 4);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьИРаспределитьСумму(Таблица, ИмяКолонкиПересчета, СуммыБазовые, ИтогБазовый, КоэффициентПересчета)
	
	Если ПустаяСтрока(ИмяКолонкиПересчета) Тогда
		Таблица.ЗагрузитьКолонку(СуммыБазовые, "СуммаВалБУ");
		Таблица.ЗагрузитьКолонку(СуммыБазовые, "СуммаБУ");
		Возврат;
	КонецЕсли;
	
	ИтогПересчитанный = Окр(ИтогБазовый * КоэффициентПересчета, 2);
	СуммыПересчитанные = РаспределитьПропорционально(ИтогПересчитанный, СуммыБазовые);
	
	Если ИмяКолонкиПересчета = "СуммаБУ" Тогда
		Таблица.ЗагрузитьКолонку(СуммыБазовые, "СуммаВалБУ");
		Таблица.ЗагрузитьКолонку(СуммыПересчитанные, "СуммаБУ");
	ИначеЕсли ИмяКолонкиПересчета = "СуммаВалБУ" Тогда
		Таблица.ЗагрузитьКолонку(СуммыБазовые, "СуммаБУ");
		Таблица.ЗагрузитьКолонку(СуммыПересчитанные, "СуммаВалБУ");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьКолонкуВДругуюВалюту(Таблица, ИмяКолонки, ПараметрыТекущегоКурса, ПараметрыНовогоКурса)
	
	Если ПараметрыТекущегоКурса.Валюта = ПараметрыНовогоКурса.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ИтогСтарый = Таблица.Итог(ИмяКолонки);
	Если ИтогСтарый = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммыСтарые = Таблица.ВыгрузитьКолонку(ИмяКолонки);
	ИтогНовый = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
		ИтогСтарый, ПараметрыТекущегоКурса, ПараметрыНовогоКурса);
	СуммыНовые = РаспределитьПропорционально(ИтогНовый, СуммыСтарые);
	
	Таблица.ЗагрузитьКолонку(СуммыНовые, ИмяКолонки);
	
КонецПроцедуры

#КонецОбласти
