
#Область ПрограммныйИнтерфейс

// Возвращает признак того, что это часто используемый документ, который подлежит сверке в сервисе сверки расчетов.
// 
//Параметры:
// ДокументСсылка - ссылка на проверяемый документ
//
// Возвращаемое значение:
// Булево - Истина - документ подлежит сверке в сервисе.
//
Функция ДокументПодлежитСверке(ДокументСсылка) Экспорт
	
	ТипПроверяемогоДокумента = ТипЗнч(ДокументСсылка);
	ТипыДокументовПодлежащихСверке = Метаданные.ОпределяемыеТипы.СервисСверкиРасчетовДокументыПодлежащиеСверке.Тип.Типы();
	Для Каждого ТипДокумента Из ТипыДокументовПодлежащихСверке Цикл
		Если ТипПроверяемогоДокумента = ТипДокумента Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Отправляет сведения о документах на сервис сверки
//
//Параметры:
// ДатаНачала    - Дата - начало периода за который необходимо отправить документы
// ДатаОкончания - Дата - конец периода за который необходимо отправить документы
//
//Возвращаемое значение:
// ТаблицаОшибок - ТаблицаЗначений - см.НовыйТаблицаОшибок()
//
Функция ОтправитьСообщения(ДатаНачала = '00010101', ДатаОкончания = '00010101') Экспорт
	
	СписокДокументовСОшибками = Новый Массив();
	ТаблицаОшибок             = НовыйТаблицаОшибок();
	СчетаИсключения = ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = ТекстЗапросаДанныеИнформационнойБазыКСверке(СчетаИсключения, ДатаНачала, ДатаОкончания);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаОрганизации = Результат[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	МаксимальныйРазмерПакета = 5000;
	
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		// Сформируем новый пакет сообщений.
		КоличествоЗаписейВПакете = 0;
		ИдентификаторСообщения   = Новый УникальныйИдентификатор();
		НаборЗаписей             = РегистрыСведений.СервисСверкиРасчетовРеестрДокументов.СоздатьНаборЗаписей();
		ДокументыСообщения       = НаборЗаписей.ВыгрузитьКолонки();
		ЗаписьJSON               = НовыйПакетСообщенийНаСервис(ВыборкаОрганизации);
		
		ВыборкаДокументы = ВыборкаОрганизации.Выбрать();
		
		ТаблицаКонтрагенты = НовыйТаблицаКонтрагентов();
		Пока ВыборкаДокументы.Следующий() Цикл
			
			КоличествоЗаписейВПакете = КоличествоЗаписейВПакете + 1;
			Если КоличествоЗаписейВПакете = МаксимальныйРазмерПакета Тогда
				// Отправим пакет, текущий документ будет отправлен в следующем пакете.
				ЗакрытьИОтправитьТекущийПакет(ВыборкаОрганизации,
					ДокументыСообщения,
					ЗаписьJSON,
					ИдентификаторСообщения,
					СписокДокументовСОшибками,
					ТаблицаКонтрагенты,
					ТаблицаОшибок);
				// Сформируем новый пакет сообщений.
				КоличествоЗаписейВПакете = 1; // текущий документ попадает в новый пакет
				ИдентификаторСообщения   = Новый УникальныйИдентификатор();
				НаборЗаписей             = РегистрыСведений.СервисСверкиРасчетовРеестрДокументов.СоздатьНаборЗаписей();
				ДокументыСообщения       = НаборЗаписей.ВыгрузитьКолонки();
				ЗаписьJSON               = НовыйПакетСообщенийНаСервис(ВыборкаОрганизации);
			КонецЕсли;
			
			КонтрагентДокумента = ТаблицаКонтрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(КонтрагентДокумента, ВыборкаДокументы);
			
			НаименованиеОперации = НаименованиеОперации(ВыборкаДокументы, СчетаИсключения);
			
			Если НаименованиеОперации = Неопределено Тогда
				СписокДокументовСОшибками.Добавить(ВыборкаДокументы.Документ);
			КонецЕсли;
			
			ДобавитьДокументВПакет(ВыборкаДокументы, ЗаписьJSON, НаименованиеОперации);
			
			ДокументСообщения = ДокументыСообщения.Добавить();
			ЗаполнитьЗначенияСвойств(ДокументСообщения, ВыборкаДокументы);
			ДокументСообщения.ИдентификаторСообщения = ИдентификаторСообщения;
			
		КонецЦикла;
		
		ЗакрытьИОтправитьТекущийПакет(ВыборкаОрганизации,
			ДокументыСообщения,
			ЗаписьJSON,
			ИдентификаторСообщения,
			СписокДокументовСОшибками,
			ТаблицаКонтрагенты,
			ТаблицаОшибок);
		
	КонецЦикла;
	
	ЗаписатьЛогОтправкиСообщения(ТаблицаОшибок);
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Функция ИмяСлужебногоПользователя() Экспорт
	
	Возврат "1ССверка";
	
КонецФункции

// Возвращает признак установки функциональной опции ИспользуетсяСервисСверкиРасчетов.
//
// Возвращаемое значение:
//  Булево - признак установки функциональной опции ИспользуетсяСервисСверкиРасчетов.
//
Функция ИспользуетсяСервисСверкиРасчетов() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользуетсяСервисСверкиРасчетов");
	
КонецФункции

// Процедура регламентного задания, которая отправляет документы в сервис сверки
// и получает информацию о расхождениях.
//
Процедура СверитьРасчетыРегламентноеЗадание() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбменССервисомСверкиРасчетов);
	
	Если СлужебныйПользовательДляОповещенияОРасхождениях() = Неопределено Тогда
		УстановитьПользователяРегЗадания();
	КонецЕсли;
	
	ОбменятьсяССервисом();
	
КонецПроцедуры

Процедура ОбменятьсяССервисом(ПараметрыОбмена = Неопределено) Экспорт
	
	Если РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтправитьСообщения();
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	// Расхождения получаем с начала предыдущего квартала.
	КоличествоМесяцевКвартала = 3;
	НачалоПредыдущегоКвартала = НачалоКвартала(ДобавитьМесяц(ТекущаяДата, -КоличествоМесяцевКвартала));
	КонецТекущегоКвартала     = КонецКвартала(ТекущаяДата);
	ЭтоВызовИзОтчета          = ?(ЗначениеЗаполнено(ПараметрыОбмена), ПараметрыОбмена.ЭтоВызовИзОтчета, Ложь);
	ПолучитьРасхождения(НачалоПредыдущегоКвартала, КонецТекущегоКвартала, ЭтоВызовИзОтчета);

КонецПроцедуры

Процедура УстановитьПользователяРегЗадания()
	
	Пользователь = СлужебныйПользовательДляОповещенияОРасхождениях(Истина);
	Если Пользователь <> Неопределено Тогда
		ПараметрыЗадания = Новый Структура("Метаданные", Метаданные.РегламентныеЗадания.ОбменССервисомСверкиРасчетов);
		СписокЗаданий    = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
		ИспользованиеРегЗадания = Истина;
		ПараметрыИзмененияЗадания = Новый Структура("Использование, ИмяПользователя", 
		ИспользованиеРегЗадания, ИмяСлужебногоПользователя());
		УстановитьПривилегированныйРежим(Истина);
		Для Каждого РегЗадание Из СписокЗаданий Цикл
			Если ИспользованиеРегЗадания Тогда
				РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание, ПараметрыИзмененияЗадания);
				ИспользованиеРегЗадания = Ложь;
			Иначе
				РегламентныеЗаданияСервер.УдалитьЗадание(РегЗадание);
			КонецЕсли;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

КонецПроцедуры

Функция ДатаНачалаСверкиРасчетов() Экспорт
	
	// Дата начала сверки расчетов - начало предыдущего квартала
	Возврат НачалоКвартала(ДобавитьМесяц(ТекущаяДата(), -3));
	
КонецФункции

Процедура ЗарегистрироватьКСверкеРанееВведенныеДокументы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПодключенныеОрганизации = ПодключенныеОрганизации();
	МассивОрганизаций = ПодключенныеОрганизации.ВыгрузитьКолонку("Организация");
	
	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов(Истина, Ложь);
	ФильтрСписокСчетов = ТаблицаСчетов.ВыгрузитьКолонку("СчетРасчетов");
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	ДатаНачалаСверкиРасчетов = ДатаНачалаСверкиРасчетов();
	ДатаОкончанияСверкиРасчетов = КонецКвартала(ДобавитьМесяц(ТекущаяДата(), 3));
	
	Запрос = Новый Запрос;
	Запрос.Текст = УчетВзаиморасчетов.ТекстЗапросаРасчетыСКонтрагентами();
	Запрос.УстановитьПараметр("ДатаНачала",            ДатаНачалаСверкиРасчетов);
	Запрос.УстановитьПараметр("ДатаОкончания",         Новый Граница(КонецДня(ДатаОкончанияСверкиРасчетов), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизаций",     МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивКонтрагентов",    КонтрагентыДляСверки());
	Запрос.УстановитьПараметр("МассивДоговоров",       Новый Массив);
	Запрос.УстановитьПараметр("Валюта",                Неопределено);
	Запрос.УстановитьПараметр("ФильтрСписокСчетов",    ФильтрСписокСчетов);
	Запрос.УстановитьПараметр("АналитикаРасчетов",     АналитикаРасчетов);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",    Неопределено);
	Запрос.УстановитьПараметр("РазбитьПоДоговорам",    Ложь);
	Запрос.УстановитьПараметр("СчетаИсключения",       Документы.АктСверкиВзаиморасчетов.СчетаИсключения());
	Запрос.УстановитьПараметр("СчетаНДСПоАренде",      ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам());
	Запрос.УстановитьПараметр("ДляЦелейСервисаСверки", ИСТИНА);

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Дебет = 0 И Выборка.Кредит = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ДокументПодлежитСверке(Выборка.Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.СервисСверкиРасчетовРеестрДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.Контрагент.Установить(Выборка.Контрагент);
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
		
		Запись = НаборЗаписей.Добавить();
		Запись.Организация            = Выборка.Организация;
		Запись.Контрагент             = Выборка.Контрагент;
		Запись.Документ               = Выборка.Документ;
		Запись.ДатаДокумента          = Выборка.ДатаВходящегоДокумента;
		Запись.Статус                 = Перечисления.СервисСверкиРасчетовСтатусыДокументов.КОтправке;
		Запись.ИдентификаторДокумента = Выборка.Документ.УникальныйИдентификатор();
		Запись.ИдентификаторСообщения = "";
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИтогиСверки() Экспорт
	
	СтруктураИтогов = Новый Структура();
	СтруктураИтогов.Вставить("КоличествоНеподключенныхКонтрагентов", 0);
	СтруктураИтогов.Вставить("КоличествоНеотправленныхДокументов",   0);
	СтруктураИтогов.Вставить("КоличествоОтправленныхДокументов",     0);
	СтруктураИтогов.Вставить("КоличествоДокументовСРасхождениями",   0);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА РеестрДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СервисСверкиРасчетовСтатусыДокументов.КОтправке)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НеОтправлено,
	|	ВЫБОР
	|		КОГДА РеестрДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СервисСверкиРасчетовСтатусыДокументов.Получено)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Отправлено
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	РегистрСведений.СервисСверкиРасчетовРеестрДокументов КАК РеестрДокументов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	1
	|ИЗ
	|	РегистрСведений.СервисСверкиРасчетовОбнаруженныеРасхождения КАК СервисСверкиРасчетовОбнаруженныеРасхождения
	|ГДЕ
	|	СервисСверкиРасчетовОбнаруженныеРасхождения.Документ.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СервисСверкиРасчетовРеестрДокументов.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ Контрагенты
	|ИЗ
	|	РегистрСведений.СервисСверкиРасчетовРеестрДокументов КАК СервисСверкиРасчетовРеестрДокументов
	|ГДЕ
	|	СервисСверкиРасчетовРеестрДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СервисСверкиРасчетовСтатусыДокументов.КОтправке)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СервисСверкиРасчетовОбнаруженныеРасхождения.Документ КАК Документ,
	|	1 КАК ДокументСРасхождением
	|ПОМЕСТИТЬ Расхождения
	|ИЗ
	|	РегистрСведений.СервисСверкиРасчетовОбнаруженныеРасхождения КАК СервисСверкиРасчетовОбнаруженныеРасхождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК КоличествоНеподключенныхКонтрагентов,
	|	Документы.НеОтправлено КАК КоличествоНеотправленныхДокументов,
	|	Документы.Отправлено КАК КоличествоОтправленныхДокументов,
	|	0 КАК КоличествоДокументовСРасхождениями
	|ИЗ
	|	Документы КАК Документы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Контрагенты КАК Контрагенты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	Расхождения.ДокументСРасхождением
	|ИЗ
	|	Расхождения КАК Расхождения
	|ИТОГИ
	|	СУММА(КоличествоНеподключенныхКонтрагентов),
	|	СУММА(КоличествоНеотправленныхДокументов),
	|	СУММА(КоличествоОтправленныхДокументов),
	|	СУММА(КоличествоДокументовСРасхождениями)
	|ПО
	|	ОБЩИЕ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтруктураИтогов;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураИтогов, Выборка);
	
	Возврат СтруктураИтогов;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбменССервисомСверкиРасчетовРегистрацияДокументаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Не ИспользуетсяСервисСверкиРасчетов() Тогда
		Возврат;
	КонецЕсли;
	
	ГрупповоеПерепроведение = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ГрупповоеПерепроведение", ГрупповоеПерепроведение)
		И ГрупповоеПерепроведение = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.СчетФактураВыданный")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		ЗарегистрироватьОснованияСФКОбмену(Источник);
	ИначеЕсли Источник.Проведен Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "Организация, Контрагент");
		ЗарегистрироватьДокументКОтправке(РеквизитыДокумента.Организация, РеквизитыДокумента.Контрагент, Источник.Ссылка);
		// Если текущий документ после регистрации есть в реестре в статусе отличном от "К отправке" (по другому контрагенту,
		// например) значит нужно его повторно отметить к отправке для удаления на стороне сервиса.
		Если ДокументОтправлялсяНаСервис(Источник.Ссылка) Тогда
			УстановитьСтатусДокументаКОтправке(Источник.Ссылка);
		КонецЕсли;
	Иначе
		УстановитьСтатусДокументаКОтправке(Источник.Ссылка);
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьДокументКОтправке(Организация, Контрагент, ДокументСсылка) Экспорт
	
	Если Не БизнесСеть.ОрганизацияПодключена(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КонтрагентПодлежитСверке(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоКорректныеРеквизиты(Организация, Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СервисСверкиРасчетовРеестрДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Контрагент.Установить(Контрагент);
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
	
	Запись = НаборЗаписей.Добавить();
	Запись.Организация            = Организация;
	Запись.Контрагент             = Контрагент;
	Запись.Документ               = ДокументСсылка;
	РеквизитыДокумента            = РегистрыСведений.ДанныеПервичныхДокументов.ДанныеПервичногоДокумента(ДокументСсылка);
	Если РеквизитыДокумента <> Неопределено Тогда
		Если ЗначениеЗаполнено(РеквизитыДокумента.Дата) Тогда
			Запись.ДатаДокумента = РеквизитыДокумента.Дата;
		Иначе
			Запись.ДатаДокумента = РеквизитыДокумента.ДатаРегистратора;
		КонецЕсли;
	КонецЕсли;
	Запись.ИдентификаторДокумента = ДокументСсылка.УникальныйИдентификатор();
	Запись.ИдентификаторСообщения = "";
	Запись.Статус                 = Перечисления.СервисСверкиРасчетовСтатусыДокументов.КОтправке;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ИмяСервиса() Экспорт
	
	Возврат НСтр("ru='1С:Сверка 2.0'");
	
КонецФункции

Функция НазваниеОперацииОтправкаСообщений() Экспорт
	
	Возврат НСтр("ru='отправка сообщений'");
	
КонецФункции

Функция НазваниеОперацииПолучениеРасхождений() Экспорт
	
	Возврат НСтр("ru='получение расхождений'");
	
КонецФункции

Функция СлужебныйПользовательДляОповещенияОРасхождениях(СоздаватьПриОтсутствии = Ложь) Экспорт
	
	Пользователь = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ОбщегоНазначения.РазделениеВключено()
		И НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Пользователь;
	КонецЕсли;
	
	Логин        = ИмяСлужебногоПользователя();
	Пароль       = "946135e8-a9a7-405f-a5df-19e734c712c7";
	
	Пользователь = Пользователи.НайтиПоИмени(Логин);
	
	Если Пользователь <> Неопределено 
		ИЛИ НЕ СоздаватьПриОтсутствии Тогда
		Возврат Пользователь;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.РазделениеВключено()
		И НЕ ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() Тогда
		Возврат Пользователь;
	КонецЕсли;
	
	Попытка
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Имя = Логин;
		ОписаниеПользователяИБ.ПолноеИмя = СервисСверкиРасчетов.ИмяСервиса();
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
		ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
		ОписаниеПользователяИБ.Пароль = Пароль;
		ОписаниеПользователяИБ.Роли = Новый Массив;
		
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		Пользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
		Пользователь.Служебный = Истина;
		Пользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		Пользователь.Записать();
		
		УправлениеДоступомБП.УстановитьПраваСлужебногоПользователяСверкиРасчетов(Пользователь.Ссылка);
		
	Исключение
		
		МетаданныеОбъекта = Метаданные.Справочники.Пользователи;
		ТекстОшибки = НСтр("ru = 'Не удалось создать служебного пользователя по причине:'")
			+ Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта,, ТекстОшибки);
		ТекстСообщения = СтрШаблон("%1: при создании служебного пользователя для получения уведомлений произошла ошибка. %2",
			СервисСверкиРасчетов.ИмяСервиса(),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
	Возврат Пользователь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйПакетСообщенийНаСервис(ВыборкаОрганизации)
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("abonement");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("fullName");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаОрганизации.НаименованиеПолное);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("name");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаОрганизации.Наименование);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("inn");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаОрганизации.ИНН);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("kpp");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаОрганизации.КПП);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("idNetwork");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаОрганизации.ИдентификаторОрганизации);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("itemLines");
	
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Возврат ЗаписьJSON;

КонецФункции

Процедура ЗакрытьИОтправитьТекущийПакет(ВыборкаОрганизации, ДокументыСообщения, ЗаписьJSON, ИдентификаторСообщения, СписокДокументовСОшибками, ТаблицаКонтрагенты, ТаблицаОшибок)
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	// Контрагенты документов в пакете.
	ДополнитьКонтрагентами(ВыборкаОрганизации, ЗаписьJSON, ТаблицаКонтрагенты);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	ДанныеСервиса = ОтправитьСообщениеВСервисСверки(ВыборкаОрганизации.Организация, ИдентификаторСообщения, СтрокаJSON);
	
	Отказ = Ложь;
	ЗарегистрироватьТекущиеОшибки(ВыборкаОрганизации.Организация,
		ТаблицаОшибок,
		ДанныеСервиса,
		СписокДокументовСОшибками,
		Отказ);
	
	Если Не Отказ Тогда
		// Отметить, что сообщение отправлено успешно.
		ОтметитьУспешнуюОтправку(ДокументыСообщения, СписокДокументовСОшибками);
	КонецЕсли;
	
	СписокДокументовСОшибками.Очистить();
	
КонецПроцедуры

Процедура ДобавитьДокументВПакет(ВыборкаДокументы, ЗаписьJSON, НаименованиеОперации)
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("document");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("UID");
	ЗаписьJSON.ЗаписатьЗначение(Строка(ВыборкаДокументы.Документ.УникальныйИдентификатор()));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("date");
	ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДокументы.ДатаРегистратора, "ДФ=yyyy-MM-dd"));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("number");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаДокументы.НомерРегистратора);
	
	ИмяДокументаМетаданные = ВыборкаДокументы.Документ.Метаданные().Имя;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("type");
	ЗаписьJSON.ЗаписатьЗначение(ИмяДокументаМетаданные); 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("operation");
	ЗаписьJSON.ЗаписатьЗначение(НаименованиеОперации);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("view1C");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаДокументы.Документ.Метаданные().ПредставлениеОбъекта); 
	
	ЗаписьJSON.ЗаписатьИмяСвойства("idNetworkPartner");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаДокументы.ИдентификаторКонтрагента);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("documentIncomming");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	Если ВыборкаДокументы.ЭтоКорректировочныйСчетФактура Тогда // Для корректировочных документов идентифицирующий номер - номер корр СФ.
		
		ЗаписьJSON.ЗаписатьИмяСвойства("date");
		ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДокументы.ДатаСчетаФактуры, "ДФ=yyyy-MM-dd"));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("number");
		ЗаписьJSON.ЗаписатьЗначение(ВыборкаДокументы.НомерСчетаФактуры);
		
	Иначе
		
		ЗаписьJSON.ЗаписатьИмяСвойства("date");
		ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДокументы.Дата, "ДФ=yyyy-MM-dd"));
		
		ЗаписьJSON.ЗаписатьИмяСвойства("number");
		ЗаписьJSON.ЗаписатьЗначение(ВыборкаДокументы.Номер);
		
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("documentInvoice");
	
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("date");
	ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДокументы.ДатаСчетаФактуры, "ДФ=yyyy-MM-dd"));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("number");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаДокументы.НомерСчетаФактуры);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("sum"); // Сумма вседга по модулю
	Если ВыборкаДокументы.Сумма < 0 Тогда
		ЗаписьJSON.ЗаписатьЗначение(Формат(-ВыборкаДокументы.Сумма,"ЧРД=.; ЧРГ=' '; ЧГ=0"));
	Иначе
		ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДокументы.Сумма,"ЧРД=.; ЧРГ=' '; ЧГ=0"));
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьИмяСвойства("sumNDS");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаДокументы.СуммаНДС);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("sumVal");
	ЗаписьJSON.ЗаписатьЗначение(ВыборкаДокументы.ВалютнаяСумма);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("command");
	
	// Если документ был отправлен к удалению, то ставим команду удалить
	Если ВыборкаДокументы.Статус = Перечисления.СервисСверкиРасчетовСтатусыДокументов.ОтправленоКУдалению Тогда
		
		ЗаписьJSON.ЗаписатьЗначение("Удалить");
		
	Иначе
		
		ЗаписьJSON.ЗаписатьЗначение("ДобавитьОбновить");
		
	КонецЕсли;
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();

КонецПроцедуры

Процедура ДополнитьКонтрагентами(ВыборкаОрганизации, ЗаписьJSON, ТаблицаКонтрагенты)
	
	ТаблицаКонтрагенты.Свернуть("Контрагент,НаименованиеКонтрагента,НаименованиеКонтрагентаПолное,КППКонтрагента,ИННКонтрагента,ИдентификаторКонтрагента");
	
	ЗаписьJSON.ЗаписатьИмяСвойства("partnersLines");
	
	ЗаписьJSON.ЗаписатьНачалоМассива();
	
	Для Каждого Контрагент Из ТаблицаКонтрагенты Цикл
		
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		
		ЗаписьJSON.ЗаписатьИмяСвойства("fullName");
		ЗаписьJSON.ЗаписатьЗначение(Контрагент.НаименованиеКонтрагентаПолное);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("name");
		ЗаписьJSON.ЗаписатьЗначение(Контрагент.НаименованиеКонтрагента);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("inn");
		ЗаписьJSON.ЗаписатьЗначение(Контрагент.ИННКонтрагента);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("kpp");
		ЗаписьJSON.ЗаписатьЗначение(Контрагент.КППКонтрагента);
		
		ЗаписьJSON.ЗаписатьИмяСвойства("idNetwork");
		ЗаписьJSON.ЗаписатьЗначение(Контрагент.ИдентификаторКонтрагента);
		
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		
	КонецЦикла;
	
	ЗаписьJSON.ЗаписатьКонецМассива();
	
	// Очистим таблицу контрагентов в пакете.
	ТаблицаКонтрагенты.Очистить();
	
КонецПроцедуры

Процедура ОтметитьУспешнуюОтправку(ДокументыСообщения, СписокДокументовСОшибками)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ДокументСообщения Из ДокументыСообщения Цикл
		
		Если СписокДокументовСОшибками.Найти(ДокументСообщения.Документ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДокументСообщения.Статус = Перечисления.СервисСверкиРасчетовСтатусыДокументов.Получено Тогда
			
			НаборЗаписей = РегистрыСведений.СервисСверкиРасчетовРеестрДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.ВыгрузитьКолонки();
			НаборЗаписей.Отбор.Организация.Установить(ДокументСообщения.Организация);
			НаборЗаписей.Отбор.Контрагент.Установить(ДокументСообщения.Контрагент);
			НаборЗаписей.Отбор.Документ.Установить(ДокументСообщения.Документ);
			
			НоваяЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗаписьРегистра, ДокументСообщения);
			НаборЗаписей.Записать();
			
		ИначеЕсли ДокументСообщения.Статус = Перечисления.СервисСверкиРасчетовСтатусыДокументов.ОтправленоКУдалению Тогда
			
			НаборЗаписей = РегистрыСведений.СервисСверкиРасчетовРеестрДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.ВыгрузитьКолонки();
			НаборЗаписей.Отбор.Организация.Установить(ДокументСообщения.Организация);
			НаборЗаписей.Отбор.Контрагент.Установить(ДокументСообщения.Контрагент);
			НаборЗаписей.Отбор.Документ.Установить(ДокументСообщения.Документ);
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ОтправитьСообщениеВСервисСверки(Организация, ИдентификаторСообщения, СтрокаJSON)
	
	ПараметрыМетода = Новый Структура();
	ПараметрыМетода.Вставить("Организация", Организация);
	ПараметрыМетода.Вставить("Данные", СтрокаJSON);
	ПараметрыМетода.Вставить("Заголовок", ИдентификаторСообщения);
	
	Возврат ВыполнитьКомандуСервисаОтправитьСообщения(ПараметрыМетода);
	
КонецФункции

Процедура ПолучитьРасхождения(ДатаНачала, ДатаОкончания, ЭтоВызовИзОтчета)
	
	Отказ                   = Ложь;
	Оповещать               = Ложь;
	СтруктураРасхождений    = НовыйСтруктураРасхождений();
	ПодключенныеОрганизации = ПодключенныеОрганизации();
	ХешРасхождений          = Новый ХешированиеДанных(ХешФункция.CRC32);
	
	Для Каждого ТекущаяОрганизация Из ПодключенныеОрганизации Цикл
		
		// Отправить сообщение в сервис сверки
		ПараметрыМетода = Новый Структура();
		ПараметрыМетода.Вставить("Организация",   ТекущаяОрганизация.Организация);
		ПараметрыМетода.Вставить("ДатаНачала",    ДатаНачала);
		ПараметрыМетода.Вставить("ДатаОкончания", ДатаОкончания);
		ПараметрыМетода.Вставить("Заголовок",     "");
	
		ДанныеСервиса = ВыполнитьКомандуСервисаПолучитьРасхождения(ПараметрыМетода);
		ЗаписатьЛогПолученияРасхождений(ДанныеСервиса, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураДанных = ПреобразоватьТекстВТаблицу(ПараметрыМетода, ДанныеСервиса);
		Если ЗначениеЗаполнено(СтруктураДанных) Тогда
			ЗаполнитьРасхождения(СтруктураДанных, СтруктураРасхождений, ХешРасхождений, Оповещать);
		КонецЕсли;
		
		РегистрыСведений.СервисСверкиРасчетовОбнаруженныеРасхождения.ЗаписатьДанные(ПараметрыМетода, СтруктураДанных);
		
	КонецЦикла;

	// Запишем дату и время получения данных из сервиса.
	ЗаписатьЛогПолученияРасхождений(Неопределено, Отказ, Истина);
	
	Если Оповещать И НЕ ЭтоВызовИзОтчета Тогда
		// Оповещаем только в случае, если предыдущий хеш ключевых расхождений отличается от текущего.
		ПредыдущееРасхождение = Константы.ХешРасхожденийСервисаСверкиРасчетов.Получить();
		Если Не ЗначениеЗаполнено(ПредыдущееРасхождение)
			ИЛИ ЗначениеЗаполнено(ПредыдущееРасхождение)
			И ПредыдущееРасхождение <> Строка(ХешРасхождений.ХешСумма) Тогда
			ОповеститьОРасхождениях(СтруктураРасхождений);
		КонецЕсли;
		Константы.ХешРасхожденийСервисаСверкиРасчетов.Установить(Строка(ХешРасхождений.ХешСумма));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРасхождения(СтруктураДанных, СтруктураРасхождений, ХешРасхождений, Оповещать)

	ПредыдущийМесяц = КонецМесяца(ДобавитьМесяц(ТекущаяДатаСеанса(), -1)); // последний день предыдущего месяца
	ДолжныБытьВведеныДокументыЗаПрошлыйМесяц = День(ТекущаяДатаСеанса()) >= 20;
	
	Для Каждого СтрокаДанных Из СтруктураДанных Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.ИдентификаторСверкиПоОрганизации)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаДанных.ИдентификаторСверкиКонтрагенту) Тогда // отсутствуют документы
			
			// Хеш формируем только по тем ошибкам, которые требуют оперативной реакции от пользователя.
			ДобавитьВХешРасхождений = Ложь;
			Если ДолжныБытьВведеныДокументыЗаПрошлыйМесяц
				И СтрокаДанных.Дата <= ПредыдущийМесяц 
				ИЛИ СтрокаДанных.Дата <= ДобавитьМесяц(ПредыдущийМесяц, -1) Тогда
				// Об отсутствующих документах оповещаем только если текущая дата 20-е число и больше,
				// и если документ отсутствует за предыдущий месяц или раннее.
				// Или если это документ 2-месячной давности и более.
				Оповещать = Истина;
				ДобавитьВХешРасхождений = Истина;
				ХешРасхождений.Добавить(Строка(СтрокаДанных.Контрагент));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаДанных.ИдентификаторСверкиПоОрганизации) Тогда
				// Документы не отражены организацией.
				МассивДокументов = СтрокаДанных.МассивДокументовПоКонтрагенту;
			Иначе
				// Документы не отражены контрагентом.
				МассивДокументов = СтрокаДанных.МассивДокументовПоОрганизации;
				СтруктураРасхождений.НетУКонтрагентаКонтрагенты.Добавить(СтрокаДанных.Контрагент);
			КонецЕсли;
			Для Каждого ДокументСверки Из МассивДокументов Цикл
				Если ЗначениеЗаполнено(СтрокаДанных.ИдентификаторСверкиПоОрганизации) Тогда
					СтруктураРасхождений.НетУКонтрагентаСумма = СтруктураРасхождений.НетУКонтрагентаСумма + ДокументСверки.Сумма;
					СтруктураРасхождений.НетУКонтрагентаКоличество = СтруктураРасхождений.НетУКонтрагентаКоличество + 1;
					Если ДобавитьВХешРасхождений Тогда
						ХешРасхождений.Добавить(Строка(ДокументСверки.Сумма));
					КонецЕсли;
				Иначе
					СтруктураРасхождений.НетУОрганизацииМассивОрганизаций.Добавить(СтрокаДанных.Организация);
					СтруктураРасхождений.НетУОрганизацииСумма = СтруктураРасхождений.НетУОрганизацииСумма + ДокументСверки.Сумма;
					СтруктураРасхождений.НетУОрганизацииКоличество = СтруктураРасхождений.НетУОрганизацииКоличество + 1;
					Если ДобавитьВХешРасхождений Тогда
						ХешРасхождений.Добавить(Строка(СтрокаДанных.Организация));
						ХешРасхождений.Добавить(Строка(ДокументСверки.Сумма));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ИдентификаторСверкиПоОрганизации)
			И ЗначениеЗаполнено(СтрокаДанных.ИдентификаторСверкиКонтрагенту) Тогда // есть расхождения в реквизитах
			Оповещать = Истина;
			МассивДокументов = СтрокаДанных.МассивДокументовПоОрганизации;
			СтруктураРасхождений.РазличаютсяРеквизитыКонтрагенты.Добавить(СтрокаДанных.Контрагент);
			ХешРасхождений.Добавить(Строка(СтрокаДанных.Контрагент));
			Для Каждого ДокументСверки Из МассивДокументов Цикл
				СтруктураРасхождений.РазличаютсяРеквизитыКоличество = СтруктураРасхождений.РазличаютсяРеквизитыКоличество + 1;
				СтруктураРасхождений.РазличаютсяРеквизитыСумма      = СтруктураРасхождений.РазличаютсяРеквизитыСумма + ДокументСверки.Сумма;
				ХешРасхождений.Добавить(Строка(ДокументСверки.Сумма));
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьОснованияСФКОбмену(ДокументОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Для указанных видов счетов-фактур регистрируем все незарегистрированные основания к отправке.
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		ВидОперации = ДокументОбъект.ВидСчетаФактуры;
		Если ВидОперации <> Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
			И ВидОперации <> Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		ВидОперации = ДокументОбъект.ВидСчетаФактуры;
		Если ВидОперации <> Перечисления.ВидСчетаФактурыПолученного.Корректировочный
			И ВидОперации <> Перечисления.ВидСчетаФактурыПолученного.НаПоступление Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СчетФактураДокументыОснования.ДокументОснование КАК Ссылка,
	|	СчетФактураДокументыОснования.Ссылка.Организация КАК Организация,
	|	СчетФактураДокументыОснования.Ссылка.Контрагент КАК Контрагент
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СервисСверкиРасчетовРеестрДокументов КАК СервисСверкиРасчетовРеестрДокументов
	|		ПО СчетФактураДокументыОснования.ДокументОснование = СервисСверкиРасчетовРеестрДокументов.Документ
	|			И (СервисСверкиРасчетовРеестрДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СервисСверкиРасчетовСтатусыДокументов.КОтправке))
	|ГДЕ
	|	СервисСверкиРасчетовРеестрДокументов.Документ ЕСТЬ NULL
	|	И СчетФактураДокументыОснования.Ссылка = &ДокументСсылка
	|	И &ОтборПоОснованию";
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СчетФактураВыданный", "СчетФактураПолученный");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоОснованию", "ИСТИНА");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоОснованию",
			"НЕ СчетФактураДокументыОснования.ДокументОснование ССЫЛКА Документ.ОказаниеУслуг");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СписокДокументовКОбмену = РезультатЗапроса.Выгрузить();
		Для Каждого ДокументКОбмену Из СписокДокументовКОбмену Цикл
			Если Не ДокументПодлежитСверке(ДокументКОбмену.Ссылка) Тогда
				Продолжить;
			КонецЕсли;
			ЗарегистрироватьДокументКОтправке(ДокументКОбмену.Организация, ДокументКОбмену.Контрагент, ДокументКОбмену.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьТекущиеОшибки(Организация, ТаблицаОшибок, ДанныеСервиса, СписокДокументовСОшибками, Отказ)

	МассивОшибок = Новый Массив();
	
	Если ДанныеСервиса = Неопределено Тогда
		
		МассивОшибок.Добавить(НСтр("ru = 'Сервис не отвечает'"));
		
	ИначеЕсли ТипЗНЧ(ДанныеСервиса) = Тип("Строка") Тогда
		
		МассивОшибок.Добавить(ДанныеСервиса);
		
	ИначеЕсли ДанныеСервиса.Свойство("errors") Тогда
		
		МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибки сервиса: %1'"), ДанныеСервиса.detail));
				
	ИначеЕсли ДанныеСервиса.Ошибка Тогда
		
		МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибки сервиса: %1'"), ДанныеСервиса.ТекстОшибки));
			
	ИначеЕсли СписокДокументовСОшибками.Количество() > 0 Тогда
		
		Для Каждого ТекущееЗначение Из СписокДокументовСОшибками Цикл
			
			МассивОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не указана операция у документа: %1'"), ТекущееЗначение));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МассивОшибок.Количество() > 0 Тогда
	
		НоваяСтрока = ТаблицаОшибок.Добавить();
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.Ошибки = МассивОшибок;
		
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаписатьЛогПолученияРасхождений(ДанныеСервиса, Отказ, УспешноеПолучениеДанных = Ложь)
	
	Если УспешноеПолучениеДанных Тогда
		
		Константы.ДатаПолученияДанныхСервисаСверкиРасчетов.Установить(ТекущаяДатаСеанса());
		
	ИначеЕсли ТипЗнч(ДанныеСервиса) = Тип("Строка") Тогда
		
		ЗаписатьОшибкуВЖурналРегистрации(ДанныеСервиса);
		Отказ = Истина;
		
	ИначеЕсли ДанныеСервиса = Неопределено Тогда
		
		ЗаписатьОшибкуВЖурналРегистрации(СтрШаблон("%1 не отвечает", ИмяСервиса()));
		Отказ = Истина;
		
	ИначеЕсли ТипЗнч(ДанныеСервиса) <> Тип("Массив") Тогда
		
		ЗаписатьОшибкуВЖурналРегистрации(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка %1 type: %2'"),ДанныеСервиса.title, ДанныеСервиса.type));
		Отказ = Истина;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьЛогОтправкиСообщения(ТаблицаОшибок)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		Для Каждого ТекущаяСтрока Из ТаблицаОшибок Цикл
			Для Каждого ТекущееЗначение Из ТекущаяСтрока.Ошибки Цикл
				ЗаписатьОшибкуВЖурналРегистрации(
					СтрШаблон("%1: по организации %2 ошибка %3'", ИмяСервиса(), ТекущаяСтрока.Организация, ТекущееЗначение));
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОшибкуВЖурналРегистрации(Комментарий)
	
	ЗаписьЖурналаРегистрации(ИмяСервиса(), УровеньЖурналаРегистрации.Ошибка, , , Комментарий);
	
КонецПроцедуры

Функция ДокументОтправлялсяНаСервис(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СервисСверкиРасчетовРеестрДокументов.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.СервисСверкиРасчетовРеестрДокументов КАК СервисСверкиРасчетовРеестрДокументов
	|ГДЕ
	|	СервисСверкиРасчетовРеестрДокументов.Документ = &Документ
	|	И СервисСверкиРасчетовРеестрДокументов.Статус <> ЗНАЧЕНИЕ(Перечисление.СервисСверкиРасчетовСтатусыДокументов.КОтправке)";
	
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает признак того, что контрагент подлежит сверке в сервисе сверки расчетов.
// 
//Параметры:
// Контрагент - Справочники.Контрагенты - ссылка на проверяемого контрагента
//
// Возвращаемое значение:
// Булево - Истина - контрагент подлежит сверке в сервисе.
//
Функция КонтрагентПодлежитСверке(Контрагент)
	
	Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Справочники.Контрагенты.ЭтоФизическоеЛицо(Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Справочники.Контрагенты.ЭтоИностраннаяОрганизация(Контрагент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьСтатусДокументаКОтправке(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СервисСверкиРасчетовРеестрДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
	НаборЗаписей.Прочитать();
	ЗаписыватьНабор = Ложь;
	Для каждого Запись Из НаборЗаписей Цикл
		Если Запись.Статус = Перечисления.СервисСверкиРасчетовСтатусыДокументов.КОтправке Тогда
			Продолжить;
		КонецЕсли;
		Запись.Статус                 = Перечисления.СервисСверкиРасчетовСтатусыДокументов.КОтправке;
		Запись.ИдентификаторСообщения = "";
		ЗаписыватьНабор = Истина;
	КонецЦикла;
	
	Если ЗаписыватьНабор Тогда
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры

Функция ПодключенныеОрганизации()
	
	Возврат БизнесСеть.ПодключенныеОрганизации();
	
КонецФункции

Функция КонтрагентыДляСверки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|	И (Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|			ИЛИ Контрагенты.ИндивидуальныйПредприниматель)";
	ТаблицаКонтрагенты = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаКонтрагенты.ВыгрузитьКолонку("Контрагент");
	
КонецФункции

Функция ЭтоКорректныеРеквизиты(Организация, Контрагент)
	
	ИННКонтрагента = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИНН"));
	Если Не ЗначениеЗаполнено(ИННКонтрагента) Тогда
		Возврат Ложь; // Не заполнен контрагент или его ИНН.
	КонецЕсли; 
	
	ИННОрганизации = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН"));
	Если ИННОрганизации = ИННКонтрагента Тогда
		Возврат Ложь; // Сверка с самим собой не производится.
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьКомандуСервисаОтправитьСообщения(ПараметрыМетода)
	
	Возврат СервисСверкиРасчетовМенеджерОбмена.ВыполнитьЗапросОтправитьСообщения(ПараметрыМетода);
	
КонецФункции

Функция ВыполнитьКомандуСервисаПолучитьРасхождения(ПараметрыМетода)
	
	Возврат СервисСверкиРасчетовМенеджерОбмена.ВыполнитьЗапросПолучитьРасхождения(ПараметрыМетода);
	
КонецФункции

Функция ТекстЗапросаДанныеИнформационнойБазыКСверке(СчетаИсключения, ДатаНачала = '00010101', ДатаОкончания = '00010101')
	
	ТаблицаСчетов = УчетВзаиморасчетов.ПолучитьТаблицуСчетовУчетаВзаиморасчетов();
	СчетаВзаиморасчетов = ТаблицаСчетов.ВыгрузитьКолонку("СчетРасчетов");
	ЗаВесьПериод = Не ЗначениеЗаполнено(ДатаОкончания);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		СчетаИсключения, ПланыСчетов.Хозрасчетный.СчетаПроцентовПоОбязательствам());
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);
	
	АналитикаРасчетов = Новый Массив();
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	АналитикаРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФильтрСписокСчетов", СчетаВзаиморасчетов);
	Запрос.УстановитьПараметр("СчетаИсключения",    СчетаИсключения);
	Запрос.УстановитьПараметр("АналитикаРасчетов",  АналитикаРасчетов);
	Запрос.УстановитьПараметр("СчетаНДСПоАренде",   ПланыСчетов.Хозрасчетный.СчетаНДСПоАренднымОбязательствам());
	Запрос.УстановитьПараметр("ЗаВесьПериод",       ЗаВесьПериод);
	Запрос.УстановитьПараметр("ДатаНачала",         ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      ДатаОкончания);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СервисСверкиРасчетовРеестрДокументов.Организация КАК Организация,
	|	СервисСверкиРасчетовРеестрДокументов.Контрагент КАК Контрагент,
	|	СервисСверкиРасчетовРеестрДокументов.Документ КАК Документ,
	|	СервисСверкиРасчетовРеестрДокументов.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	Контрагенты.ИНН КАК ИННКонтрагента,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|			ТОГДА Контрагенты.КПП
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КППКонтрагента,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеКонтрагентаПолное,
	|	Контрагенты.Наименование КАК НаименованиеКонтрагента,
	|	КонтрагентыБизнесСеть.Идентификатор КАК ИдентификаторКонтрагента
	|ПОМЕСТИТЬ ДокументыКОтправке
	|ИЗ
	|	РегистрСведений.СервисСверкиРасчетовРеестрДокументов КАК СервисСверкиРасчетовРеестрДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтрагентыБизнесСеть КАК КонтрагентыБизнесСеть
	|		ПО СервисСверкиРасчетовРеестрДокументов.Контрагент = КонтрагентыБизнесСеть.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СервисСверкиРасчетовРеестрДокументов.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	СервисСверкиРасчетовРеестрДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СервисСверкиРасчетовСтатусыДокументов.КОтправке)
	|	И НЕ КонтрагентыБизнесСеть.Идентификатор ЕСТЬ NULL
	|	И Контрагенты.ИННВведенКорректно
	|	И ВЫБОР
	|			КОГДА Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|				ТОГДА Контрагенты.КППВведенКорректно
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ ФильтрСписокСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФильтрСписокСчетов)
	|	И НЕ Хозрасчетный.Ссылка В (&СчетаИсключения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтправке.Организация КАК Организация,
	|	ДокументыКОтправке.Контрагент КАК Контрагент,
	|	ДокументыКОтправке.Документ КАК Документ,
	|	ДокументыКОтправке.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ХозрасчетныйОбороты.Организация, НЕОПРЕДЕЛЕНО) <> ДокументыКОтправке.Организация
	|				ИЛИ ЕСТЬNULL(ХозрасчетныйОбороты.Субконто1, НЕОПРЕДЕЛЕНО) <> ДокументыКОтправке.Контрагент
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СервисСверкиРасчетовСтатусыДокументов.ОтправленоКУдалению)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СервисСверкиРасчетовСтатусыДокументов.Получено)
	|	КОНЕЦ КАК Статус,
	|	ДанныеПервичныхДокументов.Номер КАК Номер,
	|	ДанныеПервичныхДокументов.Дата КАК Дата,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК ДатаРегистратора,
	|	ДанныеПервичныхДокументов.НомерРегистратора КАК НомерРегистратора,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&СчетаНДСПоАренде)
	|				И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ИзменениеУсловийАренды
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	|	КОНЕЦ КАК Дебет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСчет В (&СчетаНДСПоАренде)
	|				И НЕ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ИзменениеУсловийАренды
	|			ТОГДА ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт
	|		ИНАЧЕ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0)
	|	КОНЕЦ КАК Кредит,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, НЕОПРЕДЕЛЕНО) КАК НомерВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаВходящегоДокумента,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ЭтоУниверсальныйДокумент, ЛОЖЬ) КАК ЭтоУниверсальныйДокумент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.ЭтоКорректировочныйДокумент, ЛОЖЬ) КАК ЭтоКорректировочныйДокумент,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.КорСчет, НЕОПРЕДЕЛЕНО) КАК КорСчет,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто1, НЕОПРЕДЕЛЕНО) КАК КорСубконто1,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто2, НЕОПРЕДЕЛЕНО) КАК КорСубконто2,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.КорСубконто3, НЕОПРЕДЕЛЕНО) КАК КорСубконто3,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Валюта, НЕОПРЕДЕЛЕНО) КАК Валюта,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.ВалютнаяСуммаОборот, 0) КАК ВалютнаяСумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.КорСубконто1 ССЫЛКА Справочник.ПрочиеДоходыИРасходы
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.КорСубконто1 КАК Справочник.ПрочиеДоходыИРасходы).ВидПрочихДоходовИРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПрочихДоходовИРасходов,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.Счет, НЕОПРЕДЕЛЕНО) КАК Счет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеПервичныхДокументов.ЭтоУниверсальныйДокумент, ЛОЖЬ)
	|				И ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|				И ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ПодразделениеОрганизации.ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ПодразделениеОрганизации.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЦифровойИндексОбособленногоПодразделения,
	|	ОрганизацииБизнесСеть.Идентификатор КАК ИдентификаторОрганизации,
	|	ДокументыКОтправке.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ДокументыКОтправке.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	|	ДокументыКОтправке.НаименованиеКонтрагентаПолное КАК НаименованиеКонтрагентаПолное,
	|	ДокументыКОтправке.ИННКонтрагента КАК ИННКонтрагента,
	|	ДокументыКОтправке.КППКонтрагента КАК КППКонтрагента
	|ПОМЕСТИТЬ ВТ_ДанныеРеестра
	|ИЗ
	|	ДокументыКОтправке КАК ДокументыКОтправке
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				Счет В
	|					(ВЫБРАТЬ
	|						ФильтрСписокСчетов.Счет
	|					ИЗ
	|						ФильтрСписокСчетов),
	|				&АналитикаРасчетов,
	|				(Организация, Субконто1) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ДокументыКОтправке.Организация,
	|						ДокументыКОтправке.Контрагент
	|					ИЗ
	|						ДокументыКОтправке КАК ДокументыКОтправке),
	|				,
	|				) КАК ХозрасчетныйОбороты
	|		ПО ДокументыКОтправке.Документ = ХозрасчетныйОбороты.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДокументыКОтправке.Организация = ДанныеПервичныхДокументов.Организация
	|			И ДокументыКОтправке.Документ = ДанныеПервичныхДокументов.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ПО ДокументыКОтправке.Организация = ОрганизацииБизнесСеть.Организация
	|ГДЕ
	|	НЕ ОрганизацииБизнесСеть.Идентификатор ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДанныеСчетовФактур
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ВТ_ДанныеРеестра.Документ
	|			ИЗ
	|				ВТ_ДанныеРеестра)
	|	И НЕ СчетФактураВыданныйДокументыОснования.Ссылка.ПометкаУдаления
	|	И СчетФактураВыданныйДокументыОснования.Ссылка.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.Корректировочный))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка,
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ВТ_ДанныеРеестра.Документ
	|			ИЗ
	|				ВТ_ДанныеРеестра)
	|	И НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления
	|	И СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры В (ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаПоступление), ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.Корректировочный))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеСчетовФактур.Ссылка КАК Ссылка,
	|	ВТ_ДанныеСчетовФактур.ДокументОснование КАК ДокументОснование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ) КАК ЭтоКорректировочныйСчетФактура,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры <> """"
	|				ТОГДА ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры
	|			ИНАЧЕ ЖурналУчетаСчетовФактур.НомерСчетаФактуры
	|		КОНЕЦ, """") КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|			ИНАЧЕ ЖурналУчетаСчетовФактур.ДатаСчетаФактуры
	|		КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСчетаФактуры,
	|	СУММА(ЕСТЬNULL(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре, 0)) КАК СуммаПоСчетуФактуре,
	|	СУММА(ЕСТЬNULL(ЖурналУчетаСчетовФактур.СуммаНДС, 0)) КАК СуммаНДС,
	|	СУММА(ЕСТЬNULL(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение, 0)) КАК СуммаНДСРазницаУменьшение,
	|	СУММА(ЕСТЬNULL(ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение, 0)) КАК СуммаНДСРазницаУвеличение
	|ПОМЕСТИТЬ ВТ_ДанныеПоНДС
	|ИЗ
	|	ВТ_ДанныеСчетовФактур КАК ВТ_ДанныеСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО ВТ_ДанныеСчетовФактур.Ссылка = ЖурналУчетаСчетовФактур.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеСчетовФактур.Ссылка,
	|	ВТ_ДанныеСчетовФактур.ДокументОснование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры <> """"
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ),
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры <> """"
	|				ТОГДА ЖурналУчетаСчетовФактур.НомерКорректировочногоСчетаФактуры
	|			ИНАЧЕ ЖурналУчетаСчетовФактур.НомерСчетаФактуры
	|		КОНЕЦ, """"),
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|			ИНАЧЕ ЖурналУчетаСчетовФактур.ДатаСчетаФактуры
	|		КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеРеестра.Организация КАК Организация,
	|	ВТ_ДанныеРеестра.Контрагент КАК Контрагент,
	|	ВТ_ДанныеРеестра.Документ КАК Документ,
	|	ВТ_ДанныеРеестра.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	ВТ_ДанныеРеестра.Статус КАК Статус,
	|	ЕСТЬNULL(ВТ_ДанныеРеестра.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ВТ_ДанныеРеестра.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	ЕСТЬNULL(ВТ_ДанныеРеестра.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистратора,
	|	ЕСТЬNULL(ВТ_ДанныеРеестра.НомерРегистратора, """") КАК НомерРегистратора,
	|	ВТ_ДанныеРеестра.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	Организации.ИНН КАК ИНН,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|			ТОГДА Организации.КПП
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК КПП,
	|	Организации.НаименованиеПолное КАК НаименованиеПолное,
	|	СУММА(ВТ_ДанныеРеестра.Дебет - ВТ_ДанныеРеестра.Кредит) КАК Сумма,
	|	Организации.Наименование КАК Наименование,
	|	ВТ_ДанныеРеестра.ЦифровойИндексОбособленногоПодразделения КАК ЦифровойИндексОбособленногоПодразделения,
	|	МАКСИМУМ(ВТ_ДанныеРеестра.Счет) КАК Счет,
	|	МАКСИМУМ(ВТ_ДанныеРеестра.ВидПрочихДоходовИРасходов) КАК ВидПрочихДоходовИРасходов,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ДанныеРеестра.ВалютнаяСумма < 0
	|				ТОГДА -ВТ_ДанныеРеестра.ВалютнаяСумма
	|			ИНАЧЕ ВТ_ДанныеРеестра.ВалютнаяСумма
	|		КОНЕЦ) КАК ВалютнаяСумма,
	|	ВТ_ДанныеРеестра.Валюта КАК Валюта,
	|	МАКСИМУМ(ВТ_ДанныеРеестра.КорСубконто3) КАК КорСубконто3,
	|	МАКСИМУМ(ВТ_ДанныеРеестра.КорСубконто2) КАК КорСубконто2,
	|	МАКСИМУМ(ВТ_ДанныеРеестра.КорСубконто1) КАК КорСубконто1,
	|	МАКСИМУМ(ВТ_ДанныеРеестра.КорСчет) КАК КорСчет,
	|	ВТ_ДанныеРеестра.ЭтоКорректировочныйДокумент КАК ЭтоКорректировочныйДокумент,
	|	ВТ_ДанныеРеестра.ЭтоУниверсальныйДокумент КАК ЭтоУниверсальныйДокумент,
	|	ВТ_ДанныеРеестра.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ВТ_ДанныеРеестра.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	СУММА(ВТ_ДанныеРеестра.Кредит) КАК Кредит,
	|	СУММА(ВТ_ДанныеРеестра.Дебет) КАК Дебет,
	|	ЕСТЬNULL(ВТ_ДанныеПоНДС.НомерСчетаФактуры, """") КАК НомерСчетаФактуры,
	|	ЕСТЬNULL(ВТ_ДанныеПоНДС.ДатаСчетаФактуры, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСчетаФактуры,
	|	ЕСТЬNULL(ВТ_ДанныеПоНДС.ЭтоКорректировочныйСчетФактура, ЛОЖЬ) КАК ЭтоКорректировочныйСчетФактура,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_ДанныеПоНДС.СуммаНДС + ВТ_ДанныеПоНДС.СуммаНДСРазницаУменьшение + ВТ_ДанныеПоНДС.СуммаНДСРазницаУвеличение, 0)) КАК СуммаНДС,
	|	ВТ_ДанныеРеестра.Дата КАК ДатаДокумента,
	|	ВТ_ДанныеРеестра.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ВТ_ДанныеРеестра.НаименованиеКонтрагента КАК НаименованиеКонтрагента,
	|	ВТ_ДанныеРеестра.НаименованиеКонтрагентаПолное КАК НаименованиеКонтрагентаПолное,
	|	ВТ_ДанныеРеестра.ИННКонтрагента КАК ИННКонтрагента,
	|	ВТ_ДанныеРеестра.КППКонтрагента КАК КППКонтрагента
	|ИЗ
	|	ВТ_ДанныеРеестра КАК ВТ_ДанныеРеестра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВТ_ДанныеРеестра.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеПоНДС КАК ВТ_ДанныеПоНДС
	|		ПО ВТ_ДанныеРеестра.Документ = ВТ_ДанныеПоНДС.ДокументОснование
	|ГДЕ
	|	(&ЗаВесьПериод
	|			ИЛИ ВТ_ДанныеРеестра.Дата >= &ДатаНачала
	|				И ВТ_ДанныеРеестра.Дата <= &ДатаОкончания)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ДанныеРеестра.Организация,
	|	ВТ_ДанныеРеестра.Контрагент,
	|	ВТ_ДанныеРеестра.Документ,
	|	ВТ_ДанныеРеестра.ИдентификаторДокумента,
	|	ВТ_ДанныеРеестра.Статус,
	|	ВТ_ДанныеРеестра.ИдентификаторОрганизации,
	|	Организации.ИНН,
	|	ВЫБОР
	|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|			ТОГДА Организации.КПП
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	Организации.НаименованиеПолное,
	|	Организации.Наименование,
	|	ВТ_ДанныеРеестра.ЦифровойИндексОбособленногоПодразделения,
	|	ВТ_ДанныеРеестра.Валюта,
	|	ВТ_ДанныеРеестра.ЭтоКорректировочныйДокумент,
	|	ВТ_ДанныеРеестра.ЭтоУниверсальныйДокумент,
	|	ВТ_ДанныеРеестра.ДатаВходящегоДокумента,
	|	ВТ_ДанныеРеестра.НомерВходящегоДокумента,
	|	ЕСТЬNULL(ВТ_ДанныеПоНДС.НомерСчетаФактуры, """"),
	|	ЕСТЬNULL(ВТ_ДанныеПоНДС.ДатаСчетаФактуры, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ВТ_ДанныеПоНДС.ЭтоКорректировочныйСчетФактура, ЛОЖЬ),
	|	ЕСТЬNULL(ВТ_ДанныеРеестра.ДатаРегистратора, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ВТ_ДанныеРеестра.НомерРегистратора, """"),
	|	ЕСТЬNULL(ВТ_ДанныеРеестра.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ВТ_ДанныеРеестра.Номер, """"),
	|	ВТ_ДанныеРеестра.Дата,
	|	ВТ_ДанныеРеестра.ИдентификаторКонтрагента,
	|	ВТ_ДанныеРеестра.НаименованиеКонтрагента,
	|	ВТ_ДанныеРеестра.НаименованиеКонтрагентаПолное,
	|	ВТ_ДанныеРеестра.ИННКонтрагента,
	|	ВТ_ДанныеРеестра.КППКонтрагента
	|ИТОГИ
	|	МАКСИМУМ(ИдентификаторОрганизации),
	|	МАКСИМУМ(ИНН),
	|	МАКСИМУМ(КПП),
	|	МАКСИМУМ(НаименованиеПолное),
	|	МАКСИМУМ(Наименование)
	|ПО
	|	Организация";
	
	Возврат Запрос;

КонецФункции

Функция НаименованиеОперации(Выборка, СчетаИсключения)
	
	НаименованиеОперации = "";
	
	ЭтоРасчетыСПоставщиком = БухгалтерскийУчетПовтИсп.СчетВИерархии(
		Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	ЭтоРасчетыСПокупателем = БухгалтерскийУчетПовтИсп.СчетВИерархии(
		Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	ЭтоРасчетыСНеопределеннойСтороной = БухгалтерскийУчетПовтИсп.СчетВИерархии(
		Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	
	НаименованиеОперацииРеализация = НСтр("ru='Реализация'");
	
	Если БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) Тогда
		
		Если Не ЗначениеЗаполнено(Выборка.ВидПрочихДоходовИРасходов) Тогда
			НаименованиеОперации = "";
		ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы Тогда
			НаименованиеОперации = НСтр("ru='КурсовыеРазницы'");
		ИначеЕсли Выборка.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате Тогда
			НаименованиеОперации = НСтр("ru='Санкции'");
		ИначеЕсли Выборка.КорСубконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.СуммовыеРазницы") Тогда
			НаименованиеОперации = НСтр("ru='СуммовыеРазницы'");
		ИначеЕсли Выборка.КорСубконто1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ") Тогда
			НаименованиеОперации = НСтр("ru='КурсовыеРазницыУЕ'");
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ИзменениеУсловийАренды") Тогда
		НаименованиеОперации = НСтр("ru='КорректировкаПоступления'");
		
	ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ПоступлениеВАренду") Тогда
		НаименованиеОперации = НСтр("ru='Поступление'");
		
	ИначеЕсли СчетаИсключения.Найти(Выборка.КорСчет) <> Неопределено
		И Выборка.Дебет > 0 Тогда
		НаименованиеОперации = НСтр("ru='КорректировкаРеализации'");
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НаименованиеОперации) Тогда
		// Строка уже отработана
	ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаПоступления")
		ИЛИ ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		НаименованиеОперации = НСтр("ru='КорректировкаПоступления'");

	ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") Тогда
		НаименованиеОперации = НСтр("ru='КорректировкаРеализации'");
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам) Тогда
		
		Если Выборка.Дебет > 0 Тогда
			НаименованиеОперации = НСтр("ru='ВозвратЗайма'");
		ИначеЕсли Выборка.Кредит > 0 Тогда
			НаименованиеОперации = НСтр("ru='Займ'");
		Иначе
			НаименованиеОперации = НСтр("ru='ОперацииПоЗаймам'");
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямВал) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыПоПретензиямУЕ) Тогда
		
		НаименованиеОперации = НСтр("ru='Претензия'");
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ДенежныеДокументы)
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ДенежныеДокументыВал) Тогда
		
		Если Выборка.Кредит > 0 Тогда
			НаименованиеОперации = НСтр("ru='ПоступлениеДенежныхДокументов'");
			
		ИначеЕсли Выборка.Дебет > 0 Тогда
			НаименованиеОперации = НСтр("ru='ВыдачаДенежныхДокументов'");
			
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Касса) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.РасчетныеСчета) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ВалютныеСчета) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.СпециальныеСчета) Тогда
		
		Если Выборка.Кредит > 0 Тогда
			
			Если ЭтоРасчетыСПоставщиком Тогда
				НаименованиеОперации = НСтр("ru='ВозвратСредствОтПоставщика'");
				
			ИначеЕсли ЭтоРасчетыСПокупателем Тогда
				НаименованиеОперации = НСтр("ru='ОплатаОтПокупателя'");
				
			Иначе
				НаименованиеОперации = НСтр("ru='ПоступлениеСредствПрочее'");
				
			КонецЕсли;
			
		ИначеЕсли Выборка.Дебет > 0 Тогда
			
			Если ЭтоРасчетыСПоставщиком Тогда
				НаименованиеОперации = НСтр("ru='ОплатаПоставщику'");
				
			ИначеЕсли ЭтоРасчетыСНеопределеннойСтороной Тогда
				НаименованиеОперации = НСтр("ru='ОплатаПрочая'");
				
			ИначеЕсли ЭтоРасчетыСПокупателем Тогда
				НаименованиеОперации = НСтр("ru='ВозвратСредствПокупателю'");
				
			Иначе
				НаименованиеОперации = НСтр("ru='ОплатаПрочая'");

			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.Продажи) И (Выборка.Дебет > 0) Тогда
		НаименованиеОперации = НаименованиеОперацииРеализация;

	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.КорСчет, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы) 
		И НЕ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
		И Выборка.Дебет > 0 Тогда
		НаименованиеОперации = НаименованиеОперацииРеализация;

	ИначеЕсли (БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками) 
		ИЛИ БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами))
		И Выборка.Кредит <> 0 Тогда
		НаименованиеОперации = НСтр("ru='Поступление'");

	ИначеЕсли БухгалтерскийУчетПовтИсп.СчетВИерархии(Выборка.Счет, ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками) Тогда
		Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Выборка.Дебет <> 0 Тогда
			НаименованиеОперации = НаименованиеОперацииРеализация;

		ИначеЕсли Выборка.Кредит <> 0 Тогда
			НаименованиеОперации = НСтр("ru='ОплатаОтПокупателя'");
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(НаименованиеОперации)Тогда
		НаименованиеОперации = НСтр("ru='СторноДокумента'");
	КонецЕсли;
	
	Возврат НаименованиеОперации;
	
КонецФункции

Функция ПреобразоватьТекстВТаблицу(ПараметрыМетода, ДанныеСервиса)
	
	Если ТипЗНЧ(ДанныеСервиса) <> Тип("Массив")
		ИЛИ ДанныеСервиса.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ТаблицаРасхождений = НовыйТаблицаРасхождений();
	
	Для Каждого ТекущаяСтрока Из ДанныеСервиса Цикл
		
		СуммаПоДаннымКонтрагента = 0;
		СуммаВалПоДаннымКонтрагента = 0;
		НДСПоДаннымКонтрагента =   0;
		СуммаПоДаннымОрганизации = 0;
		СуммаВалПоДаннымОрганизации = 0;
		НДСПоДаннымОрганизации =   0;
		
		НоваяСтрока = ТаблицаРасхождений.Добавить();
		
		НоваяСтрока.Организация = ПараметрыМетода.Организация;
		НоваяСтрока.Контрагент = ПолучитьЗначение(ТекущаяСтрока.Контрагент, "СправочникСсылка.Контрагенты");
		НоваяСтрока.Дата = ПолучитьЗначение(ТекущаяСтрока.Дата, "ДатаJSON");
		НоваяСтрока.ИдентификаторСверкиПоОрганизации = 
			ПолучитьЗначение(ТекущаяСтрока.ИдентификаторСтрокиПоДаннымОрганизации, "УникальныйИдентификатор");
		НоваяСтрока.ИдентификаторСверкиКонтрагенту = 
			ПолучитьЗначение(ТекущаяСтрока.ИдентификаторСтрокиПоДаннымКонтрагента, "УникальныйИдентификатор");
		
		МассивДокументовПоОрганизации = Новый Массив();
		МассивДокументовПоКонтрагенту = Новый Массив();
		
		Для Каждого ТекущаяСтрокаДетально Из ТекущаяСтрока.ДокументыПоДаннымОрганизации Цикл
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.ИдентификаторСверкиПоОрганизации) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДанныхДокумента = НовыйСтруктураДокумента();
			
			СтруктураДанныхДокумента.ПредставлениеДокумента =   
				ПолучитьЗначение(ТекущаяСтрокаДетально["ПредставлениеДокумента1СПоДаннымОрганизации"], "Строка", "");
			СтруктураДанныхДокумента.ВидДокумента =             
				ПолучитьЗначение(ТекущаяСтрокаДетально["ВидДокументаПоДаннымОрганизации"], "Строка", "");
				
			СтруктураДанныхДокумента.Операция =                 
				ПолучитьЗначение(ТекущаяСтрокаДетально["ОперацияПоДаннымОрганизации"], 
				"ПеречислениеСсылка.СервисСверкиРасчетовВидыОпераций", 
				Перечисления.СервисСверкиРасчетовВидыОпераций.ПустаяСсылка());
				
			СтруктураДанныхДокумента.ДатаИзменения =   ПолучитьЗначение(ТекущаяСтрокаДетально["ДатаИзмененияПоДаннымОрганизации"], "ДатаJSON", "");
			СтруктураДанныхДокумента.НомерДокумента =           ПолучитьЗначение(ТекущаяСтрокаДетально["НомерДокументаПоДаннымОрганизации"], "Строка", "");
			СтруктураДанныхДокумента.ДатаДокумента =            ПолучитьЗначение(ТекущаяСтрокаДетально["ДатаДокументаПоДаннымОрганизации"], "ДатаJSON", "");
			СтруктураДанныхДокумента.НомерСчетФактуры =         ПолучитьЗначение(ТекущаяСтрокаДетально["НомерСчетФактурыПоДаннымОрганизации"], "Строка", "");
			СтруктураДанныхДокумента.ДатаСчетФактуры =          ПолучитьЗначение(ТекущаяСтрокаДетально["ДатаСчетФактурыПоДаннымОрганизации"], "ДатаJSON", "");
			СтруктураДанныхДокумента.ИсходныйНомерДокумента1С = ПолучитьЗначение(ТекущаяСтрокаДетально["ИсходныйНомерДокумента1СПоДаннымОрганизации"], "Строка", "");
			СтруктураДанныхДокумента.НДС =                      ПолучитьЗначение(ТекущаяСтрокаДетально["НДСПоДаннымОрганизации"], "Число", "");
			СтруктураДанныхДокумента.Сумма =                    ПолучитьЗначение(ТекущаяСтрокаДетально["СуммаПоДаннымОрганизации"], "Число", "");
			СтруктураДанныхДокумента.СуммаВал =                    ПолучитьЗначение(ТекущаяСтрокаДетально["СуммаВалПоДаннымОрганизации"], "Число", "");
			СтруктураДанныхДокумента.ИдентификаторДокумента =  ПолучитьЗначение(ТекущаяСтрокаДетально["УИДДокументаПоДаннымОрганизации"], "УникальныйИдентификатор", "");
			
			МассивДокументовПоОрганизации.Добавить(СтруктураДанныхДокумента);
			
			СуммаПоДаннымОрганизации = СуммаПоДаннымОрганизации + СтруктураДанныхДокумента.Сумма;
			СуммаВалПоДаннымОрганизации = СуммаВалПоДаннымОрганизации + СтруктураДанныхДокумента.СуммаВал;
			НДСПоДаннымОрганизации =   НДСПоДаннымОрганизации + СтруктураДанныхДокумента.НДС;
			
		КонецЦикла;
		
		Для Каждого ТекущаяСтрокаДетально Из ТекущаяСтрока.ДокументыПоДаннымКонтрагента Цикл
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.ИдентификаторСверкиКонтрагенту) Тогда
				Продолжить;
			КонецЕсли;	
			
			СтруктураДанныхДокумента = НовыйСтруктураДокумента();
			
			СтруктураДанныхДокумента.ПредставлениеДокумента =   ПолучитьЗначение(ТекущаяСтрокаДетально["ПредставлениеДокумента1СПоДаннымКонтрагента"], "Строка", "");
			СтруктураДанныхДокумента.ВидДокумента =             ПолучитьЗначение(ТекущаяСтрокаДетально["ВидДокументаПоДаннымКонтрагента"], "Строка", "");
			СтруктураДанныхДокумента.Операция =                 ПолучитьЗначение(ТекущаяСтрокаДетально["ОперацияПоДаннымКонтрагента"], 
				"ПеречислениеСсылка.СервисСверкиРасчетовВидыОпераций", Перечисления.СервисСверкиРасчетовВидыОпераций.ПустаяСсылка());
			СтруктураДанныхДокумента.ДатаИзменения =            ПолучитьЗначение(ТекущаяСтрокаДетально["ДатаИзмененияПоДаннымКонтрагента"], "ДатаJSON", "");
			СтруктураДанныхДокумента.НомерДокумента =           ПолучитьЗначение(ТекущаяСтрокаДетально["НомерДокументаПоДаннымКонтрагента"], "Строка", "");
			СтруктураДанныхДокумента.ДатаДокумента =            ПолучитьЗначение(ТекущаяСтрокаДетально["ДатаДокументаПоДаннымКонтрагента"], "ДатаJSON", "");
			СтруктураДанныхДокумента.НомерСчетФактуры =         ПолучитьЗначение(ТекущаяСтрокаДетально["НомерСчетФактурыПоДаннымКонтрагента"], "Строка", "");
			СтруктураДанныхДокумента.ДатаСчетФактуры =          ПолучитьЗначение(ТекущаяСтрокаДетально["ДатаСчетФактурыПоДаннымКонтрагента"], "ДатаJSON", "");
			СтруктураДанныхДокумента.ИсходныйНомерДокумента1С = ПолучитьЗначение(ТекущаяСтрокаДетально["ИсходныйНомерДокумента1СПоДаннымКонтрагента"], "Строка", "");
			СтруктураДанныхДокумента.НДС =                      ПолучитьЗначение(ТекущаяСтрокаДетально["НДСПоДаннымКонтрагента"], "Число", "");
			СтруктураДанныхДокумента.Сумма =                    ПолучитьЗначение(ТекущаяСтрокаДетально["СуммаПоДаннымКонтрагента"], "Число", "");
			СтруктураДанныхДокумента.СуммаВал =                 ПолучитьЗначение(ТекущаяСтрокаДетально["СуммаВалПоДаннымКонтрагента"], "Число", "");
			СтруктураДанныхДокумента.ИдентификаторДокумента =   ПолучитьЗначение( ТекущаяСтрокаДетально["УИДДокументаПоДаннымКонтрагента"], "УникальныйИдентификатор", "");
			
			МассивДокументовПоКонтрагенту.Добавить(СтруктураДанныхДокумента);
			
			СуммаПоДаннымКонтрагента = СуммаПоДаннымКонтрагента + СтруктураДанныхДокумента.Сумма;
			СуммаВалПоДаннымКонтрагента = СуммаВалПоДаннымКонтрагента + СтруктураДанныхДокумента.СуммаВал;
			НДСПоДаннымКонтрагента =   НДСПоДаннымКонтрагента + СтруктураДанныхДокумента.НДС;
			
		КонецЦикла;
		
		НоваяСтрока.МассивДокументовПоОрганизации = МассивДокументовПоОрганизации;
		НоваяСтрока.МассивДокументовПоКонтрагенту = МассивДокументовПоКонтрагенту;
		
		НоваяСтрока.СуммаПоДаннымКонтрагента =    СуммаПоДаннымКонтрагента;
		НоваяСтрока.СуммаВалПоДаннымКонтрагента = СуммаВалПоДаннымКонтрагента;
		НоваяСтрока.НДСПоДаннымКонтрагента =      НДСПоДаннымКонтрагента;
		НоваяСтрока.СуммаПоДаннымОрганизации =    СуммаПоДаннымОрганизации;
		НоваяСтрока.СуммаВалПоДаннымОрганизации = СуммаВалПоДаннымОрганизации;
		НоваяСтрока.НДСПоДаннымОрганизации =      НДСПоДаннымОрганизации;
		
	КонецЦикла;
	
	Возврат ТаблицаРасхождений;
	
КонецФункции

Функция ПолучитьЗначение(Знач ИсходноеЗначение, ТипЗначения = "", ЗначениеПоУмолчанию = Неопределено)
	
	Если ИсходноеЗначение = Неопределено Тогда
		Значение = ЗначениеПоУмолчанию;
	ИначеЕсли ТипЗначения = "СправочникСсылка.Контрагенты" Тогда
		Значение = РаботаСКонтрагентамиБП.НайтиКонтрагентаПоИНН_КПП(ИсходноеЗначение);
		Если Не ЗначениеЗаполнено(Значение) Тогда
			// Из сервиса может вернуться неактуальный КПП, произведем поиск контрагента по ИНН
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН";
			Запрос.УстановитьПараметр("ИНН", ИсходноеЗначение.ИНН);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Значение = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Структура") Тогда
		Значение = ИсходноеЗначение;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Массив") Тогда
		Значение = ИсходноеЗначение;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Дата") Тогда
		Значение = ИсходноеЗначение;
	ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Строка") И ВРег(ИсходноеЗначение) = "NONE" Тогда
		Значение = ЗначениеПоУмолчанию;
	ИначеЕсли ТипЗначения = "" Тогда
		Значение = ИсходноеЗначение;
	ИначеЕсли ТипЗначения = "ДатаJSON" Тогда
		Значение = ПрочитатьДатуJSON(ИсходноеЗначение, ФорматДатыJSON.ISO);
	ИначеЕсли ТипЗначения = "Дата" Тогда
		Значение = СтрокаВДату(ИсходноеЗначение);
	ИначеЕсли ТипЗначения = "Число" Тогда
		Значение = СтрокаВЧисло(ИсходноеЗначение, ЗначениеПоУмолчанию);
	ИначеЕсли ТипЗначения = "ПеречислениеСсылка.СервисСверкиРасчетовВидыОпераций" Тогда
		Значение = Перечисления.СервисСверкиРасчетовВидыОпераций[ИсходноеЗначение];
	ИначеЕсли ТипЗначения = "УникальныйИдентификатор" И ЗначениеЗаполнено(ИсходноеЗначение) Тогда
		Значение = Новый УникальныйИдентификатор(ИсходноеЗначение);
	Иначе
		ТребуемыйТип	= Новый ОписаниеТипов(ТипЗначения);
		Значение		= ТребуемыйТип.ПривестиЗначение(ИсходноеЗначение);
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Значение = ЗначениеПоУмолчанию;
	КонецЕсли;
		
	Возврат Значение;
	
КонецФункции

Функция НовыйТаблицаРасхождений()
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Контрагент",                             Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПараметров.Колонки.Добавить("Организация",                            Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПараметров.Колонки.Добавить("Дата",                                   Новый ОписаниеТипов("Дата"));
	ТаблицаПараметров.Колонки.Добавить("ИдентификаторСверкиПоОрганизации",       Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаПараметров.Колонки.Добавить("ИдентификаторСверкиКонтрагенту",         Новый ОписаниеТипов("УникальныйИдентификатор"));
	ТаблицаПараметров.Колонки.Добавить("СуммаПоДаннымКонтрагента",               Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПараметров.Колонки.Добавить("СуммаВалПоДаннымКонтрагента",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПараметров.Колонки.Добавить("НДСПоДаннымКонтрагента",                 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)) );
	ТаблицаПараметров.Колонки.Добавить("СуммаПоДаннымОрганизации",               Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПараметров.Колонки.Добавить("СуммаВалПоДаннымОрганизации",            Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПараметров.Колонки.Добавить("НДСПоДаннымОрганизации",                 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	ТаблицаПараметров.Колонки.Добавить("МассивДокументовПоОрганизации",          Новый ОписаниеТипов("Массив"));
	ТаблицаПараметров.Колонки.Добавить("МассивДокументовПоКонтрагенту",          Новый ОписаниеТипов("Массив"));
	
	Возврат ТаблицаПараметров;

КонецФункции

Функция НовыйТаблицаКонтрагентов()
	
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаКонтрагентов.Колонки.Добавить("НаименованиеКонтрагента",       Новый ОписаниеТипов("Строка"));
	ТаблицаКонтрагентов.Колонки.Добавить("НаименованиеКонтрагентаПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаКонтрагентов.Колонки.Добавить("КППКонтрагента",                Новый ОписаниеТипов("Строка"));
	ТаблицаКонтрагентов.Колонки.Добавить("ИННКонтрагента",                Новый ОписаниеТипов("Строка"));
	ТаблицаКонтрагентов.Колонки.Добавить("ИдентификаторКонтрагента",      Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаКонтрагентов;

КонецФункции

Функция НовыйСтруктураДокумента()
	
	ПараметрыДокумента = Новый Структура();
	ПараметрыДокумента.Вставить("ПредставлениеДокумента");
	ПараметрыДокумента.Вставить("ВидДокумента");
	ПараметрыДокумента.Вставить("Операция");
	ПараметрыДокумента.Вставить("ДатаИзменения");
	ПараметрыДокумента.Вставить("НомерДокумента");
	ПараметрыДокумента.Вставить("ДатаДокумента");
	ПараметрыДокумента.Вставить("НомерСчетФактуры");
	ПараметрыДокумента.Вставить("ДатаСчетФактуры");
	ПараметрыДокумента.Вставить("ИсходныйНомерДокумента1С");
	ПараметрыДокумента.Вставить("НДС");
	ПараметрыДокумента.Вставить("Сумма");
	ПараметрыДокумента.Вставить("СуммаВал");
	ПараметрыДокумента.Вставить("ИдентификаторДокумента");
	
	Возврат ПараметрыДокумента;
	
КонецФункции

Функция НовыйСтруктураРасхождений()
	
	СтруктураРасхождений = Новый Структура();
	
	СтруктураРасхождений.Вставить("НетУОрганизацииКоличество",        0);
	СтруктураРасхождений.Вставить("НетУОрганизацииСумма",             0);
	СтруктураРасхождений.Вставить("НетУОрганизацииМассивОрганизаций", Новый Массив());
	
	СтруктураРасхождений.Вставить("НетУКонтрагентаКоличество",        0);
	СтруктураРасхождений.Вставить("НетУКонтрагентаСумма",             0);
	СтруктураРасхождений.Вставить("НетУКонтрагентаКонтрагенты",       Новый Массив());
	
	СтруктураРасхождений.Вставить("РазличаютсяРеквизитыКоличество",   0);
	СтруктураРасхождений.Вставить("РазличаютсяРеквизитыСумма",        0);
	СтруктураРасхождений.Вставить("РазличаютсяРеквизитыКонтрагенты",  Новый Массив());
	
	Возврат СтруктураРасхождений;
	
КонецФункции

Функция НовыйТаблицаОшибок()
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОшибок.Колонки.Добавить("Ошибки",      Новый ОписаниеТипов("Массив"));
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Функция СтрокаВДату(Значение)
	
	Значение = СтрЗаменить(Значение, " ", "");
	Значение = СокрЛП(СтрЗаменить(Значение, ":", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "-", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, "T", ""));
	Значение = СокрЛП(СтрЗаменить(Значение, ".", ""));
	
	ОписаниеТипа = Новый ОписаниеТипов("Дата");
	Результат = ОписаниеТипа.ПривестиЗначение(Значение);
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаВЧисло(Значение, ЗначениеПоУмолчанию = Неопределено)
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Результат = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		Результат = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КлючОбсужденияСистемыВзаимодействияСверка(ИдентификаторПользователя)
	
	Возврат "ЕстьРасхожденияСверки" + Строка(ИдентификаторПользователя);
	
КонецФункции

Функция ЛичноеОбсуждениеПользователей(ИдентификаторПользователяСВ1, ИдентификаторПользователяСВ2)
	
	КлючЧата   = КлючОбсужденияСистемыВзаимодействияСверка(ИдентификаторПользователяСВ1);
	Отбор      = Новый ОтборОбсужденийСистемыВзаимодействия;
	Отбор.Ключ = КлючЧата;
	Отбор.ТекущийПользовательЯвляетсяУчастником = Истина;
	Чаты = СистемаВзаимодействия.ПолучитьОбсуждения(Отбор);
	
	Если Чаты.Количество() > 0 Тогда
		Возврат Чаты[0];
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЛичноеОбсуждениеПользователей = СистемаВзаимодействия.СоздатьОбсуждение();
	ЛичноеОбсуждениеПользователей.Групповое = Ложь;
	ЛичноеОбсуждениеПользователей.Ключ = КлючЧата;
	ЛичноеОбсуждениеПользователей.Участники.Добавить(ИдентификаторПользователяСВ1);
	ЛичноеОбсуждениеПользователей.Участники.Добавить(ИдентификаторПользователяСВ2);
	ЛичноеОбсуждениеПользователей.Записать();
	
	Возврат ЛичноеОбсуждениеПользователей;
	
КонецФункции

Функция ИдентификаторБотаВСистемеВзаимодействия() 
	
	ИдентификаторБота = Неопределено;
	Бот = Пользователи.СвойстваПользователяИБ(ИмяСлужебногоПользователя());
	Если Бот <> Неопределено Тогда
		ИдентификаторБота = ИдентификаторПользователяСистемыВзаимодействия(Бот.УникальныйИдентификатор);
	КонецЕсли;
	Если ИдентификаторБота = Неопределено Тогда
		Если Бот <> Неопределено Тогда
			Попытка
				ПользовательСистемыВзаимодействия = СистемаВзаимодействия.СоздатьПользователя(Бот.ПользовательИБ);
				ПользовательСистемыВзаимодействия.Картинка = БиблиотекаКартинок.СервисСверкиРасчетовЛогоМалое;
				ПользовательСистемыВзаимодействия.Записать();
				ИдентификаторБота = ПользовательСистемыВзаимодействия.Идентификатор;
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание пользователя системы взаимодействия'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ИдентификаторБота = Неопределено;
			КонецПопытки;
		КонецЕсли;
	Иначе
		ПользовательСистемыВзаимодействия = СистемаВзаимодействия.ПолучитьПользователя(ИдентификаторБота);
		Если ПользовательСистемыВзаимодействия.Картинка.Вид = ВидКартинки.Пустая Тогда
			ПользовательСистемыВзаимодействия.Картинка = БиблиотекаКартинок.СервисСверкиРасчетовЛогоМалое;
			ПользовательСистемыВзаимодействия.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИдентификаторБота;
	
КонецФункции

Функция ИдентификаторПользователяСистемыВзаимодействия(ИдентификаторПользователяИБ) 
	
	Попытка
		Идентификатор = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИдентификаторПользователяИБ);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение идентификатора пользователя системы взаимодействия'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Идентификатор = Неопределено;
	КонецПопытки;
	
	Возврат Идентификатор;
	
КонецФункции

Процедура УдалитьСтароеОбсуждение(ИдентификаторПользователя = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = КлючОбсужденияСистемыВзаимодействияСверка(ИдентификаторПользователя);
	
	Если Не СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат;
	КонецЕсли;
	
	Обсуждение = Неопределено;
	
	Попытка
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
	Исключение
		ВидОперации = СтрШаблон("Поиск обсуждения ""%1"" системы взаимодействия по ключу", ИмяСервиса());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(
			ВидОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Обсуждение <> Неопределено Тогда
		Если Обсуждение.Участники.Количество() Тогда
			Обсуждение.Участники.Очистить();
			Попытка
				Обсуждение.Записать();
			Исключение
				ВидОперации = СтрШаблон("Очистка участников обсуждения ""%1""", ИмяСервиса());
				ЭлектронноеВзаимодействие.ОбработатьОшибку(
					ВидОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ОбсуждениеПользователяСБотом(ИдентификаторПользователя)

	ПользовательСВ = ИдентификаторПользователяСистемыВзаимодействия(ИдентификаторПользователя);
	БотСВ = ИдентификаторБотаВСистемеВзаимодействия();
	
	Возврат ЛичноеОбсуждениеПользователей(ПользовательСВ, БотСВ);
	
КонецФункции

Функция ОповеститьОРасхождениях(СтруктураРасхождений)
	
	СообщениеОРасхождениях = СообщениеОРасхождениях(СтруктураРасхождений);
	ОповеститьВсехПользователейОНаличииРасхождений(СообщениеОРасхождениях);
	
КонецФункции

Функция СообщениеОРасхождениях(СтруктураРасхождений) 
	
	ТекстОшибки = НСтр("ru = 'Обнаружены расхождения:'");
	Если СтруктураРасхождений.НетУОрганизацииКоличество > 0 Тогда
		СформироватьТекстОшибки(СтруктураРасхождений, ТекстОшибки, Истина);
	КонецЕсли;
	Если СтруктураРасхождений.НетУКонтрагентаКоличество > 0 Тогда
		СформироватьТекстОшибки(СтруктураРасхождений, ТекстОшибки, Ложь, Истина);
	КонецЕсли;
	Если СтруктураРасхождений.РазличаютсяРеквизитыКоличество > 0 Тогда
		СформироватьТекстОшибки(СтруктураРасхождений, ТекстОшибки, Ложь, Ложь, Истина);
	КонецЕсли;
	
	СообщениеОРасхождениях = Новый Массив;
	СообщениеОРасхождениях.Добавить(ТекстОшибки);
	
	Возврат Новый ФорматированнаяСтрока(СообщениеОРасхождениях);
	
КонецФункции

Процедура СформироватьТекстОшибки(СтруктураРасхождений, ТекстОшибки, НетДокументаУОрганизации = Ложь, НетДокументаУКонтрагента = Ложь, РасходятсяРеквизиты = Ложь)

	Если НетДокументаУОрганизации Тогда
		КоличествоПредметов   = СтруктураРасхождений.НетУОрганизацииКоличество;
		СуммаРасхождения      = СтруктураРасхождений.НетУОрганизацииСумма;
		МассивСубъектовОшибки = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СтруктураРасхождений.НетУОрганизацииМассивОрганизаций);
		ШаблонТекстаТекущейОшибки1 = НСтр("ru = 'организацией %1'");
		ШаблонТекстаТекущейОшибки2 = НСтр("ru = 'организациями %1 и %2'");
		ШаблонТекстаТекущейОшибки3 = НСтр("ru = 'организациями %1, %2 и еще %3'");
		ШаблонИтоговойОшибки       = НСтр("ru = '%1
			|%2 на сумму %3 руб. не %4 %5'");
	ИначеЕсли НетДокументаУКонтрагента Тогда
		КоличествоПредметов   = СтруктураРасхождений.НетУКонтрагентаКоличество;
		СуммаРасхождения      = СтруктураРасхождений.НетУКонтрагентаСумма;
		МассивСубъектовОшибки = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СтруктураРасхождений.НетУКонтрагентаКонтрагенты);
		ШаблонТекстаТекущейОшибки1 = НСтр("ru = 'контрагентом %1'");
		ШаблонТекстаТекущейОшибки2 = НСтр("ru = 'контрагентами %1 и %2'");
		ШаблонТекстаТекущейОшибки3 = НСтр("ru = 'контрагентами %1, %2 и еще %3'");
		ШаблонИтоговойОшибки       = НСтр("ru = '%1
			|%2 на сумму %3 руб. не %4 %5'");
	ИначеЕсли РасходятсяРеквизиты Тогда
		КоличествоПредметов   = СтруктураРасхождений.РазличаютсяРеквизитыКоличество;
		СуммаРасхождения      = СтруктураРасхождений.РазличаютсяРеквизитыСумма;
		МассивСубъектовОшибки = ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СтруктураРасхождений.РазличаютсяРеквизитыКонтрагенты);
		ШаблонТекстаТекущейОшибки1 = НСтр("ru = 'контрагенту %1'");
		ШаблонТекстаТекущейОшибки2 = НСтр("ru = 'контрагентам %1 и %2'");
		ШаблонТекстаТекущейОшибки3 = НСтр("ru = 'контрагентам %1, %2 и еще %3'");
		ШаблонИтоговойОшибки       = НСтр("ru = '%1
			|%2 на сумму %3 руб. с различающимися реквизитами по %4'")
	Иначе
		Возврат;
	КонецЕсли;
	
	Если МассивСубъектовОшибки.Количество() = 1 Тогда
		ТекстТекущейОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекстаТекущейОшибки1,
			МассивСубъектовОшибки[0]);
	ИначеЕсли МассивСубъектовОшибки.Количество() = 2 Тогда
		ТекстТекущейОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекстаТекущейОшибки2, 
			МассивСубъектовОшибки[0],
			МассивСубъектовОшибки[1]);
	Иначе
		ТекстТекущейОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстаТекущейОшибки3,
			МассивСубъектовОшибки[0],
			МассивСубъектовОшибки[1],
			МассивСубъектовОшибки.Количество()-2);
	КонецЕсли;
	
	Предмет             = "документ,документа,документов,м,,,,0";
	ФорматнаяСтрока     = "Л = ru_RU";
	ПрописьЧисла        = ЧислоПрописью(КоличествоПредметов, ФорматнаяСтрока, Предмет);
	ИндексПредмета      = СтрНайти(ПрописьЧисла, "док");
	ТекстПредметы       = Строка(КоличествоПредметов) + " " + Сред(ПрописьЧисла, ИндексПредмета, СтрДлина(ПрописьЧисла)- ИндексПредмета - 3);
	Если РасходятсяРеквизиты Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИтоговойОшибки, 
			ТекстОшибки, ТекстПредметы, СуммаРасхождения, ТекстТекущейОшибки);
	Иначе
		ПоследняяЦифра      = Прав(Строка(КоличествоПредметов),1); 
		ТекстОтражено      = ?(ПоследняяЦифра = "1", НСтр("ru = 'отражен'"),  НСтр("ru = 'отражено'")); 
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИтоговойОшибки, 
			ТекстОшибки, ТекстПредметы, СуммаРасхождения, ТекстОтражено, ТекстТекущейОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ОповеститьВсехПользователейОНаличииРасхождений(СообщениеОРасхождениях)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ,
	|	Пользователи.Наименование КАК Наименование,
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Служебный = ЛОЖЬ
	|	И Пользователи.Недействителен = ЛОЖЬ
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ
	|	И Пользователи.Ссылка <> &ПользовательНеУказан";
	
	Запрос.УстановитьПараметр("ПользовательНеУказан", Пользователи.СсылкаНеуказанногоПользователя());
	
	ТаблицаВыборки = Запрос.Выполнить().Выгрузить();
	ТаблицаПользователей = ТаблицаВыборки.СкопироватьКолонки();
	Для каждого СтрокаВыборки Из ТаблицаВыборки Цикл
		Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхБухгалтерии", СтрокаВыборки.Пользователь, Ложь) Тогда
			НоваяСтрока = ТаблицаПользователей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);
		КонецЕсли;
	КонецЦикла;
	
	ОтправитьСообщенияОРасхождениях(ТаблицаПользователей.ВыгрузитьКолонку("ИдентификаторПользователяИБ"), СообщениеОРасхождениях);
	
КонецФункции

Процедура ОтправитьСообщенияОРасхождениях(ИдентификаторыПользователей, СообщениеОРасхождениях)
	
	Для каждого ИдентификаторПользователя Из ИдентификаторыПользователей Цикл
		
		Действия = Новый СписокЗначений;
		Действия.Добавить("ПоказатьРасхождения", "Подробнее");
		ОтправитьСообщениеСистемыВзаимодействия(ИдентификаторПользователя, СообщениеОРасхождениях, Действия);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьСообщениеСистемыВзаимодействия(ИдентификаторПользователяИБ, ТекстСообщения, Действия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Получатель = ИдентификаторПользователяСистемыВзаимодействия(ИдентификаторПользователяИБ);
	Если Получатель = Неопределено Тогда
		Возврат; // Пользователь не зарегистрирован в системе взаимодействия.
	КонецЕсли;
	
	УдалитьСтароеОбсуждение(ИдентификаторПользователяИБ);
	
	Обсуждение = ОбсуждениеПользователяСБотом(ИдентификаторПользователяИБ);
	
	Если Обсуждение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторБота = ИдентификаторБотаВСистемеВзаимодействия();
	Если ИдентификаторБота = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Сообщение = СистемаВзаимодействия.СоздатьСообщение(Обсуждение.Идентификатор);
	
	Сообщение.Автор = ИдентификаторБота;
	Сообщение.Текст = ТекстСообщения;
	Сообщение.Получатели.Добавить(Получатель);
	Для каждого Действие Из Действия Цикл
		Сообщение.Действия.Добавить(Действие.Значение, Действие.Представление);
	КонецЦикла;
	
	Сообщение.Записать();
	
КонецПроцедуры

#КонецОбласти