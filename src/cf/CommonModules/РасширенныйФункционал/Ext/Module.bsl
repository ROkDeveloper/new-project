// Содержимое модуля отличается в версиях ПРОФ и КОРП.
// В версии ПРОФ отсутствует:
// - тело экспортных процедур (остаются только сигнатуры методов)
// - неэкспортные процедуры и все функции.
// Поэтому не допускается реализация в модуле экспортных функций: вместо них следует использовать процедуры с возвращаемым параметром.

Процедура ЗаполнитьГраницыКонтролируемости() Экспорт
	
	РегистрыСведений.ГраницыКонтролируемостиСделок.ЗаполнитьГраницыКонтролируемости();
	
КонецПроцедуры

Процедура ЗаполнитьКодыКлассификаторовВПредметахКонтролируемыхСделок(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыКонтролируемыхСделок.УдалитьКодПоТНВЭД КАК Код
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоТНВЭД = КлассификаторТНВЭД.Код
	|ГДЕ
	|	КлассификаторТНВЭД.Код ЕСТЬ NULL
	|	И ПредметыКонтролируемыхСделок.УдалитьКодПоТНВЭД <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтролируемаяСделка.УдалитьКодТНВЭД
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО КонтролируемаяСделка.УдалитьКодТНВЭД = КлассификаторТНВЭД.Код
	|ГДЕ
	|	КлассификаторТНВЭД.Код ЕСТЬ NULL
	|	И КонтролируемаяСделка.УдалитьКодТНВЭД <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыКонтролируемыхСделок.УдалитьКодПоОКП КАК Код
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКП = ОбщероссийскийКлассификаторПродукции.Код
	|ГДЕ
	|	ОбщероссийскийКлассификаторПродукции.Код ЕСТЬ NULL
	|	И ПредметыКонтролируемыхСделок.УдалитьКодПоОКП <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтролируемаяСделка.УдалитьКодОКП
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
	|		ПО КонтролируемаяСделка.УдалитьКодОКП = ОбщероссийскийКлассификаторПродукции.Код
	|ГДЕ
	|	ОбщероссийскийКлассификаторПродукции.Код ЕСТЬ NULL
	|	И КонтролируемаяСделка.УдалитьКодОКП <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД КАК Код
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|ГДЕ
	|	КлассификаторВидовЭкономическойДеятельности.Код ЕСТЬ NULL
	|	И ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтролируемаяСделка.УдалитьКодОКВЭД
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО КонтролируемаяСделка.УдалитьКодОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|ГДЕ
	|	КлассификаторВидовЭкономическойДеятельности.Код ЕСТЬ NULL
	|	И КонтролируемаяСделка.УдалитьКодОКВЭД <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 КАК Код
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	КлассификаторОКВЭД2.Код ЕСТЬ NULL
	|	И ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтролируемаяСделка.УдалитьКодОКВЭД2
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО КонтролируемаяСделка.УдалитьКодОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	КлассификаторОКВЭД2.Код ЕСТЬ NULL
	|	И КонтролируемаяСделка.УдалитьКодОКВЭД2 <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПредметыКонтролируемыхСделок.УдалитьКодПоОКПД2 КАК Код
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКПД2 = КлассификаторОКПД2.Код
	|ГДЕ
	|	КлассификаторОКПД2.Код ЕСТЬ NULL
	|	И ПредметыКонтролируемыхСделок.УдалитьКодПоОКПД2 <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтролируемаяСделка.УдалитьКодОКПД2
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
	|		ПО КонтролируемаяСделка.УдалитьКодОКПД2 = КлассификаторОКПД2.Код
	|ГДЕ
	|	КлассификаторОКПД2.Код ЕСТЬ NULL
	|	И КонтролируемаяСделка.УдалитьКодОКПД2 <> """"";
	
	РезультатПакетногоЗапроса = Запрос.ВыполнитьПакет();
	
	// Таблица с кодами, которые нужно создать.
	ТаблицаНовыхКодов = Новый ТаблицаЗначений;
	ТаблицаНовыхКодов.Колонки.Добавить("ИмяСправочника");
	ТаблицаНовыхКодов.Колонки.Добавить("ТаблицаКодов");
	ТаблицаНовыхКодов.Колонки.Добавить("МаксимальнаяДлинаКода");
	
	// ТНВЭД
	СтрокаТНВЭД					 = ТаблицаНовыхКодов.Добавить();
	СтрокаТНВЭД.ИмяСправочника	 = "КлассификаторТНВЭД";
	СтрокаТНВЭД.ТаблицаКодов	 = РезультатПакетногоЗапроса[0].Выгрузить();
	СтрокаТНВЭД.МаксимальнаяДлинаКода = 10;
	// ОКП
	СтрокаОКП					 = ТаблицаНовыхКодов.Добавить();
	СтрокаОКП.ИмяСправочника	 = "ОбщероссийскийКлассификаторПродукции";
	СтрокаОКП.ТаблицаКодов		 = РезультатПакетногоЗапроса[1].Выгрузить();
	СтрокаОКП.МаксимальнаяДлинаКода = 10;
	// ОКВЭД
	СтрокаОКВЭД					 = ТаблицаНовыхКодов.Добавить();
	СтрокаОКВЭД.ИмяСправочника	 = "КлассификаторВидовЭкономическойДеятельности";
	СтрокаОКВЭД.ТаблицаКодов	 = РезультатПакетногоЗапроса[2].Выгрузить();
	СтрокаОКВЭД.МаксимальнаяДлинаКода = 8;
	
	// ОКВЭД2
	СтрокаОКВЭД					 = ТаблицаНовыхКодов.Добавить();
	СтрокаОКВЭД.ИмяСправочника	 = "КлассификаторОКВЭД2";
	СтрокаОКВЭД.ТаблицаКодов	 = РезультатПакетногоЗапроса[3].Выгрузить();
	СтрокаОКВЭД.МаксимальнаяДлинаКода = 8;
	
	// ОКПД2
	СтрокаОКВЭД					 = ТаблицаНовыхКодов.Добавить();
	СтрокаОКВЭД.ИмяСправочника	 = "КлассификаторОКПД2";
	СтрокаОКВЭД.ТаблицаКодов	 = РезультатПакетногоЗапроса[3].Выгрузить();
	СтрокаОКВЭД.МаксимальнаяДлинаКода = 12;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНовыхКодов Цикл
		
		ТаблицаКодов = СтрокаТаблицы.ТаблицаКодов;
		
		Если ТаблицаКодов.Количество() > 0 Тогда
			
			ИмяСправочника = СтрокаТаблицы.ИмяСправочника;
			// Заполним таблицу из макетов, в которых хранятся классификаторы
			Если ИмяСправочника = "КлассификаторТНВЭД" Тогда
				ТаблицаИзМакета = Справочники.КлассификаторТНВЭД.ТаблицаКлассификатораТНВЭД();
			ИначеЕсли ИмяСправочника = "ОбщероссийскийКлассификаторПродукции" Тогда
				КлассификаторXML = Справочники.ОбщероссийскийКлассификаторПродукции.ПолучитьМакет("ОбщероссийскийКлассификаторПродукции").ПолучитьТекст();
				ТаблицаИзМакета = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
			ИначеЕсли ИмяСправочника = "КлассификаторВидовЭкономическойДеятельности" Тогда
				
				ПараметрыКлассификатора = ИнтерфейсыВзаимодействияБРО.ПолучитьРасположениеКлассификатораСтатистики(ИмяСправочника);
				
				ОбластьИсточникДанных 	= ПараметрыКлассификатора.ОбластьИсточникДанных; 
				ОтчетИсточникДанных 	= ПараметрыКлассификатора.ОтчетИсточникДанных; 
				СписокВерсий 			= ИнтерфейсыВзаимодействияБРО.ПолучитьВерсииСписковОтчета(ОтчетИсточникДанных);
				Заголовок 				= Метаданные.Справочники[ИмяСправочника].Синоним;
				
				ИмяМакетаСписков = СписокВерсий[СписокВерсий.Количество() - 1].Значение;
				
				ТаблицаИзМакета = ИнтерфейсыВзаимодействияБРО.ПолучитьЗначенияИзСпискаВыбораОтчета(
					ОтчетИсточникДанных, 
					ИмяМакетаСписков, 
					ОбластьИсточникДанных,
					Ложь,
					8);
			ИначеЕсли ИмяСправочника = "КлассификаторОКВЭД2" Тогда
				ТаблицаИзМакета = РегистрыСведений.КлассификаторОКВЭД2.ТаблицаКлассификатора();
			ИначеЕсли ИмяСправочника = "КлассификаторОКПД2" Тогда
				ТаблицаПоиска = Справочники.КлассификаторОКПД2.ТаблицаКлассификатора();
			КонецЕсли;
			
			ТаблицаИзМакета.Индексы.Добавить("Код");
			
			// Создаем новые элементы справочников
			Для Каждого СтрокаНовыхКодов Из ТаблицаКодов Цикл
				Код = СтрокаНовыхКодов.Код;
				
				Если СтрДлина(Код) > СтрокаТаблицы.МаксимальнаяДлинаКода Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Невозможно создать элемент классификатора %1 с кодом %2 по причине:
							|длина кода превышает максимальное значение %3.
							|Необходимо создать элемент с верным кодом и указать его в элементах справочников'"), 
							ИмяСправочника, Код, СтрокаТаблицы.МаксимальнаяДлинаКода);
					ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ТекстСообщения);
					
					Продолжить;
					
				КонецЕсли;
				
				СтрокаИзМакета = ТаблицаИзМакета.Найти(Код, "Код");
				// Если элемент не найден в таблице, то используем вместо наименования код.
				Если СтрокаИзМакета = Неопределено Тогда
					Наименование = СтрокаНовыхКодов.Код;
				Иначе
					Наименование = СтрокаИзМакета.Наименование;
				КонецЕсли;
				ЭлементКлассификатора = Справочники[ИмяСправочника].СоздатьЭлемент();
				ЭлементКлассификатора.Код = Код;
				ЭлементКлассификатора.Наименование = Наименование;
				ЭлементКлассификатора.НаименованиеПолное = Наименование;
				ЭлементКлассификатора.Записать();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПроблемныхОбъектов = 0;
	ОбъектовОбработано = 0;
	
	// Получим элементы в которых необходимо заполнить коды классификаторов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Номенклатура.Ссылка КАК ПредметСделки,
	|	КлассификаторТНВЭД.Ссылка КАК КодТНВЭД,
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка КАК КодОКВЭД,
	|	ОбщероссийскийКлассификаторПродукции.Ссылка КАК КодОКП,
	|	КлассификаторОКВЭД2.Ссылка КАК КодОКВЭД2,
	|	КлассификаторОКПД2.Ссылка КАК КодОКПД2
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО ПредметыКонтролируемыхСделок.ПредметСделки = Номенклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоТНВЭД = КлассификаторТНВЭД.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКП = ОбщероссийскийКлассификаторПродукции.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКПД2 = КлассификаторОКПД2.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	Номенклатура.КодТНВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	И Номенклатура.КодОКВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
	|	И Номенклатура.КодОКП = ЗНАЧЕНИЕ(Справочник.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка)
	|	И Номенклатура.КодОКПД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКПД2.ПустаяСсылка)
	|	И Номенклатура.КодОКВЭД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКВЭД2.ПустаяСсылка)
	|	И (КлассификаторТНВЭД.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторВидовЭкономическойДеятельности.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ОбщероссийскийКлассификаторПродукции.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКВЭД2.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКПД2.Ссылка ЕСТЬ НЕ NULL )";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредметСделки = Выборка.ПредметСделки;
		Попытка
			
			ОбъектПредметСделки			 = ПредметСделки.ПолучитьОбъект();
			ОбъектПредметСделки.КодОКВЭД = Выборка.КодОКВЭД;
			ОбъектПредметСделки.КодОКП	 = Выборка.КодОКП;
			ОбъектПредметСделки.КодТНВЭД = Выборка.КодТНВЭД;
			ОбъектПредметСделки.КодОКПД2 = Выборка.КодОКПД2;
			ОбъектПредметСделки.КодОКВЭД2 = Выборка.КодОКВЭД2;
			
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектПредметСделки);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
		Исключение
			
			// Если не удалось обработать какую-нибудь номенклатуру, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить коды в номенклатуре ""%1"" по причине:
					|%2'"), 
					ПредметСделки,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.Регистратор, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ОсновныеСредства.Ссылка КАК ПредметСделки,
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка КАК КодОКВЭД,
	|	КлассификаторОКВЭД2.Ссылка КАК КодОКВЭД2
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ПО ПредметыКонтролируемыхСделок.ПредметСделки = ОсновныеСредства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	ОсновныеСредства.КодОКВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
	|	И ОсновныеСредства.КодОКВЭД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКВЭД2.ПустаяСсылка)
	|	И (КлассификаторВидовЭкономическойДеятельности.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКВЭД2.Ссылка ЕСТЬ НЕ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	ОбъектыСтроительства.Ссылка,
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка,
	|	КлассификаторОКВЭД2.Ссылка
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|		ПО ПредметыКонтролируемыхСделок.ПредметСделки = ОбъектыСтроительства.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	ОбъектыСтроительства.КодОКВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
	|	И ОбъектыСтроительства.КодОКВЭД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКВЭД2.ПустаяСсылка)
	|	И (КлассификаторВидовЭкономическойДеятельности.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКВЭД2.Ссылка ЕСТЬ НЕ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	НематериальныеАктивы.Ссылка,
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка,
	|	КлассификаторОКВЭД2.Ссылка
	|ИЗ
	|	РегистрСведений.ПредметыКонтролируемыхСделок КАК ПредметыКонтролируемыхСделок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|		ПО ПредметыКонтролируемыхСделок.ПредметСделки = НематериальныеАктивы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО ПредметыКонтролируемыхСделок.УдалитьКодПоОКВЭД2 = КлассификаторОКВЭД2.Код
	|ГДЕ
	|	НематериальныеАктивы.КодОКВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
	|	И НематериальныеАктивы.КодОКВЭД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКВЭД2.ПустаяСсылка)
	|	И (КлассификаторВидовЭкономическойДеятельности.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКВЭД2.Ссылка ЕСТЬ НЕ NULL )";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредметСделки = Выборка.ПредметСделки;
		
		Попытка
			
			ОбъектПредметСделки = ПредметСделки.ПолучитьОбъект();
			ОбъектПредметСделки.КодОКВЭД = Выборка.КодОКВЭД;
			ОбъектПредметСделки.КодОКВЭД2 = Выборка.КодОКВЭД2;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектПредметСделки);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
		Исключение
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить коды в предмете сделки ""%1"" по причине:
					|%2'"), 
					ПредметСделки,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.Регистратор, ТекстСообщения);
				
		КонецПопытки;
		
	КонецЦикла;
	
	// Получим документы в которых необходимо заполнить коды классификаторов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	КонтролируемаяСделка.Ссылка КАК КонтролируемаяСделка,
	|	КлассификаторТНВЭД.Ссылка КАК КодТНВЭД,
	|	КлассификаторВидовЭкономическойДеятельности.Ссылка КАК КодОКВЭД,
	|	ОбщероссийскийКлассификаторПродукции.Ссылка КАК КодОКП,
	|	КлассификаторОКВЭД2.Ссылка КАК КодОКВЭД2,
	|	КлассификаторОКПД2.Ссылка КАК КодОКПД2
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ПО КонтролируемаяСделка.УдалитьКодТНВЭД = КлассификаторТНВЭД.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
	|		ПО КонтролируемаяСделка.УдалитьКодОКП = ОбщероссийскийКлассификаторПродукции.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторВидовЭкономическойДеятельности КАК КлассификаторВидовЭкономическойДеятельности
	|		ПО КонтролируемаяСделка.УдалитьКодОКВЭД = КлассификаторВидовЭкономическойДеятельности.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКВЭД2 КАК КлассификаторОКВЭД2
	|		ПО КонтролируемаяСделка.УдалитьКодОКВЭД2 = КлассификаторОКВЭД2.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
	|		ПО КонтролируемаяСделка.УдалитьКодОКПД2 = КлассификаторОКПД2.Код
	|ГДЕ
	|	КонтролируемаяСделка.КодТНВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторТНВЭД.ПустаяСсылка)
	|	И КонтролируемаяСделка.КодОКВЭД = ЗНАЧЕНИЕ(Справочник.КлассификаторВидовЭкономическойДеятельности.ПустаяСсылка)
	|	И КонтролируемаяСделка.КодОКП = ЗНАЧЕНИЕ(Справочник.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка)
	|	И КонтролируемаяСделка.КодОКВЭД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКВЭД2.ПустаяСсылка)
	|	И КонтролируемаяСделка.КодОКПД2 = ЗНАЧЕНИЕ(Справочник.КлассификаторОКПД2.ПустаяСсылка)
	|	И (КлассификаторТНВЭД.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторВидовЭкономическойДеятельности.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ ОбщероссийскийКлассификаторПродукции.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКВЭД2.Ссылка ЕСТЬ НЕ NULL 
	|			ИЛИ КлассификаторОКПД2.Ссылка ЕСТЬ НЕ NULL )";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Попытка
			ОбъектСделка = Выборка.КонтролируемаяСделка.ПолучитьОбъект();
			ОбъектСделка.КодОКВЭД = Выборка.КодОКВЭД;
			ОбъектСделка.КодОКВЭД2 = Выборка.КодОКВЭД2;
			ОбъектСделка.КодОКП = Выборка.КодОКП;
			ОбъектСделка.КодОКПД2 = Выборка.КодОКПД2;
			ОбъектСделка.КодТНВЭД = Выборка.КодТНВЭД;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектСделка);
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
		Исключение
			
			// Если не удалось обработать какой-либо документ, повторяем попытку снова.
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось заполнить коды в контролируемой сделке ""%1"" по причине:
					|%2'"), 
					Выборка.КонтролируемаяСделка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.КонтролируемаяСделка, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	
	Если ОбъектовОбработано + ПроблемныхОбъектов = 0 Тогда
	
		Параметры.ОбработкаЗавершена = Истина;
	
	Иначе
		
		Параметры.ОбработкаЗавершена = Ложь;
		
		Если ОбъектовОбработано = 0 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Процедуре РасширенныйФункционал.ЗаполнитьКодыКлассификаторовВПредметахКонтролируемыхСделок
						|не удалось заполнить классификаторы в %1 элементах.'"), ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;
		Иначе
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Процедура РасширенныйФункционал.ЗаполнитьКодыКлассификаторовВПредметахКонтролируемыхСделок
						|обработала очередную порцию записей в справочниках: %1 элементов'"), 
						ОбъектовОбработано));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	//Тут размещаются обработчики обновления специфичные для КОРП
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.35.1";
	Обработчик.Процедура           = "РасширенныйФункционал.ЗаполнитьКодыКлассификаторовВПредметахКонтролируемыхСделок";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = НСтр("ru = 'Заполняет коды классификаторов элементов справочника Номенклатура, ОсновныеСредства, НематериальныеАктивы, ОбъектыСтроительства
			| из регистра сведений ПредметыКонтролируемыхСделок.'");
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("ff65059a-3dea-4138-8092-294d4ebfd021");

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.132.12";
	Обработчик.Процедура           = "РегистрыСведений.РасчетНачисленияПроцентныхРасходов.ЗаполнитьПериод";
	Обработчик.НачальноеЗаполнение = Ложь; // Не надо выполнять при обновлении с 2БП на 3БП
	Обработчик.Комментарий         = НСтр("ru = 'Заполняет период записей регистра ""Расчет начисления процентных расходов"".'");
	Обработчик.РежимВыполнения     = "Отложенно";
	Обработчик.Идентификатор       = Новый УникальныйИдентификатор("74ed3d6d-a672-4ebe-ae6e-5dbaa1b3c71e");
	
КонецПроцедуры

// Часть расширенного функционала, позволяющая отключать контроль предыдущих регламентных операций (выполнены ли) перед
// выполнением текущей регламентной операции закрытия месяца.
//
// Параметры:
//  ВыполнениеБезКонтроля - Булево - значение константы, которая присутствует только в КОРП.
//
Процедура РазрешитьВыполнениеОперацийБезКонтроляПредыдущих(ВыполнениеБезКонтроля) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("РасширенныйФункционал") Тогда
		
		ВыполнениеБезКонтроля = Константы.РазрешитьВыполнениеОперацииБезКонтроляПредыдущих.Получить();
		
	Иначе
		
		ВыполнениеБезКонтроля = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// См. Обработки.ФункциональностьПрограммы.УсловияДоступностиДокументовПоТарифу
//
// Параметры:
//  УсловияДоступности - см. Обработки.ФункциональностьПрограммы.НовыеУсловияДоступностиДокументовПоТарифу
//
Процедура ДобавитьОграниченияОпцииКонтролируемыеСделки(УсловияДоступности) Экспорт
	
	СтрокаКонтролируемаяСделка = УсловияДоступности.Добавить();
	СтрокаКонтролируемаяСделка.Функциональность = "ИспользоватьУведомленияОКонтролируемыхСделках";
	СтрокаКонтролируемаяСделка.ТипОбъекта = Тип("ДокументСсылка.КонтролируемаяСделка");
	
	СтрокаПрочиеКонтролируемыеСделки = УсловияДоступности.Добавить();
	СтрокаПрочиеКонтролируемыеСделки.Функциональность = "ИспользоватьУведомленияОКонтролируемыхСделках";
	СтрокаПрочиеКонтролируемыеСделки.ТипОбъекта = Тип("ДокументСсылка.ПрочиеКонтролируемыеСделки");
	
	СтрокаУведомлениеОКонтролируемойСделке = УсловияДоступности.Добавить();
	СтрокаУведомлениеОКонтролируемойСделке.Функциональность = "ИспользоватьУведомленияОКонтролируемыхСделках";
	СтрокаУведомлениеОКонтролируемойСделке.ТипОбъекта = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках");
	
КонецПроцедуры
