////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Переопределяет список команд печати. Вызывается из УправлениеПечатьюПереопределяемый и предназначена
// для дополнения команд печати листом согласования.
//
// Параметры:
//   ИмяФормы - Строка - полное имя формы в виде "Документ._ДемоЗаказПокупателя.Форма.ФормаДокумента", в которой
//     добавляются команды печати.
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//   СтандартнаяОбработка - Булево - при установке значения Ложь не будет автоматически заполняться
//     коллекция КомандыПечати.
//
// Пример:
//	КомандаПечати = КомандыПечати.Добавить();
//	КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот3";
//	КомандаПечати.Идентификатор = "ApprovalSheet";
//	КомандаПечати.Представление = НСтр("ru = 'Документооборот: Лист согласования'");
//	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
//	КомандаПечати.Порядок = 1;
//	
//	КомандаПечати = КомандыПечати.Добавить();
//	КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот3";
//	КомандаПечати.Идентификатор = "ApprovalSheetWithHistory";
//	КомандаПечати.Представление = НСтр("ru = 'Документооборот: Лист согласования с историей'");
//	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
//	КомандаПечати.Порядок = 2;
//	
//	КомандаПечати = КомандыПечати.Добавить();
//	КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот3";
//	КомандаПечати.Идентификатор = "ProtocolOfDisagreements";
//	КомандаПечати.Представление = НСтр("ru = 'Документооборот: Протокол разногласий'");
//	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
//	КомандаПечати.Порядок = 3;
//	
//	КомандаПечати = КомандыПечати.Добавить();
//	КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот3";
//	КомандаПечати.Идентификатор = "ExaminationSheet";
//	КомандаПечати.Представление = НСтр("ru = 'Документооборот: Лист ознакомления'");
//	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
//	КомандаПечати.Порядок = 4;
//
Процедура ПередДобавлениемКомандПечати(ИмяФормы, КомандыПечати, СтандартнаяОбработка) Экспорт
	
	Если ИмяФормы = Метаданные.Документы.ПоступлениеНМА.Формы.ФормаДокумента.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПоступлениеНМА.Формы.ФормаСписка.ПолноеИмя()
				
				Или ИмяФормы = Метаданные.Документы.ПоступлениеИзПереработки.Формы.ФормаДокумента.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПоступлениеИзПереработки.Формы.ФормаСписка.ПолноеИмя()
				
				Или ИмяФормы = Метаданные.Документы.СчетФактураПолученный.Формы.ФормаДокумента.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.СчетФактураПолученный.Формы.ФормаДокументаНаПоступление.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.СчетФактураПолученный.Формы.ФормаСписка.ПолноеИмя()
				
				Или ИмяФормы = Метаданные.Документы.ПеремещениеТоваров.Формы.ФормаДокумента.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПеремещениеТоваров.Формы.ФормаСписка.ПолноеИмя()
				
				Или ИмяФормы = Метаданные.Документы.ПоступлениеДопРасходов.Формы.ФормаДокумента.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПоступлениеДопРасходов.Формы.ФормаСписка.ПолноеИмя()
				
				Или ИмяФормы = Метаданные.Документы.ПлатежноеПоручение.Формы.ФормаДокумента.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПлатежноеПоручение.Формы.ФормаДокументаНалоговая.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПлатежноеПоручение.Формы.ФормаСписка.ПолноеИмя()
				
				Или ИмяФормы = Метаданные.Документы.СчетНаОплатуПокупателю.Формы.ФормаДокумента.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.СчетНаОплатуПокупателю.Формы.ФормаСписка.ПолноеИмя()
				
				Или ИмяФормы = Метаданные.Документы.СчетНаОплатуПоставщика.Формы.ФормаДокумента.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.СчетНаОплатуПоставщика.Формы.ФормаСписка.ПолноеИмя()
				
				Или ИмяФормы = Метаданные.Документы.ПоступлениеТоваровУслуг.Формы.ФормаДокументаОбщая.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПоступлениеТоваровУслуг.Формы.ФормаДокументаТовары.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПоступлениеТоваровУслуг.Формы.ФормаДокументаУслуги.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПоступлениеТоваровУслуг.Формы.ФормаДокументаТопливо.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПоступлениеТоваровУслуг.Формы.ФормаДокументаАренда.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПоступлениеТоваровУслуг.Формы.ФормаДокументаОсновныеСредства.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.ПоступлениеТоваровУслуг.Формы.ФормаСписка.ПолноеИмя()
				
				Или ИмяФормы = Метаданные.Документы.РеализацияТоваровУслуг.Формы.ФормаДокументаОбщая.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.РеализацияТоваровУслуг.Формы.ФормаДокументаТовары.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.РеализацияТоваровУслуг.Формы.ФормаДокументаУслуги.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.РеализацияТоваровУслуг.Формы.ФормаДокументаСтроительныеРаботы.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.РеализацияТоваровУслуг.Формы.ФормаСписка.ПолноеИмя()
				Или ИмяФормы = Метаданные.Документы.РеализацияТоваровУслуг.Формы.ФормаСпискаСтроительныхРабот.ПолноеИмя()
				
				Или ИмяФормы = Метаданные.Справочники.ДоговорыКонтрагентов.Формы.ФормаЭлемента.ПолноеИмя()
				Или ИмяФормы = Метаданные.Справочники.ДоговорыКонтрагентов.Формы.ФормаСписка.ПолноеИмя() Тогда
		
		Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
		
		Если Настройки.ИспользоватьИнтеграциюДО2
				И ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("1.4.8.1") Тогда
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот";
			КомандаПечати.Идентификатор = "ПФ_MXL_ЛистСогласования";
			КомандаПечати.Представление = НСтр("ru = 'Документооборот: Лист согласования'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
			КомандаПечати.Порядок = 1;
			
		КонецЕсли;
		
		Если Настройки.ИспользоватьИнтеграциюДО3
				И ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.14.31") Тогда
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот3";
			КомандаПечати.Идентификатор = "ApprovalSheet";
			КомандаПечати.Представление = НСтр("ru = 'Документооборот: Лист согласования'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
			КомандаПечати.Порядок = 1;
			
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ИнтеграцияС1СДокументооборот3";
			КомандаПечати.Идентификатор = "ExaminationSheet";
			КомандаПечати.Представление = НСтр("ru = 'Документооборот: Лист ознакомления'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
			КомандаПечати.Порядок = 2;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - описание полей, см.
//     ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример:
//	Обработчик = Обработчики.Добавить();
//	Обработчик.Версия              = "1.1.0.0";
//	Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//	Обработчик.МонопольныйРежим    = Ложь;
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	
	
КонецПроцедуры

// Регистрирует элементы справочника ПравилаИнтеграцииС1СДокументооборотом, которые необходимо обновить.
//
// Параметры:
//   Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьПравилаИнтеграцииКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	
	
КонецПроцедуры

// Обработчик обновления справочника ПравилаИнтеграцииС1СДокументооборотом.
//
// Параметры:
//   Параметры - Структура - параметры.
//
Процедура ОбработатьПравилаИнтеграцииДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	
	
КонецПроцедуры

// Конец ОбновлениеИнформационнойБазы

#КонецОбласти

#Область ПрисоединенныеФайлы

// Устанавливает признак наличия присоединенных файлов ДО для объекта ИС. Вызывается при добавлении
// связи с объектом ДО, имеющим файлы, при добавлении файла из интерфейса ИС и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриПоявленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Снимает признак наличия присоединенных файлов для объекта ИС, если их нет в самой ИС. Вызывается при
// удалении связи с объектом ДО и при фоновом обновлении.
//
// Параметры:
//   ID - Строка - идентификатор объекта Документооборота.
//   Тип - Строка - XDTO-тип объекта Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриУдаленииПрисоединенныхФайловДокументооборота(ID, Тип, ОбъектИС, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при определении наличия файлов, хранимых в интегрируемой конфигурации.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ЕстьФайлы - Булево, Неопределено - неявно возвращаемое значение, признак наличия присоединенных файлов.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриОпределенииНаличияПрисоединенныхФайлов(ВладелецФайлов, ЕстьФайлы, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при получении присоединенных файлов.
//
// Параметры:
//   ВладелецФайлов - Произвольный - объект-владелец.
//   ДанныеФайлов - Массив из см. РаботаСФайлами.ДанныеФайла
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриПолученииПрисоединенныхФайлов(ВладелецФайлов, ДанныеФайлов, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

// Вызывается при создании форм бизнес-процессов 1С:Документооборота. Позволяет выполнить дополнительные действия.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма бизнес-процесса Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыБизнесПроцесса(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при создании форм документов Документооборота. Позволяет выполнить дополнительные действия.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма документа Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыДокумента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при создании формы задачи Документооборота. Позволяет выполнить дополнительные действия.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи Документооборота.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - стандартная обработка при создании формы на сервере.
//
Процедура ДополнительнаяОбработкаФормыЗадачи(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Дополняет таблицу соответствия поддерживаемых типов.
//
// Параметры:
//   Таблица - ТаблицаЗначений - неявно возвращаемое значение с колонками:
//     * ИмяТипаXDTO - Строка - имя типа XDTO.
//     * ТипОбъектаИС - Тип - тип объекта ИС.
//
// Пример:
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMBankAccount", Тип("СправочникСсылка._ДемоБанковскиеСчета"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMMeasurementUnit", Тип("СправочникСсылка._ДемоЕдиницыИзмерения"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMContactPerson", Тип("СправочникСсылка._ДемоКонтактныеЛица"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMCorrespondent", Тип("СправочникСсылка._ДемоКонтрагенты"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMProduct", Тип("СправочникСсылка._ДемоНоменклатура"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMOrganization", Тип("СправочникСсылка._ДемоОрганизации"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMSubdivision", Тип("СправочникСсылка._ДемоПодразделения"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMCashFlowItem", Тип("СправочникСсылка._ДемоСтатьиДвиженияДенежныхСредств"));
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
//		Таблица, "DMEmployee", Тип("СправочникСсылка._ДемоСотрудники"));
//
Процедура ДополнитьСоответствиеТипов(Таблица) Экспорт
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMMeasurementUnit", Тип("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMContactPerson", Тип("СправочникСсылка.КонтактныеЛица"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMProduct", Тип("СправочникСсылка.Номенклатура"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMCashFlowItem", Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMVATRate", Тип("ПеречислениеСсылка.СтавкиНДС"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMBankAccount", Тип("СправочникСсылка.БанковскиеСчета"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMCorrespondent", Тип("СправочникСсылка.Контрагенты"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMOrganization", Тип("СправочникСсылка.Организации"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMPrivatePerson", Тип("СправочникСсылка.ФизическиеЛица"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMSubdivision", Тип("СправочникСсылка.СтруктураПредприятия"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMSubdivision", Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
		Таблица, "DMLegalPrivatePerson", Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо"));
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
			Таблица, "DMUser", Тип("СправочникСсылка.Сотрудники"));
		
	ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
			Таблица, "DMEmployee", Тип("СправочникСсылка.Сотрудники"));
		
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуСоответствияТипов(
			Таблица, "DMPosition", Тип("СправочникСсылка.Должности"));
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет свойства объекта XDTO из реквизитов объекта конфигурации-потребителя. По умолчанию заполняется
// только наименование и идентификатор. При необходимости обеспечить заполнение других реквизитов объектов
// ДО, создаваемых по ссылкам, следует заполнить соответствующие свойства объекта XDTO. Эти же значения будут
// использованы при поиске соответствий для справочников, имеющих внешние ключи (ИНН, КПП).
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект.
//   СсылкаНаПотребитель - ЛюбаяСсылка - ссылка на исходный объект конфигурации-потребителя.
//
// Пример:
//	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMCorrespondent")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП, ЮрФизЛицо");
//		ОбъектXDTO.inn = Реквизиты.ИНН;
//		ОбъектXDTO.kpp = Реквизиты.КПП;
//		Если Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ЮрЛицо Тогда
//			ОбъектXDTO.legalPrivatePerson = "LglPerson";
//		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ФизЛицо Тогда
//			ОбъектXDTO.legalPrivatePerson = "Individ";
//		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
//			ОбъектXDTO.legalPrivatePerson = "IndividualEntrepreneur";
//		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ЮрЛицоНеРезидент Тогда
//			ОбъектXDTO.legalPrivatePerson = "LglPersonNonResident";
//		КонецЕсли;
//	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП");
//		ОбъектXDTO.inn = Реквизиты.ИНН;
//		ОбъектXDTO.kpp = Реквизиты.КПП;
//	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMBankAccount")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоБанковскиеСчета") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "Владелец, НомерСчета");
//		ОбъектXDTO.number = Реквизиты.НомерСчета;
//		Если ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
//			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCorrespondent");
//		ИначеЕсли ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
//			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMOrganization");
//		КонецЕсли;
//		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.owner, Реквизиты.Владелец);
//	Иначе //...
//	КонецЕсли;
//
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель) Экспорт
	
	ИнтеграцияС1СДокументооборотБП.ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
	
КонецПроцедуры

// Заполняет реквизиты формы по данным объекта интегрированной системы.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - ссылка на объект-основание.
//   Форма - ФормаКлиентскогоПриложения - форма обработки ИнтеграцияС1СДокументооборот, соответствующая заполняемому
//    объекту Документооборота.
//
Процедура ЗаполнитьФормуИзПотребителя(ВнешнийОбъект, Форма) Экспорт
	
	
	
КонецПроцедуры

// Вызывается перед записью входящих, исходящих, внутренних документов Документооборота.
// Позволяет выполнить дополнительные проверки перед записью, и отказаться от записи.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект. Тип DMInternalDocument, DMIncomingDocument, DMOutgoingDocument.
//   Форма - ФормаКлиентскогоПриложения - форма документа Документооборота.
//   Отказ - Булево - признак отказа от записи документа.
//
Процедура ПередЗаписьюДокумента(Прокси, ОбъектXDTO, Форма, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Вызывается перед записью объектов интегрированной системы через механизм обмена с 1С:Документооборот.
// Позволяет выполнить дополнительные проверки перед записью, изменить ДополнительныеСвойства и отказаться от записи.
//
// Параметры:
//   ОбъектИС - ДокументОбъект
//            - СправочникОбъект - изменяемый объект ИС.
//   Отказ - Булево - признак отказа от записи.
//   РежимЗаписиДокумента - РежимЗаписиДокумента - позволяет изменить режим записи.
//   РежимПроведенияДокумента - РежимПроведенияДокумента - позволяет изменить режим проведения документа.
//
Процедура ПередЗаписьюОбъектаИС(ОбъектИС, Отказ,
		РежимЗаписиДокумента = Неопределено, РежимПроведенияДокумента = Неопределено) Экспорт
	
	
	
КонецПроцедуры

// Заполняет таблицу реквизитов объекта по типу объекта.
//
// Параметры:
//   ИмяОбъектаИС - Строка - имя типа объекта потребителя.
//   Реквизиты - ТаблицаЗначений - Таблица описания реквизитов.
//
Процедура ПолучитьРеквизитыОбъектаИС(ИмяОбъектаИС, Реквизиты) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при добавлении подсистемы в дерево интегрируемых объектов, с помощью которого настраивается
// интеграция. По умолчанию выводятся подсистемы первого уровня, включаемые в командный интерфейс, и
// подчиненные им.
//
// Параметры:
//   Подсистема - ОбъектМетаданных - добавляемая подсистема, содержащая интегрируемые объекты.
//   Отказ - Булево - при установке в Ложь подсистема будет пропущена вместе со всеми подчиненными.
//
Процедура ПриДобавленииПодсистемыВДеревоИнтегрируемыхОбъектов(Подсистема, Отказ) Экспорт
	
	Если СтрЗаканчиваетсяНа(Подсистема.Имя, "82") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при записи констант подсистемы Интеграция с 1С:Документооборотом.
//
// Параметры:
//   Источник - КонстантаМенеджерЗначения - записываемая константа.
//   Отказ - Булево - флаг отказа от выполнения записи.
//
Процедура ПриЗаписиКонстанты(Источник, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Заполняет коллекцию печатных форм объекта по имени менеджера печати и команде менеджера печати.
//
// Параметры:
//   ВнешнийОбъект - ЛюбаяСсылка - внешний объект.
//   ИмяКоманды - Строка - имя команды.
//   ДополнительныеПараметры - Строка - (необязательный) произвольные параметры для передачи в менеджер печати.
//   КоллекцияПечатныхФорм - ТаблицаЗначений - неявно возвращаемое значение.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриЗаполненииКоллекцииПечатныхФорм(ВнешнийОбъект, ИмяКоманды, ДополнительныеПараметры, КоллекцияПечатныхФорм,
		СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрНайти(ИмяКоманды, "КомандаПечати") = 1 Тогда
		НомерКомандыСтрокой = Сред(ИмяКоманды, СтрДлина("КомандаПечати") + 1);
		Если НомерКомандыСтрокой = "0" Тогда
			НомерКоманды = 0;
		Иначе
			ОписаниеТипов = Новый ОписаниеТипов("Число");
			НомерКоманды = ОписаниеТипов.ПривестиЗначение(НомерКомандыСтрокой);
			НомерКоманды = ?(НомерКоманды = 0, -1, НомерКоманды);
		КонецЕсли;
	Иначе
		НомерКоманды = -1;
	КонецЕсли;
	
	МенеджерОбъекта = ВнешнийОбъект.Метаданные().ПолноеИмя();
	
	КомандыПечати = ИнтеграцияС1СДокументооборотБазоваяФункциональность.КомандыПечатиФормы(
		МенеджерОбъекта + ".Форма.ФормаСписка");
	КоличествоКомандПечати = КомандыПечати.Количество();
	Если КоличествоКомандПечати = 0 Тогда
		КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
		Возврат;
	КонецЕсли;
	
	Если НомерКоманды = -1 Или НомерКоманды >= КоличествоКомандПечати Тогда
		Отбор = Новый Структура("Идентификатор", ИмяКоманды);
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
			Отбор.Вставить("ДополнительныеПараметрыВСтроку", ДополнительныеПараметры);
		КонецЕсли;
		СтрокиКомандыПечати = КомандыПечати.НайтиСтроки(Отбор);
		Если СтрокиКомандыПечати.Количество() > 0 Тогда
			КомандаПечати = СтрокиКомандыПечати[0];
		КонецЕсли;
	Иначе
		КомандаПечати = КомандыПечати[НомерКоманды];
	КонецЕсли;
	ОписаниеКоманды = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КомандаПечати);
	
	ОбъектыПечатиСписок = Новый СписокЗначений;
	ОбъектыПечатиСписок.Добавить(ВнешнийОбъект);
	
	ОбъектыПечати = Новый Массив;
	ОбъектыПечати.Добавить(ВнешнийОбъект);
	
	ОписаниеКоманды.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	ПараметрыПечати = ОписаниеКоманды.ДополнительныеПараметры; // Структура
	ПараметрыВывода = Неопределено;
	
	Попытка
		
		Если ПараметрыПечати.Свойство("Ссылка") И ЗначениеЗаполнено(ПараметрыПечати.Ссылка) Тогда
			ПараметрыПечати.Вставить("ИдентификаторКоманды", ОписаниеКоманды.Идентификатор);
			ПараметрыПечати.Вставить("ОбъектыНазначения", ОбъектыПечати);
			
			ДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(
				ПараметрыПечати.Ссылка,
				ПараметрыПечати,
				КоллекцияПечатныхФорм,
				ОбъектыПечатиСписок,
				ПараметрыВывода);
		Иначе
			Если ТипЗнч(ВнешнийОбъект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				НастройкиПечати = УчетНДСВызовСервера.ПолучитьНастройкиПечатиСчетовФактурПолученных(ОбъектыПечати);
				ИменаМакетов = НастройкиПечати.СписокМакетов;
			Иначе
				ИменаМакетов = ОписаниеКоманды.Идентификатор;
			КонецЕсли;
			
			ПечатныеФормы = УправлениеПечатью.СформироватьПечатныеФормы(
				ОписаниеКоманды.МенеджерПечати,
				ИменаМакетов,
				ОбъектыПечати,
				ПараметрыПечати);
			КоллекцияПечатныхФорм = ПечатныеФормы.КоллекцияПечатныхФорм;
		КонецЕсли;
		
	Исключение
		
		КоллекцияПечатныхФорм = Новый ТаблицаЗначений;
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Не удалось сформировать печатную форму ""%1"" по причине:
				|%2'"),
			ОписаниеКоманды.Представление,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при заполнении свойства объекта XDTO по значению в ИС (например, по значению реквизита объекта ИС).
//
// Параметры:
//   Значение - Произвольный - значение, которым заполняются свойства объекта XDTO для передачи в ДО.
//   Свойства - ФормаКлиентскогоПриложения
//            - СтрокаТаблицыЗначений - заполняемый набор данных, которым будет заполнен объект XDTO для передачи в ДО.
//            - см. ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемогоОбъектаДО
//   ТипОбъекта - Строка - тип заполняемого объекта, например, "DMInternalObject".
//   ИмяСвойства - Строка - имя заполняемого свойства, например, "Контрагент", "СостояниеСогласование".
//   ТипСвойства - Строка - тип заполняемого свойства, например, "DMCorrespondent", "DMDocumentStatus".
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартное заполнение
//     свойства по значению Значение производиться не будет.
//
// Пример:
//	Если ТипСвойства = "DMDocumentStatus" И ИмяСвойства = "СостояниеСогласование" Тогда
//		Если Значение = Перечисления._ДемоСостоянияЗаказаПокупателя.Согласован Тогда
//			Свойства[ИмяСвойства] = "Approved";
//			СтандартнаяОбработка = Ложь;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриЗаполненииСвойстваОбъектаXDTOПоЗначению(Значение, Свойства, ТипОбъекта, ИмяСвойства, ТипСвойства,
		СтандартнаяОбработка) Экспорт
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	Если Не Настройки.ИспользоватьИнтеграциюДО2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипСвойства = "DMVATRate" И ИмяСвойства = "СтавкаНДС"  Тогда
		
		СтавкаНДС = "";
		СтавкаНДСID = "";
		
		Если Значение = Перечисления.СтавкиНДС.БезНДС Тогда
			СтавкаНДС = НСтр("ru = 'Без НДС'");
			СтавкаНДСID = "БезНДС";
			
		ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС0 Тогда
			СтавкаНДС = "0%";
			СтавкаНДСID = "НДС0";
			
		ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС10
				Или Значение = Перечисления.СтавкиНДС.НДС10_110 Тогда
			СтавкаНДС = "10%";
			СтавкаНДСID = "НДС10";
			
		ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС18
				Или Значение = Перечисления.СтавкиНДС.НДС18_118 Тогда
			СтавкаНДС = "18%";
			СтавкаНДСID = "НДС18";
			
		ИначеЕсли Значение = Перечисления.СтавкиНДС.НДС20
				Или Значение = Перечисления.СтавкиНДС.НДС20_120 Тогда
			СтавкаНДС = "20%";
			СтавкаНДСID = "НДС20";
			
		КонецЕсли;
		
		Если СтавкаНДС <> "" И СтавкаНДСID <> "" Тогда
			Свойства.СтавкаНДС = СтавкаНДС;
			Свойства.СтавкаНДСID = СтавкаНДСID;
			Свойства.СтавкаНДСТип = "DMVATRate";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает таблицу менеджеров печати форм объектов.
//
// Параметры:
//   МенеджерОбъекта - Строка - полное имя метаданных менеджера объекта.
//   ПечатныеФормы - ТаблицаЗначений:
//     * МенеджерПечати - Строка - имя объекта, в модуле менеджера которого располагается
//                                 процедура Печать, формирующая табличные документы для этой команды.
//     * ИмяКоманды - Строка
//     * ПредставлениеКоманды - Строка
//     * ДополнительныеПараметры - Строка - (необязательный) произвольные параметры для передачи в менеджер печати.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
// Пример:
//	КомандыПечати = ИнтеграцияС1СДокументооборотБазоваяФункциональность.КомандыПечатиФормы(
//		МенеджерОбъекта + ".Форма.ФормаСписка");
//	
//	Для Каждого Команда Из КомандыПечати Цикл
//		Строка = ПечатныеФормы.Добавить();
//		Строка.МенеджерПечати = Команда.МенеджерПечати;
//		Строка.ИмяКоманды = Команда.Идентификатор;
//		Строка.ПредставлениеКоманды = Команда.Представление;
//	КонецЦикла;
//
Процедура ПриЗаполненииТаблицыМенеджеровПечатиОбъекта(МенеджерОбъекта, ПечатныеФормы, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		
		КомандыПечати = ИнтеграцияС1СДокументооборотБазоваяФункциональность.КомандыПечатиФормы(
			МенеджерОбъекта + ".Форма.ФормаСписка");
		
		Для Каждого КомандаПечати Из КомандыПечати Цикл
			Если КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиКонверта"
					Или КомандаПечати.Обработчик = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов" Тогда
				Продолжить;
			КонецЕсли;
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьКомандуПечати(ПечатныеФормы, КомандаПечати);
		КонецЦикла;
		
	Исключение
		// У менеджера объекта может не быть процедуры ДобавитьКомандыПечати.
		
	КонецПопытки;
	
КонецПроцедуры

// Вызывается при заполнении формы объекта ДО при его создании на основании объекта ИС. Позволяет дозаполнить объект
// ДО способом, не поддерживаемым правилами интеграции.
//
// Параметры:
//   ОбъектИС - Произвольный - ссылка на объект ИС.
//   Форма - ФормаКлиентскогоПриложения - форма объекта 1С:Документооборота.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - применяемое правило.
//
Процедура ПриЗаполненииФормыОбъектаДОПоОбъектуИС(ОбъектИС, Форма, Правило) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при изменении состояния согласования в ДО. Предназначена для изменения согласуемого объекта.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект.
//   Состояние - ПеречислениеСсылка.СостоянияСогласованияВДокументообороте.
//   ВызовИзФормыОбъекта - Булево - Истина, если изменение состояния вызвано пользователем из формы объекта.
//   Установил - Строка - представление пользователя, установившего новое состояние.
//   ДатаУстановки - Дата - Дата установки нового состояния.
//
// Пример:
//	Если ВызовИзФормыОбъекта Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Если ТипЗнч(ПредметСогласования) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
//	
//		Объект = ПредметСогласования.ПолучитьОбъект();
//		Если Состояние = Перечисления.СостоянияСогласованияВДокументообороте.НаСогласовании Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.НаСогласовании;
//		ИначеЕсли Состояние = Перечисления.СостоянияСогласованияВДокументообороте.НеСогласован Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.НеСогласован;
//		ИначеЕсли Состояние = Перечисления.СостоянияСогласованияВДокументообороте.Согласован Тогда
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.Согласован;
//		Иначе
//			Объект.Состояние = Перечисления._ДемоСостоянияЗаказаПокупателя.Подготовлен;
//		КонецЕсли;
//		Объект.Записать(РежимЗаписиДокумента.Запись);
//	
//	КонецЕсли;
//
Процедура ПриИзмененииСостоянияСогласования(ПредметСогласования, Состояние, ВызовИзФормыОбъекта, Установил,
		ДатаУстановки) Экспорт
	
	
	
КонецПроцедуры

// Дополнительная обработка сообщения XDTO.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO, потомок DMILRequest.
//   Результат - ОбъектXDTO - неявно возвращаемое значение. Объект XDTO,
//     потомок DMILResponse, если сообщение считается обработанным.
//             - Неопределено - если сообщение требует дальнейшей обработки.
//
Процедура ПриОбработкеУниверсальногоСообщения(Сообщение, Результат) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при заполнении реквизита объекта ИС по значению реквизита объекта ДО. При установке
// в параметр Результат значения, отличного от Неопределено, стандартное заполнение не выполняется.
//
// Параметры:
//   Результат - Произвольный - заполняемое значение реквизита объекта ИС.
//   ЗначениеЗаполнения - ОбъектXDTO - исходный объект, соответствие которому нужно найти.
//                      - Структура - структура со свойствами:
//     * ТипXDTOОбъекта - Строка - тип XDTO объекта, из значения свойства которого выполняется заполнение.
//     * ИмяСвойства - Строка - имя свойства, из значения свойства которого выполняется заполнение.
//     * ЗначениеСвойства - Произвольный - значение заполнения, соответствие которому нужно найти.
//   ТипРеквизита - Тип - тип заполняемого реквизита объекта ИС.
//   ИмяРеквизита - Строка - имя заполняемого реквизита ИС.
//   ТипОбъекта - Тип - тип заполняемого объекта ИС.
//   Объект - Произвольный - заполняемый объект ИС.
//   ЭтоДополнительноеСвойство - Булево - истина, если переданный объект является доп. свойством.
//   Свойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения - свойство-владелец.
//   ПараметрыВыбора - Соответствие из КлючИЗначение - параметры выбора:
//     * Ключ - Строка - имя параметра вида "Отбор.Владелец".
//     * Значение - Произвольный - значение параметра (отбора).
//
// Пример:
//	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "objectID")
//			И ОбъектXDTO.objectID.type = "DMDocumentStatus"
//			И ТипРеквизита = Тип("Булево")
//			И ИмяРеквизита = "Согласован" Тогда
//		Результат = (ОбъектXDTO.objectID.ID = "Согласован");
//	КонецЕсли;
//	Если ТипРеквизита = Тип("СправочникСсылка._ДемоЕдиницыИзмерения")
//			И ПараметрыВыбора <> Неопределено Тогда
//		Запрос = Новый Запрос(
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Ссылка
//			|ИЗ
//			|	Справочник._ДемоЕдиницыИзмерения
//			|ГДЕ
//			|	Владелец = &Владелец
//			|	И Наименование = &Наименование
//			|");
//		Запрос.УстановитьПараметр("Наименование", ОбъектXDTO.name);
//		Запрос.УстановитьПараметр("Владелец", ПараметрыВыбора["Отбор.Владелец"]);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Результат = Выборка.Ссылка;
//		КонецЕсли;
//	КонецЕсли;
//	Если ТипРеквизита = Тип("СправочникСсылка._ДемоБанковскиеСчета")
//			И ОбъектXDTO.Свойства().Получить("number") <> Неопределено
//			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "number") Тогда
//		Запрос = Новый Запрос(
//			"ВЫБРАТЬ ПЕРВЫЕ 1
//			|	Ссылка
//			|ИЗ
//			|	Справочник._ДемоБанковскиеСчета
//			|ГДЕ
//			|	НомерСчета = &НомерСчета
//			|");
//		Запрос.УстановитьПараметр("НомерСчета", ОбъектXDTO.number);
//		Выборка = Запрос.Выполнить().Выбрать();
//		Если Выборка.Следующий() Тогда
//			Результат = Выборка.Ссылка;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииЗначенияРеквизитаПоОбъектуXDTO(Результат, ЗначениеЗаполнения, ТипРеквизита, ИмяРеквизита,
		ТипОбъекта, Объект, ЭтоДополнительноеСвойство = Ложь, Свойство = Неопределено,
		ПараметрыВыбора = Неопределено) Экспорт
	
	Если ТипРеквизита = Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
		
		Если ТипЗнч(ЗначениеЗаполнения) = Тип("ОбъектXDTO")
				И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "objectID") Тогда
			
			Если ЗначениеЗаполнения.objectID.ID = "ЮрЛицо" Тогда
				Результат = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
				
			ИначеЕсли ЗначениеЗаполнения.objectID.ID = "ЮрЛицоНеРезидент" Тогда
				Результат = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
				
			ИначеЕсли ЗначениеЗаполнения.objectID.ID = "ФизЛицо" Тогда
				Результат = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				
			ИначеЕсли ЗначениеЗаполнения.objectID.ID = "ИндивидуальныйПредприниматель" Тогда
				Результат = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеЗаполнения) = Тип("Структура") Тогда
			
			Если ЗначениеЗаполнения.ЗначениеСвойства = "LglPerson" Тогда
				Результат = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
				
			ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "LglPersonNonResident" Тогда
				Результат = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
				
			ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "Individ" Тогда
				Результат = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				
			ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "IndividualEntrepreneur" Тогда
				Результат = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				
			КонецЕсли;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипРеквизита = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
		
		Если ТипЗнч(ЗначениеЗаполнения) = Тип("ОбъектXDTO")
				И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "objectID") Тогда
			
			МетаданныеПеречислениеСтавкиНДС = Метаданные.НайтиПоПолномуИмени("Перечисление.СтавкиНДС");
			Результат = МетаданныеПеречислениеСтавкиНДС.ЗначенияПеречисления.Найти(
				ЗначениеЗаполнения.objectID.ID);
			
		ИначеЕсли ТипЗнч(ЗначениеЗаполнения) = Тип("Структура") Тогда
			
			Если ЗначениеЗаполнения.ЗначениеСвойства = "WithoutVAT" Тогда
				Результат = Перечисления.СтавкиНДС.БезНДС;
				
			ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "VAT0" Тогда
				Результат = Перечисления.СтавкиНДС.НДС0;
				
			ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "VAT10" Тогда
				Результат = Перечисления.СтавкиНДС.НДС10;
				
			ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "VAT18" Тогда
				Результат = Перечисления.СтавкиНДС.НДС18;
				
			ИначеЕсли ЗначениеЗаполнения.ЗначениеСвойства = "VAT20" Тогда
				Результат = Перечисления.СтавкиНДС.НДС20;
				
			КонецЕсли;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипРеквизита = Тип("СправочникСсылка.Контрагенты")
			И ТипЗнч(ЗначениеЗаполнения) = Тип("ОбъектXDTO")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "objectID") Тогда
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "correspondent") Тогда
			КонтрагентXDTO = ЗначениеЗаполнения.correspondent;
		Иначе
			КонтрагентXDTO = ЗначениеЗаполнения;
		КонецЕсли;
		
		Результат = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СсылкаНаОбъектИСПоДаннымДокументооборота(
			КонтрагентXDTO.objectID.ID,
			КонтрагентXDTO.objectID.type,
			ТипРеквизита);
		
		Если Результат = Неопределено Тогда
			
			// Возможно, соответствия созданы синхронизацией данных и унаследовали идентификаторы.
			СсылкаПоИдентификатору = Справочники.Контрагенты.ПолучитьСсылку(
				Новый УникальныйИдентификатор(КонтрагентXDTO.objectID.ID));
			
			// Возможно исключение RLS.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.Ссылка = &СсылкаПоИдентификатору");
			Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				// Контрагент найден.
				Результат = Выборка.Ссылка;
				
			ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КонтрагентXDTO, "name")
					И КонтрагентXDTO.name <> "" Тогда
				
				// Продолжим поиск по ИНН/КПП.
				Наименование = КонтрагентXDTO.name;
				ИНН = "";
				КПП = "";
				
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КонтрагентXDTO, "inn") Тогда
					ИНН = КонтрагентXDTO.inn;
				КонецЕсли;
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КонтрагентXDTO, "kpp") Тогда
					КПП = КонтрагентXDTO.kpp;
				КонецЕсли;
				
				Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Контрагенты.Ссылка КАК Ссылка,
					|	0 КАК Приоритет
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&ИНН <> """"
					|	И &КПП <> """"
					|	И Контрагенты.ИНН = &ИНН
					|	И Контрагенты.КПП = &КПП
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	1
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&ИНН <> """"
					|	И (&КПП = """"
					|			ИЛИ Контрагенты.КПП = """")
					|	И Контрагенты.ИНН = &ИНН
					|	И Контрагенты.Наименование = &Наименование
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	2
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&КПП <> """"
					|	И (&ИНН = """"
					|			ИЛИ Контрагенты.ИНН = """")
					|	И Контрагенты.КПП = &КПП
					|	И Контрагенты.Наименование = &Наименование
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	3
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	&ИНН <> """"
					|	И (&КПП = """"
					|			ИЛИ Контрагенты.КПП = """")
					|	И Контрагенты.ИНН = &ИНН
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Контрагенты.Ссылка,
					|	4
					|ИЗ
					|	Справочник.Контрагенты КАК Контрагенты
					|ГДЕ
					|	(&ИНН = """"
					|			ИЛИ Контрагенты.ИНН = """")
					|	И (&КПП = """"
					|			ИЛИ Контрагенты.КПП = """")
					|	И Контрагенты.Наименование = &Наименование
					|	И НЕ Контрагенты.ПометкаУдаления
					|
					|УПОРЯДОЧИТЬ ПО
					|	Приоритет");
				Запрос.УстановитьПараметр("ИНН", ИНН);
				Запрос.УстановитьПараметр("КПП", КПП);
				Запрос.УстановитьПараметр("Наименование", Наименование);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					
					// Контрагент найден.
					Результат = Выборка.Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли
		
	КонецЕсли;
	
	Если ТипРеквизита = Тип("СправочникСсылка.Организации")
			И ТипЗнч(ЗначениеЗаполнения) = Тип("ОбъектXDTO")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "objectID") Тогда
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "organization") Тогда
			ОрганизацияXDTO = ЗначениеЗаполнения.organization;
		Иначе
			ОрганизацияXDTO = ЗначениеЗаполнения;
		КонецЕсли;
		
		Результат = РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СсылкаНаОбъектИСПоДаннымДокументооборота(
			ОрганизацияXDTO.objectID.ID,
			ОрганизацияXDTO.objectID.type,
			ТипРеквизита);
		
		Если Результат = Неопределено Тогда
			
			// Возможно, соответствия созданы синхронизацией данных и унаследовали идентификаторы.
			СсылкаПоИдентификатору = Справочники.Организации.ПолучитьСсылку(
				Новый УникальныйИдентификатор(ОрганизацияXDTO.objectID.ID));
			
			// Возможно исключение RLS.
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	Организации.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Организации КАК Организации
				|ГДЕ
				|	Организации.Ссылка = &СсылкаПоИдентификатору");
			Запрос.УстановитьПараметр("СсылкаПоИдентификатору", СсылкаПоИдентификатору);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				// Организация найдена.
				Результат = Выборка.Ссылка;
				
			ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОрганизацияXDTO, "name")
					И ОрганизацияXDTO.name <> "" Тогда
				
				// Продолжим поиск по ИНН/КПП.
				Наименование = ОрганизацияXDTO.name;
				ИНН = "";
				КПП = "";
				
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОрганизацияXDTO, "inn") Тогда
					ИНН = ОрганизацияXDTO.inn;
				КонецЕсли;
				Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОрганизацияXDTO, "kpp") Тогда
					КПП = ОрганизацияXDTO.kpp;
				КонецЕсли;
				
				Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Организации.Ссылка КАК Ссылка,
					|	0 КАК Приоритет
					|ИЗ
					|	Справочник.Организации КАК Организации
					|ГДЕ
					|	&ИНН <> """"
					|	И &КПП <> """"
					|	И Организации.ИНН = &ИНН
					|	И Организации.КПП = &КПП
					|	И НЕ Организации.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Организации.Ссылка,
					|	1
					|ИЗ
					|	Справочник.Организации КАК Организации
					|ГДЕ
					|	&ИНН <> """"
					|	И (&КПП = """"
					|			ИЛИ Организации.КПП = """")
					|	И Организации.ИНН = &ИНН
					|	И Организации.Наименование = &Наименование
					|	И НЕ Организации.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Организации.Ссылка,
					|	2
					|ИЗ
					|	Справочник.Организации КАК Организации
					|ГДЕ
					|	&КПП <> """"
					|	И (&ИНН = """"
					|			ИЛИ Организации.ИНН = """")
					|	И Организации.КПП = &КПП
					|	И Организации.Наименование = &Наименование
					|	И НЕ Организации.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Организации.Ссылка,
					|	3
					|ИЗ
					|	Справочник.Организации КАК Организации
					|ГДЕ
					|	&ИНН <> """"
					|	И (&КПП = """"
					|			ИЛИ Организации.КПП = """")
					|	И Организации.ИНН = &ИНН
					|	И НЕ Организации.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	Организации.Ссылка,
					|	4
					|ИЗ
					|	Справочник.Организации КАК Организации
					|ГДЕ
					|	(&ИНН = """"
					|			ИЛИ Организации.ИНН = """")
					|	И (&КПП = """"
					|			ИЛИ Организации.КПП = """")
					|	И Организации.Наименование = &Наименование
					|	И НЕ Организации.ПометкаУдаления
					|
					|УПОРЯДОЧИТЬ ПО
					|	Приоритет");
				Запрос.УстановитьПараметр("ИНН", ИНН);
				Запрос.УстановитьПараметр("КПП", КПП);
				Запрос.УстановитьПараметр("Наименование", Наименование);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					
					// Организация найдена.
					Результат = Выборка.Ссылка;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли
		
	КонецЕсли;
	
	Если ТипРеквизита = Тип("СправочникСсылка.Банки")
			И ТипЗнч(ЗначениеЗаполнения) = Тип("ОбъектXDTO")
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "objectID")
			И ЗначениеЗаполнения.objectID.type = "DMBank" Тогда
		
		Наименование = ЗначениеЗаполнения.name;
		Код = "";
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "BIC") Тогда
			Код = ЗначениеЗаполнения.BIC;
		КонецЕсли;
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Банки.Ссылка КАК Ссылка,
			|	0 КАК Приоритет
			|ИЗ
			|	Справочник.Банки КАК Банки
			|ГДЕ
			|	&Код <> """"
			|	И Банки.Код = &Код
			|	И НЕ Банки.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Банки.Ссылка,
			|	1
			|ИЗ
			|	Справочник.Банки КАК Банки
			|ГДЕ
			|	Банки.Наименование = &Наименование
			|	И НЕ Банки.ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет");
		Запрос.УстановитьПараметр("Код", Код);
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеЗаполнения) = Тип("ОбъектXDTO")
			И ЗначениеЗаполнения.objectID.type = "DMBankAccount"
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "number") Тогда
		Запрос = Новый Запрос;
		МассивТекстЗапроса = Новый Массив;
		Если ТипРеквизита = Тип("СправочникСсылка.БанковскиеСчета") Тогда
			МассивТекстЗапроса.Добавить(
				"ВЫБРАТЬ
				|	БанковскиеСчета.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.БанковскиеСчета КАК БанковскиеСчета
				|ГДЕ
				|	БанковскиеСчета.НомерСчета = &НомерСчета
				|	И НЕ БанковскиеСчета.ПометкаУдаления");
		Иначе
			Возврат;
		КонецЕсли;
		Запрос.УстановитьПараметр("НомерСчета", ЗначениеЗаполнения.number);
		
		Банк = Неопределено;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "bank") Тогда
			Банк = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеРеквизитаПоОбъектуXDTO(
				ЗначениеЗаполнения.bank,
				Тип("СправочникСсылка.Банки"));
		КонецЕсли;
		Если ЗначениеЗаполнено(Банк) Тогда
			МассивТекстЗапроса.Добавить("И БанковскиеСчета.Банк = &Банк");
			Запрос.УстановитьПараметр("Банк", Банк);
		КонецЕсли;
		
		Владелец = Неопределено;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗначениеЗаполнения, "owner") Тогда
			ТипВладельца = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ТипИС(
				ЗначениеЗаполнения.owner.objectID.type);
			Если ЗначениеЗаполнено(ТипВладельца) Тогда
				Владелец = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеРеквизитаПоОбъектуXDTO(
					ЗначениеЗаполнения.owner,
					ТипВладельца);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Владелец) Тогда
			МассивТекстЗапроса.Добавить("И БанковскиеСчета.Владелец = &Владелец");
			Запрос.УстановитьПараметр("Владелец", Владелец);
		КонецЕсли;
		
		Запрос.Текст = СтрСоединить(МассивТекстЗапроса, Символы.ПС);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить индекс картинки элемента справочника.
//
// Параметры:
//   ИндексаКартинки - Число - индекс картинки.
//
Процедура ПриОпределенииИндексаКартинкиЭлементаСправочника(ИндексаКартинки) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить проверку необходимости вывода команды присоединенных файлов из библиотеки
// интеграции с 1С:Документооборотом на форму объекта ИС.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - проверяемая форма.
//   Результат - Булево - неявно возвращаемое значение, результат проверки. Если результат равен Истина,
//     команда "Файлы ДО" будет выводиться на форму.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная проверка
//     производиться не будет.
//
// Пример:
//	ИмяФормыМассив = СтрРазделить(Форма.ИмяФормы, ".");
//	ИмяТипаОбъектаФормы = СтрШаблон("%1.%2", ИмяФормыМассив[0], ИмяФормыМассив[1]);
//	Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,,ИмяТипаОбъектаФормы);
//	
//	Если Правила.Количество() = 0 Тогда
//		// Возможно в переопределяемом модуле прописано автоматическое создание правил для данного типа объекта ИС
//		СозданныеПравила = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьПравилаИнтеграцииАвтоматически(
//			ИмяТипаОбъектаФормы);
//		Если СозданныеПравила.Количество() > 0 Тогда
//			Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(,,ИмяТипаОбъектаФормы);
//		КонецЕсли;
//	КонецЕсли;
//	
//	Результат = (Правила.Количество() <> 0);
//
Процедура ПриОпределенииНеобходимостиВыводитьКомандуПрисоединенныхФайловДО(Форма, Результат,
		СтандартнаяОбработка) Экспорт
	
	ИмяФормыМассив = СтрРазделить(Форма.ИмяФормы, ".");
	ИмяОбъекта = СтрШаблон("%1.%2", ИмяФормыМассив[0], ИмяФормыМассив[1]);
	
	Если ИмяОбъекта = "Справочник.НоменклатураКонтрагентов" Тогда
		СтандартнаяОбработка = Ложь;
		Попытка
			Правила = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.НайтиСоздатьПодходящиеПравила(,
				ИмяОбъекта);
			Результат = (Правила.Количество() <> 0);
		Исключение
			Результат = Ложь;
		КонецПопытки;
		Возврат;
	КонецЕсли;
	
	Если ИмяОбъекта = "Документ.ПоступлениеТоваровУслуг"
			Или ИмяОбъекта = "Документ.РеализацияТоваровУслуг"
			Или ИмяОбъекта = "Документ.ПлатежноеПоручение"
			Или ИмяОбъекта = "Документ.СчетНаОплатуПокупателю"
			Или ИмяОбъекта = "Документ.СчетНаОплатуПоставщика"
			Или ИмяОбъекта = "Документ.СчетФактураПолученный"
			Или ИмяОбъекта = "Документ.ПоступлениеДопРасходов"
			Или ИмяОбъекта = "Справочник.ДоговорыКонтрагентов"
			Или ИмяОбъекта = "Справочник.ДоговорыКонтрагентов" Тогда
		Результат = Ложь;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ФормаОбщаяКомандаПрисоединенныеФайлыБП") <> Неопределено
			Или Форма.Элементы.Найти("ОбщаяКомандаПрисоединенныеФайлы") <> Неопределено
			Или Форма.Элементы.Найти("ОбщаяКомандаПрисоединенныеФайлыКОбъекту") <> Неопределено
			Или Форма.Элементы.Найти("ОбщаяКомандаПрисоединенныеФайлыБЗК") <> Неопределено
			Или Форма.Элементы.Найти("СписокОбщаяКомандаПрисоединенныеФайлы") <> Неопределено
			Или Форма.Элементы.Найти("ФормаОбщаяКомандаПрисоединенныеФайлы") <> Неопределено
			Или Форма.Элементы.Найти("ФормаОбщаяКомандаПрисоединенныеФайлыКОбъекту") <> Неопределено
			Или Форма.Элементы.Найти("ФормаОбщаяКомандаПрисоединенныеФайлыБЗК") <> Неопределено
			Или Форма.Элементы.Найти("ФормаОбщаяКомандаПрисоединенныеФайлыБЗК1") <> Неопределено Тогда
		Результат = Ложь;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет реквизиты проведенного документа, подлежащие обновлению при их изменении в ДО.
//
// Параметры:
//   ПолноеИмя - Строка - полное имя объекта, как оно задано в метаданных, напр., Документ.ЗаказКлиента.
//   ОбновляемыеРеквизиты - Массив из Строка - неявно возвращаемое значение, имена реквизитов, обновление которых возможно.
//
// Пример:
//	ОбновляемыеРеквизиты.Добавить("Комментарий");
//	Если ПолноеИмя = "Документ.ЗаказКлиента" Тогда
//		ОбновляемыеРеквизиты.Добавить("Состояние");
//	КонецЕсли;
//
Процедура ПриОпределенииОбновляемыхРеквизитовПроведенногоДокумента(ПолноеИмя, ОбновляемыеРеквизиты) Экспорт
	
	ОбновляемыеРеквизиты.Добавить("Комментарий");
	ОбновляемыеРеквизиты.Добавить("Статус");
	ОбновляемыеРеквизиты.Добавить("Состояние");
	
КонецПроцедуры

// Вызывается при построении списка интегрируемых объектов. В переданную таблицу следует добавить
// типы объектов, поддерживающих автоматическую настройку бесшовной интеграции с созданием правил
// интеграции и заполнением связанных данных.
//
// Параметры:
//   Объекты - ТаблицаЗначений - заполняемая таблица с колонками:
//     ИмяТипаОбъекта - Строка - полное имя типа, как задано в метаданных.
//     ОписаниеВыполняемыхДействий - Строка - необязательна, краткое описание действий, выполняемых
//        при автоматической настройке.
//
// Пример:
//	Строка = Объекты.Добавить();
//	Строка.ИмяТипаОбъекта = "Справочник._ДемоДоговорыКонтрагентов";
//	Строка.ОписаниеВыполняемыхДействий =
//		НСтр("ru = 'Будут созданы правила интеграции и виды внутренних документов для всех видов договоров.'");
//
Процедура ПриОпределенииОбъектовПоддерживающихАвтонастройку(Объекты) Экспорт
	
	НомерРедакции = Лев(ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса, 1);
	
	Если НомерРедакции = "2" Тогда
		НоваяСтрока = Объекты.Добавить();
		НоваяСтрока.ИмяТипаОбъекта = "Документ.ПоступлениеТоваровУслуг";
		НоваяСтрока.ОписаниеВыполняемыхДействий =
			НСтр("ru = 'Будут созданы правила интеграции для каждого вида поступления.
				|В 1С:Документообороте будет создан вид входящего документа.'");
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при добавлении связи к объекту ИС, связанному с объектом ДО.
// Позволяет дополнить список подходящих объектов, предъявляемый пользователю,
// теми объектами, которые не могут быть определены автоматически по ссылкам
// из шапки или из табличных частей объекта ИС.
//
// Параметры:
//   ОбъектИС - Произвольный - ссылка на объект ИС.
//   ПодходящиеОбъекты - Массив из ЛюбаяСсылка - дополняемый массив объектов ИС, подходящих для добавления связи.
//
Процедура ПриОпределенииПодходящихОбъектовДляДобавленияСвязи(ОбъектИС, ПодходящиеОбъекты) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение пояснения к состоянию согласования, предназначенное для чтения пользователем.
//
// Параметры:
//   Установил - Строка - представление пользователя, установившего новое состояние.
//   ДатаУстановки - Дата - дата и время установки нового состояния.
//   Пояснение - Строка - пояснение к состоянию согласования.
//
Процедура ПриОпределенииПоясненияСостоянияСогласования(Установил, ДатаУстановки, Пояснение) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить предельное количество объектов, выбираемых сервисом при получении списков.
//
// Параметры:
//   Тип - Строка - тип объекта XDTO
//   ПредельноеКоличество - Число - предельное количество элементов, выбираемых за раз.
//
// Пример:
//	Если Тип = "DMCorrespondent" Тогда ПредельноеКоличество = 50 ИначеЕсли <...>
//
Процедура ПриОпределенииПредельногоКоличестваВыбираемыхОбъектов(Тип, ПредельноеКоличество) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить предельное количество объектов, которые будут выгружены в сообщение
// обмена с 1С:Документооборот.
//
// Параметры:
//   ПредельноеКоличествоОбъектовВСообщении - Число - предельное количество объектов.
//
// Пример:
//	ПредельноеКоличествоОбъектовВСообщении = 100;
//
Процедура ПриОпределенииПредельногоКоличестваОбъектовВСообщенииОбмена(ПредельноеКоличествоОбъектовВСообщении) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет представление вида объекта интегрируемой конфигурации.
//
// Параметры:
//   Правило - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом
//           - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом3 - правило, для которого
//     определяется представление.
//   ПредставлениеВидаОбъектаПотребителя - Строка - неявно возвращаемое значение, переопределяемое представление
//             вида объекта. По умолчанию определяется как представление объекта с ключевыми реквизитами.
//
// Пример:
//	Если Правило.ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг" Тогда
//		СтруктураПоиска = Новый Структура;
//		СтруктураПоиска.Вставить("Ключевой", Истина);
//		СтруктураПоиска.Вставить("ИмяРеквизитаОбъектаИС", "ВидОперации");
//		КлючевыеРеквизиты = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(СтруктураПоиска);
//		Если КлючевыеРеквизиты.Количество() > 0 Тогда
//			ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизитаИС;
//			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
//				ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Товары (накладная)'");
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииПредставленияВидаОбъектаПотребителя(Правило, ПредставлениеВидаОбъектаПотребителя) Экспорт
	
	Если Правило.ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг" Тогда
		
		ВидОперации = Неопределено;
		
		Если ТипЗнч(Правило) = Тип("СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом") Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Ключевой", Истина);
			СтруктураПоиска.Вставить("ИмяРеквизитаОбъектаИС", "ВидОперации");
			
			КлючевыеРеквизиты = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(СтруктураПоиска);
			Если КлючевыеРеквизиты.Количество() > 0 Тогда
				ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизитаИС;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Правило) = Тип("СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3") Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя", "ВидОперации");
			
			КлючевыеРеквизиты = Правило.КлючевыеРеквизитыИС.НайтиСтроки(СтруктураПоиска);
			Если КлючевыеРеквизиты.Количество() > 0 Тогда
				ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
			ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Товары (накладная)'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
			ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Услуги (акт)'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
			ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Товары, услуги, комиссия'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Материалы в переработку'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Оборудование'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
			ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Объекты строительства'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды Тогда
			ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Услуги аренды'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга Тогда
			ПредставлениеВидаОбъектаПотребителя = НСтр("ru = 'Услуги лизинга'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет представление объекта интегрируемой конфигурации. Используется, если стандартное
// представление из синонима и ключевых реквизитов через запятую оказывается недостаточно читабельным.
//
// Параметры:
//   Правило - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом
//           - СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом3 - правило, для которого
//     определяется представление.
//   ПредставлениеОбъектаПотребителя - Строка - неявно возвращаемое значение, переопределяемое представление
//             объекта. По умолчанию собирается из синонима объекта и значений ключевых реквизитов правила.
//
// Пример:
//	Если Правило.ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг" Тогда
//		СтруктураПоиска = Новый Структура;
//		СтруктураПоиска.Вставить("Ключевой", Истина);
//		СтруктураПоиска.Вставить("ИмяРеквизитаОбъектаИС", "ВидОперации");
//		КлючевыеРеквизиты = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(СтруктураПоиска);
//		Если КлючевыеРеквизиты.Количество() > 0 Тогда
//			ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизитаИС;
//			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
//				ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление товаров'");
//			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
//				ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление услуг'");
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииПредставленияОбъектаПотребителя(Правило, ПредставлениеОбъектаПотребителя) Экспорт
	
	Если Правило.ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг" Тогда
		
		ВидОперации = Неопределено;
		
		Если ТипЗнч(Правило) = Тип("СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом") Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Ключевой", Истина);
			СтруктураПоиска.Вставить("ИмяРеквизитаОбъектаИС", "ВидОперации");
			
			КлючевыеРеквизиты = Правило.ПравилаЗаполненияРеквизитовИС.НайтиСтроки(СтруктураПоиска);
			Если КлючевыеРеквизиты.Количество() > 0 Тогда
				ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизитаИС;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Правило) = Тип("СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3") Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя", "ВидОперации");
			
			КлючевыеРеквизиты = Правило.КлючевыеРеквизитыИС.НайтиСтроки(СтруктураПоиска);
			Если КлючевыеРеквизиты.Количество() > 0 Тогда
				ВидОперации = КлючевыеРеквизиты[0].ЗначениеРеквизита;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Товары Тогда
			ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление товаров'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги Тогда
			ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление услуг'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
			ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление (товары, услуги, комиссия)'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление в переработку'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление оборудования'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
			ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление объектов строительства'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды Тогда
			ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление услуг аренды'");
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга Тогда
			ПредставлениеОбъектаПотребителя = НСтр("ru = 'Поступление услуг лизинга'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить получение доступности интеграции для текущего пользователя. Может переопределяться
// при отказе от использования поставляемой роли ИспользованиеИнтеграцииС1СДокументооборотом.
//
// Параметры:
//   Разрешено - Булево - Истина, если использование интеграции разрешено.
//
Процедура ПриОпределенииРазрешенияПользователяИспользоватьИнтеграцию(Разрешено) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение возможности запуска согласования в ДО.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект ИС.
//   ТекстПредупреждения - Строка - неявно возвращаемое значение, текст предупреждения.
//   Разрешено - Булево - Истина, если запуск согласования разрешен, Ложь - запрещен, Неопределено - согласно ролям.
//
// Пример:
//	Если ТипЗнч(ПредметСогласования) = Тип("ДокументСсылка._ДемоЗаказПокупателя") Тогда
//		Если ПредметСогласования.Состояние <> Перечисления._ДемоСостоянияЗаказаПокупателя.НаСогласовании Тогда
//			ТекстПредупреждения = НСтр("ru = 'Создание процесса согласования разрешено только на основании
//				|документов в состоянии ""На согласовании"".'");
//			Разрешено = Ложь;
//		КонецЕсли;
//	КонецЕсли;
//
Процедура ПриОпределенииРазрешенияПользователяНаЗапускСогласования(ПредметСогласования, ТекстПредупреждения,
		Разрешено) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение возможности прерывания согласования в ДО.
//
// Параметры:
//   ПредметСогласования - ЛюбаяСсылка - согласуемый объект ИС.
//   ПредметДО - Структура - описание связанного объекта ДО:
//      name - Строка - представление связанного объекта.
//      ID - Строка - идентификатор связанного объекта.
//      type - Строка - имя типа XDTO.
//   ТекстПредупреждения - Строка - неявно возвращаемое значение, текст предупреждения.
//   Разрешено- Булево - Истина, если прерывание согласования разрешено, Ложь - запрещено, Неопределено - согласно ролям.
//
Процедура ПриОпределенииРазрешенияПользователяНаПрерываниеСогласования(ПредметСогласования, ПредметДО,
		ТекстПредупреждения, Разрешено) Экспорт
	
	
	
КонецПроцедуры

// Уточняет сокращенное наименование интегрируемой конфигурации для вывода в заголовках и декорациях.
//
// Параметры:
//   СокращенноеНаименование - Строка - неявно возвращаемое значение, краткое название конфигурации.
//
// Пример:
//	СокращенноеНаименование = НСтр("ru = '1С:ERP УП'");
//
Процедура ПриОпределенииСокращенногоНаименованияКонфигурации(СокращенноеНаименование) Экспорт
	
	СокращенноеНаименование = НСтр("ru = 'БП КОРП'");
	
КонецПроцедуры

// Вызывается при определении таймаута веб-сервиса. При необходимости таймаут может быть вынесен в
// настройки администратора интеграции и переопределен в этой процедуре.
//
// Параметры:
//   Таймаут - Число - неявно возвращаемое значение, время в секундах, по истечении которого вызов
//     веб-сервиса Документооборота считается неудачным.
//
Процедура ПриОпределенииТаймаутаСервиса(Таймаут) Экспорт
	
	
	
КонецПроцедуры

// Переопределяет типы объектов ИС, поддерживающие бесшовную интеграцию. По умолчанию заполняется всеми
// типами, входящими в состав типов параметров общих команд подсистемы ИнтеграцияС1СДокументооборотом.
//
// Параметры:
//   Типы - Массив из Тип - массив объектов типа Тип.
//
Процедура ПриОпределенииТиповОбъектовПоддерживающихИнтеграцию(Типы) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение штрихкода документа для присвоения связанному документу ДО.
//
// Параметры:
//   Документ - ЛюбаяСсылка - объект ИС, на основании которого создается документ ДО.
//   Штрихкод - Строка - штрихкод для присвоения связанному документу ДО.
//
// Пример:
//	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкодированиеПечатныхФормОбъектов") Тогда
//		ШестнадцатиричноеЧисло = НРег(СтрЗаменить(Документ.УникальныйИдентификатор(), "-", ""));
//		ДлинаСтроки = СтрДлина(ШестнадцатиричноеЧисло);
//		Результат = 0;
//		Для НомерСимвола = 1 По ДлинаСтроки Цикл
//			Результат = Результат * 16 + Найти("0123456789abcdef",
//				Сред(ШестнадцатиричноеЧисло, НомерСимвола, 1)) - 1;
//		КонецЦикла;
//		Штрихкод = Формат(Результат, "ЧГ=0");
//	Иначе
//		Штрихкод = "";
//	КонецЕсли;
//
Процедура ПриОпределенииШтрихкодаДокумента(Документ, Штрихкод) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при получении WSПрокси. Переопределяется, если в конфигурации есть возможность настройки интернет-прокси.
//
// Параметры:
//   ИнтернетПрокси - Неопределено - неявно возвращаемое значение, может быть инициализировано значением
//     типа ИнтернетПрокси.
//
Процедура ПриПолученииWSПрокси(ИнтернетПрокси) Экспорт
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http");
	
КонецПроцедуры

// Позволяет переопределить или дополнить список зависимых друг от друга констант. Необходимо, когда при
// включении одной константы, какие-либо другие константы должны выключаться и наоборот.
//
// Параметры:
//   ТаблицаКонстант - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗависимостиКонстант
//
// Пример:
//	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДобавитьСтрокуТаблицыЗависимостиКонстант(
//		ТаблицаКонстант,
//		"ИспользоватьСогласованиеЧерез1СДокументооборот",
//		Истина,
//		"ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов",
//		Ложь);
//
Процедура ПриПолученииТаблицыЗависимостиКонстант(ТаблицаКонстант) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить получение JWT-токена для авторизации в веб-сервисе Документооборота.
//
// Параметры:
//   ТекстТокенаДоступа - Строка - неявно возвращаемое значение, JWT-токен строкой.
//
// Пример:
//	ТокенДоступа = Новый ТокенДоступа;
//	ПараметрыТокена = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПараметрыТокенаДоступа();
//	ЗаполнитьЗначенияСвойств(ТокенДоступа, ПараметрыТокена);
//	КлючПодписиТокена = Константы.КлючПодписиТокенаДоступа1СДокументооборот.Получить();
//	ТокенДоступа.Подписать(АлгоритмПодписиТокенаДоступа.HS256, КлючПодписиТокена);
//	ТекстТокенаДоступа = Строка(ТокенДоступа);
//
Процедура ПриПолученииТокенаДоступа(ТекстТокенаДоступа) Экспорт
	
	
	
КонецПроцедуры

// Проверяет соответствие правила интеграции функциональным опциям. Вызывается при выборе подходящего правила
// и позволяет отказаться от правил, связанных с объектами, выключенными по ФО.
//
// Параметры:
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом - проверяемое правило.
//   ТипОбъектаДО - Строка - Тип объекта ДО.
//   ТипОбъектаИС - Строка - Тип объекта ИС (полное имя в метаданных).
//   Отказ - Булево - при установке в Истина правило не будет использоваться.
//   ИмяКлючевогоРеквизита - Строка - имя ключевого реквизита правила.
//   ЗначениеКлючевогоРеквизита - Произвольный - значение ключевого реквизита правила.
//
// Пример:
//	Если ТипОбъектаИС = "Документ.ПоступлениеНМА"
//			И Не ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА") Тогда
//		Отказ = Истина;
//		Возврат;
//	КонецЕсли;
//
Процедура ПриПроверкеСоответствияПравилаФункциональнымОпциям(Правило, ТипОбъектаДО, ТипОбъектаИС, Отказ,
		ИмяКлючевогоРеквизита = "", ЗначениеКлючевогоРеквизита = Неопределено) Экспорт
	
	Если ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг" И ИмяКлючевогоРеквизита = "ВидОперации" Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность")
				И ЗначениеКлючевогоРеквизита = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств")
				И (ЗначениеКлючевогоРеквизита = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиАренды
					Или ЗначениеКлючевогоРеквизита = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.УслугиЛизинга
					Или ЗначениеКлючевогоРеквизита = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование
					Или ЗначениеКлючевогоРеквизита = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства) Тогда
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаИС = "Документ.ПоступлениеНМА" И Не ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА") Тогда
		
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли ТипОбъектаИС = "Документ.ПоступлениеВАренду"
			И Не ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств") Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет представление формы выбора правила интеграции. Используется при неоднозначности правил и
// позволяет предложить пользователю менее техногенную форму выбора.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма ВыборПравила обработки ИнтеграцияС1СДокументооборот.
//
// Пример:
//	Форма.Заголовок = НСтр("ru = 'Форма документа'");
//	Форма.Автозаголовок = Ложь;
//	Форма.Пояснение = НСтр("ru = 'Выберите вид документа:'");
//	Форма.Элементы.Пояснение.Видимость = Истина;
//
Процедура ПриСозданииНаСервереФормыВыбораПравила(Форма) Экспорт
	
	Форма.Заголовок = НСтр("ru = 'Форма документа'");
	Форма.Автозаголовок = Ложь;
	
	Форма.Пояснение = НСтр("ru = 'Выберите вид документа:'");
	Форма.Элементы.Пояснение.Видимость = Истина;
	
КонецПроцедуры

// Вызывается при создании объекта ИС по ссылке в реквизите объекта ДО. Может использоваться для
// дозаполнения реквизитов нового объекта ИС, например, если стандартный обработчик заполнения не
// заполняет обязательные реквизиты по умолчанию.
// Внимание, поскольку данная процедура может выполняться в ходе обмена данными с ДО, в ней
// не рекомендуется выполнять никакие обращения к веб-сервису ДО, а также получать прокси сервиса ДО.
//
// Параметры:
//   ОбъектИС - Произвольный - созданный, но еще не записанный объект ИС.
//   ОбъектXDTO - ОбъектXDTO - исходный объект, соответствие которому не найдено в текущей ИБ.
//   ЗаполняемыйОбъектИС - Произвольный - объект ИС, в ходе заполнения которого вызывается создание
//     ОбъектИС по ссылке. Обеспечивает контекст, необходимый для заполнения ОбъектИС.
//
// Пример:
//	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект._ДемоОрганизации") Тогда
//		ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
//		Если ОбъектXDTO.objectID.type = "DMOrganization"
//				И ОбъектXDTO.objectID.ID = "ИндивидуальныйПредприниматель" Тогда
//			ОбъектИС.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
//		КонецЕсли;
//	КонецЕсли;
//	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект._ДемоБанковскиеСчета")
//			И ОбъектXDTO.objectID.type = "DMBankAccount" Тогда
//		ОбъектИС.НомерСчета = ОбъектXDTO.number;
//	КонецЕсли;
//
Процедура ПриСозданииПоСсылке(ОбъектИС, ОбъектXDTO, ЗаполняемыйОбъектИС = Неопределено) Экспорт
	
	Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Организации")
			Или ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		ИсточникXDTO = Неопределено;
		Если (ОбъектXDTO.objectID.type = "DMParty" Или ОбъектXDTO.Тип().Имя = "DMParty") Тогда
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "correspondent") Тогда
				ИсточникXDTO = ОбъектXDTO.correspondent;
			ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "organization") Тогда
				ИсточникXDTO = ОбъектXDTO.organization;
			КонецЕсли;
			
		ИначеЕсли ОбъектXDTO.objectID.type = "DMCorrespondent" Или ОбъектXDTO.objectID.type = "DMOrganization" Тогда
			ИсточникXDTO = ОбъектXDTO;
			
		КонецЕсли;
		
		ОбъектИС.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
		Если ИсточникXDTO <> Неопределено Тогда
			
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
					ИсточникXDTO, "legalPrivatePerson") Тогда
				
				Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
				
				Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
					
					Если ИсточникXDTO.legalPrivatePerson.objectID.ID = "ИндивидуальныйПредприниматель"
							Или ИсточникXDTO.legalPrivatePerson.objectID.ID = "ФизическоеЛицо" Тогда
						ОбъектИС.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
					КонецЕсли;
					
				ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
					
					Если ИсточникXDTO.legalPrivatePerson = "Individ"
							Или ИсточникXDTO.legalPrivatePerson = "IndividualEntrepreneur" Тогда
						ОбъектИС.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ИсточникXDTO, "inn") Тогда
				ОбъектИС.ИНН = ИсточникXDTO.inn;
				Если СтрДлина(ИсточникXDTO.inn) = 12 Тогда
					ОбъектИС.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
				КонецЕсли;
			КонецЕсли;
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ИсточникXDTO, "kpp") Тогда
				ОбъектИС.КПП = ИсточникXDTO.kpp;
			КонецЕсли;
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ИсточникXDTO, "okpo") Тогда
				ОбъектИС.КодПоОКПО = ИсточникXDTO.okpo;
			КонецЕсли;
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ИсточникXDTO, "fullName") Тогда
				ОбъектИС.НаименованиеПолное = ИсточникXDTO.fullName;
			КонецЕсли;
			
			// Заполнение физ. лица для организации-ИП.
			Если ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Организации")
					И ОбъектИС.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.НайтиПоНаименованию(ОбъектИС.Наименование, Истина);
				Если ФизическоеЛицоСсылка = Неопределено Тогда
					ФизическоеЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
					ФизическоеЛицо.Наименование = ОбъектИС.Наименование;
					ФизическоеЛицо.ФИО = ОбъектИС.Наименование;
					ФизическоеЛицо.Записать();
					ФизическоеЛицоСсылка = ФизическоеЛицо.Ссылка;
				КонецЕсли;
				ОбъектИС.ИндивидуальныйПредприниматель = ФизическоеЛицоСсылка;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.ПодразделенияОрганизаций")
			И ЗаполняемыйОбъектИС <> Неопределено Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ЗаполняемыйОбъектИС.Метаданные())
				И ЗначениеЗаполнено(ЗаполняемыйОбъектИС.Организация) Тогда
			ОбъектИС.Владелец = ЗаполняемыйОбъектИС.Организация;
		Иначе
			ОбъектИС.Владелец = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектXDTO.objectID.type = "DMPrivatePerson"
			И ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ОбъектИС.ФИО = ОбъектXDTO.name;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "birthDay") Тогда
			ОбъектИС.ДатаРождения = ОбъектXDTO.birthDay;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектXDTO.objectID.type = "DMBank"
			И ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "BIC")
			И (ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.КлассификаторБанков")
				Или ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.Банки")) Тогда
		ОбъектИС.Код = ОбъектXDTO.BIC;
	КонецЕсли;
	
	Если ОбъектXDTO.objectID.type = "DMBankAccount"
			И ТипЗнч(ОбъектИС) = Тип("СправочникОбъект.БанковскиеСчета") Тогда
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "bank") Тогда
			ОбъектИС.Банк = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗначениеРеквизитаПоОбъектуXDTO(
				ОбъектXDTO.bank,
				Тип("СправочникСсылка.Банки"));
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "number") Тогда
			ОбъектИС.НомерСчета = ОбъектXDTO.number;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет переопределить установку правила заполнения при выгрузке по умолчанию.
//
// Параметры:
//   ПравилаЗаполнения - Соответствие из КлючИЗначение - соответствие имен реквизитов свойствам XDTO:
//     * Ключ - Строка - имя реквизита.
//     * Значение - Строка - наименование свойства XDTO.
//   Приемник - Строка - имя XDTO-типа приемника.
//   Источник - Строка - полное имя объекта метаданных-источника.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриУстановкеПравилаЗаполненияПриВыгрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник,
		СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Позволяет переопределить установку правила заполнения при загрузке по умолчанию.
//
// Параметры:
//   ПравилаЗаполнения - Соответствие из КлючИЗначение - соответствие имен реквизитов свойствам XDTO:
//     * Ключ - Строка - имя реквизита.
//     * Значение - см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПравилоЗаполненияИзРеквизитаОбъектаДО
//   Приемник - Строка - полное имя объекта метаданных-приемника.
//   Источник - Строка - имя XDTO-типа источника.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная обработка
//     производиться не будет.
//
Процедура ПриУстановкеПравилаЗаполненияПриЗагрузкеПоУмолчанию(ПравилаЗаполнения, Приемник, Источник,
		СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при обновлении БИД, и сверяет корректность состав определяемых типов с планом обмена.
//
// Параметры:
//   Ошибки - Массив из Строка - список ошибок, выявленных в ходе проверки.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная проверка
//     производиться не будет.
//
Процедура ПроверитьСоответствиеОпределяемыхТиповИПланаОбмена(Ошибки, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Вызывается при обновлении БИД, и сверяет корректность состав определяемых типов между собой.
//
// Параметры:
//   Ошибки - Массив из Строка - список ошибок, выявленных в ходе проверки.
//   СтандартнаяОбработка - Булево - неявно возвращаемое значение, признак того, что стандартная проверка
//     производиться не будет.
//
Процедура ПроверитьСоответствиеОпределяемыхТиповМеждуСобой(Ошибки, СтандартнаяОбработка) Экспорт
	
	
	
КонецПроцедуры

// Устанавливает доступные для выбора режимы изменения реквизита в проведенном документе.
//
// Параметры:
//   ТипОбъектаИС - Строка - представление типа объекта интегрированной системы.
//   РеквизитИС - Строка - представление реквизита интегрированной системы.
//   СписокВыбора - СписокЗначений из ПеречислениеСсылка.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота -
//     доступные значения режимов изменения реквизита.
//
// Пример:
//	Если ТипОбъектаИС = "Документ.ЗаказКлиента" И РеквизитИС = "Статус" Тогда
//		СписокВыбора.Очистить();
//		СписокВыбора.Добавить(
//			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.РазрешеноСПерепроведением);
//		СписокВыбора.Добавить(
//			Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
//	КонецЕсли;
//
Процедура УстановитьРежимыИзмененияВПроведенномДокументе(ТипОбъектаИС, РеквизитИС, СписокВыбора) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти