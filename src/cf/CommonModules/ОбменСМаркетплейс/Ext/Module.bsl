#Область ПрограммныйИнтерфейс

Процедура ЗагрузитьОтчетОПродажах(ПараметрыОтчета, АдресРезультата = Неопределено) Экспорт
	
	Результат = Новый Структура;
	
	СообщениеОбОшибке = "";
	Если ПараметрыОтчета.ВидМаркетплейс = Перечисления.ВидыМаркетплейсов.Wildberries Тогда
		ДанныеДокумента = ПолучитьДанныеДокументаWildberries(ПараметрыОтчета, СообщениеОбОшибке);
	ИначеЕсли ПараметрыОтчета.ВидМаркетплейс = Перечисления.ВидыМаркетплейсов.OZON Тогда
		ДанныеДокумента = ПолучитьДанныеДокументаOZON(ПараметрыОтчета, СообщениеОбОшибке);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Результат.Вставить("ТекстОшибки", СообщениеОбОшибке);
	Иначе
		Результат.Вставить("ДанныеДокумента", ДанныеДокумента);
		Результат.Вставить("ВидДокумента", ДанныеДокумента.ВидДокумента);
	КонецЕсли;
	
	МассивРезультат = Новый Массив;
	МассивРезультат.Добавить(Результат);
	
	ПоместитьВоВременноеХранилище(МассивРезультат, АдресРезультата);
	
КонецПроцедуры

Функция КонтрагентМаркетплейсаПоУмолчанию(ВидМаркетплейса) Экспорт
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Если ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.WILDBERRIES Тогда
		Инн = "7721546864";
	ИначеЕсли ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.OZON Тогда
		Инн = "7704217370";
	Иначе
		Возврат Контрагент;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.ИНН = &ИНН";
	Запрос.УстановитьПараметр("ИНН", Инн);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Контрагент = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

Процедура СохранитьНастройкиАвторизацииOZON(НастройкаИнтеграции, Токен, КлиентИд) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НастройкаИнтеграции, Токен, "Токен");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НастройкаИнтеграции, КлиентИд, "КлиентИд");
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СохранитьНастройкиАвторизацииWildberries(НастройкаИнтеграции, ИмяТокена, Токен) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НастройкаИнтеграции, Токен, ИмяТокена);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Wildberries

Функция ПолучитьДанныеДокументаWildberries(ПараметрыОтчета, СообщениеОбОшибке)
	
	РезультатЧтения = ПрочитатьОтчетWildberries(ПараметрыОтчета, СообщениеОбОшибке);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатЧтения) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не удалось разобрать ответ от маркетплейс. Попробуйте загрузить отчет позже'");
		ЗарегистрироватьОшибкуОбмена(СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("Номер");
	ДанныеДокумента.Вставить("Дата");
	ДанныеДокумента.Вставить("ДатаНач");
	ДанныеДокумента.Вставить("Плательщик", Новый Структура("Ссылка"));
	ДанныеДокумента.Вставить("Получатель", Новый Структура("Ссылка"));
	ДанныеДокумента.Вставить("Договор", Новый Структура("Ссылка"));
	ДанныеДокумента.Вставить("Ссылка");
	ДанныеДокумента.Вставить("ВидДокумента", "Отчет_WB_детальный");
	ДанныеДокумента.Вставить("ТаблицаТоваров", РезультатЧтения.ТаблицаТоваров);
	
	НастройкиЗаполненияДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.НастройкаИнтеграции, "Владелец,Контрагент,ДоговорКонтрагента");
	
	НомерВходящегоДокумента = Формат(РезультатЧтения.ИдентификаторОтчета, "ЧГ=0");
	
	ДанныеДокумента.ДатаНач           = ПараметрыОтчета.НачалоПериода;
	
	ДанныеДокумента.Номер             = НомерВходящегоДокумента;
	ДанныеДокумента.Дата              = ПараметрыОтчета.ОкончаниеПериода;
	ДанныеДокумента.Плательщик.Ссылка = НастройкиЗаполненияДокумента.Контрагент;
	ДанныеДокумента.Получатель.Ссылка = НастройкиЗаполненияДокумента.Владелец;
	ДанныеДокумента.Договор           = НастройкиЗаполненияДокумента.ДоговорКонтрагента;
	ДанныеДокумента.Ссылка            = ПараметрыОтчета.СсылкаНаДокумент;
	ДанныеДокумента.ТаблицаТоваров    = РезультатЧтения.ТаблицаТоваров;
	
	Возврат ДанныеДокумента;
	
КонецФункции

Функция НовыйНастройкиПодключенияWildberries()
	
	НастройкиПодключения = Новый Структура("Токен","");
	
	Возврат НастройкиПодключения;

КонецФункции

Функция АдресСервераСтатистикиWildberries()
	
	Возврат "statistics-api.wildberries.ru";
	
КонецФункции

Функция ВерсияМетодаОтчетОПродажахAPIWildberries(ПериодДействия)
	Если ПериодДействия >= Дата(2024,1,29) Тогда
		Возврат "v5";
	Иначе
		Возврат "v1";
	КонецЕсли;
КонецФункции
	
Функция АдресЗапросаСтатистикиWildberries(ВерсияМетодаAPI)
	
	Возврат СтрШаблон("/api/%1/supplier/reportDetailByPeriod", ВерсияМетодаAPI);
	
КонецФункции

Функция ПрочитатьОтчетWildberries(ПараметрыОтчета, СообщенияОбОшибках)
	
	ТаблицаТоваров = ЭлектронноеВзаимодействиеБП.ПодготовитьТаблицуТоваровМаркетплейс();
	ИдентификаторОтчета = "";
	
	ПараметрыЗапроса = НовыйПараметрыЗапросаОтчетОпродажахWildberries();
	
	НастройкиПодключения = НовыйНастройкиПодключенияWildberries();
	НастройкиПодключения.Токен = ПрочитатьНастройкиАвторизацииWildberries(ПараметрыОтчета.НастройкаИнтеграции);
	
	ПараметрыЗапроса.ВерсияМетодаAPI = ВерсияМетодаОтчетОПродажахAPIWildberries(ПараметрыОтчета.НачалоПериода);
	
	ПараметрыЗапроса.НастройкиПодключения = НастройкиПодключения;
	ПараметрыЗапроса.НачалоПериода        = ПараметрыОтчета.НачалоПериода;
	ПараметрыЗапроса.ОкончаниеПериода     = ПараметрыОтчета.ОкончаниеПериода;
	
	ПараметрыЗапроса.ПределВыборкиОдногоЗапроса = 10000;
	
	ПоследняяЗагруженнаяСтрока = 0;
	
	ВыполнятьСЗадержкой = Ложь;
	
	МассивЗагрузок = Новый Массив;
	
	Пока Истина Цикл
		
		Если ВыполнятьСЗадержкой Тогда
			Приостановить(61);
		КонецЕсли;
		
		ПараметрыЗапроса.НачалоВыборки = ПоследняяЗагруженнаяСтрока;
		РезультатЗапроса = ЗапросОтчетОпродажахWildberries(ПараметрыЗапроса, СообщенияОбОшибках);
		
		Если ЗначениеЗаполнено(СообщенияОбОшибках) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		КодОтвета = РезультатЗапроса.КодСостояния;
		Если КодОтвета <> 200 Тогда
			
			Если КодОтвета = 502 Тогда
				СообщенияОбОшибках = НСтр("ru = 'Сервер API Wildberries недоступен. Попробуйте позже'");
			ИначеЕсли КодОтвета = 400 или КодОтвета = 401 Тогда
				СообщенияОбОшибках = НСтр("ru = 'Ошибка авторизации в API Wildberries.
					|Возможно, ваш токен API устарел: срок действия токена - 180 дней от даты создания.
					|Получите токен API с типом ""Статистика"" в личном кабинете Профиль-Настройки-Доступ к API'");
			ИначеЕсли КодОтвета = 403 Тогда
				СообщенияОбОшибках = НСтр("ru = 'Ошибка авторизации в API Wildberries. Проверьте в настройках ключ API'");
			ИначеЕсли КодОтвета = 429 Тогда
				
				Если ВыполнятьСЗадержкой Тогда
					СообщенияОбОшибках = НСтр("ru = 'Сервер API Wildberries ответил: слишком много запросов. Попробуйте позже'");
				Иначе
					ВыполнятьСЗадержкой = Истина;
					Продолжить;
				КонецЕсли;
				
			Иначе
				ПереченьОшибок = РезультатЗапроса.ПолучитьТелоКакСтроку();
				Если СтрНайти(ПереченьОшибок, "Record limit exceeded") > 0
					И ПараметрыЗапроса.ПределВыборкиОдногоЗапроса = 10000 Тогда
					ПараметрыЗапроса.ПределВыборкиОдногоЗапроса = 1000;
					ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не удалось загрузить отчет о продажах. Получен ответ API Wildberries %1, код ошибки: %2'"),
						ПараметрыЗапроса.ВерсияМетодаAPI,
						ПереченьОшибок);
					ЗарегистрироватьОшибкуОбмена(ТекстОшибки);
					Продолжить;
				КонецЕсли;
				СообщенияОбОшибках = СтрШаблон(
					НСтр("ru = 'Не удалось загрузить отчет о продажах. Получен ответ API Wildberries %1, код ошибки: %2'"),
						ПараметрыЗапроса.ВерсияМетодаAPI,
						ПереченьОшибок);
			КонецЕсли;
			ЗарегистрироватьОшибкуОбмена(СообщенияОбОшибках);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СообщенияОбОшибках) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.ОткрытьПоток(РезультатЗапроса.ПолучитьТелоКакПоток());
		Попытка
			РезультатЧтения = ПрочитатьJSON(ЧтениеJSON);
		Исключение
			ЧтениеJSON.Закрыть();
			ТекстОтвета = РезультатЗапроса.ПолучитьТелоКакСтроку();
			Если ПустаяСтрока(ТекстОтвета) Тогда
				СообщенияОбОшибках = СтрШаблон(
				НСтр("ru = 'Не удалось загрузить отчет о продажах.
				|Получен ответ API Wildberries %1: <пустой ответ> - ответ не содержит данных. 
				|Обратитесь в техподдержку Wildberries с жалобой на ошибку в работе метода %2
				|при выполнении запроса за период с %3 по %4'"),
					ПараметрыЗапроса.ВерсияМетодаAPI,
					АдресЗапросаСтатистикиWildberries(ПараметрыЗапроса.ВерсияМетодаAPI),
					Формат(ПараметрыОтчета.НачалоПериода,"ДЛФ=D"),
					Формат(ПараметрыОтчета.ОкончаниеПериода,"ДЛФ=D"));
			Иначе
				СообщенияОбОшибках = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецЕсли;
			
			ЗарегистрироватьОшибкуОбмена(СообщенияОбОшибках);
			
			Возврат Неопределено;
		КонецПопытки;
		ЧтениеJSON.Закрыть();
		
		//API вернул ответ null
		Если РезультатЧтения = Неопределено Тогда 
			
			СообщенияОбОшибках = СтрШаблон(
				НСтр("ru = 'Не удалось загрузить отчет о продажах.
				|Получен ответ API Wildberries %1: Отсутствует данные отчета за период с %2 по %3. Попробуйте загрузить отчет позже'"),
					ПараметрыЗапроса.ВерсияМетодаAPI,
					Формат(ПараметрыОтчета.НачалоПериода,"ДЛФ=D"),
					Формат(ПараметрыОтчета.ОкончаниеПериода,"ДЛФ=D"));
			ЗарегистрироватьОшибкуОбмена(СообщенияОбОшибках);
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ПрочитаноСтрок = РезультатЧтения.Количество();
		
		Если Не ЗначениеЗаполнено(ИдентификаторОтчета)
			И ПрочитаноСтрок > 0 Тогда
			ПерваяЗаписьОтчета = РезультатЧтения[0];
			ИдентификаторОтчета = ПерваяЗаписьОтчета.realizationreport_id;
		КонецЕсли;
		
		ПоследняяЗагруженнаяСтрока = Формат(РезультатЧтения[ПрочитаноСтрок-1].rrd_id, "ЧГ=0");
		
		ДополнитьТаблицуТоваровWildberries(РезультатЧтения, ТаблицаТоваров);
		
		РезультатЧтения = Неопределено;
		
		Если ПрочитаноСтрок < ПараметрыЗапроса.ПределВыборкиОдногоЗапроса Тогда
			//все выбрали, второй запрос не нужен
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТоваров.Свернуть("НаимТов,Артикул,ИД,ВидДвижения,ТипДокумента,КодСтраны,НазваниеСтраны,ШтрихКод,КодМагазина,ДатаПродажи", "Количество,Сумма");
	
	Результат = Новый Структура();
	Результат.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	Результат.Вставить("ИдентификаторОтчета", ИдентификаторОтчета);
	
	Возврат Результат;

КонецФункции

Функция ПродажаЧерезВыкупТовара(КодСтраны, НазваниеСтраны = "") Экспорт
	
	Код = Врег(КодСтраны);
	Название = Врег(НазваниеСтраны);
	Возврат Код = "KZ" ИЛИ Название = "КАЗАХСТАН" 
			ИЛИ Код = "BY" ИЛИ Название = "БЕЛАРУСЬ"
			ИЛИ Код = "KG" ИЛИ Название = "КИРГИЗИЯ"
			ИЛИ Код = "AM" ИЛИ Название = "АРМЕНИЯ";
	
КонецФункции

Функция СписаниеТовараМаркетплейсом(ВидДвижения, ТипДокумента) Экспорт
	
	ЭтоСписание = (Нрег(ВидДвижения) = "оплата потерянного товара" 
					ИЛИ Нрег(ВидДвижения) = "авансовая оплата за товар без движения" 
					ИЛИ Нрег(ВидДвижения) = "частичная компенсация брака"
					ИЛИ Нрег(ВидДвижения) = "компенсация брака");
					
	ЭтоСторно   = (ТипДокумента = "Возврат");
	
	Возврат ЭтоСписание И НЕ ЭтоСторно;
	
КонецФункции

Процедура ДополнитьТаблицуТоваровWildberries(Источник, ТаблицаТоваров)
	
	Для Каждого СтрокаОтчета Из Источник Цикл
		
		Если Нрег(СтрокаОтчета.supplier_oper_name) = "продажа"
			Или Нрег(СтрокаОтчета.supplier_oper_name) = "корректная продажа" 
			Или Нрег(СтрокаОтчета.supplier_oper_name) = "сторно возвратов" 
			Или Нрег(СтрокаОтчета.supplier_oper_name) = "компенсация подмененного товара" Тогда
			ВидДвижения = "Продажа";
		ИначеЕсли Нрег(СтрокаОтчета.supplier_oper_name) = "возврат"
			Или Нрег(СтрокаОтчета.supplier_oper_name) = "сторно продаж" Тогда
			ВидДвижения = "Возврат";
		Иначе
			Продолжить;
		КонецЕсли;
		
		КодСтраны = СтрокаОтчета.site_country;
		
		ИдентификаторТовара = Формат(СтрокаОтчета.nm_id, "ЧГ=0");
		
		//По таким позициям, даже при наличии ШК, сопоставление невозможно
		Если Не ЗначениеЗаполнено(СтрокаОтчета.subject_name)
			И Не ЗначениеЗаполнено(СтрокаОтчета.brand_name)
			И Не ЗначениеЗаполнено(ИдентификаторТовара) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрокаТовара = ТаблицаТоваров.Добавить();
		
		НоваяСтрокаТовара.ИД = ИдентификаторТовара;
		
		НоваяСтрокаТовара.НаимТов = СтрШаблон("%1/%2/%3",
			СтрокаОтчета.subject_name,
			СтрокаОтчета.brand_name,
			ИдентификаторТовара);
			
		Артикул = СтрокаОтчета.sa_name;
		ЛеваяЧасть = Лев(Артикул, Стрдлина(Артикул)/2);
		ПраваяЧасть = Прав(Артикул, Стрдлина(Артикул)/2);
		НоваяСтрокаТовара.Артикул = ?(ЛеваяЧасть = ПраваяЧасть, ЛеваяЧасть, Артикул);
		НоваяСтрокаТовара.ВидДвижения = ВидДвижения;
		НоваяСтрокаТовара.Количество = СтрокаОтчета.quantity;
		НоваяСтрокаТовара.Сумма = СтрокаОтчета.retail_amount;
		НоваяСтрокаТовара.КодСтраны = КодСтраны;
		НоваяСтрокаТовара.ШтрихКод = СтрокаОтчета.barcode;
		НоваяСтрокаТовара.КодМагазина = ИдентификаторТовара;
		Если ВидДвижения = "Возврат" Тогда
			//WB: Литера Z в конце строки означает часовой пояс UTC. При ее отсутствии время считается в часовом поясе МСК (UTC+3)
			//Приведем все часовые пояса к началу дня
			НоваяСтрокаТовара.ДатаПродажи = НачалоДня(ПрочитатьДатуJSON(СтрокаОтчета.sale_dt, ФорматДатыJSON.ISO));
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ЗапросОтчетОпродажахWildberries(ПараметрыЗапроса, СообщениеОбОшибке)
	
	НастройкиПодключения = ПараметрыЗапроса.НастройкиПодключения;
	
	АдресЗапроса = АдресЗапросаСтатистикиWildberries(ПараметрыЗапроса.ВерсияМетодаAPI);
	
	СписокПараметровМетода = Новый Структура;
	СписокПараметровМетода.Вставить("dateFrom", Формат(ПараметрыЗапроса.НачалоПериода,"ДФ=гггг-ММ-дд"));
	СписокПараметровМетода.Вставить("dateTo", Формат(ПараметрыЗапроса.ОкончаниеПериода,"ДФ=гггг-ММ-дд"));
	СписокПараметровМетода.Вставить("limit", Формат(ПараметрыЗапроса.ПределВыборкиОдногоЗапроса, "ЧГ=0"));
	СписокПараметровМетода.Вставить("rrdid", Формат(ПараметрыЗапроса.НачалоВыборки, "ЧН=0; ЧГ=0"));
	
	ПараметрыСтрокой = Новый Массив;
	Для Каждого Параметр Из СписокПараметровМетода Цикл
		ПараметрыСтрокой.Добавить(Параметр.Ключ+"="+Параметр.Значение);
	КонецЦикла;
	
	МетодЗапроса = АдресЗапроса+ "?" + СтрСоединить(ПараметрыСтрокой,"&");
	
	АдресСервера = АдресСервераСтатистикиWildberries();
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	HTTPСоединениеВайлдберризАпиСтатистики = Новый HTTPСоединение(
		АдресСервера,
		, , ,
		ИнтернетПрокси,
		,
		ЗащищенноеСоединение);
	
	ЗаголовкиHTTPЗапроса = Новый Соответствие();
	ЗаголовкиHTTPЗапроса.Вставить("Content-Type", "application/json;charset=UTF-8");
	ЗаголовкиHTTPЗапроса.Вставить("Authorization", НастройкиПодключения.Токен);
	
	HTTPЗапрос = Новый HTTPЗапрос(МетодЗапроса, ЗаголовкиHTTPЗапроса);
	
	Попытка
		HTTPОтвет = HTTPСоединениеВайлдберризАпиСтатистики.Получить(HTTPЗапрос);
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьОшибкуОбмена(СообщениеОбОшибке);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат HTTPОтвет;
	
КонецФункции

Функция НовыйПараметрыЗапросаОтчетОпродажахWildberries() Экспорт
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("НастройкиПодключения");
	ПараметрыЗапроса.Вставить("ВерсияМетодаAPI","");
	ПараметрыЗапроса.Вставить("НачалоПериода", Дата(1,1,1));
	ПараметрыЗапроса.Вставить("ОкончаниеПериода", Дата(1,1,1));
	ПараметрыЗапроса.Вставить("ПределВыборкиОдногоЗапроса", 0);
	ПараметрыЗапроса.Вставить("НачалоВыборки", 0);
	
	Возврат ПараметрыЗапроса;

КонецФункции

Функция НомерОтчетаИзИмениФайла(ПолноеИмяФайла) Экспорт
	
	СтрокаЦифровыхСимволов = "0123456789";
	
	Номер = "";
	//Исключим символы до номера
	Для Индекс = 1 По СтрДлина(ПолноеИмяФайла) Цикл
		Символ = Сред(ПолноеИмяФайла, Индекс, 1);
		Если СтрНайти(СтрокаЦифровыхСимволов, Символ) > 0 Тогда
			Номер = Сред(ПолноеИмяФайла, Индекс);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Результат = "";
	//Отбросим символы после номера
	Для Индекс = 1 По СтрДлина(Номер) Цикл
		Символ = Сред(Номер, Индекс, 1);
		Если СтрНайти(СтрокаЦифровыхСимволов, Символ) = 0 Тогда
			Прервать;
		КонецЕсли;
		Результат = Результат + Символ;
	КонецЦикла;
	
	Если Результат = "0" Тогда
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
	
#КонецОбласти

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Загрузка отчета из маркетплейс'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

Функция ЗарегистрироватьОшибкуОбмена(ТекстОшибки, Данные = Неопределено)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, , Данные, ТекстОшибки);
	
КонецФункции

// Приостанавливает работу программы на указанное количество секунд.
//
Процедура Приостановить(Секунд)
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
		ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
		ФайловаяСистема.ЗапуститьПрограмму("timeout " + Секунд, ПараметрыЗапускаПрограммы);
		
	Иначе
		
		МодульОбщегоНазначенияБТС = ОбщегоНазначения.ОбщийМодуль("ОбщегоНазначенияБТС");
		МодульОбщегоНазначенияБТС.Пауза(Секунд);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьНастройкиАвторизацииWildberries(НастройкаИнтеграции)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(НастройкаИнтеграции, "Токен_Версия_1_4");
	
КонецФункции

Функция ПрочитатьНастройкиАвторизацииOZON(НастройкаИнтеграции)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиАвторизации = Новый Структура();
	НастройкиАвторизации.Вставить("Токен");
	НастройкиАвторизации.Вставить("КлиентИд");
	
	НастройкиАвторизации.КлиентИд = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(НастройкаИнтеграции, "КлиентИд");
	НастройкиАвторизации.Токен = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(НастройкаИнтеграции, "Токен");
	
	Возврат НастройкиАвторизации;
	
КонецФункции

#Область OZON

Функция ПолучитьДанныеДокументаOzon(ПараметрыОтчета, СообщениеОбОшибке)
	
	РезультатЧтения = ПрочитатьОтчетOZON(ПараметрыОтчета, СообщениеОбОшибке);
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатЧтения) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не удалось разобрать ответ от маркетплейс. Попробуйте загрузить отчет позже'");
		ЗарегистрироватьОшибкуОбмена(СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("Номер");
	ДанныеДокумента.Вставить("Дата");
	ДанныеДокумента.Вставить("ДатаНач");
	ДанныеДокумента.Вставить("Плательщик", Новый Структура("Ссылка"));
	ДанныеДокумента.Вставить("Получатель", Новый Структура("Ссылка"));
	ДанныеДокумента.Вставить("Договор", Новый Структура("Ссылка"));
	ДанныеДокумента.Вставить("Ссылка");
	ДанныеДокумента.Вставить("ВидДокумента", "Отчет_Ozon");
	ДанныеДокумента.Вставить("ТаблицаТоваров");
	
	НастройкиЗаполненияДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыОтчета.НастройкаИнтеграции, "Владелец,Контрагент,ДоговорКонтрагента");
	
	ДанныеОтчета = РезультатЧтения.result;
	
	ШапкаДокумента = ДанныеОтчета.header;
	
	ДатаВходящегоДокумента = Дата(СтрЗаменить(ШапкаДокумента.doc_date,"-",""));
	
	НомерВходящегоДокумента = Формат(ШапкаДокумента.number, "ЧГ=0");
	
	ДанныеДокумента.ДатаНач = ПараметрыОтчета.НачалоПериода;
	
	ДанныеДокумента.Номер = НомерВходящегоДокумента;
	ДанныеДокумента.Дата = ДатаВходящегоДокумента;
	ДанныеДокумента.Плательщик.Ссылка = НастройкиЗаполненияДокумента.Контрагент;
	ДанныеДокумента.Получатель.Ссылка = НастройкиЗаполненияДокумента.Владелец;
	ДанныеДокумента.Договор = НастройкиЗаполненияДокумента.ДоговорКонтрагента;
	ДанныеДокумента.Ссылка = ПараметрыОтчета.СсылкаНаДокумент;
	
	ТаблицаТоваров = ЭлектронноеВзаимодействиеБП.ПодготовитьТаблицуТоваровМаркетплейс();
	
	Для Каждого СтрокаОтчета Из ДанныеОтчета.rows Цикл
		
		Товар = СтрокаОтчета.item;
		
		Если Товар = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовара = ТаблицаТоваров.Добавить();
		НоваяСтрокаТовара.НомТов = СтрокаОтчета.rowNumber;
		
		НоваяСтрокаТовара.ИД = Формат(Товар.sku, "ЧГ=0");
		НоваяСтрокаТовара.КодМагазина = Формат(Товар.sku, "ЧГ=0");
		
		НоваяСтрокаТовара.НаимТов = Товар.name;
		НоваяСтрокаТовара.Артикул = Товар.offer_id;
		НоваяСтрокаТовара.ШтрихКод = Товар.barcode;
		
		Продажи = СтрокаОтчета.delivery_commission;
		Возвраты = СтрокаОтчета.return_commission;
		
		Если ТипЗнч(Продажи) = Тип("Структура") Тогда
			НоваяСтрокаТовара.Количество = Продажи.quantity;
			НоваяСтрокаТовара.Сумма = Продажи.amount;
		КонецЕсли;
		
		Если ТипЗнч(Возвраты) = Тип("Структура") Тогда
			НоваяСтрокаТовара.КоличествоВозврат = Возвраты.quantity;
			НоваяСтрокаТовара.СуммаВозврат = Возвраты.amount;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДокумента.ТаблицаТоваров = ТаблицаТоваров;
	
	Возврат ДанныеДокумента;
	
КонецФункции

Функция ПрочитатьОтчетOZON(ПараметрыОтчета, СообщенияОбОшибках)

	ДаныеАвторизации = ПрочитатьНастройкиАвторизацииOZON(ПараметрыОтчета.НастройкаИнтеграции);

	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("НачалоПериода", НачалоМесяца(ПараметрыОтчета.НачалоПериода));
	ПараметрыЗапроса.Вставить("Токен", ДаныеАвторизации.Токен);
	ПараметрыЗапроса.Вставить("КлиентИд", ДаныеАвторизации.КлиентИд);
	
	РезультатЗапроса = ЗапросОтчетОпродажаOZON(ПараметрыЗапроса, СообщенияОбОшибках);
	
	Если ЗначениеЗаполнено(СообщенияОбОшибках) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КодОтвета = РезультатЗапроса.КодСостояния;
	Если КодОтвета <> 200 Тогда
		
		ПоддерживаемыеКодыОшибок = Новый Соответствие;
		ПоддерживаемыеКодыОшибок.Вставить(400, "Неверный параметр");
		ПоддерживаемыеКодыОшибок.Вставить(401, "Укажите в настройках Client-Id или Api-Key");
		ПоддерживаемыеКодыОшибок.Вставить(403, "Доступ запрещен");
		ПоддерживаемыеКодыОшибок.Вставить(404, "Ответ не найден");
		ПоддерживаемыеКодыОшибок.Вставить(409, "Конфликт запроса");
		ПоддерживаемыеКодыОшибок.Вставить(500, "Внутренняя ошибка сервера OZON");
		
		ШаблонОписания = "%1: %2";
		
		ПолноеОписаниеОшибки = РезультатЗапроса.ПолучитьТелоКакСтроку();
		ДанныеОшибки = ОбщегоНазначенияБП.СтруктураИзСтрокиJSON(ПолноеОписаниеОшибки);
		
		Если ТипЗнч(ДанныеОшибки) = Тип("Структура") Тогда
			Если СокрЛП(ДанныеОшибки.message) = "Request validation error: out of date" Тогда
				ШаблонСообщения = НСтр("ru = 'Отчет за период %1 недоступен'");
				ПолноеОписаниеОшибки = СтрШаблон(ШаблонСообщения, Формат(ПараметрыОтчета.НачалоПериода));
			иначе
				ПолноеОписаниеОшибки = ДанныеОшибки.message;
			КонецЕсли;
			
		КонецЕсли;
		
		КраткоеОписаниеОшибки = ?(ПоддерживаемыеКодыОшибок[КодОтвета] <> Неопределено,
			ПоддерживаемыеКодыОшибок[КодОтвета],
			КодОтвета);
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписания,
			КраткоеОписаниеОшибки,
			ПолноеОписаниеОшибки);
		
		СообщенияОбОшибках = СтрШаблон(НСтр("ru = 'Ошибка получения данных из маркетплейса. Ответ сервера:
		|%1'"), ОписаниеОшибки);
		
		ЗарегистрироватьОшибкуОбмена(СообщенияОбОшибках, ПолноеОписаниеОшибки);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(СообщенияОбОшибках) тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(РезультатЗапроса.ПолучитьТелоКакПоток());
	Попытка
		РезультатЧтения = ПрочитатьJSON(ЧтениеJSON);
	Исключение
		СообщенияОбОшибках = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьОшибкуОбмена(СообщенияОбОшибках);
		Возврат Неопределено;
	КонецПопытки;
	
	Если РезультатЧтения = Неопределено Тогда 
		СообщенияОбОшибках = СтрШаблон(НСтр("ru = 'Отсутствует данные отчета за %1. Попробуйте загрузить отчет позже'"),
		Формат(ПараметрыОтчета.НачалоПериода,"ДЛФ=D"));
		ЗарегистрироватьОшибкуОбмена(СообщенияОбОшибках);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат РезультатЧтения;

КонецФункции

Функция ЗапросОтчетОпродажаOZON(ПараметрыЗапроса, СообщенияОбОшибках)
	
	КлиентИд = ПараметрыЗапроса.КлиентИд;
	Токен    = ПараметрыЗапроса.Токен;
	
	Таймаут      = 240;
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI("https://api-seller.ozon.ru");
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(, Новый СертификатыУдостоверяющихЦентровОС);
	
	ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("HTTPS");
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , ,
		ИнтернетПрокси, Таймаут, ЗащищенноеСоединение);
	
	ЗаголовкиHTTPЗапроса = Новый Соответствие();
	ЗаголовкиHTTPЗапроса.Вставить("Client-Id",     КлиентИд);
	ЗаголовкиHTTPЗапроса.Вставить("Api-Key",       Токен);
	ЗаголовкиHTTPЗапроса.Вставить("content-type",     "application/json");
	
	МетодЗапроса = "/v2/finance/realization";
	
	HTTPЗапрос = Новый HTTPЗапрос(МетодЗапроса, ЗаголовкиHTTPЗапроса);
	
	ПоляЗапроса = Новый Структура;
	ПоляЗапроса.Вставить("month", Месяц(ПараметрыЗапроса.НачалоПериода));
	ПоляЗапроса.Вставить("year", Год(ПараметрыЗапроса.НачалоПериода));
	
	СтрокаЗапроса = ОбщегоНазначенияБП.ЗначениеВСтрокуJSON(ПоляЗапроса);
	
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаЗапроса, КодировкаТекста.UTF8);
	
	Попытка 
		HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьОшибкуОбмена(СообщениеОбОшибке);
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат HTTPОтвет;
	
КонецФункции

#КонецОбласти

#КонецОбласти