
////////////////////////////////////////////////////////////////////////////////
//
// Содержит процедуры и функции для учета НДС в качестве налогового агента 
// при покупке товаров, перечисленных в п.8 ст. 161 НК:
// - лома и отходов черных и цветных металлов,
// - алюминия вторичного и его сплавов,
// - сырых шкур животных.
//
////////////////////////////////////////////////////////////////////////////////
// Содержимое модуля отличается в версиях ПРОФ и КОРП.
// В версии ПРОФ отсутствует:
// - тело экспортных процедур (остаются только сигнатуры методов)
// - неэкспортные процедуры и все функции.
// Поэтому не допускается реализация в модуле экспортных функций: вместо них следует использовать процедуры с возвращаемым параметром.

#Область СлужебныйПрограммныйИнтерфейс

Процедура СформироватьДвиженияСчетФактураНаПоступление(Реквизиты, ТаблицаНачисление, Движения, Отказ) Экспорт
	
	СформироватьПроводкиНачислениеНДС(
		Реквизиты, 
		ТаблицаНачисление, 
		Движения, 
		Отказ);
	
	СформироватьДвиженияНДСЗаписиКнигиПродаж(
		Реквизиты,
		ТаблицаНачисление,
		Движения,
		Отказ);
		
КонецПроцедуры

Процедура СформироватьДвиженияСчетФактураНаВыданныйАванс(Реквизиты, ТаблицаНачисление, Движения, Отказ) Экспорт
	
	// Получение движений исправляемого счета-фактуры.
	ТаблицаСторноНачисления = ТаблицаСторноНачисленияНДСВыданныйАванс(Реквизиты, ТаблицаНачисление);
	
	// Сторнирующие движения и проводки исправленного счета-фактуры.
	СформироватьПроводкиНачислениеНДСВыданныйАванс(
		Реквизиты,
		ТаблицаСторноНачисления,
		Движения,
		Отказ);
	СформироватьДвиженияНДСЗаписиКнигиПродажВыданныйАванс(
		Реквизиты,
		ТаблицаСторноНачисления,
		Движения,
		Отказ);
		
	// Начисление НДС и проводки счета-фактуры.
	СформироватьПроводкиНачислениеНДСВыданныйАванс(
		Реквизиты,
		ТаблицаНачисление,
		Движения,
		Отказ);
	СформироватьДвиженияНДСЗаписиКнигиПродажВыданныйАванс(
		Реквизиты,
		ТаблицаНачисление,
		Движения,
		Отказ);
	
КонецПроцедуры

Процедура ДополнитьДаннымиОЗачтенныхАвансах(Реквизиты, ТаблицаРезультата) Экспорт
	
	Если НетОперацийОбратногоНачисленияНДС(Реквизиты.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаАвансов = ОстаткиНДССАвансовПолученных(Реквизиты);
	
	Если ТаблицаАвансов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВТ_СписокСчетовФактур = Новый МенеджерВременныхТаблиц;
	Документы.ФормированиеЗаписейКнигиПокупок.СоздатьСписокСчетовФактур(
		ТаблицаАвансов,
		МенеджерВТ_СписокСчетовФактур);

	ЗачетыАвансов = ПолучитьДанныеОЗачтенныхАвансахВыданных(
		Реквизиты,
		МенеджерВТ_СписокСчетовФактур);
		
	РаспределитьЗачетыАвансовПоСчетамФактурам(
		Реквизиты,
		ТаблицаАвансов,
		ТаблицаРезультата,
		МенеджерВТ_СписокСчетовФактур,
		ЗачетыАвансов);
		
	ОтборВозвратаАвансовПолученных = Новый Структура("ВозвратАвансовПолученных", Истина);
	МенеджерВТ_СписокСчетовФактур = Новый МенеджерВременныхТаблиц;
	
	Документы.ФормированиеЗаписейКнигиПокупок.СоздатьСписокСчетовФактур(
		ТаблицаРезультата,
		МенеджерВТ_СписокСчетовФактур,
		ОтборВозвратаАвансовПолученных);
		
	ПолучитьДанныеОДокументахОплатыВозвратАванса(
		Реквизиты,
		ТаблицаРезультата,
		МенеджерВТ_СписокСчетовФактур);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриобретенныеЦенности

Процедура СформироватьПроводкиНачислениеНДС(
		Реквизиты,
		ТаблицаНачисление,
		Движения,
		Отказ)
		
	Если ТаблицаНачисление = Неопределено 
	 ИЛИ ТаблицаНачисление.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаНачисление Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);

		Проводка.Сумма      = СтрокаТаблицы.НДС;
		Проводка.Содержание = НСтр("ru='НДС начислен к уплате'");
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента; // 76.НА
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Контрагенты", СтрокаТаблицы.Поставщик);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт,
			"Договоры", СтрокаТаблицы.ДоговорКонтрагента);
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгентаПоОтдельнымВидамТоваров; // 68.52
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродаж(
		Реквизиты,
		ТаблицаНачисление,
		Движения,
		Отказ)
		
	Если ТаблицаНачисление = Неопределено 
	 ИЛИ ТаблицаНачисление.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаНачисление Цикл
		
		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
		Движение.ВидЦенности = Перечисления.ВидыЦенностей.ТоварыНалоговыйАгент;
		Движение.Событие     = Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате;
		Движение.Покупатель  = СтрокаТаблицы.Поставщик;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВыданныеАвансы

Функция ТаблицаСторноНачисленияНДСВыданныйАванс(Реквизиты, ТаблицаНачисление)
	
	ЭтоИсправительныйСчетФактура = Реквизиты.Исправление ИЛИ Реквизиты.ИсправлениеСобственнойОшибки;
	
	Если НЕ ЭтоИсправительныйСчетФактура Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат УчетНДС.ТаблицаСторноНачисленияНДС(Реквизиты);
	
КонецФункции

Процедура СформироватьПроводкиНачислениеНДСВыданныйАванс(
		Реквизиты,
		ТаблицаНачисление,
		Движения,
		Отказ)
		
	Если ТаблицаНачисление = Неопределено 
	 ИЛИ ТаблицаНачисление.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаНачисление Цикл

		Если СтрокаТаблицы.НДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		Проводка = Движения.Хозрасчетный.Добавить();
		ЗаполнитьЗначенияСвойств(Проводка, Реквизиты);

		Проводка.Сумма = СтрокаТаблицы.НДС;
		Если СтрокаТаблицы.НДС < 0 Тогда
			Проводка.Содержание = НСтр("ru='Сторнирование НДС по предоплате'");
		Иначе
			Проводка.Содержание = НСтр("ru='НДС по предоплате'");
		КонецЕсли;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам; // 76.АВ
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"СФВыданные", СтрокаТаблицы.СчетФактура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 
			"Контрагенты", СтрокаТаблицы.Контрагент);
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгентаПоОтдельнымВидамТоваров; // 68.52
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 
			"ВидыПлатежейВГосБюджет", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	КонецЦикла;
	
	Движения.Хозрасчетный.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияНДСЗаписиКнигиПродажВыданныйАванс(
		Реквизиты,
		ТаблицаНачисление,
		Движения,
		Отказ)
		
	Если ТаблицаНачисление = Неопределено 
	 ИЛИ ТаблицаНачисление.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаНачисление Цикл

		Движение = Движения.НДСЗаписиКнигиПродаж.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
		Движение.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученныеНалоговыйАгент;
		Движение.Событие     = Перечисления.СобытияПоНДСПродажи.ПолученАванс;
		Движение.Покупатель  = СтрокаТаблицы.Контрагент;
		
	КонецЦикла;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ЗачетАвансовВыданных

Функция ОстаткиНДССАвансовПолученных(СтруктураПараметров)

	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СФВыданные);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	ВидыЦенностейАванс = Новый СписокЗначений;
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.АвансыПолученныеНалоговыйАгент);
	ВидыЦенностейАванс.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученныхНалоговыйАгент);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",         СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаГраница",         Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидыСубконто",        ВидыСубконто);
	Запрос.УстановитьПараметр("ВидыЦенностейАванс",  ВидыЦенностейАванс);
	
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов",          СчетаУчетаАвансовВыданных());
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР", СубконтоСчетаРасчетов_ЕстьДР);

	// Подготовка исходных данных.
	ТекстЗапроса = Документы.ФормированиеЗаписейКнигиПокупок.ТекстЗапросаАвансыПолученные();
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СчетФактураВыданный", "СчетФактураПолученный");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВидСчетаФактурыВыставленного", "ВидСчетаФактурыПолученного");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СуммаОстатокКт", "СуммаОстатокДт");
	
	Запрос.Текст = ТекстЗапроса;

	УстановитьПривилегированныйРежим(Истина);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ОстаткиПоРегистру = Результаты[4].Выгрузить();
	КоличествоСтрокОстаткаПоРегистру = ОстаткиПоРегистру.Количество();
	Если КоличествоСтрокОстаткаПоРегистру = 0 Тогда
		Возврат ОстаткиПоРегистру;
	КонецЕсли;
	
	// Учитываем остаток по счету 76.АВ.
	ОстаткиПоСчету = Результаты[5].Выгрузить();
	
	// Параллельно обходим две таблицы, одинаково отсортированые.
	ИндексСтрокиОстаткаПоРегистру = 0;
	Для каждого СтрокаОстаткаПоСчету Из ОстаткиПоСчету Цикл
		
		// Проходим остатки по регистру, которые соответствуют остаткам по счету.
		Пока ИндексСтрокиОстаткаПоРегистру < КоличествоСтрокОстаткаПоРегистру Цикл
		
			СтрокаОстаткаПоРегистру = ОстаткиПоРегистру[ИндексСтрокиОстаткаПоРегистру];
			Если СтрокаОстаткаПоРегистру.СчетФактура <> СтрокаОстаткаПоСчету.СчетФактура
			 Или СтрокаОстаткаПоРегистру.Покупатель <> СтрокаОстаткаПоСчету.Покупатель Тогда
				Прервать; // данные, соответствующие другому остатку по счету
			КонецЕсли;
			
			Если СтрокаОстаткаПоСчету.СуммаНДСАванса = 0 Тогда
				// не должно быть остатков по регистру, если нет остатков по счету
				ОстаткиПоРегистру.Удалить(ИндексСтрокиОстаткаПоРегистру);
				КоличествоСтрокОстаткаПоРегистру = КоличествоСтрокОстаткаПоРегистру - 1;
				
			Иначе
				
				Если СтрокаОстаткаПоСчету.СуммаНДСАванса >= СтрокаОстаткаПоРегистру.НДС Тогда
					СтрокаОстаткаПоСчету.СуммаНДСАванса = СтрокаОстаткаПоСчету.СуммаНДСАванса - СтрокаОстаткаПоРегистру.НДС;
				Иначе
					СтрокаОстаткаПоРегистру.СуммаБезНДС = 
						(СтрокаОстаткаПоРегистру.СуммаБезНДС/СтрокаОстаткаПоРегистру.НДС) * СтрокаОстаткаПоСчету.СуммаНДСАванса;
					СтрокаОстаткаПоРегистру.НДС = СтрокаОстаткаПоСчету.СуммаНДСАванса;
				КонецЕсли;
				ИндексСтрокиОстаткаПоРегистру = ИндексСтрокиОстаткаПоРегистру + 1;
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если КоличествоСтрокОстаткаПоРегистру = 0 Тогда
		Возврат ОстаткиПоРегистру;
	КонецЕсли;
	
	СравнениеПоИдентификатору = Новый СравнениеЗначений;
	ОстаткиПоРегистру.Сортировать("Покупатель, СчетФактура, ДоговорКонтрагента", СравнениеПоИдентификатору);
	НепогашенныеАвансы = Результаты[7].Выбрать(); // Отсортированы как ОстаткиПоРегистру
	
	// Параллельно обходим две таблицы, одинаково отсортированые.
	СтруктураОтбора = Документы.ФормированиеЗаписейКнигиПокупок.СтруктураОтбораСтрок();
	МассивСуммаБезНДС = Новый Массив;
	МассивСуммаНДС    = Новый Массив;
	ИндексСтрокиОстаткаПоРегистру = 0;
	Пока НепогашенныеАвансы.Следующий() Цикл
	
		СуммаБезНДС = 0;
		МассивСуммаБезНДС.Очистить();
		СуммаНДС = 0;
		МассивСуммаНДС.Очистить();
		
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаНепогашенногоАванса = НепогашенныеАвансы.Сумма;
		
		
		Если СтруктураОтбора.СчетФактура <> НепогашенныеАвансы.СчетФактура
		 Или СтруктураОтбора.ДоговорКонтрагента <> НепогашенныеАвансы.ДоговорКонтрагента
		 Или СтруктураОтбора.Покупатель <> НепогашенныеАвансы.Покупатель Тогда
			// Повторный поиск (например, если разные ДатаСобытия) не выполняем. Используем ранее полученные строки.
			
			СтруктураОтбора.Покупатель         = НепогашенныеАвансы.Покупатель;
			СтруктураОтбора.ДоговорКонтрагента = НепогашенныеАвансы.ДоговорКонтрагента;
			СтруктураОтбора.СчетФактура        = НепогашенныеАвансы.СчетФактура;
			СтрокиАвансаПоОтбору = УчетНДСПереопределяемый.НайтиСтрокиПоОтбору(
				ОстаткиПоРегистру, ИндексСтрокиОстаткаПоРегистру, СтруктураОтбора, "Покупатель", СравнениеПоИдентификатору);
			
		КонецЕсли;
		
		Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
			МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);
			
			СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
			СуммаНДС    = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
			
			СтавкаНДС = СтрокаАвансаПоОтбору.СтавкаНДС;
		КонецЦикла;
		
		Если СтавкаНДС <> Перечисления.СтавкиНДС.ПустаяСсылка() Тогда
			// Поставщик товаров, указанных в п.8 ст. 161 НК, не предъявляет НДС.
			// Соответственно сумма остатка аванса на счете 60.х2 не включает НДС.
			// Для правильного определения суммы без НДС и НДС необходимо увеличить сумму непогашенного аванса на сумму НДС.
			СтавкаНДСЧисло = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
			СуммаНепогашенногоАванса = СуммаНепогашенногоАванса + СуммаНепогашенногоАванса * СтавкаНДСЧисло / 100;
		КонецЕсли; 
		
		СуммаСНДС = Мин(СуммаНепогашенногоАванса, СуммаБезНДС + СуммаНДС);
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС / (СуммаБезНДС + СуммаНДС), 2);
		Если СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаБезНДС, МассивСуммаБезНДС);
		КонецЕсли;
		
		СуммаНДС = СуммаСНДС - СуммаБезНДС;
		Если СуммаНДС > 0 Тогда
			МассивСуммаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаНДС, МассивСуммаНДС);
		КонецЕсли; 
		
		Счетчик = 0;
		Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0);
			СтрокаАвансаПоОтбору.НДС = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
			Счетчик = Счетчик + 1;
		КонецЦикла;
	
	КонецЦикла;
	
	СтрокиКУдалению = ОстаткиПоРегистру.НайтиСтроки(Новый Структура("СуммаБезНДС, НДС", 0, 0));
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ОстаткиПоРегистру.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Возврат ОстаткиПоРегистру;
	
КонецФункции

Функция СчетаУчетаАвансовВыданных()
	
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);    // 60.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал); // 60.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ);  // 60.32
	
	Возврат БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовАвансов); // Добавим субсчета, если они есть.
	
КонецФункции

Функция ПолучитьДанныеОЗачтенныхАвансахВыданных(СтруктураПараметров, МенеджерВТ_СписокСчетовФактур)
	
	МассивСчетовАвансов = СчетаУчетаАвансовВыданных();
	
	СчетаВозвратаДенежныхСредств = Новый Массив();
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);      // 51
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);       // 52
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ЦифровойРубль);       // 53
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);    // 50.01
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);   // 50.02
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал); // 50.21
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);       // 57.01
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);    // 57.21
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаВозвратаДенежныхСредств, МассивСчетовАвансов);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ_СписокСчетовФактур;
	Запрос.УстановитьПараметр("Организация",                  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("КонецПериода",                 КонецДня(СтруктураПараметров.Дата));
	Запрос.УстановитьПараметр("МассивСчетовАвансов",          МассивСчетовАвансов);
	Запрос.УстановитьПараметр("СчетаВозвратаДенежныхСредств", СчетаВозвратаДенежныхСредств);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Организация КАК Организация,
	|	ХозрасчетныйСубконто1.Значение КАК Покупатель,
	|	ХозрасчетныйСубконто2.Значение КАК ДоговорКонтрагента,
	|	ХозрасчетныйСубконто3.Значение КАК ДокументАвансаКТ,
	|	Хозрасчетный.СчетДт КАК СчетДт,
	|	ХозрасчетныйСубконтоДТ1.Значение КАК ПокупательДТ,
	|	ХозрасчетныйСубконтоДТ3.Значение КАК ДокументАвансаДТ,
	|	СписокСчетовФактур.СчетФактура КАК СчетФактура,
	|	СУММА(Хозрасчетный.Сумма) КАК СуммаАванса,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ) КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.СчетДт В (&СчетаВозвратаДенежныхСредств)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозвратАвансовПолученных,
	|	Хозрасчетный.СчетКт КАК СчетКт
	|ПОМЕСТИТЬ ОборотыПоКредиту60Предварительная
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто3
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСчетовФактур КАК СписокСчетовФактур
	|		ПО (ХозрасчетныйСубконто3.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|			И ХозрасчетныйСубконто3.Значение = СписокСчетовФактур.СчетФактура
	|			И (ХозрасчетныйСубконто3.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ПО ХозрасчетныйСубконто3.Период = Хозрасчетный.Период
	|			И ХозрасчетныйСубконто3.Регистратор = Хозрасчетный.Регистратор
	|			И ХозрасчетныйСубконто3.НомерСтроки = Хозрасчетный.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто1
	|		ПО ХозрасчетныйСубконто3.Период = ХозрасчетныйСубконто1.Период
	|			И ХозрасчетныйСубконто3.Регистратор = ХозрасчетныйСубконто1.Регистратор
	|			И ХозрасчетныйСубконто3.НомерСтроки = ХозрасчетныйСубконто1.НомерСтроки
	|			И (ХозрасчетныйСубконто1.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|			И (ХозрасчетныйСубконто1.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконто1.УточнениеПериода = 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто2
	|		ПО ХозрасчетныйСубконто3.Период = ХозрасчетныйСубконто2.Период
	|			И ХозрасчетныйСубконто3.Регистратор = ХозрасчетныйСубконто2.Регистратор
	|			И ХозрасчетныйСубконто3.НомерСтроки = ХозрасчетныйСубконто2.НомерСтроки
	|			И (ХозрасчетныйСубконто2.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры))
	|			И (ХозрасчетныйСубконто2.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|			И (ХозрасчетныйСубконто2.УточнениеПериода = 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоДТ1
	|		ПО ХозрасчетныйСубконто3.Период = ХозрасчетныйСубконтоДТ1.Период
	|			И ХозрасчетныйСубконто3.Регистратор = ХозрасчетныйСубконтоДТ1.Регистратор
	|			И ХозрасчетныйСубконто3.НомерСтроки = ХозрасчетныйСубконтоДТ1.НомерСтроки
	|			И (ХозрасчетныйСубконтоДТ1.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|			И (ХозрасчетныйСубконтоДТ1.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|			И (ХозрасчетныйСубконтоДТ1.УточнениеПериода = 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоДТ3
	|		ПО ХозрасчетныйСубконто3.Период = ХозрасчетныйСубконтоДТ3.Период
	|			И ХозрасчетныйСубконто3.Регистратор = ХозрасчетныйСубконтоДТ3.Регистратор
	|			И ХозрасчетныйСубконто3.НомерСтроки = ХозрасчетныйСубконтоДТ3.НомерСтроки
	|			И (ХозрасчетныйСубконтоДТ3.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами))
	|			И (ХозрасчетныйСубконтоДТ3.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|			И (ХозрасчетныйСубконтоДТ3.УточнениеПериода = 0)
	|ГДЕ
	|	Хозрасчетный.Период <= &КонецПериода
	|	И Хозрасчетный.СчетКт В(&МассивСчетовАвансов)
	|	И ХозрасчетныйСубконто1.Период ЕСТЬ НЕ NULL 
	|	И ХозрасчетныйСубконто2.Период ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Организация,
	|	ХозрасчетныйСубконто1.Значение,
	|	ХозрасчетныйСубконто2.Значение,
	|	ХозрасчетныйСубконто3.Значение,
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	ХозрасчетныйСубконтоДТ1.Значение,
	|	ХозрасчетныйСубконтоДТ3.Значение,
	|	СписокСчетовФактур.СчетФактура,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, ДЕНЬ),
	|	ВЫБОР
	|		КОГДА Хозрасчетный.СчетДт В (&СчетаВозвратаДенежныхСредств)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	СУММА(Хозрасчетный.Сумма) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОборотыПоКредиту60Предварительная.СчетФактура КАК СчетФактура,
	|	ЕСТЬNULL(СчетФактураПолученныйДокументыОснования.Ссылка.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ДоговорыСчетовФактур
	|ИЗ
	|	ОборотыПоКредиту60Предварительная КАК ОборотыПоКредиту60Предварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО ОборотыПоКредиту60Предварительная.СчетФактура = СчетФактураПолученныйДокументыОснования.ДокументОснование
	|ГДЕ
	|	СчетФактураПолученныйДокументыОснования.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.НаАванс)
	|	И НЕ СчетФактураПолученныйДокументыОснования.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыПоКредиту60Предварительная.Организация КАК Организация,
	|	ОборотыПоКредиту60Предварительная.Покупатель КАК Покупатель,
	|	ЕСТЬNULL(ДоговорыСчетовФактур.ДоговорКонтрагента, ОборотыПоКредиту60Предварительная.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	|	ОборотыПоКредиту60Предварительная.СчетФактура КАК СчетФактура,
	|	СУММА(ОборотыПоКредиту60Предварительная.СуммаАванса) КАК СуммаАванса,
	|	ОборотыПоКредиту60Предварительная.ДатаСобытия КАК ДатаСобытия,
	|	ОборотыПоКредиту60Предварительная.ВозвратАвансовПолученных КАК ВозвратАвансовПолученных
	|ПОМЕСТИТЬ ОборотыПоКредиту60
	|ИЗ
	|	ОборотыПоКредиту60Предварительная КАК ОборотыПоКредиту60Предварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоговорыСчетовФактур КАК ДоговорыСчетовФактур
	|		ПО ОборотыПоКредиту60Предварительная.СчетФактура = ДоговорыСчетовФактур.СчетФактура
	|			И (ОборотыПоКредиту60Предварительная.ДоговорКонтрагента = ДоговорыСчетовФактур.ДоговорКонтрагента
	|				ИЛИ ДоговорыСчетовФактур.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|ГДЕ
	|	НЕ(ОборотыПоКредиту60Предварительная.СчетКт = ОборотыПоКредиту60Предварительная.СчетДт
	|				И ОборотыПоКредиту60Предварительная.Покупатель = ОборотыПоКредиту60Предварительная.ПокупательДТ
	|				И ОборотыПоКредиту60Предварительная.ДокументАвансаДТ = ОборотыПоКредиту60Предварительная.ДокументАвансаДТ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыПоКредиту60Предварительная.Организация,
	|	ОборотыПоКредиту60Предварительная.Покупатель,
	|	ОборотыПоКредиту60Предварительная.СчетФактура,
	|	ОборотыПоКредиту60Предварительная.ДатаСобытия,
	|	ОборотыПоКредиту60Предварительная.ВозвратАвансовПолученных,
	|	ЕСТЬNULL(ДоговорыСчетовФактур.ДоговорКонтрагента, ОборотыПоКредиту60Предварительная.ДоговорКонтрагента)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Покупатель,
	|	СчетФактура,
	|	ДоговорКонтрагента,
	|	ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДСПокупки.Организация КАК Организация,
	|	НДСПокупки.Поставщик КАК Покупатель,
	|	НДСПокупки.СчетФактура КАК СчетФактура,
	|	НДСПокупки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НАЧАЛОПЕРИОДА(НДСПокупки.ДатаСобытия, ДЕНЬ) КАК ДатаСобытия,
	|	СУММА(НДСПокупки.СуммаБезНДСОборот + НДСПокупки.НДСОборот) КАК СуммаВсего
	|ПОМЕСТИТЬ ОборотыКнигиПокупок
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			(СчетФактура, Организация, Поставщик) В
	|					(ВЫБРАТЬ
	|						ОборотыПоКредиту60.СчетФактура,
	|						ОборотыПоКредиту60.Организация,
	|						ОборотыПоКредиту60.Покупатель
	|					ИЗ
	|						ОборотыПоКредиту60 КАК ОборотыПоКредиту60)
	|				И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученныеНалоговыйАгент)) КАК НДСПокупки
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПокупки.Организация,
	|	НДСПокупки.Поставщик,
	|	НДСПокупки.СчетФактура,
	|	НДСПокупки.ДоговорКонтрагента,
	|	НАЧАЛОПЕРИОДА(НДСПокупки.ДатаСобытия, ДЕНЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Покупатель,
	|	СчетФактура,
	|	ДоговорКонтрагента,
	|	ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыПоКредиту60.Организация КАК Организация,
	|	ОборотыПоКредиту60.Покупатель КАК Покупатель,
	|	ОборотыПоКредиту60.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОборотыПоКредиту60.СчетФактура КАК СчетФактура,
	|	ОборотыПоКредиту60.ДатаСобытия КАК ДатаСобытия,
	|	ОборотыПоКредиту60.ВозвратАвансовПолученных КАК ВозвратАвансовПолученных,
	|	ОборотыПоКредиту60.СуммаАванса - ЕСТЬNULL(ОборотыКнигиПокупок.СуммаВсего, 0) КАК СуммаАванса
	|ИЗ
	|	ОборотыПоКредиту60 КАК ОборотыПоКредиту60
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыКнигиПокупок КАК ОборотыКнигиПокупок
	|		ПО ОборотыПоКредиту60.Покупатель = ОборотыКнигиПокупок.Покупатель
	|			И ОборотыПоКредиту60.СчетФактура = ОборотыКнигиПокупок.СчетФактура
	|			И ОборотыПоКредиту60.ДоговорКонтрагента = ОборотыКнигиПокупок.ДоговорКонтрагента
	|			И ОборотыПоКредиту60.ДатаСобытия = ОборотыКнигиПокупок.ДатаСобытия
	|ГДЕ
	|	ОборотыПоКредиту60.СуммаАванса - ЕСТЬNULL(ОборотыКнигиПокупок.СуммаВсего, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Покупатель,
	|	СчетФактура,
	|	ДоговорКонтрагента,
	|	ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыКнигиПокупок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОборотыПоКредиту60";

	УстановитьПривилегированныйРежим(Истина);

	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "ИндексТаблицыСубконто.ДанныеОЗачтенныхАвансахВыданных";
	
	ЗачетыАвансов = Запрос.Выполнить().Выбрать();
	
	// Выборка специальным образом упорядочена для использования далее в алгоритме.
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат ЗачетыАвансов;
	
КонецФункции

Процедура РаспределитьЗачетыАвансовПоСчетамФактурам(СтруктураПараметров, ТаблицаАвансов, ТаблицаРезультатов, МенеджерВТ_СписокСчетовФактур, ЗачетыАвансов)
	
	СравнениеПоИдентификатору = Новый СравнениеЗначений;
	// И ТаблицаАвансов, и ЗачетыАвансов были отсортированы ранее в порядке "Покупатель, СчетФактура, ДоговорКонтрагента".
	
	СтруктураОтбора = Документы.ФормированиеЗаписейКнигиПокупок.СтруктураОтбораСтрок();
	МассивСуммаБезНДС = Новый Массив;
	МассивСуммаНДС = Новый Массив;
	ИндексСтрокиТаблицыАвансов = 0;
	Пока ЗачетыАвансов.Следующий() Цикл
		
		СуммаБезНДС = 0;
		МассивСуммаБезНДС.Очистить();
		СуммаНДС = 0;
		МассивСуммаНДС.Очистить();
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
		СуммаНепогашенногоАванса = ЗачетыАвансов.СуммаАванса;
		
		Если СтруктураОтбора.СчетФактура <> ЗачетыАвансов.СчетФактура
		 Или СтруктураОтбора.ДоговорКонтрагента <> ЗачетыАвансов.ДоговорКонтрагента
		 Или СтруктураОтбора.Покупатель <> ЗачетыАвансов.Покупатель Тогда
			// Повторный поиск (например, если разные ДатаСобытия) не выполняем. Используем ранее полученные строки.
			
			СтруктураОтбора.Покупатель         = ЗачетыАвансов.Покупатель;
			СтруктураОтбора.ДоговорКонтрагента = ЗачетыАвансов.ДоговорКонтрагента;
			СтруктураОтбора.СчетФактура        = ЗачетыАвансов.СчетФактура;
			СтрокиАвансаПоОтбору = УчетНДСПереопределяемый.НайтиСтрокиПоОтбору(
				ТаблицаАвансов, ИндексСтрокиТаблицыАвансов, СтруктураОтбора, "Покупатель", СравнениеПоИдентификатору);
			СтруктураПредыдущегоОтбора = СтруктураОтбора;
			
		КонецЕсли;
		Если СтрокиАвансаПоОтбору.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			Если СтрокаАвансаПоОтбору.ДатаСобытия > ЗачетыАвансов.ДатаСобытия Тогда
				// Не учитываем зачет аванса, произведенный до выписки счета-фактуры
				Продолжить;
			КонецЕсли;
			
			МассивСуммаБезНДС.Добавить(СтрокаАвансаПоОтбору.СуммаБезНДС);
			МассивСуммаНДС.Добавить(СтрокаАвансаПоОтбору.НДС);

			СуммаБезНДС = СуммаБезНДС + СтрокаАвансаПоОтбору.СуммаБезНДС;
			СуммаНДС = СуммаНДС + СтрокаАвансаПоОтбору.НДС;
			
			СтавкаНДС = СтрокаАвансаПоОтбору.СтавкаНДС;
			
		КонецЦикла;

		Если СуммаБезНДС + СуммаНДС = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтавкаНДС <> Перечисления.СтавкиНДС.ПустаяСсылка() Тогда
			// Поставщик товаров, указанных в п.8 ст. 161 НК, не предъявляет НДС.
			// Соответственно сумма остатка аванса на счете 60.х2 не включает НДС.
			// Для правильного определения суммы без НДС и НДС необходимо увеличить сумму непогашенного аванса на сумму НДС.
			СтавкаНДСЧисло = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
			СуммаНепогашенногоАванса = СуммаНепогашенногоАванса + СуммаНепогашенногоАванса * СтавкаНДСЧисло / 100;
		КонецЕсли;

		СуммаСНДС = Мин(СуммаНепогашенногоАванса, СуммаБезНДС + СуммаНДС);
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС / (СуммаБезНДС+СуммаНДС), 2);
		Если СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаБезНДС, МассивСуммаБезНДС);
		КонецЕсли;
		
		СуммаНДС = Окр(СуммаСНДС - СуммаБезНДС, 2);
		Если СуммаНДС > 0 Тогда
			МассивСуммаНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СуммаНДС, МассивСуммаНДС);
		КонецЕсли; 
		
		Счетчик = 0;
		Для Каждого СтрокаАвансаПоОтбору Из СтрокиАвансаПоОтбору Цикл
			Если СтрокаАвансаПоОтбору.ДатаСобытия > ЗачетыАвансов.ДатаСобытия Тогда
				// Не учитываем зачет аванса, произведенный до выписки счета-фактуры
				Продолжить;
			КонецЕсли;
			
			Если ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0) = 0 
				И ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0) = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаРезультата = ТаблицаРезультатов.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаАвансаПоОтбору, 
				"СчетФактура,СчетФактураДата,Покупатель,ДоговорКонтрагента,СтавкаНДС,ИсправленныйСчетФактура");
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, ЗачетыАвансов, 
				"ДатаСобытия,ВозвратАвансовПолученных");
			
			СтрокаРезультата.СуммаБезНДС     = ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик],0);
			СтрокаРезультата.НДС             = ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик],0);
			
			СтрокаАвансаПоОтбору.СуммаБезНДС = СтрокаАвансаПоОтбору.СуммаБезНДС - ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0);
			СтрокаАвансаПоОтбору.НДС         = СтрокаАвансаПоОтбору.НДС - ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0);
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеОДокументахОплатыВозвратАванса(СтруктураПараметров, ТаблицаРезультатов, МенеджерВТ_СписокСчетовФактур)
	
	МассивСчетовАвансов = Новый Массив;
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным);    // 60.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал); // 60.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ);  // 60.32
	МассивСчетовАвансов = БухгалтерскийУчет.СформироватьМассивСубсчетов(МассивСчетовАвансов); // добавляем субсчета
	
	СчетаВозвратаДенежныхСредств = Новый Массив();
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);      // 51
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);       // 52
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ЦифровойРубль);       // 53
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);    // 50.01
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);   // 50.02
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал); // 50.21
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);       // 57.01
	СчетаВозвратаДенежныхСредств.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);    // 57.21
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СчетаВозвратаДенежныхСредств, МассивСчетовАвансов); // 60.02, 60.22, 60.32
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ_СписокСчетовФактур;
	Запрос.УстановитьПараметр("МассивСчетовАвансов",          МассивСчетовАвансов);
	Запрос.УстановитьПараметр("СчетаВозвратаДенежныхСредств", СчетаВозвратаДенежныхСредств);
	Запрос.УстановитьПараметр("Организация",                  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ДатаГраница", Новый Граница(КонецДня(СтруктураПараметров.Дата), ВидГраницы.Включая));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаВозврата,
	|	ХозрасчетныйОбороты.Регистратор КАК ДокументВозвратаАванса,
	|	ХозрасчетныйОбороты.Период КАК ДатаСобытия,
	|	ХозрасчетныйОбороты.Субконто1 КАК СчетФактура,
	|	ХозрасчетныйОбороты.Организация КАК Организация
	|ПОМЕСТИТЬ ДокументыВозвратаАванса
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			,
	|			&ДатаГраница,
	|			Регистратор,
	|			Счет В (&МассивСчетовАвансов),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						СписокСчетовФактур.СчетФактура
	|					ИЗ
	|						СписокСчетовФактур),
	|			КорСчет В (&СчетаВозвратаДенежныхСредств),
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотКт > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Регистратор,
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Субконто1,
	|	ХозрасчетныйОбороты.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Организация,
	|	ХозрасчетныйОбороты.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыВозвратаАванса.СчетФактура КАК СчетФактура,
	|	НАЧАЛОПЕРИОДА(ДокументыВозвратаАванса.ДатаСобытия, ДЕНЬ) КАК ДатаСобытия,
	|	ДокументыВозвратаАванса.СуммаВозврата КАК СуммаБазис,
	|	ДокументыВозвратаАванса.ДокументВозвратаАванса КАК ДокументВозвратаАванса,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДокументаОплаты,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК НомерДокументаОплаты
	|ИЗ
	|	ДокументыВозвратаАванса КАК ДокументыВозвратаАванса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ДокументыВозвратаАванса.Организация = ДанныеПервичныхДокументов.Организация
	|			И ДокументыВозвратаАванса.ДокументВозвратаАванса = ДанныеПервичныхДокументов.Документ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактура";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ОплаченныйНДС = Результат.Выгрузить();
	ОплаченныйНДС.Индексы.Добавить("СчетФактура,ДатаСобытия");
	Отбор = Новый Структура("СчетФактура,ДатаСобытия");

	ДополнительныеДокументыОплаты = ТаблицаРезультатов.СкопироватьКолонки();
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		
		Если НЕ СтрокаТаблицы.ВозвратАвансовПолученных Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.СчетФактура = СтрокаТаблицы.СчетФактура;
		Отбор.ДатаСобытия = СтрокаТаблицы.ДатаСобытия;
		СтрокиОтбора = ОплаченныйНДС.НайтиСтроки(Отбор);
		
		Если СтрокиОтбора.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли СтрокиОтбора.Количество() = 1 Тогда
			// Документ оплаты один, распределение оплат не требуется
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокиОтбора[0]);
			Продолжить;
		КонецЕсли;
		
		БазисРаспределения = Новый Массив();
		ПустойМассив = Новый Массив();
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			БазисРаспределения.Добавить(СтрокаОтбора.СуммаБазис);
			ПустойМассив.Добавить(0);
		КонецЦикла;
		
		Если СтрокаТаблицы.СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаТаблицы.СуммаБезНДС, БазисРаспределения);
		Иначе
			МассивСуммаБезНДС = ПустойМассив;
		КонецЕсли;
		
		Если СтрокаТаблицы.НДС > 0 Тогда
			МассивНДС = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(
				СтрокаТаблицы.НДС, БазисРаспределения);
		Иначе
			МассивНДС = ПустойМассив;
		КонецЕсли; 

		Счетчик = 0;
		ПерваяСтрока = Истина;
		
		Для каждого СтрокаОтбора Из СтрокиОтбора Цикл
			Если ПерваяСтрока Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаОтбора);
				СтрокаТаблицы.СуммаБезНДС = МассивСуммаБезНДС[Счетчик];
				СтрокаТаблицы.НДС = МассивНДС[Счетчик];
				ПерваяСтрока = Ложь;
			Иначе
				ДополнительнаяСтрока = ДополнительныеДокументыОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаТаблицы, ,"СуммаБезНДС, НДС");
				ЗаполнитьЗначенияСвойств(ДополнительнаяСтрока, СтрокаОтбора);
				ДополнительнаяСтрока.СуммаБезНДС = МассивСуммаБезНДС[Счетчик];
				ДополнительнаяСтрока.НДС = МассивНДС[Счетчик];
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДополнительныеДокументыОплаты, ТаблицаРезультатов);	
	
КонецПроцедуры

Функция НетОперацийОбратногоНачисленияНДС(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.УчетАгентскогоНДС
	|	И ДоговорыКонтрагентов.ВидАгентскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров)";
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

