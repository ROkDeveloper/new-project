#Область ПрограммныйИнтерфейс

// Вызывается при выборе автоматической настройки интеграции по документу ПоступлениеТоваровУслуг.
// Создает правила интеграции и вид входящего документа.
//
// Возвращаемое значение:
//   Массив - ссылки на созданные правила.
//
Функция НачатьАвтоматическуюНастройкуИнтеграцииПоступлениеТоваровУслуг() Экспорт
	
	СозданныеПравила = Новый Массив;
	
	ТипДокумента = "DMIncomingDocument";
	ТипВидаДокумента = ТипДокумента + "Type";
	НаименованиеВидаДокумента = НСтр("ru = 'Поступление (акт, накладная)'");
	
	// Получим идентификатор вида документа из предыдущих попыток настройки.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	ПравилаИнтеграцииПравилаЗаполненияРеквизитовДО.ЗначениеРеквизитаДОID КАК ИдентификаторВидаДокумента
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом.ПравилаЗаполненияРеквизитовДО КАК ПравилаИнтеграцииПравилаЗаполненияРеквизитовДО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК ПравилаИнтеграцииС1СДокументооборотом
		|		ПО ПравилаИнтеграцииПравилаЗаполненияРеквизитовДО.Ссылка = ПравилаИнтеграцииС1СДокументооборотом.Ссылка
		|ГДЕ
		|	ПравилаИнтеграцииПравилаЗаполненияРеквизитовДО.ЗначениеРеквизитаДО = &НаименованиеВидаДокумента
		|	И ПравилаИнтеграцииПравилаЗаполненияРеквизитовДО.ЗначениеРеквизитаДОТип = &ТипВидаДокумента
		|	И ПравилаИнтеграцииПравилаЗаполненияРеквизитовДО.Ссылка.ТипОбъектаИС = &ТипОбъектаИС
		|	И НЕ ПравилаИнтеграцииС1СДокументооборотом.ПометкаУдаления");
	Запрос.УстановитьПараметр("НаименованиеВидаДокумента", НаименованиеВидаДокумента);
	Запрос.УстановитьПараметр("ТипВидаДокумента", ТипВидаДокумента);
	Запрос.УстановитьПараметр("ТипОбъектаИС", "Документ.ПоступлениеТоваровУслуг");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ИдентификаторВидаДокумента = Выборка.ИдентификаторВидаДокумента;
	Иначе
		ИдентификаторВидаДокумента = Неопределено;
	КонецЕсли;
	
	// Проверим, существует ли этот вид документа в подключенной базе ДО.
	Если ИдентификаторВидаДокумента <> Неопределено Тогда
		Попытка
			ОбъектыXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъект(
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси(),
				ТипВидаДокумента,
				ИдентификаторВидаДокумента);
			Если ОбъектыXDTO.objects.Количество() = 1 Тогда
				ВидДокумента = ОбъектыXDTO.objects[0];
			Иначе
				ВидДокумента = Неопределено;
				ИдентификаторВидаДокумента = Неопределено;
			КонецЕсли;
		Исключение // ранее созданный вид документа удален или база другая
			ВидДокумента = Неопределено;
			ИдентификаторВидаДокумента = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если ИдентификаторВидаДокумента = Неопределено Тогда
		РеквизитыВидаДокумента = ИнтеграцияС1СДокументооборот.СтруктураРеквизитовЗаполняемогоВидаДокументовДО(
			ТипВидаДокумента);
		РеквизитыВидаДокумента.Имя = НаименованиеВидаДокумента;
		РеквизитыВидаДокумента.АвтоНумерация = Истина;
		РеквизитыВидаДокумента.УчитыватьСуммуДокумента = Истина;
		РеквизитыВидаДокумента.ИспользоватьСрокИсполнения = Ложь;
		ВидДокумента = ИнтеграцияС1СДокументооборот.НайтиСоздатьВидДокументаВДО(РеквизитыВидаДокумента);
	КонецЕсли;
	
	Для Каждого ВидОперации Из Перечисления.ВидыОперацийПоступлениеТоваровУслуг Цикл
		СозданныеПравила.Добавить(
			СоздатьПравилоИнтеграцииПоступлениеТоваровУслуг(ВидОперации, ВидДокумента, ТипДокумента));
	КонецЦикла;
	
	Возврат СозданныеПравила;
	
КонецФункции

// Заполняет свойства объекта XDTO из реквизитов объекта конфигурации-потребителя. По умолчанию заполняется
// только наименование и идентификатор. При необходимости обеспечить заполнение других реквизитов объектов
// ДО, создаваемых по ссылкам, следует заполнить соответствующие свойства объекта XDTO. Эти же значения будут
// использованы при поиске соответствий для справочников, имеющих внешние ключи (ИНН, КПП).
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектXDTO - ОбъектXDTO - заполняемый объект.
//   СсылкаНаПотребитель - ЛюбаяСсылка - ссылка на исходный объект конфигурации-потребителя.
//
// Пример:
//	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMCorrespondent")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП, ЮрФизЛицо");
//		ОбъектXDTO.inn = Реквизиты.ИНН;
//		ОбъектXDTO.kpp = Реквизиты.КПП;
//		Если Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ЮрЛицо Тогда
//			ОбъектXDTO.legalPrivatePerson = "LglPerson";
//		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ФизЛицо Тогда
//			ОбъектXDTO.legalPrivatePerson = "Individ";
//		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
//			ОбъектXDTO.legalPrivatePerson = "IndividualEntrepreneur";
//		ИначеЕсли Реквизиты.ЮрФизЛицо = Перечисления._ДемоЮрФизЛицо.ЮрЛицоНеРезидент Тогда
//			ОбъектXDTO.legalPrivatePerson = "LglPersonNonResident";
//		КонецЕсли;
//	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ИНН, КПП");
//		ОбъектXDTO.inn = Реквизиты.ИНН;
//		ОбъектXDTO.kpp = Реквизиты.КПП;
//	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMBankAccount")
//			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка._ДемоБанковскиеСчета") Тогда
//		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "Владелец, НомерСчета");
//		ОбъектXDTO.number = Реквизиты.НомерСчета;
//		Если ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка._ДемоКонтрагенты") Тогда
//			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCorrespondent");
//		ИначеЕсли ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка._ДемоОрганизации") Тогда
//			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMOrganization");
//		КонецЕсли;
//		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.owner, Реквизиты.Владелец);
//	Иначе //...
//	КонецЕсли;
//
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель) Экспорт
	
	Если СсылкаНаПотребитель.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Настройки = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИспользоватьИнтеграцию();
	
	Если ТипЗнч(ОбъектXDTO) = Тип("Строка") Или ОбъектXDTO = Неопределено Тогда
		ЗаполнитьПеречислениеXDTOИзПотребителя(ОбъектXDTO, СсылкаНаПотребитель, Настройки);
		
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO") Тогда
		ЗаполнитьСсылочныйОбъектXDTOИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель, Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьПравилоИнтеграцииПоступлениеТоваровУслуг(ВидОперации, ВидДокумента, ТипДокумента)
	
	ПравилаИнтеграцииМенеджер = Справочники.ПравилаИнтеграцииС1СДокументооборотом;
	
	Правило = Справочники.ПравилаИнтеграцииС1СДокументооборотом.СоздатьЭлемент();
	Правило.Заполнить(Неопределено);
	Правило.ТипОбъектаИС = "Документ.ПоступлениеТоваровУслуг";
	Правило.ТипОбъектаДО = ТипДокумента;
	Правило.Комментарий = "Создано автоматически";
	
	// Ключевые реквизиты, вид операции и вид документа.
	
	// вид операции
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"ВидОперации",
		ВидОперации,
		Ложь,
		Истина,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
		
	// вид документа
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.УказанноеЗначение,
		"documentType",
		ВидДокумента,
		Ложь,
		Истина);
	
	// Парные правила.
	
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(Правило, "Организация", "organization");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(Правило, "ВалютаДокумента", "currency");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(Правило, "СуммаДокумента", "sum");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(Правило, "Контрагент", "correspondent");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(Правило, "Дата", "regDate");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(Правило, "ПодразделениеОрганизации", "subdivision");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(Правило, "Комментарий", "comment");
	ПравилаИнтеграцииМенеджер.ДобавитьПарноеПравило(Правило, "Ответственный", "responsible");
	
	// Прочие правила. Выгрузка.
	
	// заголовок
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"title",
		"Параметры.Результат = Строка(Параметры.Источник);");
	
	// гриф доступа
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"accessLevel",
		"Параметры.Результат = ""Общий"";",
		Ложь);
	
	// вопрос деятельности
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаДО(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ВыражениеНаВстроенномЯзыке,
		"activityMatter",
		"Параметры.Результат = ""Основная деятельность"";",
		Ложь);
	
	// Прочие правила. Загрузка.
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"НомерВходящегоДокумента",
		"externalNumber",
		Истина,
		Ложь,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
	
	ПравилаИнтеграцииМенеджер.ДобавитьПравилоЗаполненияРеквизитаИС(
		Правило,
		Перечисления.ВариантыПравилЗаполненияРеквизитов.РеквизитОбъекта,
		"ДатаВходящегоДокумента",
		"externalDate",
		Истина,
		Ложь,
		Перечисления.РежимИзмененияПроведенногоДокументаДанными1СДокументооборота.Запрещено);
	
	Правило.Записать();
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", Правило.Ссылка);
	Результат.Вставить("ТипОбъектаИС", Правило.ТипОбъектаИС);
	Результат.Вставить("ТипОбъектаДО", Правило.ТипОбъектаДО);
	Результат.Вставить("ПредставлениеОбъектаИС", Правило.ТипОбъектаИС);
	Результат.Вставить("ПредставлениеОбъектаДО", Правило.ТипОбъектаДО);
	Результат.Вставить("ИдентификаторВидаДокумента", ВидДокумента.objectID.ID);
	Результат.Вставить("ТипВидаДокумента", ВидДокумента.objectID.type);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПеречислениеXDTOИзПотребителя(ОбъектXDTO, СсылкаНаПотребитель, Настройки)
	
	Если Настройки.ИспользоватьИнтеграциюДО3 = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаПотребитель) = Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
		
		Если СсылкаНаПотребитель = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ОбъектXDTO = "LglPerson";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ОбъектXDTO = "Individ";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("ПеречислениеСсылка.СтавкиНДС") Тогда
		
		Если СсылкаНаПотребитель = Перечисления.СтавкиНДС.БезНДС Тогда
			ОбъектXDTO = "WithoutVAT";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС0 Тогда
			ОбъектXDTO = "VAT0";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС10
				Или СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС10_110 Тогда
			ОбъектXDTO = "VAT10";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС18
				Или СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС18_118 Тогда
			ОбъектXDTO = "VAT18";
			
		ИначеЕсли СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС20
				Или СсылкаНаПотребитель = Перечисления.СтавкиНДС.НДС20_120 Тогда
			ОбъектXDTO = "VAT20";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылочныйОбъектXDTOИзПотребителя(Прокси, ОбъектXDTO, СсылкаНаПотребитель, Настройки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(СсылкаНаПотребитель) = Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
		
		Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
			ЮрФизЛицоID = "";
			Если СсылкаНаПотребитель = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				ЮрФизЛицоID = "ФизЛицо";
			ИначеЕсли СсылкаНаПотребитель = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				ЮрФизЛицоID = "ЮрЛицо";
			КонецЕсли;
			ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMLegalPrivatePerson");
			ОбъектXDTO.name = Строка(СсылкаНаПотребитель);
			ОбъектXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				ЮрФизЛицоID,
				"DMLegalPrivatePerson");
		ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
			ЗаполнитьПеречислениеXDTOИзПотребителя(ОбъектXDTO, СсылкаНаПотребитель, Настройки);
		КонецЕсли;
		
	ИначеЕсли (ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMCorrespondent")
				И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Контрагенты")
				И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПотребитель, "ЭтоГруппа"))
			Или (ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMOrganization")
				И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Организации")) Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель,
			"ИНН, КПП, ЮридическоеФизическоеЛицо, КодПоОКПО, НаименованиеПолное");
		
		Если ЗначениеЗаполнено(Реквизиты.ИНН) Тогда
			ОбъектXDTO.inn = Реквизиты.ИНН;
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.КПП) Тогда
			ОбъектXDTO.kpp = Реквизиты.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.КодПоОКПО) Тогда
			ОбъектXDTO.okpo = Реквизиты.КодПоОКПО;
		КонецЕсли;
		Если ЗначениеЗаполнено(Реквизиты.НаименованиеПолное) Тогда
			ОбъектXDTO.fullName = Реквизиты.НаименованиеПолное;
		КонецЕсли;
		
		ЗаполнитьРеквизитыИзПотребителя(Прокси, ОбъектXDTO.legalPrivatePerson, Реквизиты.ЮридическоеФизическоеЛицо);
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMContactPerson")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель,
			"ОбъектВладелец, Должность, Описание");
		
		ОбъектXDTO.position = Реквизиты.Должность;
		ОбъектXDTO.comment = Реквизиты.Описание;
		
		Если ЗначениеЗаполнено(Реквизиты.ОбъектВладелец)
				И ТипЗнч(Реквизиты.ОбъектВладелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбъектXDTO.correspondent = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMCorrespondent",
				Реквизиты.ОбъектВладелец);
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMPrivatePerson")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "ФИО, ДатаРождения");
		
		ОбъектXDTO.name = Реквизиты.ФИО;
		Если ЗначениеЗаполнено(Реквизиты.ДатаРождения) Тогда
			ОбъектXDTO.birthDay = Реквизиты.ДатаРождения;
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMBankAccount")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаПотребитель, "Владелец, Банк, НомерСчета");
		
		ОбъектXDTO.number = Реквизиты.НомерСчета;
		
		Если ЗначениеЗаполнено(Реквизиты.Владелец) Тогда
			Если ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
				ТипОбъектаXDTO = "DMCorrespondent";
			ИначеЕсли ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ТипОбъектаXDTO = "DMPrivatePerson";
			ИначеЕсли ТипЗнч(Реквизиты.Владелец) = Тип("СправочникСсылка.Организации") Тогда
				ТипОбъектаXDTO = "DMOrganization";
			КонецЕсли;
			ОбъектXDTO.owner = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				ТипОбъектаXDTO,
				Реквизиты.Владелец);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Реквизиты.Банк) Тогда
			ОбъектXDTO.bank = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMBank",
				Реквизиты.Банк);
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMSubdivision")
			И ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
			|			,
			|			ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
			|				И СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛицаОрганизацийСрезПоследних");
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СсылкаНаПотребитель);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Руководитель = Выборка.ФизическоеЛицо;
			
			Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
				ИмяТипаXDTO = "DMUser";
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
				ИмяТипаXDTO = "DMEmployee";
			КонецЕсли;
			
			ОбъектXDTO.head = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				ИмяТипаXDTO,
				Руководитель,
				Ложь);
			ОбъектXDTO.head.subdivision = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMSubdivision",
				СсылкаНаПотребитель,
				Ложь);
			
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMUser") Тогда
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			Справочники.Сотрудники.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
		КонецЕсли;
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Пользователи.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
				|	И НЕ Пользователи.ПометкаУдаления");
			Запрос.УстановитьПараметр("ФизическоеЛицо", СсылкаНаПотребитель);
			
			ВыборкаПользователи = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаПользователи.Количество() = 1 Тогда
				
				ВыборкаПользователи.Следующий();
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитыИзПотребителя(
					Прокси,
					ОбъектXDTO,
					ВыборкаПользователи.Ссылка);
				
			Иначе
				
				ОбъектXDTO.privatePerson = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMPrivatePerson",
					СсылкаНаПотребитель);
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMEmployee") Тогда
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			Справочники.Сотрудники.ИнтеграцияС1СДокументооборотЗаполнитьДанныеСотрудника(
				Прокси,
				ОбъектXDTO,
				СсылкаНаПотребитель);
			ОбъектXDTO.externalObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(
				Прокси,
				СсылкаНаПотребитель);
		КонецЕсли;
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Пользователи") Тогда
			ЗапросПользователь = Новый Запрос(
				"ВЫБРАТЬ
				|	Пользователи.ФизическоеЛицо.ФИО КАК ФизическоеЛицоНаименование,
				|	Пользователи.Подразделение КАК Подразделение
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.Ссылка = &Пользователь");
			ЗапросПользователь.УстановитьПараметр("Пользователь", СсылкаНаПотребитель);
			
			ВыборкаПользователь = ЗапросПользователь.Выполнить().Выбрать();
			Если ВыборкаПользователь.Следующий() Тогда
				
				Если ЗначениеЗаполнено(ВыборкаПользователь.ФизическоеЛицоНаименование) Тогда
					ОбъектXDTO.name = ВыборкаПользователь.ФизическоеЛицоНаименование;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПользователь.Подразделение) Тогда
					ОбъектXDTO.subdivision = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
						Прокси,
						"DMSubdivision",
						ВыборкаПользователь.Подразделение);
				КонецЕсли;
				
			КонецЕсли;
			
			Справочники.Сотрудники.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
			
		КонецЕсли;
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ЗапросПользователь = Новый Запрос(
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Пользователи.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Пользователи КАК Пользователи
				|ГДЕ
				|	Пользователи.ФизическоеЛицо = &ФизическоеЛицо
				|	И НЕ Пользователи.ПометкаУдаления");
			ЗапросПользователь.УстановитьПараметр("ФизическоеЛицо", СсылкаНаПотребитель);
			
			ВыборкаПользователи = ЗапросПользователь.Выполнить().Выбрать();
			
			Если ВыборкаПользователи.Количество() = 1 Тогда
				ВыборкаПользователи.Следующий();
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьРеквизитыИзПотребителя(
					Прокси,
					ОбъектXDTO,
					ВыборкаПользователи.Ссылка);
				
			Иначе
				ОбъектXDTO.privatePerson = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMPrivatePerson",
					СсылкаНаПотребитель);
				
			КонецЕсли;
			
			Справочники.ФизическиеЛица.ЗаполнитьРеквизитыОбъектаДокументооборота(Прокси, ОбъектXDTO, СсылкаНаПотребитель);
			
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMParty") Тогда
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Контрагенты") Тогда
			ОбъектXDTO.correspondent = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMCorrespondent",
				СсылкаНаПотребитель);
			
		ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Организации") Тогда
			ОбъектXDTO.organization = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMOrganization",
				СсылкаНаПотребитель);
			
		ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Пользователи")
				Или ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица")
				Или ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
				ОбъектXDTO.user = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMUser",
					СсылкаНаПотребитель);
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
				ОбъектXDTO.employee = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMEmployee",
					СсылкаНаПотребитель);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОбъектXDTO, "DMPartyRowContact") Тогда
		
		Если ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ОбъектXDTO.contactPerson = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				"DMContactPerson",
				СсылкаНаПотребитель);
			
		ИначеЕсли ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Пользователи")
				Или ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.ФизическиеЛица")
				Или ТипЗнч(СсылкаНаПотребитель) = Тип("СправочникСсылка.Сотрудники") Тогда
			Если Настройки.ИспользоватьИнтеграциюДО2 Тогда
				ОбъектXDTO.user = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMUser",
					СсылкаНаПотребитель);
			ИначеЕсли Настройки.ИспользоватьИнтеграциюДО3 Тогда
				ОбъектXDTO.employee = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
					Прокси,
					"DMEmployee",
					СсылкаНаПотребитель);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти