// Содержимое модуля отличается в версиях ПРОФ и КОРП.
// В версии ПРОФ отсутствует:
// - тело экспортных процедур (остаются только сигнатуры методов)
// - неэкспортные процедуры и все функции.
// Поэтому не допускается реализация в модуле экспортных функций: вместо них следует использовать процедуры с возвращаемым параметром.

#Область ПрограммныйИнтерфейс

#Область ВключениеОтключениеОбособленныхПодразделений

Процедура ПриВключенииВестиУчетПоПодразделениям() Экспорт
	
	СнятьОпциюРасчетаЗарплатыПоПодразделениямДляНебольшихОрганизаций();
	ЗаполнитьПодразделенияОСПоДаннымМестонахождения();
	ЗаполнитьДанныеПоСубконтоРегистрацияВНалоговомОргане();
	
КонецПроцедуры

#КонецОбласти

// Дополняет массив типов ссылок на документы типом документа,
// который может отсутствовать, если подсистема не используется
//
// Параметры:
//  Типы - Массив из Тип
//
Процедура ДобавитьТипДокументаАвизоОСИсходящее(Типы) Экспорт
	
	Типы.Добавить(Тип("ДокументСсылка.АвизоОСИсходящее"));
	
КонецПроцедуры

Процедура ДобавитьТипДокументаОбособленныхПодразделений(СписокТипов, ТипДокумента) Экспорт
	
	СписокТипов.Добавить(Тип("ДокументСсылка."+ТипДокумента));
	
КонецПроцедуры

Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеОбъекта = ТаблицаОписания.Добавить();
	ОписаниеОбъекта.ТипОбъекта = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках");
	ОписаниеОбъекта.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеОбъекта.ГруппаВДереве = "Налоговая отчетность";
	ОписаниеОбъекта.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеОбъекта.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеОбъекта.ЯвляетсяАктуальным = Истина;
	ОписаниеОбъекта.ИмяОсновногоМакетаДляПечати = "";
	
КонецПроцедуры

Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.АвизоМПЗВходящее);
	СписокОбъектов.Добавить(Документы.АвизоМПЗИсходящее);
	СписокОбъектов.Добавить(Документы.АвизоОСВходящее);
	СписокОбъектов.Добавить(Документы.АвизоОСИсходящее);
	СписокОбъектов.Добавить(Документы.АвизоПрочееВходящее);
	СписокОбъектов.Добавить(Документы.АвизоПрочееИсходящее);
	СписокОбъектов.Добавить(Документы.АвизоРасчетыВходящее);
	СписокОбъектов.Добавить(Документы.АвизоРасчетыИсходящее);
	СписокОбъектов.Добавить(Документы.КонтролируемаяСделка);
	СписокОбъектов.Добавить(Документы.ПрочиеКонтролируемыеСделки);
	
КонецПроцедуры

Процедура ПриПолученииСпискаРегламентированныхОтчетов(СписокРегламентированныхОтчетов) Экспорт
	
	СписокРегламентированныхОтчетов.Добавить("РегламентированныйОтчетОперацииСДенежнымиСредствамиНФО");
	
КонецПроцедуры

Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт

	Библиотека = Метаданные.Имя;
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.59.29",
		"Подсистема.КонтролируемыеСделки",
		"Подсистема.БухгалтерияПредприятияПодсистемы.Подсистема.КонтролируемыеСделки",
		Библиотека);
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.59.29",
		"Подсистема.ОбменДаннымиКОРП",
		"Подсистема.БухгалтерияПредприятияПодсистемы.Подсистема.ОбменДаннымиКОРП",
		Библиотека);
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"3.0.59.29",
		"Подсистема.ОбособленныеПодразделения",
		"Подсистема.БухгалтерияПредприятияПодсистемы.Подсистема.ОбособленныеПодразделения",
		Библиотека);

КонецПроцедуры

Процедура ПроверитьИспользованиеОбособленныхПодразделенийНеВыделенныхНаОтдельныйБаланс(
	ОбособленныеПодразделенияИспользуются, Организация) Экспорт
	
	Если Не БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям() Тогда
		
		ОбособленныеПодразделенияИспользуются = Ложь;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПодразделенияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	НЕ ПодразделенияОрганизаций.ПометкаУдаления
		|	И ПодразделенияОрганизаций.Владелец = &Организация
		|	И ПодразделенияОрганизаций.ОбособленноеПодразделение";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		ОбособленныеПодразделенияИспользуются = Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЯвляютсяВзаимозависимыми(ДатаЗапроса, Контрагент, Организация, ЯвляютсяВзаимозависимыми) Экспорт
	ЯвляютсяВзаимозависимыми = Строка(РегистрыСведений.ВзаимозависимыеЛица.ЯвляютсяВзаимозависимыми(ДатаЗапроса, Контрагент, Организация));
КонецПроцедуры

Процедура ПолучитьСведенияОбОрганизации(ОргСведения, Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	ИспользуетсяРасширенныйФункционал = Ложь;
	ИспользуетсяРасширенныйФункционал(ИспользуетсяРасширенныйФункционал);
	Если Не ИспользуетсяРасширенныйФункционал Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = ТекущаяДатаСеанса();
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Организация = Организация.ПолучитьОбъект();
		Организация.Прочитать();
	КонецЕсли;
	
	Если СписокПоказателей = Неопределено Тогда
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("НаимНОКрупнейший");
		СписокПоказателей.Добавить("КППЮЛКрупнейший");
		СписокПоказателей.Добавить("ОКТМОКрупнейший");
		СписокПоказателей.Добавить("ОКАТОКрупнейший");
	КонецЕсли;
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	Для Каждого Показатель Из СписокПоказателей Цикл
		
		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если ИмяПоказателя = "НаимНОКрупнейший" Тогда
			
			Значение = "";
			Если НЕ Организация.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане.Пустая() Тогда
				Значение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация.Ссылка, "КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане.НаименованиеИФНС");
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "КППЮЛКрупнейший" Тогда
			
			Значение = "";
			Если ПолучитьФункциональнуюОпцию("РасширенныйФункционал") Тогда
				Значение = Организация.КрупнейшийНалогоплательщикКПП;
			КонецЕсли;
		ИначеЕсли ИмяПоказателя = "ОКТМОКрупнейший" Или ИмяПоказателя = "ОКАТОКрупнейший" Тогда
			
			Значение = "";
			Если НЕ Организация.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане.Пустая() Тогда
				ТипКода = СтрЗаменить(ИмяПоказателя, "Крупнейший", "");
				Значение = Справочники.РегистрацииВНалоговомОргане.КодТерритории(Организация.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане, ТипКода);
			КонецЕсли;
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		ОргСведения.Вставить(ИмяПоказателя, Значение);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УточнитьКППНаДату(КППНаДату, Знач Организация, Знач ДатаСведений) Экспорт
	
	Если Не ТарификацияБПВызовСервераПовтИсп.РазрешеноИспользованиеРасширенногоФункционала() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("РасширенныйФункционал") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация)
		ИЛИ ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "КрупнейшийНалогоплательщик, КрупнейшийНалогоплательщикКПП");
		Если РеквизитыОбъекта.КрупнейшийНалогоплательщик
			И ЗначениеЗаполнено(РеквизитыОбъекта.КрупнейшийНалогоплательщикКПП) Тогда
			КППНаДату = РеквизитыОбъекта.КрупнейшийНалогоплательщикКПП;
		КонецЕсли;
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ИсторияРегистраций.Период) КАК Период,
		|	ИсторияРегистраций.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница
		|ПОМЕСТИТЬ ДатаРегистрации
		|ИЗ
		|	РегистрСведений.КрупнейшийНалогоплательщикИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
		|ГДЕ
		|	ИсторияРегистраций.СтруктурнаяЕдиница = &Организация
		|	И ИсторияРегистраций.Период <= &ДатаСведений
		|	И (ИсторияРегистраций.РегистрацияВНалоговомОргане.ДатаСнятияСУчета > &ДатаСведений
		|			ИЛИ ИсторияРегистраций.РегистрацияВНалоговомОргане.ДатаСнятияСУчета = &ПустаяДата)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИсторияРегистраций.СтруктурнаяЕдиница
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СтруктурнаяЕдиница,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ИсторияРегистраций.РегистрацияВНалоговомОргане.КПП, """") КАК КПП
		|ИЗ
		|	ДатаРегистрации КАК ДатаРегистрации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КрупнейшийНалогоплательщикИсторияРегистрацийВНалоговомОргане КАК ИсторияРегистраций
		|		ПО ДатаРегистрации.СтруктурнаяЕдиница = ИсторияРегистраций.СтруктурнаяЕдиница
		|			И ДатаРегистрации.Период = ИсторияРегистраций.Период";
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация",  Организация);
		Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
		Запрос.Параметры.Вставить("ПустаяДата", '00010101');

		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КППНаДату = Выборка.КПП;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьКодНалоговогоОрганаОрганизации(КодГосударственногоОргана, Знач Организация, Знач ВидГосударственногоОргана) Экспорт
	
	ИспользуетсяРасширенныйФункционал = Ложь;
	ИспользуетсяРасширенныйФункционал(ИспользуетсяРасширенныйФункционал);
	Если Не ИспользуетсяРасширенныйФункционал Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидГосударственногоОргана <> Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган Тогда
		Возврат;
	КонецЕсли;
	
	Код = Неопределено;
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Возврат;
		КонецЕсли;
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
			"КрупнейшийНалогоплательщик, КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане");
		Если РеквизитыОрганизации.КрупнейшийНалогоплательщик
			И ЗначениеЗаполнено(РеквизитыОрганизации.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане) Тогда
			Код = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОрганизации.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане,
				"Код");
		КонецЕсли;
	Иначе
		Код = Организация.РегистрацияВНалоговомОргане.Код;
		Если Организация.КрупнейшийНалогоплательщик
			И ЗначениеЗаполнено(Организация.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане) Тогда
			Код = Организация.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане.Код;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Код) = Тип("Строка") Тогда
		КодГосударственногоОргана = СокрЛП(Код);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИспользуетсяРасширенныйФункционал(ИспользуетсяРасширенныйФункционал = Ложь) Экспорт
	
	ИспользуетсяРасширенныйФункционал = ТарификацияБПВызовСервераПовтИсп.РазрешеноИспользованиеРасширенногоФункционала()
			И ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
	
КонецПроцедуры

// Дополняет массив наименований документов теми наименованиями,
// которые могут отсутствовать, если подсистема не используется
//
// Параметры:
//  ПодключаемыеДокументы - Массив из строк
//
Процедура ДобавитьДокументыПоСкладу(ПодключаемыеДокументы) Экспорт
	
	ПодключаемыеДокументы.Добавить("АвизоМПЗВходящее");
	ПодключаемыеДокументы.Добавить("АвизоМПЗИсходящее");
	
КонецПроцедуры

#Область УправлениеДоступом

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(Знач ИсточникиДанных) Экспорт
	
	// Данные(Таблица, ПолеДаты, Раздел, ПолеОбъекта)
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоМПЗВходящее"                                                , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоМПЗИсходящее"                                               , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоОСВходящее"                                                 , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоОСИсходящее"                                                , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоПрочееВходящее"                                             , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоПрочееИсходящее"                                            , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоРасчетыВходящее"                                            , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.АвизоРасчетыИсходящее"                                           , "Дата" , "БухгалтерскийУчет", "Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СтруктураСтоимостиЗапасов"                                , "Период", "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.НастройкиУчетаНалогаНаПрибыльГруппОбособленныхПодразделений", "Период", "БухгалтерскийУчет", "Организация");
	
КонецПроцедуры

// Вызывается из процедуры УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Списки.Вставить(Метаданные.Документы.АвизоМПЗВходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоМПЗИсходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоОСВходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоОСИсходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоПрочееВходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоПрочееИсходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоРасчетыВходящее, Истина);
	Списки.Вставить(Метаданные.Документы.АвизоРасчетыИсходящее, Истина);
	
	Списки.Вставить(Метаданные.Документы.КонтролируемаяСделка, Истина);
	Списки.Вставить(Метаданные.Документы.ПрочиеКонтролируемыеСделки, Истина);
	Списки.Вставить(Метаданные.Документы.УведомлениеОКонтролируемыхСделках, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ВзаимозависимыеЛица, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СведенияОбОрганизацииДляКонтролируемыхСделок, Истина);
	
	
	Списки.Вставить(Метаданные.РегистрыСведений.НастройкиУчетаНалогаНаПрибыльГруппОбособленныхПодразделений, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РасчетДолейБазыНалогаНаПрибыль, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.РасчетСтавкиНалогаНаПрибыльЗаМесяц, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.СтруктураСтоимостиЗапасов, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.КонтролируемыеСделкиОрганизаций, Истина);
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИБ

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей 
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//  Обработчик.Опциональный        = Истина;
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	// Тут размещаются объявления обработчиков обновления, специфичные для работы с обособленными подразделениями в версии КОРП.
	// Объявление других обработчиков, специфичных для версии КОРП, следует размещать в модулях своих подсистем, а при их отсутствии -
	// в РасширенныйФункционал.ПриДобавленииОбработчиковОбновления .
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "3.0.45.2";
	Обработчик.Процедура           = "Справочники.РегистрацииВНалоговомОргане.ЗаполнитьКодыРегионовИСлужебныеНаименования";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с 2БП на 3БП
	Обработчик.РежимВыполнения 	   = "Отложенно";
	Обработчик.Идентификатор 	   = Новый УникальныйИдентификатор("2cd56a7a-d2ce-4a88-9268-af7703959fcb");
	Обработчик.Комментарий 		   = НСтр("ru = 'Заполняет значения новых реквизитов ""Регион"" и ""Наименование служебное"" справочника ""Регистрации в налоговых органах"".
										|Настройка налоговых органов подачи декларации по налогу на прибыль пока невозможна.'");
	
КонецПроцедуры

Процедура ДополнитьМассивИменамиДокументовАвизо(ИмяМассива, Входящие = Истина) Экспорт
	
	Если Входящие Тогда
		Суффикс = "Входящее";
	Иначе
		Суффикс = "Исходящее";
	КонецЕсли;
	
	ИмяМассива.Добавить("АвизоМПЗ" + Суффикс);
	ИмяМассива.Добавить("АвизоОС" + Суффикс);
	ИмяМассива.Добавить("АвизоПрочее" + Суффикс);
	ИмяМассива.Добавить("АвизоРасчеты" + Суффикс);
	
КонецПроцедуры

Процедура УстановитьТекстЗапросаЗаполнитьСтрануРегистрацииВКонтрагентах(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	ЕстьNULL(УчастникиКонтролируемыхСделок.УдалитьСтранаРегистрации, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтранаРегистрации,
	|	ЕстьNULL(УчастникиКонтролируемыхСделок.УдалитьРегистрационныйНомерВСтранеРегистрации, """") КАК РегистрационныйНомерВСтранеРегистрации,
	|	ЕстьNULL(УчастникиКонтролируемыхСделок.УдалитьКодНалогоплательщикаВСтранеРегистрации, """") КАК КодНалогоплательщикаВСтранеРегистрации
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчастникиКонтролируемыхСделок КАК УчастникиКонтролируемыхСделок
	|		ПО Контрагенты.Ссылка = УчастникиКонтролируемыхСделок.Контрагент
	|ГДЕ
	|	Контрагенты.СтранаРегистрации = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)";
	
КонецПроцедуры

Процедура ЗаполнитьСтрануРегистрацииКонтрагента(КонтрагентОбъект, Выборка) Экспорт

	КонтрагентОбъект.СтранаРегистрации    = Выборка.СтранаРегистрации;
	КонтрагентОбъект.РегистрационныйНомер = Выборка.РегистрационныйНомерВСтранеРегистрации;
	Если КонтрагентОбъект.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		Если НЕ ЗначениеЗаполнено(КонтрагентОбъект.ИНН) Тогда
			КонтрагентОбъект.ИНН = Выборка.КодНалогоплательщикаВСтранеРегистрации;
		ИначеЕсли СокрЛП(КонтрагентОбъект.ИНН) <> СокрЛП(Выборка.КодНалогоплательщикаВСтранеРегистрации) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно заполнить налоговый номер контрагента %1 по данным уведомления о контролируемых сделках:
				|налоговый номер в справочнике контрагенты (%2) уже установлен и отличается от налогового номера по данным уведомления о контролируемых сделках (%3)'"),
				КонтрагентОбъект.Наименование, КонтрагентОбъект.ИНН, Выборка.КодНалогоплательщикаВСтранеРегистрации);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение, , 
				Выборка.Контрагент, 
				ТекстСообщения);
		КонецЕсли;
		Если СокрЛП(Выборка.КПП) <> "" Тогда
			КонтрагентОбъект.КПП = "";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'У контрагента %1 очищен КПП (%2), так как для контрагентов, зарегистрированных за пределами РФ, КПП не указывается'"),
				Выборка.Контрагент, Выборка.КПП);
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение, ,
				Выборка.Контрагент, 
				ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьВерсиюУведомленияОКонтролируемыхСделках2019() Экспорт
	
	Документы.УведомлениеОКонтролируемыхСделках.УстановитьВерсиюУведомленияОКонтролируемыхСделках2019();
	
КонецПроцедуры

Процедура УстановитьВерсиюУведомленияОКонтролируемыхСделках2021() Экспорт
	
	Документы.УведомлениеОКонтролируемыхСделках.УстановитьВерсиюУведомленияОКонтролируемыхСделках2021();
	
КонецПроцедуры

Процедура ОбработатьРеквизитыКрупнейшегоНалогоплательщика() Экспорт
	
	Если Не ТарификацияБПВызовСервераПовтИсп.РазрешеноИспользованиеРасширенногоФункционала() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Шаблон", "____50___");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	РегистрацииВНалоговомОргане.Ссылка КАК КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане,
	|	РегистрацииВНалоговомОргане.КПП КАК КрупнейшийНалогоплательщикКПП,
	|	РегистрацииВНалоговомОргане.НаименованиеИФНС КАК КрупнейшийНалогоплательщикНаименованиеНалоговогоОргана,
	|	РегистрацииВНалоговомОргане.ДатаПостановкиНаУчет КАК ДатаПостановкиНаУчет
	|ПОМЕСТИТЬ ВТ_РегистрацииОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
	|		ПО Организации.Ссылка = РегистрацииВНалоговомОргане.Владелец
	|			И Организации.КодНалоговогоОрганаПолучателя = РегистрацииВНалоговомОргане.Код
	|ГДЕ
	|	Организации.КрупнейшийНалогоплательщик
	|	И Организации.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане = ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка)
	|	И Организации.Ссылка = Организации.ГоловнаяОрганизация
	|	И РегистрацииВНалоговомОргане.КПП ПОДОБНО &Шаблон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РегистрацииОрганизации.Организация КАК Организация,
	|	ВТ_РегистрацииОрганизации.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане КАК КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане,
	|	ВТ_РегистрацииОрганизации.КрупнейшийНалогоплательщикКПП КАК КрупнейшийНалогоплательщикКПП,
	|	ВТ_РегистрацииОрганизации.КрупнейшийНалогоплательщикНаименованиеНалоговогоОргана КАК КрупнейшийНалогоплательщикНаименованиеНалоговогоОргана,
	|	ВТ_РегистрацииОрганизации.ДатаПостановкиНаУчет КАК ДатаПостановкиНаУчет,
	|	ИсторияРегистрацийВНалоговомОрганеСрезПоследних.Период КАК ДатаПостановкиНаУчетИстория
	|ПОМЕСТИТЬ ВТ_Организации
	|ИЗ
	|	ВТ_РегистрацииОрганизации КАК ВТ_РегистрацииОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияРегистрацийВНалоговомОргане.СрезПоследних КАК ИсторияРегистрацийВНалоговомОрганеСрезПоследних
	|		ПО ВТ_РегистрацииОрганизации.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане = ИсторияРегистрацийВНалоговомОрганеСрезПоследних.РегистрацияВНалоговомОргане
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Организации.Организация КАК Организация,
	|	ВТ_Организации.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане КАК КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане,
	|	ВТ_Организации.КрупнейшийНалогоплательщикКПП КАК КрупнейшийНалогоплательщикКПП,
	|	ВТ_Организации.КрупнейшийНалогоплательщикНаименованиеНалоговогоОргана КАК КрупнейшийНалогоплательщикНаименованиеНалоговогоОргана,
	|	ВТ_Организации.ДатаПостановкиНаУчет КАК ДатаПостановкиНаУчет,
	|	ВТ_Организации.ДатаПостановкиНаУчетИстория КАК ДатаПостановкиНаУчетИстория
	|ИЗ
	|	ВТ_Организации КАК ВТ_Организации
	|ГДЕ
	|	НЕ ВТ_Организации.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Организации.ДатаПостановкиНаУчетИстория,
	|	ВТ_Организации.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане,
	|	ВТ_Организации.КрупнейшийНалогоплательщикКПП,
	|	ВТ_Организации.КрупнейшийНалогоплательщикНаименованиеНалоговогоОргана,
	|	ВТ_Организации.ДатаПостановкиНаУчет,
	|	ВТ_Организации.Организация";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОрганизаций.Количество() > 0 Тогда
		Если Не ПолучитьФункциональнуюОпцию("РасширенныйФункционал") Тогда
			Константы.РасширенныйФункционал.Установить(Истина);
		КонецЕсли;
	КонецЕсли;
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			КодПричиныПостановкиНаУчет = ИдентификационныеНомераНалогоплательщиков.КодПричиныПостановкиНаУчет(ВыборкаОрганизаций.КрупнейшийНалогоплательщикКПП);
			Если Не ИдентификационныеНомераНалогоплательщиков.ЭтоПричинаПостановкиНаУчетКрупнейшегоНалогоплательщика(КодПричиныПостановкиНаУчет) Тогда
				Продолжить;
			КонецЕсли;
			
			// Обновление реквизитов организации
			ОрганизацияОбъект = ВыборкаОрганизаций.Организация.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(ОрганизацияОбъект, ВыборкаОрганизаций);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОрганизацияОбъект);
			
			// Обновление истории
			Если ЗначениеЗаполнено(ВыборкаОрганизаций.ДатаПостановкиНаУчет) Тогда
				ПериодЗаписи = ВыборкаОрганизаций.ДатаПостановкиНаУчет;
			ИначеЕсли ЗначениеЗаполнено(ВыборкаОрганизаций.ДатаПостановкиНаУчетИстория) Тогда
				ПериодЗаписи = ВыборкаОрганизаций.ДатаПостановкиНаУчетИстория;
			Иначе
				ПериодЗаписи = НачалоГода(ТекущаяДатаСеанса());
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.КрупнейшийНалогоплательщикИсторияРегистрацийВНалоговомОргане.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СтруктурнаяЕдиница.Установить(ВыборкаОрганизаций.Организация);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество() = 0 Тогда
				СтрокаНабораЗаписей = НаборЗаписей.Добавить();
			Иначе
				СтрокаНабораЗаписей = НаборЗаписей[0];
			КонецЕсли;
			СтрокаНабораЗаписей.Период                      = ПериодЗаписи;
			СтрокаНабораЗаписей.СтруктурнаяЕдиница          = ВыборкаОрганизаций.Организация;
			СтрокаНабораЗаписей.РегистрацияВНалоговомОргане = ВыборкаОрганизаций.КрупнейшийНалогоплательщикРегистрацияВНалоговомОргане;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			// Обрабатываем исключение без вызова ошибки, чтобы защититься от неоправданного "блокирования" обработчика
			// после первого "неудачного" элемента справочника
			ЗаписьЖурналаРегистрации(
			 	ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
			 	Метаданные.Справочники.Организации,
				ВыборкаОрганизаций.Организация,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсии

Процедура ПодготовитьИнформационнуюБазу() Экспорт
	
	// При переходе с ПРОФ на КОРП флажки учета по подразделениям будут установлены,
	// т.к. они установлены в плане счетов. Но мы не хотим, чтобы учет по подразделениям
	// после перехода с ПРОФ включился. Для этого приведем план счетов в соответствии с опцией.
	ВестиУчетПоПодразделениям = Константы.ВестиУчетПоПодразделениям.Получить();
	ПланыСчетов.Хозрасчетный.НастроитьПланСчетовДляОбособленныхПодразделений(ВестиУчетПоПодразделениям);
	
КонецПроцедуры

Процедура ПолучитьВидОтправляемогоДокументаПоСсылке(ВидОтправляемогоДокумента, ОбъектСсылка) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках") Тогда
		ВидОтправляемогоДокумента = Справочники.ВидыОтправляемыхДокументов.УведомлениеОКонтролируемыхСделках;
	КонецЕсли;
	
КонецПроцедуры

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - Таблица, содержащая в себе описания ссылок, переданных в закладке Ссылка таблицы
//		Каждая колонка таблицы соотвествует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ДатаСоздания - Дата - Дата создания объекта
//			- Наименование - Строка - Наименование объекта, с которым он будет отображаться в форме Отчетность
//			- КодКонтролирующегоОргана - Строка - Код контролирующего органа, в который отправляется отчетности по ТКС
//			- ДатаНачала - Дата - Дата начала периода. Пустая, если дата начала периода отсуствует
//			- ДатаОкончания - Дата - Дата окончания периода. Пустая, если дата окончания периода отсуствует 
//			- ВариантОтчета - Строка(3) - Корректировочный номер (0 - Первичный)
//			- ПометкаУдаления - Булево - Истина, если объект помечен на удаление 
//			- Организация - СправочникСсылка.Организации - Организация, которой принадлежит объект
//			- Комментарий - Строка - Комментарий из объекта
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	МассивУведомлений = Новый Массив();
	Для Каждого СвойстваОбъекта ИЗ СвойстваОбъектов Цикл
		Если ТипЗнч(СвойстваОбъекта.Ссылка) = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках") Тогда
			МассивУведомлений.Добавить(СвойстваОбъекта.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУведомлений.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("МассивУведомлений", МассивУведомлений);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УведомлениеОКонтролируемыхСделках.Ссылка КАК Ссылка,
		|	УведомлениеОКонтролируемыхСделках.Дата КАК ДатаСоздания,
		|	УведомлениеОКонтролируемыхСделках.Организация КАК Организация,
		|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ОтчетныйГод,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(УведомлениеОКонтролируемыхСделках.ОтчетныйГод, ГОД) КАК ДатаОкончания,
		|	УведомлениеОКонтролируемыхСделках.ПометкаУдаления КАК ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(УведомлениеОКонтролируемыхСделках.Организация.КрупнейшийНалогоплательщик, ЛОЖЬ)
		|			ТОГДА ЕСТЬNULL(УведомлениеОКонтролируемыхСделках.Организация.КодНалоговогоОрганаПолучателя, """")
		|		ИНАЧЕ ЕСТЬNULL(УведомлениеОКонтролируемыхСделках.Организация.РегистрацияВНалоговомОргане.Код, """")
		|	КОНЕЦ КАК КодКонтролирующегоОргана
		|ИЗ
		|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
		|ГДЕ
		|	УведомлениеОКонтролируемыхСделках.Ссылка В(&МассивУведомлений)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокиОбъектов = СвойстваОбъектов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
			Для Каждого СтрокаОбъекта ИЗ СтрокиОбъектов Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Выборка);
				СтрокаОбъекта.Наименование = НСтр("ru = 'Уведомление о контролируемых сделках'");
				СтрокаОбъекта.ВариантОтчета = Формат(Выборка.НомерКорректировки, "ЧЦ=3; ЧГ=0");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВерсиюУведомленияОКонтролируемыхСделках() Экспорт
	
	Документы.УведомлениеОКонтролируемыхСделках.УстановитьВерсиюУведомленияОКонтролируемыхСделках();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПодразделенияОСПоДаннымМестонахождения()
	
	СписокСчетов = ПланыСчетов.Хозрасчетный.СчетаОСДляЗаполненияПодразделенияПоДаннымМестонахождения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Рег1.Период КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Рег2.Период) ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Рег2.Период), СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	Рег1.ОсновноеСредство КАК ОсновноеСредство,
	|	Рег1.Организация КАК Организация,
	|	Рег1.Местонахождение КАК Местонахождение
	|ПОМЕСТИТЬ МестонахождениеОСБухгалтерскийУчет
	|ИЗ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК Рег1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет КАК Рег2
	|		ПО Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	|			И Рег1.Период < Рег2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Рег1.Период,
	|	Рег1.ОсновноеСредство,
	|	Рег1.Организация,
	|	Рег1.Местонахождение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Рег1.Период,
	|	Рег1.ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.СчетДт В (&СписокСчетов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Дт,
	|	ВЫБОР
	|		КОГДА Хозрасчетный.СчетКт В (&СписокСчетов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Кт,
	|	ЕСТЬNULL(ХозрасчетныйСубконтоДт.Значение, ХозрасчетныйСубконтоКт.Значение) КАК ОС,
	|	Хозрасчетный.Организация КАК Организация,
	|	Хозрасчетный.Период КАК Период
	|ПОМЕСТИТЬ ПроводкиПоОС
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоДт
	|		ПО Хозрасчетный.Регистратор = ХозрасчетныйСубконтоДт.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконтоДт.НомерСтроки
	|			И (ХозрасчетныйСубконтоДт.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства))
	|			И (ХозрасчетныйСубконтоДт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконтоКт
	|		ПО Хозрасчетный.Регистратор = ХозрасчетныйСубконтоКт.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконтоКт.НомерСтроки
	|			И (ХозрасчетныйСубконтоКт.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства))
	|			И (ХозрасчетныйСубконтоКт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|ГДЕ
	|	(Хозрасчетный.СчетДт В (&СписокСчетов)
	|			ИЛИ Хозрасчетный.СчетКт В (&СписокСчетов))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рег1.Период КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(Рег2.Период) ЕСТЬ NULL
	|			ТОГДА ДАТАВРЕМЯ(3999, 12, 31)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Рег2.Период), СЕКУНДА, -1)
	|	КОНЕЦ КАК ДатаОкончания,
	|	Рег1.ОсновноеСредство КАК ОсновноеСредство,
	|	Рег1.Организация КАК Организация,
	|	Рег1.СчетУчета КАК СчетУчета,
	|	Рег1.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаУчетаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК Рег1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК Рег2
	|		ПО Рег1.ОсновноеСредство = Рег2.ОсновноеСредство
	|			И Рег1.Период < Рег2.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Рег1.Период,
	|	Рег1.ОсновноеСредство,
	|	Рег1.Организация,
	|	Рег1.СчетУчета,
	|	Рег1.СчетНачисленияАмортизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Рег1.Период,
	|	Рег1.ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроводкиПоОС.Регистратор КАК Регистратор,
	|	ПроводкиПоОС.НомерСтроки КАК НомерСтроки,
	|	МестонахождениеОСБухгалтерскийУчет.Местонахождение КАК Местонахождение,
	|	ПроводкиПоОС.Дт КАК Дт,
	|	ПроводкиПоОС.Кт КАК Кт
	|ИЗ
	|	ПроводкиПоОС КАК ПроводкиПоОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБухгалтерскийУчет КАК МестонахождениеОСБухгалтерскийУчет
	|		ПО ПроводкиПоОС.Организация = МестонахождениеОСБухгалтерскийУчет.Организация
	|			И ПроводкиПоОС.ОС = МестонахождениеОСБухгалтерскийУчет.ОсновноеСредство
	|			И (ПроводкиПоОС.Период МЕЖДУ МестонахождениеОСБухгалтерскийУчет.ДатаНачала И МестонахождениеОСБухгалтерскийУчет.ДатаОкончания)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеОС.Ссылка.Дата КАК Период,
	|	ПеремещениеОС.Ссылка КАК Регистратор,
	|	ПеремещениеОС.Ссылка.Организация КАК Организация,
	|	ПеремещениеОС.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПеремещениеОС.Ссылка.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
	|	ПеремещениеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПеремещениеОС.НомерСтроки КАК НомерСтроки,
	|	СчетаУчетаОС.СчетУчета КАК СчетУчета,
	|	СчетаУчетаОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ИЗ
	|	Документ.ПеремещениеОС.ОС КАК ПеремещениеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаУчетаОС КАК СчетаУчетаОС
	|		ПО ПеремещениеОС.Ссылка.Организация = СчетаУчетаОС.Организация
	|			И ПеремещениеОС.ОсновноеСредство = СчетаУчетаОС.ОсновноеСредство
	|			И (ПеремещениеОС.Ссылка.Дата МЕЖДУ СчетаУчетаОС.ДатаНачала И СчетаУчетаОС.ДатаОкончания)
	|ГДЕ
	|	ПеремещениеОС.Ссылка.Проведен = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПеремещениеОС.Ссылка,
	|	ПеремещениеОС.НомерСтроки";
	
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[3].Пустой() И Результат[4].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ТекущийРегистратор = Неопределено;
		НаборЗаписей = Неопределено;
		
		Выборка = Результат[3].Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Регистратор <> ТекущийРегистратор Тогда
				Если НаборЗаписей <> Неопределено Тогда
					НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
					НаборЗаписей.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
					НаборЗаписей.Записать();
				КонецЕсли;
				
				ТекущийРегистратор = Выборка.Регистратор;
				НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
				НаборЗаписей.Прочитать();
			КонецЕсли;
			
			Запись = НаборЗаписей[Выборка.НомерСтроки - 1];
			Если Выборка.Дт Тогда
				Запись["ПодразделениеДт"] = Выборка.Местонахождение;
			КонецЕсли;
			Если Выборка.Кт Тогда
				Запись["ПодразделениеКт"] = Выборка.Местонахождение;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаборЗаписей <> Неопределено Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			НаборЗаписей.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
			НаборЗаписей.Записать();
		КонецЕсли;
		
		// Создание проводок для Перемещения ОС
		
		Выборка = Результат[4].Выбрать();
		СодержаниеПроводки = НСтр("ru = 'Перемещение ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
			
			СчетаУчета = Новый Массив;
			СчетаАмортизации = Новый Массив;
			ОсновныеСредства = Новый Массив;
			
			ТекущийРегистратор = Выборка.Регистратор;
			Пока Выборка.Следующий() Цикл
				СчетаУчета.Добавить(Выборка.СчетУчета);
				СчетаАмортизации.Добавить(Выборка.СчетНачисленияАмортизации);
				ОсновныеСредства.Добавить(Выборка.ОсновноеСредство);
			КонецЦикла;
			
			СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества);
			
			Запрос.УстановитьПараметр("Организация", Выборка.Организация);
			Запрос.УстановитьПараметр("ПодразделениеОрганизации", Выборка.ПодразделениеОрганизации);
			Запрос.УстановитьПараметр("ПодразделениеПолучатель", Выборка.ПодразделениеПолучатель);
			Запрос.УстановитьПараметр("Период", Выборка.Регистратор.МоментВремени());
			Запрос.УстановитьПараметр("ОсновныеСредства", ОсновныеСредства);

			Запрос.УстановитьПараметр("СчетаУчета",
				ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СчетаУчета));
			Запрос.УстановитьПараметр("СчетаАмортизации",
				ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(СчетаАмортизации));
			
			Запрос.Текст = ТекстЗапросаОстаткиОС();
			ВыборкаОстатки = Запрос.Выполнить().Выбрать();
			
			НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
			
			Пока ВыборкаОстатки.Следующий() Цикл
				
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаОстатки);
				Запись.Период = Выборка.Период;
				Запись.Содержание = СодержаниеПроводки;
				
				БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, "ОсновныеСредства", ВыборкаОстатки.ОсновноеСредство);
				БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, "ОсновныеСредства", ВыборкаОстатки.ОсновноеСредство);
			КонецЦикла;
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
			НаборЗаписей.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
			НаборЗаписей.Записать();
		КонецЦикла;
	
	Исключение
		ЗаписьЖурналаРегистрации(
			ОбщегоНазначенияБП.СобытиеЖурналаРегистрацииПараметрыУчета(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыБухгалтерии.Хозрасчетный,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Функция ТекстЗапросаОстаткиОС()
	
	Возврат "ВЫБРАТЬ
	        |	ХозрасчетныйОстатки.Организация КАК Организация,
	        |	&ПодразделениеОрганизации КАК ПодразделениеКт,
	        |	&ПодразделениеПолучатель КАК ПодразделениеДт,
	        |	ХозрасчетныйОстатки.Валюта КАК ВалютаДт,
	        |	ХозрасчетныйОстатки.Валюта КАК ВалютаКт,
	        |	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	        |	ХозрасчетныйОстатки.Счет КАК СчетДт,
	        |	ХозрасчетныйОстатки.Счет КАК СчетКт,
	        |	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма,
	        |	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУДт,
	        |	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаПРДт,
	        |	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаВРДт,
	        |	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУКт,
	        |	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаПРКт,
	        |	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаВРКт
	        |ИЗ
	        |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	        |			&Период,
	        |			Счет В (&СчетаУчета),
	        |			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	        |			Организация = &Организация
	        |				И Субконто1 В (&ОсновныеСредства)) КАК ХозрасчетныйОстатки
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ХозрасчетныйОстатки.Организация,
	        |	&ПодразделениеПолучатель,
	        |	&ПодразделениеОрганизации,
	        |	ХозрасчетныйОстатки.Валюта,
	        |	ХозрасчетныйОстатки.Валюта,
	        |	ХозрасчетныйОстатки.Субконто1,
	        |	ХозрасчетныйОстатки.Счет,
	        |	ХозрасчетныйОстатки.Счет,
	        |	ХозрасчетныйОстатки.СуммаОстатокКт,
	        |	ХозрасчетныйОстатки.СуммаНУОстатокКт,
	        |	ХозрасчетныйОстатки.СуммаПРОстатокКт,
	        |	ХозрасчетныйОстатки.СуммаВРОстатокКт,
	        |	ХозрасчетныйОстатки.СуммаНУОстатокКт,
	        |	ХозрасчетныйОстатки.СуммаПРОстатокКт,
	        |	ХозрасчетныйОстатки.СуммаВРОстатокКт
	        |ИЗ
	        |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	        |			&Период,
	        |			Счет В (&СчетаАмортизации),
	        |			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	        |			Организация = &Организация
	        |				И Субконто1 В (&ОсновныеСредства)) КАК ХозрасчетныйОстатки
	        |
	        |УПОРЯДОЧИТЬ ПО
	        |	ХозрасчетныйОстатки.Субконто1,
	        |	ХозрасчетныйОстатки.Счет";
КонецФункции

Процедура ЗаполнитьДанныеПоСубконтоРегистрацияВНалоговомОргане()
	
	////////////////////////////////////////////////////
	// Обновление проводок по налогам и сборам
	
	Запрос = Новый Запрос;
	
	РасчетЗарплатыПоПодразделениям = Константы.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций.Получить();
	СписокСчетов = ПланыСчетов.Хозрасчетный.СчетаДляУстановкиСубконтоРегистрацияВНалоговомОргане().ВыгрузитьКолонку("Счет");
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	Запрос.УстановитьПараметр("РасчетЗарплатыПоПодразделениям",    РасчетЗарплатыПоПодразделениям);
	Запрос.УстановитьПараметр("ПустаяРегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТ_регистрацииВНалоговомОргане
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор,
	|	Хозрасчетный.НомерСтроки КАК НомерСтроки,
	|	Хозрасчетный.СчетДт В (&СписокСчетов) КАК Дт,
	|	Хозрасчетный.СчетКт В (&СписокСчетов) КАК Кт,
	|	Хозрасчетный.Организация,
	|	ВЫБОР
	|		КОГДА &РасчетЗарплатыПоПодразделениям
	|				И Хозрасчетный.СчетДт В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины))
	|			ТОГДА ВЫРАЗИТЬ(Хозрасчетный.Регистратор КАК Документ.СписаниеСРасчетногоСчета).РегистрацияВНалоговомОргане
	|		ИНАЧЕ &ПустаяРегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане
	|ПОМЕСТИТЬ ВТ_Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.СчетДт В (&СписокСчетов)
	|			ИЛИ Хозрасчетный.СчетКт В (&СписокСчетов))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Проводки.Регистратор КАК Регистратор,
	|	ВТ_Проводки.НомерСтроки КАК НомерСтроки,
	|	ВТ_Проводки.Дт,
	|	ВТ_Проводки.Кт,
	|	ВЫБОР
	|		КОГДА ВТ_Проводки.РегистрацияВНалоговомОргане = &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА ВТ_регистрацииВНалоговомОргане.РегистрацияВНалоговомОргане
	|		ИНАЧЕ ВТ_Проводки.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане
	|ИЗ
	|	ВТ_Проводки КАК ВТ_Проводки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_регистрацииВНалоговомОргане КАК ВТ_регистрацииВНалоговомОргане
	|		ПО ВТ_Проводки.Организация = ВТ_регистрацииВНалоговомОргане.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Попытка
			ТекущийРегистратор = Неопределено;
			НаборЗаписей = Неопределено;
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Регистратор <> ТекущийРегистратор Тогда
					Если НаборЗаписей <> Неопределено Тогда
						НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
						НаборЗаписей.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
						НаборЗаписей.Записать();
					КонецЕсли;
					
					ТекущийРегистратор = Выборка.Регистратор;
					НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(ТекущийРегистратор);
					НаборЗаписей.Прочитать();
				КонецЕсли;
				
				Запись = НаборЗаписей[Выборка.НомерСтроки - 1];
				
				Если Выборка.Дт Тогда
					Запись["СубконтоДт"].РегистрацияВНалоговомОргане = Выборка.РегистрацияВНалоговомОргане;
				КонецЕсли;
				Если Выборка.Кт Тогда
					Запись["СубконтоКт"].РегистрацияВНалоговомОргане = Выборка.РегистрацияВНалоговомОргане;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборЗаписей <> Неопределено Тогда
				НаборЗаписей.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения", Истина);
				НаборЗаписей.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
				НаборЗаписей.Записать();
			КонецЕсли;
			
		Исключение
			ЗаписьЖурналаРегистрации(
				ОбщегоНазначенияБП.СобытиеЖурналаРегистрацииПараметрыУчета(),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыБухгалтерии.Хозрасчетный,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;

	////////////////////////////////////////////////////
	// Обновление документов по налогам и сборам
	
	Запрос.УстановитьПараметр("РасчетЗарплатыПоПодразделениям",    РасчетЗарплатыПоПодразделениям);
	Запрос.УстановитьПараметр("ПустаяРегистрацияВНалоговомОргане", Справочники.РегистрацииВНалоговомОргане.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ ВТ_регистрацииВНалоговомОргане
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &РасчетЗарплатыПоПодразделениям
	|				И СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом В (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДФЛ_ДоходыСвышеПредельнойВеличины))
	|				И СписаниеСРасчетногоСчета.РегистрацияВНалоговомОргане <> &ПустаяРегистрацияВНалоговомОргане
	|			ТОГДА СписаниеСРасчетногоСчета.РегистрацияВНалоговомОргане
	|		ИНАЧЕ ВТ_регистрацииВНалоговомОргане.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	СписаниеСРасчетногоСчета.Ссылка КАК Регистратор,
	|	""СубконтоДт"" КАК ИмяРеквизита,
	|	NULL КАК НомерСтроки,
	|	СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом КАК СчетУчета,
	|	NULL КАК ИмяТЧ
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_регистрацииВНалоговомОргане КАК ВТ_регистрацииВНалоговомОргане
	|		ПО СписаниеСРасчетногоСчета.Организация = ВТ_регистрацииВНалоговомОргане.Организация
	|ГДЕ
	|	СписаниеСРасчетногоСчета.СчетУчетаРасчетовСКонтрагентом В(&СписокСчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_регистрацииВНалоговомОргане.РегистрацияВНалоговомОргане,
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.Ссылка,
	|	""СубконтоДт"",
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.НомерСтроки,
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.СчетДт,
	|	""ОтражениеВУчете""
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВУчетеОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_регистрацииВНалоговомОргане КАК ВТ_регистрацииВНалоговомОргане
	|		ПО ОтражениеЗарплатыВУчетеОтражениеВУчете.Ссылка.Организация = ВТ_регистрацииВНалоговомОргане.Организация
	|ГДЕ
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.СчетДт В(&СписокСчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_регистрацииВНалоговомОргане.РегистрацияВНалоговомОргане,
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.Ссылка,
	|	""СубконтоКт"",
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.НомерСтроки,
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.СчетКт,
	|	""ОтражениеВУчете""
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВУчетеОтражениеВУчете
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_регистрацииВНалоговомОргане КАК ВТ_регистрацииВНалоговомОргане
	|		ПО ОтражениеЗарплатыВУчетеОтражениеВУчете.Ссылка.Организация = ВТ_регистрацииВНалоговомОргане.Организация
	|ГДЕ
	|	ОтражениеЗарплатыВУчетеОтражениеВУчете.СчетКт В(&СписокСчетов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Результат = Запрос.Выполнить();
	
	СчетРасчетыСБюджетом = ПланыСчетов.Хозрасчетный.РасчетыСБюджетом;
	
	Если Не Результат.Пустой() Тогда
		
		Попытка
			ТекущийРегистратор = Неопределено;
			РегистраторОбъект = Неопределено;
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Регистратор <> ТекущийРегистратор Тогда
					
					Если РегистраторОбъект <> Неопределено Тогда
						РегистраторОбъект.Записать();
					КонецЕсли;
					
					ТекущийРегистратор = Выборка.Регистратор;
					РегистраторОбъект = ТекущийРегистратор.ПолучитьОбъект();
					
				КонецЕсли;
				
				Если Выборка.СчетУчета = СчетРасчетыСБюджетом Тогда
					НомерСубконто = 3;
				Иначе
					НомерСубконто = 2;
				КонецЕсли;
				
				Если Выборка.ИмяТЧ = Null Тогда // документ без ТЧ
					
					РегистраторОбъект[Выборка.ИмяРеквизита + НомерСубконто] = Выборка.РегистрацияВНалоговомОргане;
					Если ТипЗнч(ТекущийРегистратор) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
						РегистраторОбъект.РегистрацияВНалоговомОргане = Неопределено;
					КонецЕсли;
					
				Иначе // документ с ТЧ
					
					РегистраторОбъект[Выборка.ИмяТЧ][Выборка.НомерСтроки-1][Выборка.ИмяРеквизита + НомерСубконто] = Выборка.РегистрацияВНалоговомОргане;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если РегистраторОбъект <> Неопределено Тогда
				РегистраторОбъект.Записать();
			КонецЕсли;
			
		Исключение
			ЗаписьЖурналаРегистрации(ОбщегоНазначенияБП.СобытиеЖурналаРегистрацииПараметрыУчета(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьОпциюРасчетаЗарплатыПоПодразделениямДляНебольшихОрганизаций()
	
	Если Константы.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций.Получить() Тогда
		Константы.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти