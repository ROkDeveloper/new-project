
#Область СлужебныйПрограммныйИнтерфейс

Функция ВыполнитьЗапросОтправитьСообщения(ПараметрыЗапроса) Экспорт
	
	ЕстьОшибки = Ложь;
	ЗапросКСервису = ПараметрыЗапросаОтправитьСообщения(ПараметрыЗапроса);
	ДанныеСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки);
	
	Возврат ДанныеСервиса;
	
КонецФункции

Функция ВыполнитьЗапросПолучитьРасхождения(ПараметрыЗапроса) Экспорт
	
	ЕстьОшибки = Ложь;
	ЗапросКСервису = ПараметрыЗапросаПолучитьРасхождения(ПараметрыЗапроса);
	ДанныеСервиса = ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки);
	
	Возврат ДанныеСервиса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Запрос

Функция ВыполнитьЗапрос(Знач ЗапросКСервису, ЕстьОшибки,
	ОжидатьОтвета = Ложь, ПодробноеОписаниеОшибки = "", КоличествоПопытокВыполнения = 0)
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Инициализация параметров соединения.
	ПараметрыСоединения = ПараметрыСоединенияССервисом(ЗапросКСервису.ИмяСервиса);
	
	
	// Если в запросе установлен таймаут, переопределяем значение в параметрах соединения
	Если ЗначениеЗаполнено(ЗапросКСервису.Таймаут) Тогда
		ПараметрыСоединения.Таймаут = ЗапросКСервису.Таймаут;
	КонецЕсли;
	
	// Инициализация соединения.
	Соединение = НовоеСоединениеССервером(ПараметрыСоединения, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросКСервису, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка параметров запроса.
	HTTPЗапрос = Новый HTTPЗапрос(ПолныйАдресЗапроса(ПараметрыСоединения, ЗапросКСервису),
		ЗапросКСервису.Заголовки);
	
	// Заполнение стандартных заголовков
	Если ЗначениеЗаполнено(ЗапросКСервису.ПараметрыАвторизации) Тогда
		ДанныеТокена = ТокенАвторизации(ЗапросКСервису.ПараметрыАвторизации, ЕстьОшибки, ТекстОшибки);
		Если ЕстьОшибки Тогда
			ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросКСервису, ТекстОшибки);
			
			Возврат Неопределено;
		КонецЕсли;
	
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаСтрокаАвторизации(), ДанныеТокена.ТокенДоступа);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ЗапросКСервису.ТипПередаваемогоКонтента) И ЗапросКСервису.Метод <> "GET" Тогда
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипПередаваемогоКонтента(),
			ЗапросКСервису.ТипПередаваемогоКонтента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросКСервису.ТипВозвращаемогоКонтента) Тогда
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипВозвращаемогоКонтента(),
			ЗапросКСервису.ТипВозвращаемогоКонтента);
	КонецЕсли;
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросКСервису.Тело) Тогда
		Если ТипЗнч(ЗапросКСервису.Тело) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросКСервису.Тело);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ЗапросКСервису.Тело, КодировкаТекста.UTF8,
				ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
	// Выполнение запроса
	Попытка
		HTTPОтвет = Соединение.ВызватьHTTPМетод(ЗапросКСервису.Метод, HTTPЗапрос);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru='не удалось выполнить HTTP запрос по причине: %1'",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросКСервису, ТекстОшибки, ЕстьОшибки);
		
		Возврат Неопределено;
	КонецПопытки;
	
	// Разбор тела ответа
	Результат = ОбработатьДанныеОтвета(ЗапросКСервису, HTTPОтвет, ОжидатьОтвета,
		ЕстьОшибки, ТекстОшибки, КоличествоПопытокВыполнения);
		
	Если ЕстьОшибки Тогда
		ПодробноеОписаниеОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросКСервису, ТекстОшибки);
		
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыЗапросаОтправитьСообщения(ПараметрыМетода)
	
	ЗапросКСервису = НовыйЗапросКСервису();
	
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыМетода.Организация);
	СтрокаЗапроса = СтрШаблон("%1/checkDocuments/manageData", ИдентификаторОрганизации);
	
	ЗапросКСервису.Наименование = СтрШаблон("%1: %2",
		СервисСверкиРасчетов.ИмяСервиса(),
		СервисСверкиРасчетов.НазваниеОперацииОтправкаСообщений());
	ЗапросКСервису.Метод = "POST";
	ЗапросКСервису.СтрокаЗапроса = СтрокаЗапроса;
	ЗапросКСервису.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыМетода.Организация);
	ЗапросКСервису.ТипВозвращаемогоКонтента = "application/vnd-1cbn-doc-list.v1+json";
	ЗапросКСервису.Тело = ПараметрыМетода.Данные;
	
	// Определение параметров восстановления тела ответа из двоичных данных
	ЗапросКСервису.ПараметрыВосстановления = НовыйПараметрыВосстановления();
	ЗапросКСервису.ПараметрыВосстановления.СвойстваТипаДата = 
		"date,created,currentStatusDate,supplierFulfilmentExtendedStatusDate";
	
	Возврат ЗапросКСервису;

КонецФункции

Функция ПараметрыЗапросаПолучитьРасхождения(ПараметрыМетода)
	
	ЗапросКСервису = НовыйЗапросКСервису();
	ДопустимыеКодыСостояния = ЗапросКСервису.ДопустимыеКодыСостояния;
	ДопустимыеКодыСостояния.Добавить(201);
	
	ИдентификаторОрганизации = ИдентификаторОрганизацииБизнесСети(ПараметрыМетода.Организация);
	СтрокаЗапроса = СтрШаблон("%1/checkDocuments/findData", ИдентификаторОрганизации);
	
	ЗапросКСервису.Заголовки.Вставить("datebegin", Формат(ПараметрыМетода.ДатаНачала, "ДФ=yyyy-MM-dd"));
	ЗапросКСервису.Заголовки.Вставить("dateend", Формат(ПараметрыМетода.ДатаОкончания, "ДФ=yyyy-MM-dd"));
	
	ЗапросКСервису.Наименование = СтрШаблон("%1: %2",
		СервисСверкиРасчетов.ИмяСервиса(),
		СервисСверкиРасчетов.НазваниеОперацииПолучениеРасхождений());
	ЗапросКСервису.Метод = "GET";
	ЗапросКСервису.СтрокаЗапроса = СтрокаЗапроса;
	ЗапросКСервису.ПараметрыАвторизации = НовыйПараметрыАвторизации(ПараметрыМетода.Организация);
	ЗапросКСервису.ТипВозвращаемогоКонтента = "application/json";
	
	// Определение параметров восстановления тела ответа из двоичных данных
	ЗапросКСервису.ПараметрыВосстановления = НовыйПараметрыВосстановления();
	ЗапросКСервису.ПараметрыВосстановления.СвойстваТипаДата = 
		"date,created,currentStatusDate,supplierFulfilmentExtendedStatusDate";
	
	Возврат ЗапросКСервису;
	
КонецФункции

Функция ПолныйАдресЗапроса(Знач ПараметрыСоединения, Знач ЗапросКСервису)
	
	Если ПустаяСтрока(ПараметрыСоединения.ПутьНаСервере) Тогда
		Возврат ЗапросКСервису.СтрокаЗапроса;
	КонецЕсли;
	
	Возврат СтрШаблон("%1/%2", ПараметрыСоединения.ПутьНаСервере, ЗапросКСервису.СтрокаЗапроса);
	
КонецФункции

Функция НовыйЗапросКСервису()
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяСервиса", ИмяСервисаСверкиРасчетов());                       // Имя сервиса, к которому будет выполнен запрос.
	Результат.Вставить("Наименование", "");                                             // Полное наименование метода.
	Результат.Вставить("СтрокаЗапроса", "");                                            // Полный адрес URI метода с параметрами, задаваемыми как часть пути.
	Результат.Вставить("Метод",        "");                                             // Метод HTTP соединения, например POST. См. МетодыСоединения().
	Результат.Вставить("Заголовки", Новый Соответствие);                                // Заголовки запроса.
	Результат.Вставить("Таймаут");                                                      // Длительность ожидания ответа. Значение по умолчанию установлено в параметрах соединения,
	                                                                                    //   в этом параметре его можно переопределить для конкретного запроса.
	Результат.Вставить("ДопустимыеКодыСостояния", ДопустимыеКодыСостоянияПоУмолчанию());// Коды состояния, означающие успешное выполнение запроса.
	Результат.Вставить("Тело");                                                         // Двоичные данные или строка.
	Результат.Вставить("ХешТелаЗапроса");                                               // MD5 хеш сумма от тела запроса. Если тело не заполнено - неопределено.
	
	Результат.Вставить("ТелоОтветаИгнорируется", Ложь);                                // При чтении тела ответа вместо структур использовать соответствия.
	Результат.Вставить("ВозвратДвоичныхДанныхТела", Ложь);                              // Вернуть тело ответа в виде двоичных данных.
	Результат.Вставить("ПутьКДаннымВТеле");                                             // Путь к возвращаемым данным.
	Результат.Вставить("ПараметрыАвторизации");
	Результат.Вставить("ТипПередаваемогоКонтента");
	Результат.Вставить("ТипВозвращаемогоКонтента");
	
	Результат.Вставить("ПараметрыВосстановления");                                      // Параметры парсинга JSON тела ответа
	
	Возврат Результат;
	
КонецФункции

Функция ДопустимыеКодыСостоянияПоУмолчанию()
	
	Результат = Новый Массив;
	Результат.Добавить(200);
	
	Возврат Результат;
	
КонецФункции

Функция ИдентификаторОрганизацииБизнесСети(Знач Организация, ЕстьОшибки = Ложь, ТекстОшибки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Неопределено;
	Если БизнесСеть.ОрганизацияПодключена(Организация) Тогда
		Результат = БизнесСеть.ИдентификаторОрганизации(Организация);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = СтрШаблон(НСтр("ru='Организация %1 не зарегистрирована в Бизнес Сети'"), Строка(Организация));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыВосстановления()
	
	Результат = Новый Структура;
	Результат.Вставить("СвойстваТипаДата", "");
	Результат.Вставить("ФорматДаты", ФорматДатыJSON.ISO);
	Результат.Вставить("ЧитатьВСоответствие", Ложь);
	Результат.Вставить("ОписаниеОбработчика", НовыйОбработчикВосстановления());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйОбработчикВосстановления()
	
	Результат = Новый Структура;
	Результат.Вставить("Имя", Неопределено);
	Результат.Вставить("Менеджер", Неопределено);
	Результат.Вставить("ДополнительныеПараметры", Неопределено);

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСJSON

Функция ЗначениеКоллекцииПоАбсолютномуПути(Знач Значение, Знач Путь, ЕстьОшибки = Ложь)
	
	СвойстваПути = СтрРазделить(Путь, ".", Ложь);
	
	Попытка
		Результат = ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	Исключение
		Результат = Неопределено;
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЗначениеСвойстваКоллекцииВРекурсии(Знач Значение, Знач СвойстваПути, ЕстьОшибки = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если Не ЭтоКоллекция(Значение) Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("Структура") И Не Значение.Свойство(Свойство) 
		Или ТипЗнч(Значение) = Тип("Соответствие") И Значение.Получить(Свойство) = Неопределено Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	КонецЕсли;
	
КонецФункции

Функция ЭтоКоллекция(Знач Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Возврат ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("Соответствие");
	
КонецФункции

Функция СтруктураИзПотокаJSON(Знач ПотокДанных, Знач ПараметрыВосстановления = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьПоток(ПотокДанных);
	
	Если ЗначениеЗаполнено(ПараметрыВосстановления) Тогда
		СвойстваТипаДата = СтрРазделить(ПараметрыВосстановления.СвойстваТипаДата, ",", Ложь);
		ФорматДаты = ПараметрыВосстановления.ФорматДаты;
		ЧитатьВСоответствие = ПараметрыВосстановления.ЧитатьВСоответствие;
		ИмяОбработчика = ЗначениеКоллекцииПоАбсолютномуПути(ПараметрыВосстановления, "ОписаниеОбработчика.Имя");
		МенеджерОбработчика = ЗначениеКоллекцииПоАбсолютномуПути(ПараметрыВосстановления, "ОписаниеОбработчика.Менеджер");
		ПараметрыОбработчика = ЗначениеКоллекцииПоАбсолютномуПути(ПараметрыВосстановления, "ОписаниеОбработчика.ДополнительныеПараметры");
		
		Результат = ПрочитатьJSON(ЧтениеJSON, ЧитатьВСоответствие, СвойстваТипаДата,
			ФорматДаты, ИмяОбработчика, МенеджерОбработчика, ПараметрыОбработчика);
	Иначе
		Результат = ПрочитатьJSON(ЧтениеJSON,,,ФорматДатыJSON.ISO);
	КонецЕсли;
	
	ЧтениеJSON.Закрыть();
	ПотокДанных.Закрыть();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаРезультатаЗапроса

Функция ЗапросВыполненКорректно(Знач ЗапросКСервису, Знач HTTPОтвет, ТекстОшибки = "")
	
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если ЗапросКСервису.ДопустимыеКодыСостояния.Найти(КодСостояния) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПодстрокиОшибки = Новый Массив;
	Если ЕстьПодробноеОписаниеОшибки(HTTPОтвет) Тогда
		ОписаниеОшибки = СтруктураИзПотокаJSON(HTTPОтвет.ПолучитьТелоКакПоток());
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='код состояния %1 - %2'"), XMLСтрока(КодСостояния), ОписаниеОшибки.title));
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='компонента сервиса: %1'"), ОписаниеОшибки.type));
		
		ИдентификаторТрассировки = ЗначениеКоллекцииПоАбсолютномуПути(ОписаниеОшибки, "traceId");
		Если ЗначениеЗаполнено(ИдентификаторТрассировки) Тогда
			ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='идентификатор трассировки: %1'"), ИдентификаторТрассировки));
		КонецЕсли;
		
		ПодробноеОписание = ЗначениеКоллекцииПоАбсолютномуПути(ОписаниеОшибки, "detail");
		Если ЗначениеЗаполнено(ПодробноеОписание) Тогда
			ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='подробное описание: %1'"), ПодробноеОписание));
		КонецЕсли;
	Иначе
		ТекстОшибки = СтандартныеТекстыОшибокHTTPЗапросов().Получить(КодСостояния);
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			Если КодСостояния >= 500 Тогда
				ТекстОшибки = НСтр("ru = 'внутренняя ошибка сервиса'");
			ИначеЕсли КодСостояния >= 400 Тогда
				ТекстОшибки = НСтр("ru = 'ошибка параметров запроса'");
			Иначе
				ТекстОшибки = НСтр("ru = 'неизвестная ошибка'");
			КонецЕсли;
		КонецЕсли;
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='код состояния %1 - %2'"), XMLСтрока(КодСостояния), ТекстОшибки));
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(ПодстрокиОшибки, ", ");
	
	Возврат Ложь;
	
КонецФункции

Функция ОбработатьДанныеОтвета(Знач ЗапросКСервису, Знач HTTPОтвет, ОжидатьОтвета,
	ЕстьОшибки, ТекстОшибки = "", КоличествоПопытокВыполнения = 0)
	
	ЕстьОшибки = Ложь;
	ОжидатьОтвета = Ложь;
	Результат = Неопределено;
	
	Если ИстекСрокЖизниТокенаАвторизации(HTTPОтвет)
		И КоличествоПопытокВыполнения <= КоличествоПопытокВыполненияHTTPЗапроса() Тогда
	
		Возврат ВыполнитьЗапрос(ЗапросКСервису, ЕстьОшибки, ОжидатьОтвета, ТекстОшибки, КоличествоПопытокВыполнения + 1);
	КонецЕсли;
	
	Если Не ЗапросВыполненКорректно(ЗапросКСервису, HTTPОтвет, ТекстОшибки) Тогда
		ЕстьОшибки = Истина;
			
		Возврат Неопределено;
	КонецЕсли;
	
	Если АсинхронноеВыполнениеЗапроса(HTTPОтвет) Тогда
		ОжидатьОтвета = Истина;

		Возврат ИдентификаторАсинхронногоЗадания(HTTPОтвет, ЕстьОшибки, ТекстОшибки)
	КонецЕсли;
	
	Если ЗапросКСервису.ТелоОтветаИгнорируется Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		Если ЗапросКСервису.ВозвратДвоичныхДанныхТела Тогда
			Возврат HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
		Иначе
			ПотокДанных = HTTPОтвет.ПолучитьТелоКакПоток();
			Результат = СтруктураИзПотокаJSON(ПотокДанных, ЗапросКСервису.ПараметрыВосстановления);
		КонецЕсли;
	Исключение
		ЕстьОшибки = Истина;
		
		ТекстОшибки = СтрШаблон(НСтр("ru='не удалось прочитать тело сообщения: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Неопределено;
	КонецПопытки;
	
	Если Не ПустаяСтрока(ЗапросКСервису.ПутьКДаннымВТеле) Тогда
		Попытка
			Результат = ЗначениеКоллекцииПоАбсолютномуПути(Результат, ЗапросКСервису.ПутьКДаннымВТеле, ЕстьОшибки);
		Исключение
			ЕстьОшибки = Истина;
		КонецПопытки;
		
		Если ЕстьОшибки Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru='в теле отсутствует ключ %1'"), ЗапросКСервису.ПутьКДаннымВТеле);
			
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИстекСрокЖизниТокенаАвторизации(Знач HTTPОтвет)
	
	Возврат HTTPОтвет.КодСостояния = КодСостоянияПроблемыСАвторизацией();
	
КонецФункции

Функция АсинхронноеВыполнениеЗапроса(Знач HTTPОтвет)
	
	Возврат HTTPОтвет.КодСостояния = КодСостоянияАсинхронноеВыполнениеЗапроса();
	
КонецФункции

Функция ИдентификаторАсинхронногоЗадания(Знач HTTPОтвет, ЕстьОшибки, ТекстОшибки = "")
	
	СсылкаСервиса = HTTPОтвет.Заголовки.Получить("Location");
	Если СсылкаСервиса = Неопределено Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='в заголовках ответа не найдена ссылка на асинхронных обработчик'");
		
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Сред(СсылкаСервиса, СтрНайти(СсылкаСервиса, "/", НаправлениеПоиска.СКонца) +1);
	
КонецФункции

#КонецОбласти

#Область Соединение

Функция НовоеСоединениеССервером(Знач ПараметрыСоединения, ЕстьОшибки, ТекстОшибки = "")

	Соединение = Неопределено;
	ЕстьОшибки = Ложь;
	
	Попытка
		Соединение = Новый HTTPСоединение(
			ПараметрыСоединения.Сервер,
			ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси,
			ПараметрыСоединения.Таймаут,
			ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ЕстьОшибки = Истина;
		
		ТекстОшибки = СтрШаблон(НСтр("ru='не удалось установить соединение по причине: %2'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция НовыйПараметрыСоединения()
	
	Результат = Новый Структура;
	Результат.Вставить("Сервер",         "");
	Результат.Вставить("Порт",           0);
	Результат.Вставить("ПутьНаСервере",  "");
	Результат.Вставить("Аутентификация", Ложь);
	Результат.Вставить("Таймаут", 60);
	Результат.Вставить("Прокси",         Неопределено);
	Результат.Вставить("ЗащищенноеСоединение", Неопределено);
	Результат.Вставить("ИдентификаторПрограммы", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыСоединенияССервисом(ИмяСервиса)
	
	Если ИмяСервиса = ИмяСервисаСверкиРасчетов() Тогда
		Возврат ПараметрыСоединения(АдресСервисаСверкиРасчетов());
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(
		НСтр("ru='Ошибка формирования параметров соединения с сервисом %1: имя сервиса не опознано.'"), ИмяСервиса);
	
	ВызватьИсключение ТекстОшибки;
	
КонецФункции

// Формирует параметры соединения к сервисом.
//
// Параметры:
//  АдресРесурса - Строка - ссылка на ресурс в формате:
//                       <протокол обмена>://<сервер>:<порт>.
//
// Возвращаемое значение:
//  Структура - параметры соединения:
//   * Сервер - Строка - имя сервера.
//   * Порт - Число - порт соединения.
//   * ПутьНаСервере - Строка - относительный путь на сервере.
//   * Аутентификация - Булево - требуется аутентификация по токену.
//   * ЗащищенноеСоединение - ЗащищенноеСоединениеOpenSSL - объект защищенного соединения OpenSSL.
//   * Прокси - ИнтернетПрокси - параметры прокси-сервера см. ПолучениеФайловИзИнтернета.ПолучитьПрокси()
//
Функция ПараметрыСоединения(Знач ПолныйАдресРесурса)
	
	ДанныеРесурса = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолныйАдресРесурса);
	
	Результат = НовыйПараметрыСоединения();
	Результат.Сервер        = ДанныеРесурса.Хост;
	Результат.Порт          = ДанныеРесурса.Порт;
	Результат.Прокси        = ПолучениеФайловИзИнтернета.ПолучитьПрокси(ДанныеРесурса.Схема);
	Результат.ПутьНаСервере = ДанныеРесурса.ПутьНаСервере;
	
	Если ДанныеРесурса.Схема = ЗащищенныйПротоколПередачиДанных() Тогда
		Результат.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормализацияЗначений

Функция АдресСервисаСверкиРасчетов()

	Возврат "https://verify.1cfresh.com:443/api"
	
КонецФункции

Функция ИмяСервисаСверкиРасчетов()
	
	Возврат "verify";
	
КонецФункции

Функция ЗащищенныйПротоколПередачиДанных()
	
	Возврат "https";
	
КонецФункции

Функция ИмяЗаголовкаСтрокаАвторизации()
	
	Возврат "Authorization"
	
КонецФункции 

Функция ИмяЗаголовкаТипПередаваемогоКонтента()
	
	Возврат "Content-Type";
	
КонецФункции

Функция ИмяЗаголовкаТипВозвращаемогоКонтента()
	
	Возврат "Accept";
	
КонецФункции

Функция ТипКонтентаОшибка()
	
	Возврат "application/problem+json"
	
КонецФункции

Функция КодСостоянияПроблемыСАвторизацией()
	
	Возврат 401
	
КонецФункции

Функция КодСостоянияАсинхронноеВыполнениеЗапроса()
	
	Возврат 202
	
КонецФункции

Функция КоличествоПопытокВыполненияHTTPЗапроса()
	
	Возврат 1;
	
КонецФункции

#КонецОбласти

#Область Авторизация

Функция ТокенАвторизации(Знач ПараметрыАвторизации, ЕстьОшибки, ТекстОшибки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Токен = Неопределено;
	ЕстьОшибки = Ложь;
	Попытка
		Токен = БизнесСеть.ТокенДоступаОрганизации(ПараметрыАвторизации.Организация);
	Исключение
		ЕстьОшибки = Истина;
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Токен) Или ПустаяСтрока(Токен.ТокенДоступа) Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ТекстОшибки = НСтр("ru='Ошибка получения токена авторизации.'")
			+ ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС)+ ТекстОшибки;
		
		Возврат Неопределено;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

	Возврат Токен;
	
КонецФункции

Функция НовыйПараметрыАвторизации(Знач Организация)
	
	Возврат Новый Структура("Организация", Организация);
	
КонецФункции

#КонецОбласти

#Область РаботаСОшибками

Функция ЗафиксироватьОшибкуВЗапросе(Знач ПараметрыСоединения, Знач ЗапросКСервису,
	Знач ТекстОшибки, ЕстьОшибки = Неопределено)
	
	ЕстьОшибки = Истина;
	ПодробноеОписаниеОшибки = "";
	
	ПредставлениеОшибки = Новый Массив;
	ПредставлениеОшибки.Добавить(СтрШаблон("%1: ошибка взаимодействия", СервисСверкиРасчетов.ИмяСервиса()));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Хост: %1'"), ПараметрыСоединения.Сервер));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Запрос: %1 %2.'"), ЗапросКСервису.Метод,
		ПолныйАдресЗапроса(ПараметрыСоединения, ЗапросКСервису)));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Текст ошибки: %1'"), ТекстОшибки));
	
	ПодробноеОписаниеОшибки = СтрСоединить(ПредставлениеОшибки, Символы.ПС);
	
	ЗаписьЖурналаРегистрации(СтрШаблон(НСтр("ru='%1: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		СервисСверкиРасчетов.ИмяСервиса(), ЗапросКСервису.Наименование),УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеОписаниеОшибки);

	Возврат ПодробноеОписаниеОшибки

КонецФункции 

Функция ЕстьПодробноеОписаниеОшибки(Знач HTTPОтвет)
	
	Возврат HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаТипПередаваемогоКонтента()) = ТипКонтентаОшибка();
	
КонецФункции

Функция СтандартныеТекстыОшибокHTTPЗапросов()

	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	СоответствиеКодов = Новый Соответствие;
	СоответствиеКодов.Вставить(400, НСтр("ru = 'ошибка в запросе.'", КодЯзыка));
	СоответствиеКодов.Вставить(401, НСтр("ru = 'неверные данные аутентификации.'", КодЯзыка));
	СоответствиеКодов.Вставить(403, НСтр("ru = 'у клиента нет доступа к ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(404, НСтр("ru = 'на сервере нет ресурса по указанному URI.'", КодЯзыка));
	СоответствиеКодов.Вставить(405, НСтр("ru = 'указанный метод нельзя применить к текущему ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(406, НСтр("ru = 'запрошенный URI не может удовлетворить переданным в заголовке
		|характеристикам.'", КодЯзыка));
	СоответствиеКодов.Вставить(407, НСтр("ru = 'для доступа к серверу требуется аутентификация
		|для прокси-сервера'", КодЯзыка));
	СоответствиеКодов.Вставить(408, НСтр("ru = 'время ожидания сервером передачи от клиента истекло.'", КодЯзыка));
	СоответствиеКодов.Вставить(409, НСтр("ru = 'запрос не может быть выполнен из-за конфликтного
		|обращения к ресурсу.'", КодЯзыка));
	СоответствиеКодов.Вставить(410, НСтр("ru = 'ресурс был удален и теперь недоступен.'", КодЯзыка));
	СоответствиеКодов.Вставить(411, НСтр("ru = 'не указан объем передаваемых данных в заголовке.'", КодЯзыка));
	СоответствиеКодов.Вставить(412, НСтр("ru = 'ни одно из условных полей заголовка запроса не было выполнено.'",
		КодЯзыка));
	СоответствиеКодов.Вставить(413, НСтр("ru = 'слишком большой размер тела запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(414, НСтр("ru = 'слишком длинный URL.'", КодЯзыка));
	СоответствиеКодов.Вставить(415, НСтр("ru = 'контент переданного типа не поддерживается.'", КодЯзыка));
	СоответствиеКодов.Вставить(422, НСтр("ru = 'имеется логическая ошибка, из-за которой невозможно
		|произвести операцию.'", КодЯзыка));
	СоответствиеКодов.Вставить(423, НСтр("ru = 'ресурс заблокирован.'", КодЯзыка));
	СоответствиеКодов.Вставить(426, НСтр("ru = 'необходимо обновить протокол.'", КодЯзыка));
	СоответствиеКодов.Вставить(429, НСтр("ru = 'слишком много запросов в единицу времени.'", КодЯзыка));
	СоответствиеКодов.Вставить(431, НСтр("ru = 'превышена допустимая длина заголовков.'", КодЯзыка));
	СоответствиеКодов.Вставить(434, НСтр("ru = 'запрашиваемый адрес недоступен.'", КодЯзыка));
	СоответствиеКодов.Вставить(449, НСтр("ru = 'поступило недостаточно информации.'", КодЯзыка));
	
	СоответствиеКодов.Вставить(500, НСтр("ru = 'внутренняя ошибка сервера.'", КодЯзыка));
	СоответствиеКодов.Вставить(501, НСтр("ru = 'сервер не поддерживает возможностей, необходимых
		|для обработки запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(502, НСтр("ru = 'сервер, выступая в роли шлюза или прокси-сервера,
		|получил недействительное ответное сообщение от вышестоящего сервера.'", КодЯзыка));
	СоответствиеКодов.Вставить(503, НСтр("ru = 'сервер временно не имеет возможности обрабатывать запросы
		|по техническим причинам.'", КодЯзыка));
	СоответствиеКодов.Вставить(504, НСтр("ru = 'сервер в роли шлюза или прокси-сервера не дождался ответа
		|от вышестоящего сервера для завершения текущего запроса.'", КодЯзыка));
	СоответствиеКодов.Вставить(505, НСтр("ru = 'сервер не поддерживает указанную в запросе
		|версию протокола HTTP.'", КодЯзыка));
	СоответствиеКодов.Вставить(507, НСтр("ru = 'не хватает места для выполнения текущего запроса.'",
		КодЯзыка));
	СоответствиеКодов.Вставить(510, НСтр("ru = 'на сервере отсутствует расширение, которое желает
		|использовать клиент.'", КодЯзыка));
	СоответствиеКодов.Вставить(511, НСтр("ru = 'необходимо авторизоваться в сети провайдера.'", КодЯзыка));
	
	Возврат СоответствиеКодов;
	
КонецФункции

#КонецОбласти

#КонецОбласти