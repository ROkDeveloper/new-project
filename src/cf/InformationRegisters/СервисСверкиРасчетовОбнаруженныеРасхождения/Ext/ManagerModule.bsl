#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаписатьДанные(ПараметрыМетода, ДанныеСервиса) Экспорт 
	
	УдалитьДанныеПоРегистру(ПараметрыМетода.Организация, ПараметрыМетода.ДатаНачала, ПараметрыМетода.ДатаОкончания);
	
	Если ДанныеСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСервиса) <> Тип("ТаблицаЗначений")
		ИЛИ ДанныеСервиса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеСервиса Цикл
		
		Контрагент = Строка.Контрагент;
		Организация = ПараметрыМетода.Организация;
		
		НаборЗаписейРасхожденияДокументовПриСверке = РегистрыСведений.СервисСверкиРасчетовОбнаруженныеРасхождения.СоздатьНаборЗаписей();
		НаборЗаписейРасхожденияДокументовПриСверке.Отбор.Организация.Установить(Организация);
		НаборЗаписейРасхожденияДокументовПриСверке.Отбор.Контрагент.Установить(Контрагент);
		НаборЗаписейРасхожденияДокументовПриСверке.Отбор.ИдентификаторСверкиПоОрганизации.Установить(Строка.ИдентификаторСверкиПоОрганизации);
		НаборЗаписейРасхожденияДокументовПриСверке.Отбор.ИдентификаторСверкиКонтрагенту.Установить(Строка.ИдентификаторСверкиКонтрагенту);
		
		Запись = НаборЗаписейРасхожденияДокументовПриСверке.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Строка);
		
		ДокументСсылка = Неопределено;
		
		РегистрыСведений.СервисСверкиРасчетовДанныеСервиса.ЗаписатьДанные(Строка.МассивДокументовПоОрганизации, Организация, 
			Контрагент, Запись.ИдентификаторСверкиПоОрганизации, ДокументСсылка);
		РегистрыСведений.СервисСверкиРасчетовДанныеСервиса.ЗаписатьДанные(Строка.МассивДокументовПоКонтрагенту, Организация, 
			Контрагент, Запись.ИдентификаторСверкиКонтрагенту);
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			Если НЕ ОбщегоНазначения.СсылкаСуществует(ДокументСсылка) Тогда
				// Битые ссылки в регистр не записываем. Документ есть на сервисе, но не существует в базе.
				// Необходимо отправить документ к удаленю на сервис.
				СервисСверкиРасчетов.ЗарегистрироватьДокументКОтправке(Организация, Контрагент, ДокументСсылка);
				Продолжить;
			КонецЕсли;
			Запись.Документ = ДокументСсылка;
		КонецЕсли;
		
		НаборЗаписейРасхожденияДокументовПриСверке.Записать();
		
	КонецЦикла;

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьДанныеПоРегистру(Организация, ДатаНачала, ДатаОкончания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СервисСверкиРасчетовОбнаруженныеРасхождения.Организация КАК Организация,
	|	СервисСверкиРасчетовОбнаруженныеРасхождения.Контрагент КАК Контрагент,
	|	СервисСверкиРасчетовОбнаруженныеРасхождения.Дата КАК Дата,
	|	СервисСверкиРасчетовОбнаруженныеРасхождения.ИдентификаторСверкиПоОрганизации КАК ИдентификаторСверкиПоОрганизации,
	|	СервисСверкиРасчетовОбнаруженныеРасхождения.ИдентификаторСверкиКонтрагенту КАК ИдентификаторСверкиКонтрагенту,
	|	СервисСверкиРасчетовОбнаруженныеРасхождения.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.СервисСверкиРасчетовОбнаруженныеРасхождения КАК СервисСверкиРасчетовОбнаруженныеРасхождения
	|ГДЕ
	|	СервисСверкиРасчетовОбнаруженныеРасхождения.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И СервисСверкиРасчетовОбнаруженныеРасхождения.Организация = &Организация";
	
	ТаблицаСтрокКУдалению = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекущаяСтрока Из ТаблицаСтрокКУдалению Цикл
		
		КлючиЗаписи = КлючиЗадачСтруктурой();
		ЗаполнитьЗначенияСвойств(КлючиЗаписи, ТекущаяСтрока);
		КлючЗаписи = СоздатьКлючЗаписи(КлючиЗаписи);
		
		
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		
		// Обработаем задачи, созданные после регистрации действий
		МенеджерЗаписи = РегистрыСведений.СервисСверкиРасчетовОбнаруженныеРасхождения.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючиЗаписи);
		МенеджерЗаписи.Прочитать();
		Если Не МенеджерЗаписи.Выбран() Тогда
			// Обработаем задачи, созданные до регистрации действий
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючиЗаписи);
			МенеджерЗаписи.Прочитать();
		КонецЕсли;
		Если МенеджерЗаписи.Выбран() Тогда
			РегистрыСведений.СервисСверкиРасчетовДанныеСервиса.УдалитьДанныеДокументовПоПараметрам(МенеджерЗаписи);
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		
	Исключение
		
		ШаблонОшибки = НСтр("ru = 'Не удалось удалить ключ записи в регистре ""СервисСверкиРасчетовОбнаруженныеРасхождения"".
			|Подробное описание ошибки:
			|%1'");
		ТекстОшибки = СтрШаблон(ШаблонОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СервисСверкиРасчетов.ИмяСервиса(), УровеньЖурналаРегистрации.Ошибка, ,, ТекстОшибки);
		
	КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Конструктор таблицы с колонками, соответствующими измерениям регистра.
// Используется часто, в том числе при определении статусов задач, поэтому коллекция конструируется без обращения к метаданным.
// При изменении структуры регистра, включая состав типов измерений, следует вносить изменения в эту функцию.
//
Функция КлючиЗадач()
	
	КлючиЗадач = Новый ТаблицаЗначений;
	
	КлючиЗадач.Колонки.Добавить("Организация",   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КлючиЗадач.Колонки.Добавить("Контрагент",    Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КлючиЗадач.Колонки.Добавить("Документ",      ОбщегоНазначения.ОписаниеТипаВсеСсылки());
	КлючиЗадач.Колонки.Добавить("Дата",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	КлючиЗадач.Колонки.Добавить("ИдентификаторСверкиПоОрганизации",	Новый ОписаниеТипов("УникальныйИдентификатор"));
	КлючиЗадач.Колонки.Добавить("ИдентификаторСверкиКонтрагенту",	Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Возврат КлючиЗадач;
	
КонецФункции

Функция КлючиЗадачСтруктурой()
	
	КлючиЗадач = КлючиЗадач();
	КлючиЗадач.Добавить();
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(КлючиЗадач[0]);
	
КонецФункции

#КонецОбласти

#КонецЕсли

