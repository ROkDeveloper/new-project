// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Обновить характеристики потребителя.
// 
// Параметры:
//  ТаблицаХарактеристикРекламы - Неопределено    - значение по умолчанию
//  							- ТаблицаЗначений - см. Справочники.Реклама.НовыйТаблицаТаргетыРекламыИзДанныхСервиса
//
Процедура ОбновитьЗначенияХарактеристикПотребителя(ТаблицаХарактеристикРекламы = Неопределено) Экспорт
	
	ДатаНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ПараметрыХарактеристик = НовыйПараметрыХарактеристик();
	
	Если ТаблицаХарактеристикРекламы <> Неопределено Тогда
		ПараметрыХарактеристик.ТаблицаХарактеристикРекламы = ТаблицаХарактеристикРекламы;
	КонецЕсли;
	
	ЗаполнитьТаблицуВидамиХарактеристик(ПараметрыХарактеристик);
	
	УдалитьНеАктуальныеХарактеристики(ПараметрыХарактеристик);
	
	Попытка
		
		ЗаполнитьНовыеВидыХарактеристик(ПараметрыХарактеристик);
		ТаблицаХарактеристик = ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик;
		
		ПараметрыХарактеристик.Очистить();
		
		Если ТаблицаХарактеристик.Количество() > 0 Тогда
			
			СоздатьОбновитьНаборыЗаписей(ТаблицаХарактеристик);
			
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(
			НСтр("ru = 'РекламныйСервис: ОбновитьЗначенияХарактеристикПотребителя'", 
				ОбщегоНазначения.КодОсновногоЯзыка()), 
			ДатаНачала);
		
	Исключение
		
		ИмяСобытия = РекламныйСервисСлужебный.ИмяСобытияХарактеристикаПрофиля(
			РекламныйСервисСлужебный.ИмяДействияОбновление());
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.РегистрыСведений.ЗначенияХарактеристикПотребителяРекламы, , 
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписаниеХарактеристик

// Заполнить вид характеристики.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - ОпределяемыйТип.ВидХарактеристикиРекламы
//
Процедура ЗаполнитьВидХарактеристики(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	ВидыХарактеристик = ПараметрыХарактеристик.ВидыХарактеристик;
	
	Если Не ВидыХарактеристик.Свойство(ВидХарактеристики) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидХарактеристики = ВидыХарактеристик.РЕГИОНЫ_ПОКАЗА.ID Тогда
		
		Заполнить_РЕГИОНЫ_ПОКАЗА(ПараметрыХарактеристик, ВидыХарактеристик.РЕГИОНЫ_ПОКАЗА);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.РЕГИОНЫ_ПОКАЗА_КРОМЕ.ID Тогда
		
		Заполнить_РЕГИОНЫ_ПОКАЗА(ПараметрыХарактеристик, ВидыХарактеристик.РЕГИОНЫ_ПОКАЗА_КРОМЕ);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.РАЗМЕР_ПРЕДПРИЯТИЯ_ЧИСЛЕННОСТЬ.ID Тогда 
		
		Заполнить_РАЗМЕР_ПРЕДПРИЯТИЯ_ЧИСЛЕННОСТЬ(
			ПараметрыХарактеристик, ВидыХарактеристик.РАЗМЕР_ПРЕДПРИЯТИЯ_ЧИСЛЕННОСТЬ);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.РАЗМЕР_ПРЕДПРИЯТИЯ_ДОХОД.ID Тогда
		
		Заполнить_РАЗМЕР_ПРЕДПРИЯТИЯ_ДОХОД(ПараметрыХарактеристик, ВидыХарактеристик.РАЗМЕР_ПРЕДПРИЯТИЯ_ДОХОД);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.РАЗМЕР_ПРЕДПРИЯТИЯ_ОБОРОТ_ПО_СЧЕТАМ.ID Тогда
		
		Заполнить_РАЗМЕР_ПРЕДПРИЯТИЯ_ОБОРОТ_ПО_СЧЕТАМ(
			ПараметрыХарактеристик, ВидыХарактеристик.РАЗМЕР_ПРЕДПРИЯТИЯ_ОБОРОТ_ПО_СЧЕТАМ);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.ОСНОВНЫЕ_СРЕДСТВА.ID Тогда
		
		Заполнить_ОСНОВНЫЕ_СРЕДСТВА(ПараметрыХарактеристик, ВидыХарактеристик.ОСНОВНЫЕ_СРЕДСТВА);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.СРОК_ЖИЗНИ_ПРЕДПРИЯТИЯ.ID Тогда
		
		Заполнить_СРОК_ЖИЗНИ_ПРЕДПРИЯТИЯ(ПараметрыХарактеристик, ВидыХарактеристик.СРОК_ЖИЗНИ_ПРЕДПРИЯТИЯ);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.ВОЗРАСТ_ИП.ID Тогда
		
		Заполнить_ВОЗРАСТ_ИП(ПараметрыХарактеристик, ВидыХарактеристик.ВОЗРАСТ_ИП);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.УЧЕТ_КОМАНДИРОВОК.ID Тогда
		
		Заполнить_УЧЕТ_КОМАНДИРОВОК(ПараметрыХарактеристик, ВидыХарактеристик.УЧЕТ_КОМАНДИРОВОК);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.КОЛ_ВО_КРЕДИТНЫХ_ДОГОВОРОВ.ID Тогда
		
		Заполнить_КОЛ_ВО_КРЕДИТНЫХ_ДОГОВОРОВ(ПараметрыХарактеристик, ВидыХарактеристик.КОЛ_ВО_КРЕДИТНЫХ_ДОГОВОРОВ);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.ОКОПФ.ID Тогда
		
		Заполнить_ОКОПФ(ПараметрыХарактеристик, ВидыХарактеристик.ОКОПФ);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.ОКОПФ_КРОМЕ.ID Тогда 
		
		Заполнить_ОКОПФ(ПараметрыХарактеристик, ВидыХарактеристик.ОКОПФ_КРОМЕ);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.КОД_ОКВЭД.ID Тогда
		
		Заполнить_КОД_ОКВЭД(ПараметрыХарактеристик, ВидыХарактеристик.КОД_ОКВЭД, Истина);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.КОД_ОКВЭД_КРОМЕ.ID Тогда
		
		Заполнить_КОД_ОКВЭД(ПараметрыХарактеристик, ВидыХарактеристик.КОД_ОКВЭД_КРОМЕ, Ложь);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.СИСТЕМА_НАЛОГООБЛОЖЕНИЯ.ID Тогда
		
		Заполнить_СИСТЕМА_НАЛОГООБЛОЖЕНИЯ(ПараметрыХарактеристик, ВидыХарактеристик.СИСТЕМА_НАЛОГООБЛОЖЕНИЯ);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.ФОРМА_ПОСТАВКИ_ПП.ID Тогда
		
		Заполнить_ФОРМА_ПОСТАВКИ_ПП(ПараметрыХарактеристик, ВидыХарактеристик.ФОРМА_ПОСТАВКИ_ПП);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.ВЕРСИЯ_ПП.ID Тогда
		
		Заполнить_ВЕРСИЯ_ПП(ПараметрыХарактеристик, ВидыХарактеристик.ВЕРСИЯ_ПП);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.СЕРВИС_АКТИВЕН.ID 
		Или ВидХарактеристики = ВидыХарактеристик.СЕРВИС_НЕ_АКТИВЕН.ID 
		Или ВидХарактеристики = ВидыХарактеристик.СЕРВИС_БЫЛ_АКТИВЕН.ID Тогда
		
		Заполнить_СЕРВИСЫ_ИТС(ПараметрыХарактеристик, ВидХарактеристики);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.ГРУППА_КОНФИГУРАЦИЙ.ID Тогда
		
		Заполнить_ГРУППА_КОНФИГУРАЦИЙ(ПараметрыХарактеристик, ВидыХарактеристик.ГРУППА_КОНФИГУРАЦИЙ);
		
	Иначе
		
		ШаблонСтроки = 
			НСтр("ru = 'Для характеристики ""%1"" не определена процедура'", ОбщегоНазначения.КодОсновногоЯзыка());
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, ВидХарактеристики);
		
		ВызватьИсключение СтрокаОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// РАЗМЕР ПРЕДПРИЯТИЯ ЧИСЛЕННОСТЬ.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * НЕТ_НАЕМНЫХ_СОТРУДНИКОВ - Строка - ИП или самозанятый.
// * МИКРОПРЕДПРИЯТИЕ - Строка - до 5 сотрудников.
// * МАЛОЕ_ПРЕДПРИЯТИЕ - Строка - до 25 сотрудников.
// * СРЕДНЕЕ_ПРЕДПРИЯТИЕ - Строка - до 60 сотрудников.
// * КРУПНОЕ_ПРЕДПРИЯТИЕ - Строка - более 60 сотрудников.
//
Функция РАЗМЕР_ПРЕДПРИЯТИЯ_ЧИСЛЕННОСТЬ()
	
	Результат = Новый Структура;
	Результат.Вставить("НЕТ_НАЕМНЫХ_СОТРУДНИКОВ", "НЕТ_НАЕМНЫХ_СОТРУДНИКОВ");
	Результат.Вставить("МИКРОПРЕДПРИЯТИЕ", "МИКРОПРЕДПРИЯТИЕ");
	Результат.Вставить("МАЛОЕ_ПРЕДПРИЯТИЕ", "МАЛОЕ_ПРЕДПРИЯТИЕ");
	Результат.Вставить("СРЕДНЕЕ_ПРЕДПРИЯТИЕ ", "СРЕДНЕЕ_ПРЕДПРИЯТИЕ");
	Результат.Вставить("КРУПНОЕ_ПРЕДПРИЯТИЕ", "КРУПНОЕ_ПРЕДПРИЯТИЕ");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// РАЗМЕР ПРЕДПРИЯТИЯ ДОХОД.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * МИКРОПРЕДПРИЯТИЕ - Строка - до 2,4 млн руб (по границе самозанятого).
// * МАЛОЕ_ПРЕДПРИЯТИЕ - Строка - до 60 млн (по границе АУСН).
// * СРЕДНЕЕ_ПРЕДПРИЯТИЕ - Строка - до 150 млн (по границе УСН).
// * КРУПНОЕ_ПРЕДПРИЯТИЕ - Строка - более 150 млн.
//
Функция РАЗМЕР_ПРЕДПРИЯТИЯ_ДОХОД()
	
	Результат = Новый Структура;
	Результат.Вставить("МИКРОПРЕДПРИЯТИЕ ", "МИКРОПРЕДПРИЯТИЕ");
	Результат.Вставить("МАЛОЕ_ПРЕДПРИЯТИЕ ", "МАЛОЕ_ПРЕДПРИЯТИЕ");
	Результат.Вставить("СРЕДНЕЕ_ПРЕДПРИЯТИЕ ", "СРЕДНЕЕ_ПРЕДПРИЯТИЕ");
	Результат.Вставить("КРУПНОЕ_ПРЕДПРИЯТИЕ ", "КРУПНОЕ_ПРЕДПРИЯТИЕ");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// РАЗМЕР ПРЕДПРИЯТИЯ ОБОРОТ п о СЧЕТАМ.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * МИКРОПРЕДПРИЯТИЕ - Строка - до 2,4 млн руб (по границе самозанятого).
// * МАЛОЕ_ПРЕДПРИЯТИЕ - Строка - до 60 млн (по границе АУСН).
// * СРЕДНЕЕ_ПРЕДПРИЯТИЕ - Строка - до 150 млн (по границе УСН).
// * КРУПНОЕ_ПРЕДПРИЯТИЕ - Строка - более 150 млн.
//
Функция РАЗМЕР_ПРЕДПРИЯТИЯ_ОБОРОТ_ПО_СЧЕТАМ()
	
	Результат = Новый Структура;
	Результат.Вставить("МИКРОПРЕДПРИЯТИЕ ", "МИКРОПРЕДПРИЯТИЕ");
	Результат.Вставить("МАЛОЕ_ПРЕДПРИЯТИЕ ", "МАЛОЕ_ПРЕДПРИЯТИЕ");
	Результат.Вставить("СРЕДНЕЕ_ПРЕДПРИЯТИЕ ", "СРЕДНЕЕ_ПРЕДПРИЯТИЕ");
	Результат.Вставить("КРУПНОЕ_ПРЕДПРИЯТИЕ ", "КРУПНОЕ_ПРЕДПРИЯТИЕ");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// ОСНОВНЫЕ СРЕДСТВА (остаточная стоимость на балансе).
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * НЕТ - Строка
// * В_ПРЕДЕЛАХ_УСН - Строка - до границы УСН (150 млн руб).
// * СВЫШЕ_ПРЕДЕЛА_УСН - Строка - свыше границы УСН (свыше 150 млн руб).
//
Функция ОСНОВНЫЕ_СРЕДСТВА()
	
	Результат = Новый Структура;
	Результат.Вставить("НЕТ", "НЕТ");
	Результат.Вставить("В_ПРЕДЕЛАХ_УСН", "В_ПРЕДЕЛАХ_УСН");
	Результат.Вставить("СВЫШЕ_ПРЕДЕЛА_УСН", "СВЫШЕ_ПРЕДЕЛА_УСН");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// СРОК ЖИЗНИ ПРЕДПРИЯТИЯ.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ДО_1_ГОДА - Строка - до 1 года.
// * ДО_3_ЛЕТ - Строка - до 3 лет.
// * ДО_10_ЛЕТ - Строка -  до 10 лет.
// * СВЫШЕ_10_ЛЕТ - Строка - свыше 10 лет.
//
Функция СРОК_ЖИЗНИ_ПРЕДПРИЯТИЯ()
	
	Результат = Новый Структура;
	Результат.Вставить("ДО_1_ГОДА", "ДО_1_ГОДА");
	Результат.Вставить("ДО_3_ЛЕТ", "ДО_3_ЛЕТ");
	Результат.Вставить("ДО_10_ЛЕТ", "ДО_10_ЛЕТ");
	Результат.Вставить("СВЫШЕ_10_ЛЕТ", "СВЫШЕ_10_ЛЕТ");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// ВОЗРАСТ ИП.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ДО_25_ЛЕТ - Строка - до 25 лет.
// * ДО_65_ЛЕТ - Строка - от 25-65 лет.
// * СВЫШЕ_65_ЛЕТ - Строка - свыше 65 лет.
//
Функция ВОЗРАСТ_ИП()
	
	Результат = Новый Структура;
	Результат.Вставить("ДО_25_ЛЕТ", "ДО_25_ЛЕТ");
	Результат.Вставить("ДО_65_ЛЕТ", "ДО_65_ЛЕТ");
	Результат.Вставить("СВЫШЕ_65_ЛЕТ", "СВЫШЕ_65_ЛЕТ");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// УЧЕТ КОМАНДИРОВОК за прошлый месяц было. Авансовых отчетов с типом 
// 	Командировка или авансовых отчетов с ключевыми словами, являющимися признаком командировки
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * НЕТ - Строка -
// * МЕНЕЕ_10 - Строка
// * БОЛЕЕ_10 - Строка
// * БОЛЕЕ_50 - Строка
//
Функция УЧЕТ_КОМАНДИРОВОК()
	
	Результат = Новый Структура;
	Результат.Вставить("НЕТ", "НЕТ");
	Результат.Вставить("МЕНЕЕ_10", "МЕНЕЕ_10");
	Результат.Вставить("БОЛЕЕ_10", "БОЛЕЕ_10");
	Результат.Вставить("БОЛЕЕ_50", "БОЛЕЕ_50");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// КОЛ в о КРЕДИТНЫХ ДОГОВОРОВ.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * НЕТ - Строка
// * ОТ_1_ДО_3 - Строка
// * БОЛЕЕ_3 - Строка
//
Функция КОЛ_ВО_КРЕДИТНЫХ_ДОГОВОРОВ()
	
	Результат = Новый Структура;
	Результат.Вставить("НЕТ", "НЕТ");
	Результат.Вставить("ОТ_1_ДО_3", "ОТ_1_ДО_3");
	Результат.Вставить("БОЛЕЕ_3", "БОЛЕЕ_3");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// ФОРМА ПОСТАВКИ ПП.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * КОРОБОЧНЫЙ - Строка
// * ФРЕШ - Строка
//
Функция ФОРМА_ПОСТАВКИ_ПП()
	
	Результат = Новый Структура;
	Результат.Вставить("КОРОБОЧНЫЙ", "КОРОБОЧНЫЙ");
	Результат.Вставить("ФРЕШ", "ФРЕШ");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// ВЕРСИЯ ПП.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * БАЗОВАЯ - Строка
// * ПРОФ - Строка
// * КОРП - Строка
//
Функция ВЕРСИЯ_ПП() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("БАЗОВАЯ", "БАЗОВАЯ");
	Результат.Вставить("ПРОФ", "ПРОФ");
	Результат.Вставить("КОРП", "КОРП");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// СИСТЕМА НАЛОГООБЛОЖЕНИЯ.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ОСН_ЮР_ЛИЦА - Строка
// * УСН_ДОХОДЫ - Строка
// * УСН_ДОХОДЫ_МИНУС_РАСХОДЫ - Строка
// * ОСН_ИП - Строка
// * ПАТЕНТ - Строка
// * САМОЗАНЯТЫЙ - Строка
// * АУСН_ДОХОДЫ - Строка
// * АУСН_ДОХОДЫ_МИНУС_РАСХОДЫ - Строка
//
Функция СИСТЕМА_НАЛОГООБЛОЖЕНИЯ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОСН_ЮР_ЛИЦА", "ОСН_ЮР_ЛИЦА");
	Результат.Вставить("УСН_ДОХОДЫ", "УСН_ДОХОДЫ");
	Результат.Вставить("УСН_ДОХОДЫ_МИНУС_РАСХОДЫ", "УСН_ДОХОДЫ_МИНУС_РАСХОДЫ");
	Результат.Вставить("ОСН_ИП", "ОСН_ИП");
	Результат.Вставить("ПАТЕНТ", "ПАТЕНТ");
	Результат.Вставить("САМОЗАНЯТЫЙ", "САМОЗАНЯТЫЙ");
	Результат.Вставить("АУСН_ДОХОДЫ", "АУСН_ДОХОДЫ");
	Результат.Вставить("АУСН_ДОХОДЫ_МИНУС_РАСХОДЫ", "АУСН_ДОХОДЫ_МИНУС_РАСХОДЫ");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

// ГРУППА КОНФИГУРАЦИЙ.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * БП - Строка
// * БП_НКО - Строка
// * БП_Садовод - Строка
// * БП_Гаражи - Строка
// * БП_МСФО - Строка
// * БП_УХ - Строка
//
Функция ГРУППА_КОНФИГУРАЦИЙ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("БП", "БП");
	Результат.Вставить("БП_НКО", "БП_НКО");
	Результат.Вставить("БП_Садовод", "БП_Садовод");
	Результат.Вставить("БП_Гаражи", "БП_Гаражи");
	Результат.Вставить("БП_МСФО", "БП_МСФО");
	Результат.Вставить("БП_УХ", "БП_УХ");
	
	Результат = Новый ФиксированнаяСтруктура(Результат);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеХарактеристик

// Виды характеристик.
// 
// Возвращаемое значение:
//  Структура:
// * РЕГИОНЫ_ПОКАЗА - см. НовыйРеквизитыХарактеристики
// * РЕГИОНЫ_ПОКАЗА_КРОМЕ - см. НовыйРеквизитыХарактеристики
// * РАЗМЕР_ПРЕДПРИЯТИЯ_ЧИСЛЕННОСТЬ - см. НовыйРеквизитыХарактеристики
// * РАЗМЕР_ПРЕДПРИЯТИЯ_ДОХОД - см. НовыйРеквизитыХарактеристики
// * РАЗМЕР_ПРЕДПРИЯТИЯ_ОБОРОТ_ПО_СЧЕТАМ - см. НовыйРеквизитыХарактеристики
// * ОСНОВНЫЕ_СРЕДСТВА - см. НовыйРеквизитыХарактеристики
// * СРОК_ЖИЗНИ_ПРЕДПРИЯТИЯ - см. НовыйРеквизитыХарактеристики
// * ВОЗРАСТ_ИП - см. НовыйРеквизитыХарактеристики
// * УЧЕТ_КОМАНДИРОВОК - см. НовыйРеквизитыХарактеристики
// * КОЛ_ВО_КРЕДИТНЫХ_ДОГОВОРОВ - см. НовыйРеквизитыХарактеристики
// * ОКОПФ - см. НовыйРеквизитыХарактеристики
// * ОКОПФ_КРОМЕ - см. НовыйРеквизитыХарактеристики
// * КОД_ОКВЭД - см. НовыйРеквизитыХарактеристики
// * КОД_ОКВЭД_КРОМЕ - см. НовыйРеквизитыХарактеристики
// * СИСТЕМА_НАЛОГООБЛОЖЕНИЯ - см. НовыйРеквизитыХарактеристики
// * ФОРМА_ПОСТАВКИ_ПП - см. НовыйРеквизитыХарактеристики
// * ВЕРСИЯ_ПП - см. НовыйРеквизитыХарактеристики
// * СЕРВИС_НЕ_АКТИВЕН - см. НовыйРеквизитыХарактеристики
// * СЕРВИС_АКТИВЕН - см. НовыйРеквизитыХарактеристики
// * СЕРВИС_БЫЛ_АКТИВЕН - см. НовыйРеквизитыХарактеристики
// * ГРУППА_КОНФИГУРАЦИЙ - см. НовыйРеквизитыХарактеристики
//
Функция ВидыХарактеристик()
	
	ЧастотаОбновления = РекламныйСервисСлужебныйПовтИсп.ВариантыЧастотыОбновленияХарактеристики();
	
	Результат = Новый Структура;
	МетодПолученияВладельцаОрганизация = РекламныйСервисСлужебный.МетодыПолученияВладельцевХарактеристик().Организация;
	
	Результат.Вставить(
		"РЕГИОНЫ_ПОКАЗА", 
		НовыйРеквизитыХарактеристики(
			"РЕГИОНЫ_ПОКАЗА", 
			ЧастотаОбновления.День, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"РЕГИОНЫ_ПОКАЗА_КРОМЕ", 
		НовыйРеквизитыХарактеристики(
			"РЕГИОНЫ_ПОКАЗА_КРОМЕ", 
			ЧастотаОбновления.День, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"РАЗМЕР_ПРЕДПРИЯТИЯ_ЧИСЛЕННОСТЬ", 
		НовыйРеквизитыХарактеристики(
			"РАЗМЕР_ПРЕДПРИЯТИЯ_ЧИСЛЕННОСТЬ", 
			ЧастотаОбновления.Месяц, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"РАЗМЕР_ПРЕДПРИЯТИЯ_ДОХОД", 
		НовыйРеквизитыХарактеристики(
			"РАЗМЕР_ПРЕДПРИЯТИЯ_ДОХОД", 
			ЧастотаОбновления.Месяц, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"РАЗМЕР_ПРЕДПРИЯТИЯ_ОБОРОТ_ПО_СЧЕТАМ", 
		НовыйРеквизитыХарактеристики(
			"РАЗМЕР_ПРЕДПРИЯТИЯ_ОБОРОТ_ПО_СЧЕТАМ", 
			ЧастотаОбновления.Месяц, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"ОСНОВНЫЕ_СРЕДСТВА", 
		НовыйРеквизитыХарактеристики(
			"ОСНОВНЫЕ_СРЕДСТВА", 
			ЧастотаОбновления.Месяц, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"СРОК_ЖИЗНИ_ПРЕДПРИЯТИЯ", 
		НовыйРеквизитыХарактеристики(
			"СРОК_ЖИЗНИ_ПРЕДПРИЯТИЯ", 
			ЧастотаОбновления.Год, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"ВОЗРАСТ_ИП", 
		НовыйРеквизитыХарактеристики(
			"ВОЗРАСТ_ИП", 
			ЧастотаОбновления.Год, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"УЧЕТ_КОМАНДИРОВОК", 
		НовыйРеквизитыХарактеристики(
			"УЧЕТ_КОМАНДИРОВОК", 
			ЧастотаОбновления.Месяц, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"КОЛ_ВО_КРЕДИТНЫХ_ДОГОВОРОВ", 
		НовыйРеквизитыХарактеристики(
			"КОЛ_ВО_КРЕДИТНЫХ_ДОГОВОРОВ", 
			ЧастотаОбновления.Месяц, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"ОКОПФ", 
		НовыйРеквизитыХарактеристики(
			"ОКОПФ", 
			ЧастотаОбновления.День, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"ОКОПФ_КРОМЕ", 
		НовыйРеквизитыХарактеристики(
			"ОКОПФ_КРОМЕ", 
			ЧастотаОбновления.День, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"КОД_ОКВЭД", 
		НовыйРеквизитыХарактеристики(
			"КОД_ОКВЭД", 
			ЧастотаОбновления.День, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"КОД_ОКВЭД_КРОМЕ", 
		НовыйРеквизитыХарактеристики(
			"КОД_ОКВЭД_КРОМЕ", 
			ЧастотаОбновления.День, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"СИСТЕМА_НАЛОГООБЛОЖЕНИЯ", 
		НовыйРеквизитыХарактеристики(
			"СИСТЕМА_НАЛОГООБЛОЖЕНИЯ", 
			ЧастотаОбновления.Месяц, 
			МетодПолученияВладельцаОрганизация));
	
	Результат.Вставить(
		"ФОРМА_ПОСТАВКИ_ПП", 
		НовыйРеквизитыХарактеристики(
			"ФОРМА_ПОСТАВКИ_ПП", 
			ЧастотаОбновления.День, 
			""));
	
	Результат.Вставить(
		"ВЕРСИЯ_ПП", 
		НовыйРеквизитыХарактеристики(
			"ВЕРСИЯ_ПП", 
			ЧастотаОбновления.День, 
			""));
	
	Результат.Вставить(
		"СЕРВИС_АКТИВЕН", 
		НовыйРеквизитыХарактеристики(
			"СЕРВИС_АКТИВЕН", 
			ЧастотаОбновления.День, 
			""));
	
	Результат.Вставить(
		"СЕРВИС_НЕ_АКТИВЕН", 
		НовыйРеквизитыХарактеристики(
			"СЕРВИС_НЕ_АКТИВЕН", 
			ЧастотаОбновления.День, 
			""));
	
	Результат.Вставить(
		"СЕРВИС_БЫЛ_АКТИВЕН", 
		НовыйРеквизитыХарактеристики(
			"СЕРВИС_БЫЛ_АКТИВЕН", 
			ЧастотаОбновления.День, 
			""));
	
	Результат.Вставить(
		"ГРУППА_КОНФИГУРАЦИЙ", 
		НовыйРеквизитыХарактеристики(
			"ГРУППА_КОНФИГУРАЦИЙ", 
			ЧастотаОбновления.День, 
			""));
	
	Возврат Результат;
	
КонецФункции

#Область ХарактеристикиПрофиля

// Заполнить РЕГИОНЫ ПОКАЗА. Заполняет характеристики РЕГИОН_ПОКАЗА и РЕГИОН_ПОКАЗА_КРОМЕ.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_РЕГИОНЫ_ПОКАЗА(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	ТаблицаХарактеристик = ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик;
	
	// Проверка заполнения текущей характеристики.
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = ТаблицаХарактеристик.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиХарактеристикиРекламы.Количество() > 0 Тогда
		Возврат;// При повторном вызове проверяет заполненность текущей характеристики
	КонецЕсли;
	
	// Получение владельцев всех смежных характеристик.
	ВидыХарактеристикКоды = Новый Массив; // Массив из Строка
	ВидыХарактеристикКоды.Добавить(ПараметрыХарактеристик.ВидыХарактеристик.РЕГИОНЫ_ПОКАЗА.ID);
	ВидыХарактеристикКоды.Добавить(ПараметрыХарактеристик.ВидыХарактеристик.РЕГИОНЫ_ПОКАЗА_КРОМЕ.ID);
	
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикКоды, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	// Получение значений характеристик в прикладном решении.
	Результат = НовыйДанныеВладельцев();
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьРегионыПоказа(ВладельцыХарактеристики, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьРегионыПоказа(
		ВладельцыХарактеристики, 
		Результат, 
		ПараметрыХарактеристик, 
		ВидыХарактеристикКоды);
	
КонецПроцедуры

// Заполнить РАЗМЕР ПРЕДПРИЯТИЯ ЧИСЛЕННОСТЬ.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_РАЗМЕР_ПРЕДПРИЯТИЯ_ЧИСЛЕННОСТЬ(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	// Получение владельцев.
	ВидыХарактеристикДляПолученияВладельцев = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидХарактеристики.ID);
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикДляПолученияВладельцев, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	// Получение значений характеристик в прикладном решении.
	ПараметрыПериода = НовыйПараметрыПериода(ВидХарактеристики.ЧастотаОбновления);
	Результат = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьРазмерПредприятияЧисленность(
		ВладельцыХарактеристики, ПараметрыПериода, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = 
		ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев.НайтиСтроки(ПараметрыОтбора);
	
	ДопустимыеЗначения = РАЗМЕР_ПРЕДПРИЯТИЯ_ЧИСЛЕННОСТЬ();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		ВладелецХарактеристики = СтрокаРезультата.Ключ; // ОпределяемыйТип.ВладелецХарактеристикиРекламы
		
		Сообщение = НСтр("ru = 'Не допустимый тип значения'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЧисленностьРаботников = СтрокаРезультата.Значение;
		
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(ЧисленностьРаботников) = Тип("Число"), 
			Сообщение, 
			"РекламныйСервисПереопределяемый.ЗаполнитьРазмерПредприятияЧисленность");
		
		Если ЧисленностьРаботников >= 60 Тогда
			Значение = ДопустимыеЗначения.КРУПНОЕ_ПРЕДПРИЯТИЕ;
		ИначеЕсли ЧисленностьРаботников >= 25 Тогда
			Значение = ДопустимыеЗначения.СРЕДНЕЕ_ПРЕДПРИЯТИЕ;
		ИначеЕсли ЧисленностьРаботников >= 5 Тогда
			Значение = ДопустимыеЗначения.МАЛОЕ_ПРЕДПРИЯТИЕ;
		ИначеЕсли ЧисленностьРаботников >= 1 Тогда
			Значение = ДопустимыеЗначения.МИКРОПРЕДПРИЯТИЕ;
		Иначе
			Значение = ДопустимыеЗначения.НЕТ_НАЕМНЫХ_СОТРУДНИКОВ;
		КонецЕсли;
		
		ДобавитьСтрокиИтоговойТаблицыХарактеристик(
			Значение, 
			СтрокиХарактеристикиРекламы, 
			ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
			ВидХарактеристики, 
			ВладелецХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить РАЗМЕР ПРЕДПРИЯТИЯ ДОХОД.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_РАЗМЕР_ПРЕДПРИЯТИЯ_ДОХОД(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	// Получение владельцев.
	ВидыХарактеристикДляПолученияВладельцев = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидХарактеристики.ID);
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикДляПолученияВладельцев, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	// Получение значений характеристик в прикладном решении.
	ПараметрыПериода = НовыйПараметрыПериода(ВидХарактеристики.ЧастотаОбновления);
	Результат = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьРазмерПредприятияДоход(
		ВладельцыХарактеристики, ПараметрыПериода, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = 
		ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев.НайтиСтроки(ПараметрыОтбора);
	
	ДопустимыеЗначения = РАЗМЕР_ПРЕДПРИЯТИЯ_ДОХОД();
	
	Для Каждого ВладелецХарактеристики Из ВладельцыХарактеристики Цикл
		
		СуммаДохода = Результат.Получить(ВладелецХарактеристики);
		Если СуммаДохода = Неопределено Тогда
			СуммаДохода = 0;
		КонецЕсли;
		
		Сообщение = НСтр("ru = 'Не допустимый тип значения'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(СуммаДохода) = Тип("Число"), 
			Сообщение, 
			"РекламныйСервисПереопределяемый.ЗаполнитьРазмерПредприятияДоход");
		
		Если СуммаДохода >= 150000000 Тогда
			Значение = ДопустимыеЗначения.КРУПНОЕ_ПРЕДПРИЯТИЕ;
		ИначеЕсли СуммаДохода >= 60000000 Тогда
			Значение = ДопустимыеЗначения.СРЕДНЕЕ_ПРЕДПРИЯТИЕ;
		ИначеЕсли СуммаДохода >= 2400000 Тогда
			Значение = ДопустимыеЗначения.МАЛОЕ_ПРЕДПРИЯТИЕ;
		Иначе
			Значение = ДопустимыеЗначения.МИКРОПРЕДПРИЯТИЕ;
		КонецЕсли;
		
		ДобавитьСтрокиИтоговойТаблицыХарактеристик(
			Значение, 
			СтрокиХарактеристикиРекламы, 
			ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
			ВидХарактеристики, 
			ВладелецХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить РАЗМЕР ПРЕДПРИЯТИЯ ОБОРОТ п о СЧЕТАМ.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_РАЗМЕР_ПРЕДПРИЯТИЯ_ОБОРОТ_ПО_СЧЕТАМ(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	// Получение владельцев.
	ВидыХарактеристикДляПолученияВладельцев = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидХарактеристики.ID);
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикДляПолученияВладельцев, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	// Получение значений характеристик в прикладном решении.
	ПараметрыПериода = НовыйПараметрыПериода(ВидХарактеристики.ЧастотаОбновления);
	Результат = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьРазмерПредприятияОборотПоСчетам(
		ВладельцыХарактеристики, ПараметрыПериода, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = 
		ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев.НайтиСтроки(ПараметрыОтбора);
	
	ДопустимыеЗначения = РАЗМЕР_ПРЕДПРИЯТИЯ_ОБОРОТ_ПО_СЧЕТАМ();
	
	Для Каждого ВладелецХарактеристики Из ВладельцыХарактеристики Цикл
		
		СуммаОборота = Результат.Получить(ВладелецХарактеристики);
		Если СуммаОборота = Неопределено Тогда
			СуммаОборота = 0;
		КонецЕсли;
		
		Сообщение = НСтр("ru = 'Не допустимый тип значения'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(СуммаОборота) = Тип("Число"), 
			Сообщение, 
			"РекламныйСервисПереопределяемый.ЗаполнитьРазмерПредприятияОборотПоСчетам");
		
		Если СуммаОборота >= 150000000 Тогда
			Значение = ДопустимыеЗначения.КРУПНОЕ_ПРЕДПРИЯТИЕ;
		ИначеЕсли СуммаОборота >= 60000000 Тогда
			Значение = ДопустимыеЗначения.СРЕДНЕЕ_ПРЕДПРИЯТИЕ;
		ИначеЕсли СуммаОборота >= 2400000 Тогда
			Значение = ДопустимыеЗначения.МАЛОЕ_ПРЕДПРИЯТИЕ;
		Иначе
			Значение = ДопустимыеЗначения.МИКРОПРЕДПРИЯТИЕ;
		КонецЕсли;
		
		ДобавитьСтрокиИтоговойТаблицыХарактеристик(
			Значение, 
			СтрокиХарактеристикиРекламы, 
			ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
			ВидХарактеристики, 
			ВладелецХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить ОСНОВНЫЕ СРЕДСТВА.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_ОСНОВНЫЕ_СРЕДСТВА(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	// Получение владельцев.
	ВидыХарактеристикДляПолученияВладельцев = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидХарактеристики.ID);
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикДляПолученияВладельцев, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	// Получение значений характеристик в прикладном решении.
	ПараметрыПериода = НовыйПараметрыПериода(ВидХарактеристики.ЧастотаОбновления);
	Результат = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьОсновныеСредства(ВладельцыХарактеристики, ПараметрыПериода, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = 
		ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев.НайтиСтроки(ПараметрыОтбора);
	
	ДопустимыеЗначения = ОСНОВНЫЕ_СРЕДСТВА();
	
	Для Каждого ВладелецХарактеристики Из ВладельцыХарактеристики Цикл
		
		СуммаОсновныеСредства = Результат.Получить(ВладелецХарактеристики);
		Если СуммаОсновныеСредства = Неопределено Тогда
			СуммаОсновныеСредства = 0;
		КонецЕсли;
		
		Сообщение = НСтр("ru = 'Не допустимый тип значения'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(СуммаОсновныеСредства) = Тип("Число"), 
			Сообщение, 
			"РекламныйСервисПереопределяемый.ЗаполнитьОсновныеСредства");
		
		Если СуммаОсновныеСредства >= 150000000 Тогда
			Значение = ДопустимыеЗначения.СВЫШЕ_ПРЕДЕЛА_УСН;
		ИначеЕсли СуммаОсновныеСредства >= 1 Тогда
			Значение = ДопустимыеЗначения.В_ПРЕДЕЛАХ_УСН;
		Иначе
			Значение = ДопустимыеЗначения.НЕТ;
		КонецЕсли;
		
		ДобавитьСтрокиИтоговойТаблицыХарактеристик(
			Значение, 
			СтрокиХарактеристикиРекламы, 
			ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
			ВидХарактеристики, 
			ВладелецХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить СРОК ЖИЗНИ ПРЕДПРИЯТИЯ.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_СРОК_ЖИЗНИ_ПРЕДПРИЯТИЯ(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	// Получение владельцев.
	ВидыХарактеристикДляПолученияВладельцев = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидХарактеристики.ID);
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикДляПолученияВладельцев, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	// Получение значений характеристик в прикладном решении.
	Результат = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ДатаРегистрацииПредприятия(ВладельцыХарактеристики, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = 
		ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев.НайтиСтроки(ПараметрыОтбора);
	
	ДопустимыеЗначения = СРОК_ЖИЗНИ_ПРЕДПРИЯТИЯ();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		ВладелецХарактеристики = СтрокаРезультата.Ключ; // ОпределяемыйТип.ВладелецХарактеристикиРекламы
		
		ДатаРегистрации = СтрокаРезультата.Значение; // Дата
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(ДатаРегистрации) = Тип("Дата"), 
			НСтр("ru = 'Не допустимый тип значения'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			"РекламныйСервисПереопределяемый.ДатаРегистрацииПредприятия");
		
		Если Не ЗначениеЗаполнено(ДатаРегистрации) Тогда
			Продолжить;
		КонецЕсли;
		
		СрокЖизни = КоличествоЛет(ДатаРегистрации);
		Если СрокЖизни < 1 Тогда
			Значение = ДопустимыеЗначения.ДО_1_ГОДА;
		ИначеЕсли СрокЖизни < 3 Тогда
			Значение = ДопустимыеЗначения.ДО_3_ЛЕТ;
		ИначеЕсли СрокЖизни < 10 Тогда 
			Значение = ДопустимыеЗначения.ДО_10_ЛЕТ;
		Иначе
			Значение = ДопустимыеЗначения.СВЫШЕ_10_ЛЕТ;
		КонецЕсли;
		
		ДобавитьСтрокиИтоговойТаблицыХарактеристик(
			Значение, 
			СтрокиХарактеристикиРекламы, 
			ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
			ВидХарактеристики, 
			ВладелецХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить ВОЗРАСТ ИП.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_ВОЗРАСТ_ИП(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	// Получение владельцев.
	ВидыХарактеристикДляПолученияВладельцев = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидХарактеристики.ID);
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикДляПолученияВладельцев, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	// Получение значений характеристик в прикладном решении.
	Результат = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ДатаРожденияИП(ВладельцыХарактеристики, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = 
		ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев.НайтиСтроки(ПараметрыОтбора);
	
	ДопустимыеЗначения = ВОЗРАСТ_ИП();
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		ВладелецХарактеристики = СтрокаРезультата.Ключ; // ОпределяемыйТип.ВладелецХарактеристикиРекламы
		
		ДатаРождения = СтрокаРезультата.Значение; // Дата
		Сообщение = НСтр("ru = 'Не допустимый тип значения'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(ДатаРождения) = Тип("Дата"), 
			Сообщение, 
			"РекламныйСервисПереопределяемый.ДатаРожденияИП");
		
		Если ДатаРождения = Дата(1, 1, 1) Тогда
			Продолжить;
		КонецЕсли;
		
		ВозрастИП = КоличествоЛет(ДатаРождения);
		Если ВозрастИП < 25 Тогда
			Значение = ДопустимыеЗначения.ДО_25_ЛЕТ;
		ИначеЕсли ВозрастИП < 65 Тогда
			Значение = ДопустимыеЗначения.ДО_65_ЛЕТ;
		Иначе
			Значение = ДопустимыеЗначения.СВЫШЕ_65_ЛЕТ;
		КонецЕсли;
		
		ДобавитьСтрокиИтоговойТаблицыХарактеристик(
			Значение, 
			СтрокиХарактеристикиРекламы, 
			ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
			ВидХарактеристики, 
			ВладелецХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить УЧЕТ КОМАНДИРОВОК.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_УЧЕТ_КОМАНДИРОВОК(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	// Получение владельцев.
	ВидыХарактеристикДляПолученияВладельцев = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидХарактеристики.ID);
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикДляПолученияВладельцев, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	// Получение значений характеристик в прикладном решении.
	ПараметрыПериода = НовыйПараметрыПериода(ВидХарактеристики.ЧастотаОбновления);
	Результат = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьУчетКомандировок(ВладельцыХарактеристики, ПараметрыПериода, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = 
		ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев.НайтиСтроки(ПараметрыОтбора);
	
	ДопустимыеЗначения = УЧЕТ_КОМАНДИРОВОК();
	
	Для Каждого ВладелецХарактеристики Из ВладельцыХарактеристики Цикл
		
		КоличествоДокументов = Результат.Получить(ВладелецХарактеристики);
		Если КоличествоДокументов = Неопределено Тогда
			КоличествоДокументов = 0;
		КонецЕсли;
		
		Сообщение = НСтр("ru = 'Не допустимый тип значения'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(КоличествоДокументов) = Тип("Число"), 
			Сообщение, 
			"РекламныйСервисПереопределяемый.ЗаполнитьУчетКомандировок");
		
		Если КоличествоДокументов > 50 Тогда
			Значение = ДопустимыеЗначения.БОЛЕЕ_50;
		ИначеЕсли КоличествоДокументов > 10 Тогда
			Значение = ДопустимыеЗначения.БОЛЕЕ_10;
		ИначеЕсли КоличествоДокументов > 0 Тогда
			Значение = ДопустимыеЗначения.МЕНЕЕ_10;
		Иначе
			Значение = ДопустимыеЗначения.НЕТ;
		КонецЕсли;
		
		ДобавитьСтрокиИтоговойТаблицыХарактеристик(
			Значение, 
			СтрокиХарактеристикиРекламы, 
			ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
			ВидХарактеристики, 
			ВладелецХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить количество кредитных договоров.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_КОЛ_ВО_КРЕДИТНЫХ_ДОГОВОРОВ(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	// Получение владельцев.
	ВидыХарактеристикДляПолученияВладельцев = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидХарактеристики.ID);
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикДляПолученияВладельцев, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	// Получение значений характеристик в прикладном решении.
	ПараметрыПериода = НовыйПараметрыПериода(ВидХарактеристики.ЧастотаОбновления);
	Результат = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьКоличествоКредитныхДоговоров(
		ВладельцыХарактеристики, ПараметрыПериода, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = 
		ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев.НайтиСтроки(ПараметрыОтбора);
	
	ДопустимыеЗначения = КОЛ_ВО_КРЕДИТНЫХ_ДОГОВОРОВ();
	
	Для Каждого ВладелецХарактеристики Из ВладельцыХарактеристики Цикл
		
		КоличествоДоговоров = Результат.Получить(ВладелецХарактеристики);
		Если КоличествоДоговоров = Неопределено Тогда
			КоличествоДоговоров = 0;
		КонецЕсли;
		
		Сообщение = НСтр("ru = 'Не допустимый тип значения'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(КоличествоДоговоров) = Тип("Число"), 
			Сообщение, 
			"РекламныйСервисПереопределяемый.ЗаполнитьКоличествоКредитныхДоговоров");
		
		Если КоличествоДоговоров > 3 Тогда
			Значение = ДопустимыеЗначения.БОЛЕЕ_3;
		ИначеЕсли КоличествоДоговоров >= 1 Тогда
			Значение = ДопустимыеЗначения.ОТ_1_ДО_3;
		Иначе
			Значение = ДопустимыеЗначения.НЕТ;
		КонецЕсли;
		
		ДобавитьСтрокиИтоговойТаблицыХарактеристик(
			Значение, 
			СтрокиХарактеристикиРекламы, 
			ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
			ВидХарактеристики, 
			ВладелецХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить ОКОПФ. Заполняет характеристики ОКОПФ и ОКОПФ_КРОМЕ.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_ОКОПФ(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	ТаблицаХарактеристик = ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик;
	
	// Проверка заполнения текущей характеристики.
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = ТаблицаХарактеристик.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиХарактеристикиРекламы.Количество() > 0 Тогда
		Возврат; // При повторном вызове проверяет заполненность текущей характеристики
	КонецЕсли;
	
	// Получение владельцев всех смежных характеристик.
	ВидыХарактеристикКоды = Новый Массив; // Массив из Строка
	ВидыХарактеристикКоды.Добавить(ПараметрыХарактеристик.ВидыХарактеристик.ОКОПФ.ID);
	ВидыХарактеристикКоды.Добавить(ПараметрыХарактеристик.ВидыХарактеристик.ОКОПФ_КРОМЕ.ID);
	
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикКоды, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	// Получение значений характеристик в прикладном решении.
	Результат = НовыйДанныеВладельцев();
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьОКОПФ(ВладельцыХарактеристики, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОКОПФПродолжение(
		ВладельцыХарактеристики, 
		Результат, 
		ПараметрыХарактеристик, 
		ВидыХарактеристикКоды);
	
КонецПроцедуры

// Заполнить КОД ОКВЭД. Заполняет характеристики КОД_ОКВЭД и КОД_ОКВЭД_КРОМЕ.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//  ЗначениеДолжноБытьНайдено - Булево - условие добавления строки в таблицу характеристик.
//
Процедура Заполнить_КОД_ОКВЭД(ПараметрыХарактеристик, Знач ВидХарактеристики, Знач ЗначениеДолжноБытьНайдено)
	
	ТаблицаХарактеристик = ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик;
	
	// Проверка заполнения текущей характеристики.
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = ТаблицаХарактеристик.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиХарактеристикиРекламы.Количество() > 0 Тогда
		Возврат;// При повторном вызове проверяет заполненность текущей характеристики
	КонецЕсли;
	
	// Получение владельцев всех смежных характеристик.
	ВидыХарактеристикКоды = Новый Массив; // Массив из Строка
	ВидыХарактеристикКоды.Добавить(ПараметрыХарактеристик.ВидыХарактеристик.КОД_ОКВЭД.ID);
	ВидыХарактеристикКоды.Добавить(ПараметрыХарактеристик.ВидыХарактеристик.КОД_ОКВЭД_КРОМЕ.ID);
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикКоды, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	// Получение значений характеристик в прикладном решении.
	Результат = НовыйДанныеВладельцев();
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьКодыОКВЭД(ВладельцыХарактеристики, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗаполнитьКодОКВЭДПродолжение(
		ВладельцыХарактеристики, 
		Результат, 
		ПараметрыХарактеристик, 
		ВидыХарактеристикКоды);
	
КонецПроцедуры

// Заполнить СИСТЕМА НАЛОГООБЛОЖЕНИЯ.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_СИСТЕМА_НАЛОГООБЛОЖЕНИЯ(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	// Получение владельцев.
	ВидыХарактеристикДляПолученияВладельцев = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВидХарактеристики.ID);
	ВладельцыХарактеристики = ЗаполнитьВладельцевХарактеристик(
		ВидыХарактеристикДляПолученияВладельцев, ПараметрыХарактеристик.ТаблицаНовыеХарактеристики);
	
	ДопустимыеЗначения = СИСТЕМА_НАЛОГООБЛОЖЕНИЯ();
	
	// Получение значений характеристик в прикладном решении.
	ПараметрыПериода = НовыйПараметрыПериода(ВидХарактеристики.ЧастотаОбновления);
	Результат = Новый Соответствие;
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьСистемуНалогообложения(
		ВладельцыХарактеристики, ДопустимыеЗначения, ПараметрыПериода, Результат);
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = 
		ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого ВладелецХарактеристики Из ВладельцыХарактеристики Цикл
		
		Значения = Результат.Получить(ВладелецХарактеристики); // Массив Из Строка
		Если Не ЗначениеЗаполнено(Значения) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.Проверить(
			ТипЗнч(Значения) = Тип("Массив"),
			НСтр("ru = 'Не допустимый тип значения'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			"РекламныйСервисПереопределяемый.ЗаполнитьСистемуНалогообложения");
		
		Для Каждого Значение Из Значения Цикл
		
			Если ПустаяСтрока(Значение) Тогда
				Возврат;
			КонецЕсли;
			
			Условие = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДопустимыеЗначения, Значение);
			ПроверитьТипИЗначениеХарактеристики(
				Значение, 
				Условие, 
				"РекламныйСервисПереопределяемый.ЗаполнитьСистемуНалогообложения");
			
			ДобавитьСтрокиИтоговойТаблицыХарактеристик(
				Значение, 
				СтрокиХарактеристикиРекламы, 
				ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
				ВидХарактеристики, 
				ВладелецХарактеристики);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеХарактеристики

// Заполнить ФОРМА ПОСТАВКИ ПП.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_ФОРМА_ПОСТАВКИ_ПП(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Если РазделениеВключено Тогда
		Значение = ФОРМА_ПОСТАВКИ_ПП().ФРЕШ;
	Иначе
		Значение = ФОРМА_ПОСТАВКИ_ПП().КОРОБОЧНЫЙ;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = ПараметрыХарактеристик.ТаблицаНовыеХарактеристики.НайтиСтроки(ПараметрыОтбора);
	
	ВладелецХарактеристики = РекламныйСервисСлужебный.ПустойВладелецХарактеристики();
	
	ДобавитьСтрокиИтоговойТаблицыХарактеристик(
		Значение, 
		СтрокиХарактеристикиРекламы, 
		ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
		ВидХарактеристики, 
		ВладелецХарактеристики);
	
КонецПроцедуры

// Заполнить ВЕРСИЯ ПП.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_ВЕРСИЯ_ПП(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	// Получение значений характеристик в прикладном решении.
	ДопустимыеЗначения = ВЕРСИЯ_ПП();
	Значение = "";
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьВерсиюПП(ДопустимыеЗначения, Значение);
	УстановитьПривилегированныйРежим(Ложь);
	
	Условие = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДопустимыеЗначения, Значение);
	ПроверитьТипИЗначениеХарактеристики(
		Значение, 
		Условие, 
		"РекламныйСервисПереопределяемый.ЗаполнитьВерсиюПП");
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = ПараметрыХарактеристик.ТаблицаНовыеХарактеристики.НайтиСтроки(ПараметрыОтбора);
	
	ВладелецХарактеристики = РекламныйСервисСлужебный.ПустойВладелецХарактеристики();
	
	ДобавитьСтрокиИтоговойТаблицыХарактеристик(
		Значение, 
		СтрокиХарактеристикиРекламы, 
		ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
		ВидХарактеристики, 
		ВладелецХарактеристики);
	
КонецПроцедуры

// Заполнить СЕРВИСЫ ИТС.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - ОпределяемыйТип.ВидХарактеристикиРекламы
//
Процедура Заполнить_СЕРВИСЫ_ИТС(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	ТаблицаХарактеристик = ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик;
	
	// Проверка заполненности текущей характеристики.
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики);
	СтрокиХарактеристикиРекламы = ТаблицаХарактеристик.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиХарактеристикиРекламы.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНовыеХарактеристики = ПараметрыХарактеристик.ТаблицаНовыеХарактеристики;
	
	ВидыХарактеристик = ПараметрыХарактеристик.ВидыХарактеристик;
	ВсеОпцииИТСВТаргетах = ОпцииСервисовИТС(ТаблицаНовыеХарактеристики, ВидыХарактеристик);
	ОпцииИТСВТаргетахСтрокой = СтрСоединить(ВсеОпцииИТСВТаргетах, ",");
	
	ПараметрыХарактеристик.СтатусыОпцийИТС = 
		РекламныйСервисСлужебныйПовтИсп.СтатусыОпцийИТС(ОпцииИТСВТаргетахСтрокой);
	
	Если ВидХарактеристики = ВидыХарактеристик.СЕРВИС_АКТИВЕН.ID Тогда
		
		Заполнить_СЕРВИС_АКТИВЕН(ПараметрыХарактеристик, ВидыХарактеристик.СЕРВИС_АКТИВЕН);
	
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.СЕРВИС_НЕ_АКТИВЕН.ID Тогда
		
		Заполнить_СЕРВИС_НЕ_АКТИВЕН(ПараметрыХарактеристик, ВидыХарактеристик.СЕРВИС_НЕ_АКТИВЕН);
		
	ИначеЕсли ВидХарактеристики = ВидыХарактеристик.СЕРВИС_БЫЛ_АКТИВЕН.ID Тогда
		
		Заполнить_СЕРВИС_БЫЛ_АКТИВЕН(ПараметрыХарактеристик, ВидыХарактеристик.СЕРВИС_БЫЛ_АКТИВЕН);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнить СЕРВИС АКТИВЕН.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_СЕРВИС_АКТИВЕН(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = ПараметрыХарактеристик.ТаблицаНовыеХарактеристики.НайтиСтроки(ПараметрыОтбора);
	
	СтатусыОпцийИТС = ПараметрыХарактеристик.СтатусыОпцийИТС;
	ДатаСравнения = ТекущаяДатаСеанса();
	
	Для Каждого СтрокаОпций Из СтатусыОпцийИТС Цикл
		
		Если СтрокаОпций.ДатаНачалаОпции < ДатаСравнения 
			И СтрокаОпций.ДатаОкончанияОпции > ДатаСравнения Тогда
			
			Для Каждого СтрокаХарактеристикиРекламы Из СтрокиХарактеристикиРекламы Цикл
				
				ЗначениеХарактеристики = СтрокаХарактеристикиРекламы.Значение;
				Если Не ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
					Продолжить;
				КонецЕсли;
				ВладелецХарактеристики = СтрокаХарактеристикиРекламы.ВладелецХарактеристики;
				
				МассивЗначений = СтрРазделить(ЗначениеХарактеристики, ",");
				Если МассивЗначений.Найти(СтрокаОпций.ИмяОпции) <> Неопределено Тогда
					
					ДобавитьСтрокуТаблицы(
						ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
						ВладелецХарактеристики, 
						ВидХарактеристики, 
						ЗначениеХарактеристики, 
						СтрокаОпций.ИмяОпции);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить СЕРВИС НЕ АКТИВЕН.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_СЕРВИС_НЕ_АКТИВЕН(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = ПараметрыХарактеристик.ТаблицаНовыеХарактеристики.НайтиСтроки(ПараметрыОтбора);
	
	СтатусыОпцийИТС = ПараметрыХарактеристик.СтатусыОпцийИТС;
	Если СтатусыОпцийИТС.Количество() = 0 Тогда
		
		Для Каждого СтрокаХарактеристикиРекламы Из СтрокиХарактеристикиРекламы Цикл
			
			ЗначениеХарактеристики = СтрокаХарактеристикиРекламы.Значение;
			Если Не ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
				Продолжить;
			КонецЕсли;
			ВладелецХарактеристики = СтрокаХарактеристикиРекламы.ВладелецХарактеристики;
			
			ДобавитьСтрокуТаблицы(
				ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
				ВладелецХарактеристики, 
				ВидХарактеристики, 
				ЗначениеХарактеристики, 
				ЗначениеХарактеристики);
			
		КонецЦикла;
		
		Возврат;
		
	Иначе
		
		// Оставим опции ИТС которые активны.
		ДатаСравнения = ТекущаяДатаСеанса();
		ТекущиеСтатусыОпцийИТС = СтатусыОпцийИТС.Скопировать();
		ТекущиеСтатусыОпцийИТС.Очистить();
		Для Каждого СтрокаОпцииИТС Из СтатусыОпцийИТС Цикл
			
			Если СтрокаОпцииИТС.ДатаНачалаОпции < ДатаСравнения 
				И СтрокаОпцииИТС.ДатаОкончанияОпции > ДатаСравнения Тогда
				
				НоваяСтрокаОпцииИТС = ТекущиеСтатусыОпцийИТС.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОпцииИТС, СтрокаОпцииИТС);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаХарактеристикиРекламы Из СтрокиХарактеристикиРекламы Цикл
		
		ЗначениеХарактеристики = СтрокаХарактеристикиРекламы.Значение;
		Если Не ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
			Продолжить;
		КонецЕсли;
		ВладелецХарактеристики = СтрокаХарактеристикиРекламы.ВладелецХарактеристики;
		
		ДобавитьСтроку = Ложь;
		ТекущееЗначениеХарактеристики = "";
		
		СписокОпцийТаргета = СтрРазделить(ЗначениеХарактеристики, ",");
		Для Каждого ИмяОпции Из СписокОпцийТаргета Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИмяОпции", ИмяОпции);
			СтрокиОпцииИТС = ТекущиеСтатусыОпцийИТС.НайтиСтроки(ПараметрыОтбора);
			
			Если СтрокиОпцииИТС.Количество() = 0 Тогда
				
				ДобавитьСтроку = Истина;
				
				ТекущееЗначениеХарактеристики = СтрШаблон("%1%2%3", 
					ТекущееЗначениеХарактеристики, 
					?(ПустаяСтрока(ТекущееЗначениеХарактеристики), "", ","), 
					ИмяОпции);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДобавитьСтроку Тогда
			
			ДобавитьСтрокуТаблицы(
				ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
				ВладелецХарактеристики, 
				ВидХарактеристики, 
				ЗначениеХарактеристики, 
				ТекущееЗначениеХарактеристики);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить СЕРВИС БЫЛ АКТИВЕН.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_СЕРВИС_БЫЛ_АКТИВЕН(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = ПараметрыХарактеристик.ТаблицаНовыеХарактеристики.НайтиСтроки(ПараметрыОтбора);
	
	СтатусыОпцийИТС = ПараметрыХарактеристик.СтатусыОпцийИТС;
	
	// Оставим опции ИТС которые были активны в прошлом.
	ДатаСравнения = ТекущаяДатаСеанса();
	ТекущиеСтатусыОпцийИТС = СтатусыОпцийИТС.Скопировать();
	ТекущиеСтатусыОпцийИТС.Очистить();
	Для Каждого СтрокаОпцииИТС Из СтатусыОпцийИТС Цикл
		
		Если СтрокаОпцииИТС.ДатаОкончанияОпции < ДатаСравнения Тогда
			
			НоваяСтрокаОпцииИТС = ТекущиеСтатусыОпцийИТС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОпцииИТС, СтрокаОпцииИТС);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаХарактеристикиРекламы Из СтрокиХарактеристикиРекламы Цикл
		
		ЗначениеХарактеристики = СтрокаХарактеристикиРекламы.Значение;
		Если Не ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
			Продолжить;
		КонецЕсли;
		ВладелецХарактеристики = СтрокаХарактеристикиРекламы.ВладелецХарактеристики;
		
		СписокОпцийТаргета = СтрРазделить(ЗначениеХарактеристики, ",");
		Для Каждого ИмяОпции Из СписокОпцийТаргета Цикл
			
			СтрокаОпцииИТС = ТекущиеСтатусыОпцийИТС.Найти(ИмяОпции, "ИмяОпции");
			Если СтрокаОпцииИТС <> Неопределено Тогда
				
				ДобавитьСтрокуТаблицы(
					ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
					ВладелецХарактеристики, 
					ВидХарактеристики, 
					ЗначениеХарактеристики, 
					ИмяОпции);
				
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить ГРУППА КОНФИГУРАЦИЙ.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//
Процедура Заполнить_ГРУППА_КОНФИГУРАЦИЙ(ПараметрыХарактеристик, Знач ВидХарактеристики)
	
	// Получение значений характеристик в прикладном решении.
	ДопустимыеЗначения = ГРУППА_КОНФИГУРАЦИЙ();
	Значение = "";
	
	УстановитьПривилегированныйРежим(Истина);
	РекламныйСервисПереопределяемый.ЗаполнитьГруппаКонфигураций(ДопустимыеЗначения, Значение);
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипЗнч(Значение) = Тип("Строка"),
		НСтр("ru = 'Не допустимый тип значения'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		"РекламныйСервисПереопределяемый.ЗаполнитьГруппаКонфигураций");
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Условие = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДопустимыеЗначения, Значение);
	ПроверитьТипИЗначениеХарактеристики(
		Значение, 
		Условие, 
		"РекламныйСервисПереопределяемый.ЗаполнитьГруппаКонфигураций");
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВидХарактеристики", ВидХарактеристики.ID);
	СтрокиХарактеристикиРекламы = ПараметрыХарактеристик.ТаблицаНовыеХарактеристики.НайтиСтроки(ПараметрыОтбора);
	
	ВладелецХарактеристики = РекламныйСервисСлужебный.ПустойВладелецХарактеристики();
	
	ДобавитьСтрокиИтоговойТаблицыХарактеристик(
		Значение, 
		СтрокиХарактеристикиРекламы, 
		ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
		ВидХарактеристики, 
		ВладелецХарактеристики);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ХарактеристикиПрочее

// Заполнить период прошлого года.
// 
// Параметры:
//  Параметры - см. НовыйПараметрыПериода
//
Процедура ЗаполнитьПериодПоследнихДвенадцатиМесяцев(Параметры)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Параметры.КонецПериода = НачалоМесяца(ТекущаяДата) - 1;
	Параметры.НачалоПериода = ДобавитьМесяц(НачалоМесяца(Параметры.КонецПериода), - 11);
	
КонецПроцедуры

// Заполнить период предыдущего месяца.
// 
// Параметры:
//  Параметры - см. НовыйПараметрыПериода
//
Процедура ЗаполнитьПериодПредыдущегоМесяца(Параметры)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	Параметры.КонецПериода = НачалоМесяца(ТекущаяДата) - 1;
	Параметры.НачалоПериода = НачалоМесяца(Параметры.КонецПериода);
	
КонецПроцедуры

// Заполнить регионы показа.
// 
// Параметры:
//  ВладельцыХарактеристики - Массив из ОпределяемыйТип.ВладелецХарактеристикиРекламы
//  ДанныеВладельцев - см. НовыйДанныеВладельцев
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидыХарактеристикКоды - Массив из Строка
//
Процедура ЗаполнитьРегионыПоказа(ВладельцыХарактеристики, ДанныеВладельцев, ПараметрыХарактеристик, 
		ВидыХарактеристикКоды)
	
	СтрокиХарактеристикиРекламы = Новый Массив; // Массив из СтрокаТаблицыЗначений - см. НовыйТаблицаХарактеристик
	Для Каждого СтрокаТаблицы Из ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев Цикл
		
		Если ВидыХарактеристикКоды.Найти(СтрокаТаблицы.ВидХарактеристики) <> Неопределено Тогда
			СтрокиХарактеристикиРекламы.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ВладелецХарактеристики Из ВладельцыХарактеристики Цикл
		
		Регионы = ДанныеВладельцев.Получить(ВладелецХарактеристики); // Массив из ОпределяемыйТип.ЗначениеХарактеристикиРекламы
		
		Если Регионы = Неопределено Тогда
			
			ДобавитьСтрокиИтоговойТаблицыХарактеристикКроме(
				СтрокиХарактеристикиРекламы, 
				ПараметрыХарактеристик, 
				ВладелецХарактеристики, 
				ПараметрыХарактеристик.ВидыХарактеристик.РЕГИОНЫ_ПОКАЗА_КРОМЕ);
			
			Продолжить;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Регионы, "");
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Регионы, Неопределено);
			Если Регионы.Количество() = 0 Тогда
				
				ДобавитьСтрокиИтоговойТаблицыХарактеристикКроме(
					СтрокиХарактеристикиРекламы, 
					ПараметрыХарактеристик, 
					ВладелецХарактеристики, 
					ПараметрыХарактеристик.ВидыХарактеристик.РЕГИОНЫ_ПОКАЗА_КРОМЕ);
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
	
		Для Каждого СтрокаХарактеристикиРекламы Из СтрокиХарактеристикиРекламы Цикл
			
			ЗначениеХарактеристики = СтрокаХарактеристикиРекламы.Значение; // Строка
			Если Не ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидХарактеристикиКод = СтрокаХарактеристикиРекламы.ВидХарактеристики; // Строка
			ВидХарактеристики = ПараметрыХарактеристик.ВидыХарактеристик[ВидХарактеристикиКод]; // см. НовыйРеквизитыХарактеристики
			
			МассивЗначенийРекламы = СтрРазделить(ЗначениеХарактеристики, ",");
			
			ЗначениеНайдено = Ложь;
			Для Каждого Регион Из Регионы Цикл
				
				Если МассивЗначенийРекламы.Найти(Регион) <> Неопределено Тогда
					
					ЗначениеНайдено = Истина;
					
					Если ВидХарактеристикиКод = ПараметрыХарактеристик.ВидыХарактеристик.РЕГИОНЫ_ПОКАЗА.ID Тогда
						
						ДобавитьСтрокуТаблицы(
							ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
							ВладелецХарактеристики, 
							ВидХарактеристики, 
							ЗначениеХарактеристики, 
							Регион);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ВидХарактеристикиКод = ПараметрыХарактеристик.ВидыХарактеристик.РЕГИОНЫ_ПОКАЗА_КРОМЕ.ID 
				И Не ЗначениеНайдено Тогда
				
				ДобавитьСтрокуТаблицы(
					ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
					ВладелецХарактеристики, 
					ВидХарактеристики, 
					ЗначениеХарактеристики, 
					ЗначениеХарактеристики);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить владельцев характеристик.
// 
// Параметры:
//  ВидыХарактеристик - Массив из ОпределяемыйТип.ВидХарактеристикиРекламы -  Виды характеристик
//  ТаблицаНовыеХарактеристики - см. НовыйТаблицаХарактеристик
// 
// Возвращаемое значение:
//  Массив Из ОпределяемыйТип.ВладелецХарактеристикиРекламы
//
Функция ЗаполнитьВладельцевХарактеристик(ВидыХарактеристик, ТаблицаНовыеХарактеристики)
	
	ВладельцыХарактеристики = Новый Массив; // Массив Из ОпределяемыйТип.ВладелецХарактеристикиРекламы
	
	Для Каждого СтрокаТаблицы Из ТаблицаНовыеХарактеристики Цикл
		
		Если ВидыХарактеристик.Найти(СтрокаТаблицы.ВидХарактеристики) <> Неопределено 
			И ЗначениеЗаполнено(СтрокаТаблицы.ВладелецХарактеристики) 
			И ВладельцыХарактеристики.Найти(СтрокаТаблицы.ВладелецХарактеристики) = Неопределено Тогда
			
			ВладельцыХарактеристики.Добавить(СтрокаТаблицы.ВладелецХарактеристики);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВладельцыХарактеристики;
	
КонецФункции

// Заполнить ОКОПФ.
// Значения ОКОПФ могут быть такими: "14155", "14000"
// Таргеты могут иметь такие значения ОКОПФ "14" и сопоставлять с имеющимся значением в организации "14155"
// Если у организации указан ОКОПФ "14155" а в таргете "14" - нам такой таргет подходит.
// 
// Параметры:
//  ВладельцыХарактеристики - Массив из ОпределяемыйТип.ВладелецХарактеристикиРекламы
//  ДанныеВладельцев - см. НовыйДанныеВладельцев
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидыХарактеристикКоды - Массив из Строка
//
Процедура ЗаполнитьОКОПФПродолжение(ВладельцыХарактеристики, ДанныеВладельцев, ПараметрыХарактеристик, ВидыХарактеристикКоды)
	
	СтрокиХарактеристикиРекламы = Новый Массив; // Массив из СтрокаТаблицыЗначений - см. НовыйТаблицаХарактеристик
	Для Каждого СтрокаТаблицы Из ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев Цикл
		
		Если ВидыХарактеристикКоды.Найти(СтрокаТаблицы.ВидХарактеристики) <> Неопределено Тогда
			СтрокиХарактеристикиРекламы.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ВладелецХарактеристики Из ВладельцыХарактеристики Цикл
		
		ЗначениеРезультата = ДанныеВладельцев.Получить(ВладелецХарактеристики); // Строка
		
		Если Не ЗначениеЗаполнено(ЗначениеРезультата) Тогда
			
			ДобавитьСтрокиИтоговойТаблицыХарактеристикКроме(
				СтрокиХарактеристикиРекламы, 
				ПараметрыХарактеристик, 
				ВладелецХарактеристики, 
				ПараметрыХарактеристик.ВидыХарактеристик.ОКОПФ_КРОМЕ);
			
			Продолжить;
			
		КонецЕсли;
		
		ДлинаЗначения = 5;
		Условие = СтрДлина(ЗначениеРезультата) = ДлинаЗначения;
		ПроверитьТипИЗначениеХарактеристики(
			ЗначениеРезультата, 
			Условие, 
			"РекламныйСервисПереопределяемый.ЗаполнитьОКОПФ");
		
		Для Каждого СтрокаХарактеристикиРекламы Из СтрокиХарактеристикиРекламы Цикл
			
			ЗначениеХарактеристики = СтрокаХарактеристикиРекламы.Значение; // Строка
			Если Не ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидХарактеристикиКод = СтрокаХарактеристикиРекламы.ВидХарактеристики; // Строка
			ВидХарактеристики = ПараметрыХарактеристик.ВидыХарактеристик[ВидХарактеристикиКод]; // см. НовыйРеквизитыХарактеристики
			
			МассивЗначений = СтрРазделить(ЗначениеХарактеристики, ",");
			
			ЗначениеНайдено = Ложь;
			Для Каждого СтрокаЗначения Из МассивЗначений Цикл
				
				Если СтрНачинаетсяС(ЗначениеРезультата, СтрокаЗначения) Тогда
					ЗначениеНайдено = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			ДобавитьОКОПФ = 
				ВидХарактеристикиКод = ПараметрыХарактеристик.ВидыХарактеристик.ОКОПФ.ID 
				И ЗначениеНайдено;
			
			ДобавитьОКВЭДКроме = 
				ВидХарактеристикиКод = ПараметрыХарактеристик.ВидыХарактеристик.ОКОПФ_КРОМЕ.ID 
				И Не ЗначениеНайдено;
			
			Если ДобавитьОКОПФ Тогда
				
				ДобавитьСтрокуТаблицы(
					ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
					ВладелецХарактеристики, 
					ВидХарактеристики, 
					ЗначениеХарактеристики, 
					ЗначениеРезультата);
				
			КонецЕсли;
			
			Если ДобавитьОКВЭДКроме Тогда
				
				ДобавитьСтрокуТаблицы(
					ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
					ВладелецХарактеристики, 
					ВидХарактеристики, 
					ЗначениеХарактеристики, 
					ЗначениеХарактеристики);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить ОКВЭД.
// Значения ОКВЭД могут быть такими: "51", "51.10", "51.10.3"
// Таргеты могут иметь такие значения ОКВЭД "51" и сопоставлять с имеющимся значением в организации "51.10.3".
// Если у организации указан ОКВЭД "51.10.3" а в таргете указано "51" - нам такой таргет подходит.
// 
// Параметры:
//  ВладельцыХарактеристики - Массив из ОпределяемыйТип.ВладелецХарактеристикиРекламы
//  ДанныеВладельцев - см. НовыйДанныеВладельцев
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВидыХарактеристикКоды - Массив из Строка
//
Процедура ЗаполнитьКодОКВЭДПродолжение(ВладельцыХарактеристики, ДанныеВладельцев, ПараметрыХарактеристик, ВидыХарактеристикКоды)
	
	СтрокиХарактеристикиРекламы = Новый Массив; // Массив из СтрокаТаблицыЗначений: См. НовыйТаблицаХарактеристик
	Для Каждого СтрокаТаблицы Из ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев Цикл
		
		Если ВидыХарактеристикКоды.Найти(СтрокаТаблицы.ВидХарактеристики) <> Неопределено Тогда
			СтрокиХарактеристикиРекламы.Добавить(СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ВладелецХарактеристики Из ВладельцыХарактеристики Цикл
		
		ЗначениеРезультата = ДанныеВладельцев.Получить(ВладелецХарактеристики); // Строка
		
		Если Не ЗначениеЗаполнено(ЗначениеРезультата) Тогда
			
			ДобавитьСтрокиИтоговойТаблицыХарактеристикКроме(
				СтрокиХарактеристикиРекламы, 
				ПараметрыХарактеристик, 
				ВладелецХарактеристики, 
				ПараметрыХарактеристик.ВидыХарактеристик.КОД_ОКВЭД_КРОМЕ);
			
			Продолжить;
			
		КонецЕсли;
		
		ДлинаЗначения = 9;
		Условие = СтрДлина(ЗначениеРезультата) <= ДлинаЗначения;
		ПроверитьТипИЗначениеХарактеристики(
			ЗначениеРезультата, 
			Условие, 
			"РекламныйСервисПереопределяемый.ЗаполнитьКодыОКВЭД");
		
		Для Каждого СтрокаХарактеристикиРекламы Из СтрокиХарактеристикиРекламы Цикл
			
			ЗначениеХарактеристики = СтрокаХарактеристикиРекламы.Значение; // Строка
			Если Не ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидХарактеристикиКод = СтрокаХарактеристикиРекламы.ВидХарактеристики; // Строка
			ВидХарактеристики = ПараметрыХарактеристик.ВидыХарактеристик[ВидХарактеристикиКод]; // см. НовыйРеквизитыХарактеристики
			
			МассивЗначений = СтрРазделить(ЗначениеХарактеристики, ",");
			
			ЗначениеНайдено = Ложь;
			Для Каждого СтрокаЗначения Из МассивЗначений Цикл
				
				Если СтрДлина(ЗначениеРезультата) > СтрДлина(СтрокаЗначения) И Не ПустаяСтрока(СтрокаЗначения) Тогда
					Если СтрНачинаетсяС(ЗначениеРезультата, СтрокаЗначения) Тогда
						ЗначениеНайдено = Истина;
						Прервать;
					КонецЕсли;
					
				ИначеЕсли СтрДлина(ЗначениеРезультата) < СтрДлина(СтрокаЗначения) 
					И Не ПустаяСтрока(ЗначениеРезультата) Тогда
					
					Если СтрНачинаетсяС(СтрокаЗначения, ЗначениеРезультата) Тогда
						ЗначениеНайдено = Истина;
						Прервать;
					КонецЕсли;
					
				ИначеЕсли СтрДлина(ЗначениеРезультата) = СтрДлина(СтрокаЗначения) 
					И ЗначениеРезультата = СтрокаЗначения Тогда
					
					ЗначениеНайдено = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДобавитьОКВЭД = 
				ВидХарактеристикиКод = ПараметрыХарактеристик.ВидыХарактеристик.КОД_ОКВЭД.ID 
				И ЗначениеНайдено;
			
			ДобавитьОКВЭДКроме = 
				ВидХарактеристикиКод = ПараметрыХарактеристик.ВидыХарактеристик.КОД_ОКВЭД_КРОМЕ.ID 
				И Не ЗначениеНайдено;
			
			Если ДобавитьОКВЭД Тогда
				
				ДобавитьСтрокуТаблицы(
					ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
					ВладелецХарактеристики, 
					ВидХарактеристики, 
					ЗначениеХарактеристики, 
					ЗначениеРезультата);
				
			КонецЕсли;
			
			Если ДобавитьОКВЭДКроме Тогда
				
				ДобавитьСтрокуТаблицы(
					ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик, 
					ВладелецХарактеристики, 
					ВидХарактеристики, 
					ЗначениеХарактеристики, 
					ЗначениеХарактеристики);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить таблицу видами характеристик.
// 
// Параметры:
//  ПараметрыХарактеристик см. НовыйПараметрыХарактеристик
//
Процедура ЗаполнитьТаблицуВидамиХарактеристик(ПараметрыХарактеристик)
	
	Таблица = ПараметрыХарактеристик.ТаблицаХарактеристикВсе;
	ВидыХарактеристик = ПараметрыХарактеристик.ВидыХарактеристик;
	
	Для Каждого ВидХарактеристики Из ВидыХарактеристик Цикл
		
		СвойстваХарактеристики = ВидХарактеристики.Значение; // см. НовыйРеквизитыХарактеристики
		ИдентификаторХарактеристики = РекламныйСервисСлужебный.ПривестиТипКВидХарактеристики(СвойстваХарактеристики.ID); // ОпределяемыйТип.ВидХарактеристикиРекламы
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторХарактеристики", ИдентификаторХарактеристики);
		Если ПараметрыХарактеристик.ТаблицаХарактеристикРекламы.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВладельцыХарактеристики = Новый Массив; // Массив из ОпределяемыйТип.ВладелецХарактеристикиРекламы
		Если ПустаяСтрока(СвойстваХарактеристики.МетодПолученияВладельцев) Тогда
			
			ВладельцыХарактеристики.Добавить(РекламныйСервисСлужебный.ПустойВладелецХарактеристики());
			
		Иначе
			
			Параметры = Новый Массив(); // Массив из Произвольный, Массив
			Параметры.Добавить(ВладельцыХарактеристики);
			
			// см. РекламныйСервисСлужебный.МетодыПолученияВладельцевХарактеристик
			// * РекламныйСервисСлужебный.СписокРазрешенныхОрганизаций
			// * РекламныйСервисСлужебный.РекламныйСервисСлужебный.ТекущийПрофильПотребителяСписком
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(СвойстваХарактеристики.МетодПолученияВладельцев, Параметры);
			
		КонецЕсли;
		
		Для Каждого Владелец Из ВладельцыХарактеристики Цикл
		
			СтрокаХарактеристик = Таблица.Добавить();
			СтрокаХарактеристик.ВладелецХарактеристики = Владелец;
			СтрокаХарактеристик.ВидХарактеристики = ИдентификаторХарактеристики;
			СтрокаХарактеристик.ЧастотаОбновления = СвойстваХарактеристики.ЧастотаОбновления;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Удалить не актуальные характеристики.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//
Процедура УдалитьНеАктуальныеХарактеристики(ПараметрыХарактеристик)
	
	РезультатЗапроса = ВыборкаНеАктуальныхХарактеристик(ПараметрыХарактеристик);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Блокировка = Новый БлокировкаДанных;
		ИмяПространстваБлокировок = "РегистрСведений.ЗначенияХарактеристикПотребителяРекламы";
		ЭлементБлокировки = Блокировка.Добавить(ИмяПространстваБлокировок);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВладелецХарактеристики", "ВладелецХарактеристики");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		Блокировка.Заблокировать();
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВладелецХарактеристики = Выборка.ВладелецХарактеристики; // ОпределяемыйТип.ВладелецХарактеристикиРекламы
			ВидХарактеристики = Выборка.Характеристика; // ОпределяемыйТип.ЗначениеХарактеристикиРекламы
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВладелецХарактеристики.Установить(ВладелецХарактеристики);
			НаборЗаписей.Отбор.Характеристика.Установить(ВидХарактеристики);
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Заполнить новые виды характеристик.
// 
// Параметры:
//  ПараметрыХарактеристик - Структура - см. НовыйПараметрыХарактеристик
//  ТаблицаХарактеристикРекламы - см. Справочники.Реклама.НовыйТаблицаТаргетыРекламыИзДанныхСервиса
//
Процедура ЗаполнитьНовыеВидыХарактеристик(ПараметрыХарактеристик)
	
	ВыборкаГруппировка = ВыборкаНовыеВидыХарактеристик(ПараметрыХарактеристик);
	
	Пока ВыборкаГруппировка.Следующий() Цикл
		
		ВидХарактеристики = ВыборкаГруппировка.ВидХарактеристики;
		ЗаполнитьВидХарактеристики(ПараметрыХарактеристик, СокрЛП(ВидХарактеристики));
		
	КонецЦикла;
	
КонецПроцедуры

// Опции сервисов ИТС.
// 
// Параметры:
//  ТаблицаНовыеХарактеристики - см. НовыйТаблицаХарактеристик
//  ВидыХарактеристик - см. ВидыХарактеристик
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ЗначениеХарактеристикиРекламы - список опций.
//
Функция ОпцииСервисовИТС(ТаблицаНовыеХарактеристики, ВидыХарактеристик)
	
	ВсеОпцииИТСВТаргетах = Новый Массив; // Массив из ОпределяемыйТип.ЗначениеХарактеристикиРекламы
	
	Для Каждого СтрокаСервиса Из ТаблицаНовыеХарактеристики Цикл
		
		Если СтрокаСервиса.ВидХарактеристики = ВидыХарактеристик.СЕРВИС_АКТИВЕН.ID 
			Или СтрокаСервиса.ВидХарактеристики = ВидыХарактеристик.СЕРВИС_НЕ_АКТИВЕН.ID 
			Или СтрокаСервиса.ВидХарактеристики = ВидыХарактеристик.СЕРВИС_БЫЛ_АКТИВЕН.ID Тогда
			
			ЗначениеХарактеристики = СтрокаСервиса.Значение;
			ВсеОпцииИТСВТаргетах.Добавить(ЗначениеХарактеристики);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВсеОпцииИТСВТаргетах;
	
КонецФункции

// Добавить строки итоговой таблицы характеристик кроме.
// 
// Параметры:
//  СтрокиХарактеристикиРекламы - Массив из СтрокаТаблицыЗначений: См. НовыйТаблицаХарактеристик
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
//  ВладелецХарактеристики - ОпределяемыйТип.ВладелецХарактеристикиРекламы
//  ВидХарактеристики - См. НовыйРеквизитыХарактеристики
//
Процедура ДобавитьСтрокиИтоговойТаблицыХарактеристикКроме(СтрокиХарактеристикиРекламы, 
		ПараметрыХарактеристик, ВладелецХарактеристики, ВидХарактеристики)
	
	ИтоговаяТаблицаХарактеристик = ПараметрыХарактеристик.ИтоговаяТаблицаХарактеристик;
	
	Для Каждого СтрокаХарактеристикиРекламы Из СтрокиХарактеристикиРекламы Цикл
		
		Если ВидХарактеристики.ID <> СтрокаХарактеристикиРекламы.ВидХарактеристики Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеХарактеристикиРекламы = СтрокаХарактеристикиРекламы.Значение; // ОпределяемыйТип.ЗначениеХарактеристикиРекламы
		Если Не ЗначениеЗаполнено(ЗначениеХарактеристикиРекламы) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьСтрокуТаблицы(
			ИтоговаяТаблицаХарактеристик, 
			ВладелецХарактеристики, 
			ВидХарактеристики, 
			ЗначениеХарактеристикиРекламы, 
			ЗначениеХарактеристикиРекламы);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавить строки итоговой таблицы характеристик.
// 
// Параметры:
//  Значение - ОпределяемыйТип.ЗначениеХарактеристикиРекламы
//  СтрокиХарактеристикиРекламы - Массив из СтрокаТаблицыЗначений - см. НовыйТаблицаХарактеристик
//  ИтоговаяТаблицаХарактеристик - см. НовыйИтоговаяТаблицаХарактеристик
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//  ВладелецХарактеристики - ОпределяемыйТип.ВладелецХарактеристикиРекламы
//
Процедура ДобавитьСтрокиИтоговойТаблицыХарактеристик(Значение, СтрокиХарактеристикиРекламы, 
		ИтоговаяТаблицаХарактеристик, ВидХарактеристики, ВладелецХарактеристики)
	
	Для Каждого СтрокаХарактеристикиРекламы Из СтрокиХарактеристикиРекламы Цикл
		
		ЗначениеХарактеристики = СтрокаХарактеристикиРекламы.Значение;
		Если Не ЗначениеЗаполнено(ЗначениеХарактеристики) Тогда
			Продолжить;
		КонецЕсли;
		МассивЗначений = СтрРазделить(ЗначениеХарактеристики, ",");
		
		Если МассивЗначений.Найти(Значение) <> Неопределено Тогда
			
			ДобавитьСтрокуТаблицы(
				ИтоговаяТаблицаХарактеристик, 
				ВладелецХарактеристики, 
				ВидХарактеристики, 
				ЗначениеХарактеристики, 
				Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

// Новый таблица характеристик.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * ВладелецХарактеристики - ОпределяемыйТип.ВладелецХарактеристикиРекламы
// * ВидХарактеристики - ОпределяемыйТип.ВидХарактеристикиРекламы - идентификатор характеристики.
// * Значение - ОпределяемыйТип.ЗначениеХарактеристикиРекламы, Произвольный - значение характеристики.
// * ЧастотаОбновления - Строка
//
Функция НовыйТаблицаХарактеристик()
	
	Типы = РекламныйСервисСлужебный.Типы();
	
	ТаблицаХарактеристик = Новый ТаблицаЗначений;
	ТаблицаХарактеристик.Колонки.Добавить(
		"ВладелецХарактеристики", Метаданные.ОпределяемыеТипы.ВладелецХарактеристикиРекламы.Тип);
	ТаблицаХарактеристик.Колонки.Добавить(
		"ВидХарактеристики", Метаданные.ОпределяемыеТипы.ВидХарактеристикиРекламы.Тип);
	ТаблицаХарактеристик.Колонки.Добавить(
		"Значение", Метаданные.ОпределяемыеТипы.ЗначениеХарактеристикиРекламы.Тип);
	ТаблицаХарактеристик.Колонки.Добавить(
		"ЧастотаОбновления", Типы.Строка100);
	
	Возврат ТаблицаХарактеристик;
	
КонецФункции

// Новый таблица характеристик.
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * ВладелецХарактеристики - ОпределяемыйТип.ВладелецХарактеристикиРекламы
// * ВидХарактеристики - ОпределяемыйТип.ВидХарактеристикиРекламы - идентификатор характеристики.
// * Значение - ОпределяемыйТип.ЗначениеХарактеристикиРекламы, Произвольный - значение характеристики.
// * ТекущееЗначениеХарактеристики - ОпределяемыйТип.ЗначениеХарактеристикиРекламы, Произвольный - текущее значение характеристики.
// * ЧастотаОбновления - Строка
//
Функция НовыйИтоговаяТаблицаХарактеристик()
	
	ТаблицаХарактеристик = НовыйТаблицаХарактеристик();
	ТаблицаХарактеристик.Колонки.Добавить(
		"ТекущееЗначениеХарактеристики", Метаданные.ОпределяемыеТипы.ЗначениеХарактеристикиРекламы.Тип);
	
	Возврат ТаблицаХарактеристик;
	
КонецФункции

// Новый характеристики без владельцев.
// 
// Возвращаемое значение:
//  ТаблицаЗначений -  Новый характеристики без владельцев:
// * ВидХарактеристики - ОпределяемыйТип.ВидХарактеристикиРекламы - идентификатор характеристики.
// * Значение - ОпределяемыйТип.ЗначениеХарактеристикиРекламы, Произвольный - значение характеристики.
//
Функция НовыйХарактеристикиБезВладельцев()
	
	ТаблицаХарактеристик = НовыйТаблицаХарактеристик();
	ИндексКолонки = ТаблицаХарактеристик.Колонки.Найти("ВладелецХарактеристики");
	ТаблицаХарактеристик.Колонки.Удалить(ИндексКолонки);
	
	Возврат ТаблицаХарактеристик;
	
КонецФункции

// Новый описание характеристики.
// 
// Параметры:
//  ИмяХарактеристики    - Строка
//  ЧастотаОбновления    - Строка
//  МетодПолученияВладельцев - Строка
// 
// Возвращаемое значение:
//  Структура:
// * ID                   - ОпределяемыйТип.ВидХарактеристикиРекламы, Строка, Произвольный - идентификатор характеристики.
// * ЧастотаОбновления    - Строка
// * МетодПолученияВладельцев - Строка
//
Функция НовыйРеквизитыХарактеристики(
		Знач ИмяХарактеристики, Знач ЧастотаОбновления, Знач МетодПолученияВладельцев = "")
	
	Результат = Новый Структура;
	Результат.Вставить("ID", РекламныйСервисСлужебный.ПривестиТипКВидХарактеристики(ИмяХарактеристики));
	Результат.Вставить("ЧастотаОбновления", ЧастотаОбновления);
	Результат.Вставить("МетодПолученияВладельцев", МетодПолученияВладельцев);
	
	Возврат Результат;
	
КонецФункции

// Новый параметры характеристик.
// 
// Возвращаемое значение:
//  Структура:
// * ВидыХарактеристик см. ВидыХарактеристик
// * ТаблицаХарактеристикРекламы см. Справочники.Реклама.НовыйТаблицаТаргетыРекламыИзДанныхСервиса
// * СтатусыОпцийИТС см. РегистрыСведений.ЗначенияХарактеристикРекламы.НовыйТаблицаСтатусовОпцийИТС
// * ТаблицаХарактеристикВсе см. НовыйТаблицаХарактеристик
// * ТаблицаНовыеХарактеристики см. НовыйТаблицаХарактеристик
// * ТаблицаНовыеХарактеристикиБезВладельцев см. НовыйХарактеристикиБезВладельцев
// * ИтоговаяТаблицаХарактеристик см. НовыйТаблицаХарактеристик
//
Функция НовыйПараметрыХарактеристик()
	
	Результат = Новый Структура;
	Результат.Вставить("ВидыХарактеристик", ВидыХарактеристик());
	Результат.Вставить("ТаблицаХарактеристикРекламы", Справочники.Реклама.НовыйТаблицаТаргетыРекламыИзДанныхСервиса());
	Результат.Вставить("СтатусыОпцийИТС", РегистрыСведений.ЗначенияХарактеристикРекламы.НовыйТаблицаСтатусовОпцийИТС());
	Результат.Вставить("ТаблицаХарактеристикВсе", НовыйТаблицаХарактеристик());
	Результат.Вставить("ТаблицаНовыеХарактеристики", НовыйТаблицаХарактеристик());
	Результат.Вставить("ТаблицаНовыеХарактеристикиБезВладельцев", НовыйХарактеристикиБезВладельцев());
	Результат.Вставить("ИтоговаяТаблицаХарактеристик", НовыйИтоговаяТаблицаХарактеристик());
	
	Возврат Результат;
	
КонецФункции

// Новый параметры переопределения характеристик.
// 
// Параметры:
//  ЧастотаОбновления - Строка
// 
// Возвращаемое значение:
//  Структура:
// * НачалоПериода - Дата
// * КонецПериода - Дата
//
Функция НовыйПараметрыПериода(ЧастотаОбновления = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НачалоПериода", Дата(1, 1, 1));
	Результат.Вставить("КонецПериода", Дата(1, 1, 1));
	
	ВариантыЧастотыОбновленияХарактеристики = РекламныйСервисСлужебныйПовтИсп.ВариантыЧастотыОбновленияХарактеристики();
	Если ЧастотаОбновления = ВариантыЧастотыОбновленияХарактеристики.Год Тогда
		ЗаполнитьПериодПоследнихДвенадцатиМесяцев(Результат);
	ИначеЕсли ЧастотаОбновления = ВариантыЧастотыОбновленияХарактеристики.Месяц Тогда
		ЗаполнитьПериодПредыдущегоМесяца(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Новый данные владельцев.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.ВладелецХарактеристикиРекламы
//  * Значение - Массив из Строка - список кодов регионов.
//
Функция НовыйДанныеВладельцев()
	
	Результат = Новый Соответствие;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Запросы

// Выборка не актуальных характеристик.
// 
// Параметры:
//  ПараметрыХарактеристик - см. НовыйПараметрыХарактеристик
// 
// Возвращаемое значение:
//  РезультатЗапроса:
// * ВладелецХарактеристики - ОпределяемыйТип.ВладелецХарактеристикиРекламы
// * ВидХарактеристики - ОпределяемыйТип.ВидХарактеристикиРекламы
//
Функция ВыборкаНеАктуальныхХарактеристик(ПараметрыХарактеристик)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВсеВидыХарактеристик.ВладелецХарактеристики КАК ВладелецХарактеристики,
		|	ВсеВидыХарактеристик.ВидХарактеристики КАК ВидХарактеристики,
		|	ВсеВидыХарактеристик.ЧастотаОбновления КАК ЧастотаОбновления
		|ПОМЕСТИТЬ ВсеВидыХарактеристик
		|ИЗ
		|	&ТаблицаХарактеристикВсе КАК ВсеВидыХарактеристик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаХарактеристикРекламы.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
		|	ТаблицаХарактеристикРекламы.ЗначениеХарактеристики КАК ЗначениеХарактеристики
		|ПОМЕСТИТЬ ТаблицаХарактеристикРекламы
		|ИЗ
		|	&ТаблицаХарактеристикРекламы КАК ТаблицаХарактеристикРекламы
		|ГДЕ
		|	НЕ ТаблицаХарактеристикРекламы.ИдентификаторХарактеристики = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗначенияХарактеристикПотребителя.ВладелецХарактеристики КАК ВладелецХарактеристики,
		|	ЗначенияХарактеристикПотребителя.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрСведений.ЗначенияХарактеристикПотребителяРекламы КАК ЗначенияХарактеристикПотребителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеВидыХарактеристик КАК ВсеВидыХарактеристик
		|		ПО ВсеВидыХарактеристик.ВладелецХарактеристики = ЗначенияХарактеристикПотребителя.ВладелецХарактеристики
		|		И ВсеВидыХарактеристик.ВидХарактеристики = ЗначенияХарактеристикПотребителя.Характеристика
		|		И ВЫБОР
		|			КОГДА ЗначенияХарактеристикПотребителя.ТекущееЗначениеХарактеристики = """" 
		|				ТОГДА ИСТИНА
		|			КОГДА ВсеВидыХарактеристик.ЧастотаОбновления = &ПериодГод
		|				ТОГДА &ТекущаяДата > ДОБАВИТЬКДАТЕ(ЗначенияХарактеристикПотребителя.ДатаОбновления, Год, 1)
		|			КОГДА ВсеВидыХарактеристик.ЧастотаОбновления = &ПериодМесяц
		|				ТОГДА &ТекущаяДата > ДОБАВИТЬКДАТЕ(ЗначенияХарактеристикПотребителя.ДатаОбновления, Месяц, 1)
		|			КОГДА ВсеВидыХарактеристик.ЧастотаОбновления = &ПериодДень
		|				ТОГДА &ТекущаяДата > ДОБАВИТЬКДАТЕ(ЗначенияХарактеристикПотребителя.ДатаОбновления, День, 1)
		|		КОНЕЦ
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияХарактеристикПотребителя.ВладелецХарактеристики,
		|	ЗначенияХарактеристикПотребителя.Характеристика";
	
	Запрос.УстановитьПараметр("ТаблицаХарактеристикВсе", ПараметрыХарактеристик.ТаблицаХарактеристикВсе);
	Запрос.УстановитьПараметр("ТаблицаХарактеристикРекламы", ПараметрыХарактеристик.ТаблицаХарактеристикРекламы);
	Запрос.УстановитьПараметр("ТекущаяДата", ОбщегоНазначения.ТекущаяДатаПользователя());
	Запрос.УстановитьПараметр(
		"ПериодМесяц", РекламныйСервисСлужебныйПовтИсп.ВариантыЧастотыОбновленияХарактеристики().Месяц);
	Запрос.УстановитьПараметр(
		"ПериодГод", РекламныйСервисСлужебныйПовтИсп.ВариантыЧастотыОбновленияХарактеристики().Год);
	Запрос.УстановитьПараметр(
		"ПериодДень", РекламныйСервисСлужебныйПовтИсп.ВариантыЧастотыОбновленияХарактеристики().День);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Выборка новые виды характеристик.
// 
// Параметры:
//  ПараметрыХарактеристик см. НовыйПараметрыХарактеристик
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - выборка по группировкам:
// * ВидХарактеристики - ОпределяемыйТип.ВидХарактеристикиРекламы
//
Функция ВыборкаНовыеВидыХарактеристик(ПараметрыХарактеристик)
	
	ТаблицаХарактеристикВсе = ПараметрыХарактеристик.ТаблицаХарактеристикВсе;
	ТаблицаХарактеристикРекламы = ПараметрыХарактеристик.ТаблицаХарактеристикРекламы;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВсеВидыХарактеристик.ВладелецХарактеристики КАК ВладелецХарактеристики,
		|	ВсеВидыХарактеристик.ВидХарактеристики КАК ВидХарактеристики
		|ПОМЕСТИТЬ ВсеВидыХарактеристик
		|ИЗ
		|	&ТаблицаХарактеристикВсе КАК ВсеВидыХарактеристик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаХарактеристикРекламы.ИдентификаторХарактеристики КАК ИдентификаторХарактеристики,
		|	ТаблицаХарактеристикРекламы.ЗначениеХарактеристики КАК ЗначениеХарактеристики
		|ПОМЕСТИТЬ ТаблицаХарактеристикРекламы
		|ИЗ
		|	&ТаблицаХарактеристикРекламы КАК ТаблицаХарактеристикРекламы
		|ГДЕ
		|	НЕ ТаблицаХарактеристикРекламы.ИдентификаторХарактеристики = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеВидыХарактеристик.ВладелецХарактеристики КАК ВладелецХарактеристики,
		|	ВсеВидыХарактеристик.ВидХарактеристики КАК ВидХарактеристики
		|ПОМЕСТИТЬ ОтсутствующиеЗначенияХарактеристикПотребителей
		|ИЗ
		|	ВсеВидыХарактеристик КАК ВсеВидыХарактеристик
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияХарактеристикПотребителяРекламы КАК ЗначенияХарактеристикПотребителяРекламы
		|		ПО ВсеВидыХарактеристик.ВладелецХарактеристики = ЗначенияХарактеристикПотребителяРекламы.ВладелецХарактеристики
		|		И ВсеВидыХарактеристик.ВидХарактеристики = ЗначенияХарактеристикПотребителяРекламы.Характеристика
		|ГДЕ
		|	ЗначенияХарактеристикПотребителяРекламы.Значение ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтсутствующиеЗначенияХарактеристикПотребителей.ВладелецХарактеристики КАК ВладелецХарактеристики,
		|	ОтсутствующиеЗначенияХарактеристикПотребителей.ВидХарактеристики КАК ВидХарактеристики,
		|	ТаблицаХарактеристикРекламы.ЗначениеХарактеристики КАК Значение
		|ПОМЕСТИТЬ НовыеЗначенияХарактеристик
		|ИЗ
		|	ОтсутствующиеЗначенияХарактеристикПотребителей КАК ОтсутствующиеЗначенияХарактеристикПотребителей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаХарактеристикРекламы КАК ТаблицаХарактеристикРекламы
		|		ПО ОтсутствующиеЗначенияХарактеристикПотребителей.ВидХарактеристики = ТаблицаХарактеристикРекламы.ИдентификаторХарактеристики
		|СГРУППИРОВАТЬ ПО
		|	ОтсутствующиеЗначенияХарактеристикПотребителей.ВладелецХарактеристики,
		|	ОтсутствующиеЗначенияХарактеристикПотребителей.ВидХарактеристики,
		|	ТаблицаХарактеристикРекламы.ЗначениеХарактеристики
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеЗначенияХарактеристик.ВладелецХарактеристики КАК ВладелецХарактеристики,
		|	НовыеЗначенияХарактеристик.ВидХарактеристики КАК ВидХарактеристики,
		|	НовыеЗначенияХарактеристик.Значение
		|ИЗ
		|	НовыеЗначенияХарактеристик КАК НовыеЗначенияХарактеристик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеЗначенияХарактеристик.ВидХарактеристики КАК ВидХарактеристики,
		|	НовыеЗначенияХарактеристик.Значение
		|ИЗ
		|	НовыеЗначенияХарактеристик КАК НовыеЗначенияХарактеристик
		|СГРУППИРОВАТЬ ПО
		|	НовыеЗначенияХарактеристик.ВидХарактеристики,
		|	НовыеЗначенияХарактеристик.Значение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеЗначенияХарактеристик.ВидХарактеристики
		|ИЗ
		|	НовыеЗначенияХарактеристик КАК НовыеЗначенияХарактеристик
		|СГРУППИРОВАТЬ ПО
		|	НовыеЗначенияХарактеристик.ВидХарактеристики";
	
	Запрос.УстановитьПараметр("ТаблицаХарактеристикВсе", ТаблицаХарактеристикВсе);
	Запрос.УстановитьПараметр("ТаблицаХарактеристикРекламы", ТаблицаХарактеристикРекламы);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыХарактеристик.Удалить("ТаблицаХарактеристикВсе");
	ПараметрыХарактеристик.Удалить("ТаблицаХарактеристикРекламы");
	
	ПараметрыХарактеристик.ТаблицаНовыеХарактеристики = РезультатЗапроса[РезультатЗапроса.Количество() - 3].Выгрузить();
	ПараметрыХарактеристик.ТаблицаНовыеХарактеристикиБезВладельцев 
		= РезультатЗапроса[РезультатЗапроса.Количество() - 2].Выгрузить();
	
	ВыборкаГруппировка = РезультатЗапроса[РезультатЗапроса.Количество() - 1].Выбрать();
	
	Возврат ВыборкаГруппировка;
	
КонецФункции

#КонецОбласти

// Создать наборы записей.
// 
// Параметры:
//  ТаблицаХарактеристик - см. НовыйИтоговаяТаблицаХарактеристик
//
Процедура СоздатьОбновитьНаборыЗаписей(ТаблицаХарактеристик)
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Блокировка = Новый БлокировкаДанных;
		ИмяПространстваБлокировок = "РегистрСведений.ЗначенияХарактеристикПотребителяРекламы";
		ЭлементБлокировки = Блокировка.Добавить(ИмяПространстваБлокировок);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаХарактеристик;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ВладелецХарактеристики", "ВладелецХарактеристики");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "ВладелецХарактеристики");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Значение", "Значение");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТекущееЗначениеХарактеристики", "ТекущееЗначениеХарактеристики");
		Блокировка.Заблокировать();
		
		Для Каждого СтрокаХарактеристик Из ТаблицаХарактеристик Цикл
			
			ВладелецХарактеристики = СтрокаХарактеристик.ВладелецХарактеристики;
			ВидХарактеристики = СтрокаХарактеристик.ВидХарактеристики;
			Значение = СтрокаХарактеристик.Значение;
			ТекущееЗначениеХарактеристики = СтрокаХарактеристик.ТекущееЗначениеХарактеристики;
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВладелецХарактеристики.Установить(ВладелецХарактеристики);
			НаборЗаписей.Отбор.Характеристика.Установить(ВидХарактеристики);
			НаборЗаписей.Отбор.Значение.Установить(Значение);
			НаборЗаписей.Отбор.ТекущееЗначениеХарактеристики.Установить(ТекущееЗначениеХарактеристики);
			
			Запись = НаборЗаписей.Добавить();
			Запись.ВладелецХарактеристики = ВладелецХарактеристики;
			Запись.Характеристика = ВидХарактеристики;
			Запись.Значение = СтрокаХарактеристик.Значение;
			Запись.ТекущееЗначениеХарактеристики = СтрокаХарактеристик.ТекущееЗначениеХарактеристики;
			Запись.ДатаОбновления = ОбщегоНазначения.ТекущаяДатаПользователя();
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Добавить строку таблицы характеристик.
// 
// Параметры:
//  Таблица - см. НовыйИтоговаяТаблицаХарактеристик
//  ВладелецХарактеристики - ОпределяемыйТип.ВладелецХарактеристикиРекламы
//  ВидХарактеристики - см. НовыйРеквизитыХарактеристики
//  ЗначениеХарактеристикиРекламы - ОпределяемыйТип.ЗначениеХарактеристикиРекламы
//  ТекущееЗначениеХарактеристики - ОпределяемыйТип.ЗначениеХарактеристикиРекламы
//
Процедура ДобавитьСтрокуТаблицы(
		Таблица, Знач ВладелецХарактеристики, Знач ВидХарактеристики, 
		Знач ЗначениеХарактеристикиРекламы, Знач ТекущееЗначениеХарактеристики = "")
	
	Если ВладелецХарактеристики = Неопределено Тогда
		ВладелецХарактеристики = РекламныйСервисСлужебный.ПустойВладелецХарактеристики();
	КонецЕсли;
	
	ИдентификаторХарактеристики = ВидХарактеристики.ID;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ВладелецХарактеристики", ВладелецХарактеристики);
	ПараметрыОтбора.Вставить("ВидХарактеристики", ИдентификаторХарактеристики);
	ПараметрыОтбора.Вставить("Значение", ЗначениеХарактеристикиРекламы);
	
	НайденныеСтрокиТаблицы = Таблица.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтрокиТаблицы.Количество() = 0 Тогда
		
		СтрокаТаблицы = Таблица.Добавить();
		СтрокаТаблицы.ВладелецХарактеристики = ВладелецХарактеристики;
		СтрокаТаблицы.ВидХарактеристики = ИдентификаторХарактеристики;
		СтрокаТаблицы.Значение = ЗначениеХарактеристикиРекламы;
		СтрокаТаблицы.ТекущееЗначениеХарактеристики = ТекущееЗначениеХарактеристики;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВидХарактеристики);
		
	Иначе
		
		СтрокаТаблицы = НайденныеСтрокиТаблицы[0];
		
		Если СтрокаТаблицы.ТекущееЗначениеХарактеристики <> ТекущееЗначениеХарактеристики Тогда
			
			СтрокаТаблицы.ТекущееЗначениеХарактеристики = 
				СтрШаблон("%1%2%3", 
					СтрокаТаблицы.ТекущееЗначениеХарактеристики, 
					?(ПустаяСтрока(СтрокаТаблицы.ТекущееЗначениеХарактеристики), "", ","), 
					ТекущееЗначениеХарактеристики);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверить тип и значение характеристики.
// 
// Параметры:
//  Значение - Строка, Произвольный - значение характеристики.
//  Условие - Булево - Условие проверки значения.
//  ПроцедураКонтекста - Строка - Процедура контекста.
//
Процедура ПроверитьТипИЗначениеХарактеристики(Знач Значение, Знач Условие, Знач ПроцедураКонтекста)
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		ТипЗнч(Значение) = Тип("Строка"),
		НСтр("ru = 'Не допустимый тип значения'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		СтрШаблон("ХарактеристикиПотребителя.%1", ПроцедураКонтекста));
	
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.Проверить(
		Условие, 
		НСтр("ru = 'Не допустимое значение'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		СтрШаблон("ХарактеристикиПотребителя.%1", ПроцедураКонтекста));
	
КонецПроцедуры


// Количество лет.
// 
// Параметры:
//  Дата - Дата
// 
// Возвращаемое значение:
//  Число - Количество лет
//
Функция КоличествоЛет(Дата)
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ГодСекунды = 60 * 60 * 24 * 365; // Секунды, минуты, часы, дней в году.
	
	КоличествоЛет = Цел((ТекущаяДата - Дата) / ГодСекунды);
	
	Возврат КоличествоЛет;
	
КонецФункции



#КонецОбласти

#КонецЕсли
