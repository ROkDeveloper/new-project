#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Помещает в набор записей по регистру данные для записи.
//
// Параметры:
//  НаборЗаписей - НаборЗаписей.РасчетСтоимостиКомпонентовАмортизации - заполняемая коллекция
//  Данные       - ТаблицаЗначений - см. НовыйДанныеНабораЗаписей, записываемые данные
//  ПериодЗаписи - Дата - период набора (одинаковый во всех записях набора)
//  Организация  - СправочникСсылка.Организации - организация набора (одинаковая во всех записях набора)
//
Процедура Установить(НаборЗаписей, Данные, ПериодЗаписи, Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей.Записывать = Истина;
	
	НаборЗаписей.Загрузить(Данные);
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Организация = Организация;
		Запись.Период      = ПериодЗаписи;
	КонецЦикла;
	
КонецПроцедуры

// Конструктор коллекции, описываюший данные набора записей (ту часть, что может отличаться в разных записях набора)
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. тело функции
//
Функция НовыйДанныеНабораЗаписей() Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.РасчетСтоимостиКомпонентовАмортизации;
	
	ДанныеНабора = Новый ТаблицаЗначений;
	ДанныеНабора.Колонки.Добавить("КомпонентАмортизации", МетаданныеРегистра.Измерения.КомпонентАмортизации.Тип);
	ДанныеНабора.Колонки.Добавить("Стоимость",            МетаданныеРегистра.Ресурсы.Стоимость.Тип);
	
	Возврат ДанныеНабора;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиОбновления

// Обработчик заполнения регистра данными регистра расчетов амортизации, выполненных ранее.
// Ранее сведения о стоимости хранились в регистре РасчетАмортизации в косвенном виде -
// как стоимость компонента на момент расчета и ее изменение за период расчета.
// Регистр появился в связи с тем, что для амортизации с даты затрат в регистре РасчетАмортизации
// потребовалось сохранять несколько записей расчета амортизации по одному компоненту за один период.
// В результате структура регистра РасчетАмортизации стала неудобной для выборки данных о стоимости
// и эти данные теперь хранятся отдельно, в РасчетСтоимостиКомпонентовАмортизации.
//
// Параметры:
//  ПараметрыОбработчика - Структура - управляющая коллекция, см. документацию к подсистеме ОбновлениеИнформационнойБазы БСП.
//         Ключи:
//         * ОбработкаЗавершена - Булево - для того чтобы обработчик был вызван повторно для обработки следующей порции данных,
//                                         следует записать в него значение Ложь;
//         В структуру можно добавить произвольное количество свойств произвольных типов,
//         значения которых будут автоматически запоминаться между вызовами процедуры - обработчика отложенного обновления.
//
Процедура ЗаполнитьДаннымиРасчетАмортизации(ПараметрыОбработчика) Экспорт
	
	Если Не КомпонентыАмортизацииОС.ПодсистемаПрименяется() Тогда
		Возврат;
	КонецЕсли;
	
	// За один вызов обрабатываем один документ, исходя из предположения,
	// что в основном это регламентные документы расчета амортизации
	ТипыРегистраторов = Новый Массив;
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.РегламентнаяОперация"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ВозвратОСОтАрендатора"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ИзменениеУсловийАренды"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ОперацияБух"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПередачаОСВАренду"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.ПеремещениеОС"));
	УчетОбособленныхПодразделений.ДобавитьТипДокументаАвизоОСИсходящее(ТипыРегистраторов);
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	РасчетАмортизации.Регистратор КАК Регистратор,
	|	РасчетАмортизации.МоментВремени КАК Курсор,
	|	РасчетАмортизации.Период КАК Период
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомпонентыАмортизацииОС КАК КомпонентыАмортизацииОС
	|		ПО РасчетАмортизации.КомпонентАмортизации = КомпонентыАмортизацииОС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасчетСтоимостиКомпонентовАмортизации КАК РасчетСтоимостиКомпонентовАмортизации
	|		ПО РасчетАмортизации.Регистратор = РасчетСтоимостиКомпонентовАмортизации.Регистратор
	|ГДЕ
	|	РасчетСтоимостиКомпонентовАмортизации.Регистратор ЕСТЬ NULL
	|	И РасчетАмортизации.СуммаАмортизацииБУ > 0
	|	И ТИПЗНАЧЕНИЯ(РасчетАмортизации.Регистратор) В (&ТипыРегистраторов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетАмортизации.МоментВремени УБЫВ";
	
	Если Не ПараметрыОбработчика.Свойство("Курсор") Тогда
		Курсор = Неопределено;
		ТекстЗапроса = ШаблонТекстаЗапроса;
	Иначе
		Курсор = ПараметрыОбработчика.Курсор;
		ЗапросРасчетАмортизации = СхемыЗапросов.НайтиТаблицуПоПсевдониму(ШаблонТекстаЗапроса, "РасчетАмортизации");
		ЗапросРасчетАмортизации.Оператор.Отбор.Добавить("РасчетАмортизации.МоментВремени < &Курсор");
		ТекстЗапроса = ЗапросРасчетАмортизации.Схема.ПолучитьТекстЗапроса();
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Курсор",            Курсор);
	Запрос.УстановитьПараметр("ТипыРегистраторов", ТипыРегистраторов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчика.ОбработкаЗавершена = Ложь;
	ПараметрыОбработчика.Вставить("Курсор", Выборка.Курсор);
	
	Регистратор = Выборка.Регистратор;
	Период      = Выборка.Период;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расчет.КомпонентАмортизации КАК КомпонентАмортизации,
	|	Расчет.Организация КАК Организация,
	|	МИНИМУМ(Расчет.ОстаточнаяСтоимостьБУ - Расчет.СуммаАмортизацииБУ) КАК Стоимость,
	|	МАКСИМУМ(КомпонентыАмортизации.Владелец) КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК Расчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомпонентыАмортизацииОС КАК КомпонентыАмортизации
	|		ПО Расчет.КомпонентАмортизации = КомпонентыАмортизации.Ссылка
	|ГДЕ
	|	Расчет.Активность
	|	И Расчет.Регистратор = &Регистратор
	|	И Расчет.СуммаАмортизацииБУ > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчет.КомпонентАмортизации,
	|	Расчет.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредство,
	|	КомпонентАмортизации";
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.РасчетСтоимостиКомпонентовАмортизации.НаборЗаписей");
	ЭлементБлокировкиДанных.УстановитьЗначение("Регистратор", Регистратор);
	
	НаборЗаписей = РегистрыСведений.РасчетСтоимостиКомпонентовАмортизации.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		// Выполнение обработчика для регламентной операции, выполненной в новой версии, вероятно,
		// приведет к некорректному результату. Поэтому это здесь предотвращаем.
		//
		// Для этого реализуем оптимистическую блокировку:
		// если прочитанные ранее данные оказались изменены и это изменение материально,
		// то такое изменение приведет к появлению записей в наборе.
		//
		// Верно и обратное: выполнение регламентной операции до выполнения обработчика
		// может привести к некорректному результату.
		// Поэтому на время обработки регламентные операции блокируются.
		
		НаборЗаписей.Прочитать();
		Если Не ЗначениеЗаполнено(НаборЗаписей) Тогда
			
			Пока Выборка.Следующий() Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				Запись.Период      = Период;
				Запись.Регистратор = Регистратор;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Сообщение = СтрШаблон(НСтр("ru = 'Ошибка при выполнении обработчика ЗаполнитьДаннымиРасчетАмортизации.
                                    |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.РасчетСтоимостиКомпонентовАмортизации,
			Регистратор,
			Сообщение);
		
	КонецПопытки;
	
КонецПроцедуры

// Проверяет, требуется ли обработка данных с помощью ЗаполнитьДаннымиРасчетАмортизации.
//
// Параметры:
//  ПроверяемыйОбъект - Структура - см. документацию к БСП раздел "Блокировка необработанных данных в пользовательском интерфейсе"
// 
// Возвращаемое значение:
//  Булево - Ложь, если объект требует обработки.
//
Функция ЗаполненДаннымиРасчетАмортизации(ПроверяемыйОбъект) Экспорт
	
	РегламентнаяОперация = Неопределено;
	
	КомпонентыАмортизацииОС.НачатьПроверкуБлокировкиНеобработанныхДанныхРасчетАмортизации(РегламентнаяОперация, ПроверяемыйОбъект);
	
	Если РегламентнаяОперация = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РегламентнаяОперация);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетАмортизации.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.РасчетАмортизации КАК РасчетАмортизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КомпонентыАмортизацииОС КАК КомпонентыАмортизацииОС
	|		ПО РасчетАмортизации.КомпонентАмортизации = КомпонентыАмортизацииОС.Ссылка
	|ГДЕ
	|	РасчетАмортизации.Регистратор = &Ссылка";
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетСтоимостиКомпонентовАмортизации.Регистратор КАК Ссылка
	|ИЗ
	|	РегистрСведений.РасчетСтоимостиКомпонентовАмортизации КАК РасчетСтоимостиКомпонентовАмортизации
	|ГДЕ
	|	РасчетСтоимостиКомпонентовАмортизации.Регистратор = &Ссылка";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
