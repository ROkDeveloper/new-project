#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет местонахождение результата самого свежего расчета, выполненного до наступления проверяемой даты.
//
// Параметры:
//  Период      - Дата - проверяемый период
//  Организация - СправочникСсылка.Организации 
// 
// Возвращаемое значение:
//  Дата - значение реквизита ПериодРасчета
//
Функция ПериодПредыдущегоРасчета(Период, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетОбесцененияЗапасов.ПериодРасчета КАК ПериодРасчета
	|ИЗ
	|	РегистрСведений.РасчетОбесцененияЗапасов КАК РасчетОбесцененияЗапасов
	|ГДЕ
	|	РасчетОбесцененияЗапасов.Активность
	|	И РасчетОбесцененияЗапасов.Организация = &Организация
	|	И РасчетОбесцененияЗапасов.ПериодРасчета < &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодРасчета УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат '0001-01-01';
	КонецЕсли;
	
	Возврат Выборка.ПериодРасчета;
	
КонецФункции

// Определяет местонахождение результата следующего (в общем случае - еще не выполненного) расчета.
//
// Параметры:
//  Период      - Дата - проверяемый период, к которому относится следующий расчет
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Дата - дата, в которую должен быть записан следующий расчет
//
Функция ПериодСледующегоРасчета(Период, Организация) Экспорт
	
	ПериодПредыдущегоРасчета = ПериодПредыдущегоРасчета(Период, Организация);
	
	НачалоОтчетногоПериода = БухгалтерскийУчет.НачалоОтчетногоГода(Период, Организация);
	
	Если НачалоОтчетногоПериода = Неопределено Тогда
		НачалоОтчетногоПериода = НачалоГода(Период);
	КонецЕсли;
	
	Если ПериодПредыдущегоРасчета < НачалоОтчетногоПериода Тогда
		Возврат НачалоОтчетногоПериода;
	КонецЕсли;
	
	Возврат КонецМесяца(ПериодПредыдущегоРасчета) + 1;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Приводит значения измерения ПериодРасчета к принятым для регистра.
//
// Для регистра используется соглашение:
// ПериодРасчета - это всегда дата начала месяца.
// Это сделано, чтобы в справках-расчетах было проще получать данные
// (избежать неоднозначности, на какую конкретно дату в течение месяца выбирать данные).
//
// Параметры:
//  ПериодРасчета  - Дата - значение измерения ПериодРасчета.
//
Процедура ПривестиПериодРасчета(ПериодРасчета) Экспорт
	
	ПериодРасчета = НачалоМесяца(ПериодРасчета);
	
КонецПроцедуры

// Определяет счета для учета обесценения, включая и предопределенные и добавленные пользователем.
// Возвращает все данные о счетах, включая счета учета запасов и контрактивные счета резервов.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НовыйСчетаОбесценения()
//
Функция СчетаОбесценения() Экспорт
	
	СчетаОбесценения = НовыйСчетаОбесценения();
	
	ПредопределенныеСчетаОбесценения = ПредопределенныеСчетаОбесценения();
	
	// На случай, если в предопределенных счетах указаны и счет-группа и вложенные
	// (по модели Правило - Исключение)
	ВытеснениеСчетаОбесценения = Новый Соответствие;
	
	Для Каждого ОписаниеСчета Из ПредопределенныеСчетаОбесценения Цикл
		Для Каждого СчетЗапаса Из БухгалтерскийУчетПовтИсп.СчетаВИерархии(ОписаниеСчета.Ключ) Цикл
			ВытеснениеСчетаОбесценения.Вставить(СчетЗапаса, ОписаниеСчета.Значение);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ОписаниеСчета Из ПредопределенныеСчетаОбесценения Цикл
		ВытеснениеСчетаОбесценения.Вставить(ОписаниеСчета.Ключ, ОписаниеСчета.Значение);
	КонецЦикла;
	
	Для Каждого ОписаниеСчета Из ВытеснениеСчетаОбесценения Цикл
		Запись = СчетаОбесценения.Добавить();
		Запись.СчетЗапаса  = ОписаниеСчета.Ключ;
		Запись.СчетРезерва = ОписаниеСчета.Значение;
	КонецЦикла;
	
	Возврат СчетаОбесценения;
	
КонецФункции

// Описывает предопределенные счета активов, по которым может быть признано обесценение,
// и соответствующие им контрактивные счета, на которых учитывается сумма обесценения (резерва)
// Например, счет 10 и субсчет 14.01 соответственно.
// 
// Возвращаемое значение:
//  Соответствие - Ключ: счет актива; Значение: соответствующий контрактивный счет
//
Функция ПредопределенныеСчетаОбесценения() Экспорт
	
	// См. БухгалтерскиеОтчеты.СчетаУчетаТоваров,
	// вызовы ЗаполнениеБухгалтерскойОтчетностиПояснения.ЗаполнитьИзменениеОбесценения
	
	СчетаОбесценения = Новый Соответствие;
	СчетаОбесценения.Вставить(
		ПланыСчетов.Хозрасчетный.Материалы,
		ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиМатериалов);
	СчетаОбесценения.Вставить(
		ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_,
		ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства);
	СчетаОбесценения.Вставить(
		ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства_,
		ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства);
	СчетаОбесценения.Вставить(
		ПланыСчетов.Хозрасчетный.Полуфабрикаты,
		ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства);
	СчетаОбесценения.Вставить(
		ПланыСчетов.Хозрасчетный.Товары,
		ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиТоваров);
	СчетаОбесценения.Вставить(
		ПланыСчетов.Хозрасчетный.ТоварыОтгруженные,
		ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиТоваров);
	СчетаОбесценения.Вставить(
		ПланыСчетов.Хозрасчетный.ГотоваяПродукция,
		ПланыСчетов.Хозрасчетный.РезервыПодСнижениеСтоимостиГотовойПродукции);
	
	Возврат СчетаОбесценения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйСчетаОбесценения()
	
	СчетаОбесценения = Новый ТаблицаЗначений;
	
	СчетаОбесценения.Колонки.Добавить("СчетЗапаса",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	СчетаОбесценения.Колонки.Добавить("СчетРезерва", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	
	Возврат СчетаОбесценения;
	
КонецФункции

#КонецОбласти

#КонецЕсли
