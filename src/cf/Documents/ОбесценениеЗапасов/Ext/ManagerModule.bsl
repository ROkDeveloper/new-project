#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция АктуальныйПеречень(Период, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбесценениеЗапасов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОбесценениеЗапасов КАК ОбесценениеЗапасов
	|ГДЕ
	|	ОбесценениеЗапасов.Проведен
	|	И ОбесценениеЗапасов.Организация = &Организация
	|	И ОбесценениеЗапасов.Дата <= &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбесценениеЗапасов.МоментВремени УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Возврат Выборка.Ссылка;
	
КонецФункции

#Область ПодключениеПодсистем

#Область СтандартныеПодсистемы

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

#КонецОбласти

#Область Свойства

// Содержит имя предопределенного набора свойств - см. Характеристики объекта
// 
// Возвращаемое значение:
//  Строка
//
Функция ИмяНабораСвойств() Экспорт
	
	Возврат "Документ_ОбесценениеЗапасов";
	
КонецФункции

// Получает описание предопределенных наборов свойств.
//
// Параметры: см. УправлениеСвойствамиПереопределяемый.ПриПолученииПредопределенныхНаборовСвойств
//
Процедура НастроитьНаборыСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = ИмяНабораСвойств();
	Набор.Идентификатор = Новый УникальныйИдентификатор("b211fbba-fdb2-4686-a888-c70dc736e07c");
	Набор.Используется  = ПолучитьФункциональнуюОпцию("РасширенныйФункционал");
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Авансовый отчет
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ОбесценениеЗапасов";
	КомандаПечати.Представление = НСтр("ru = 'Обесценение запасов'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 1;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр),
//                                            см. УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм.
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОбесценениеЗапасов") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОбесценениеЗапасов",
			НСтр("ru = 'Перечень запасов, имеющих признаки обесценения'"),
			ПечатьОбесценениеЗапасов(МассивОбъектов, ОбъектыПечати),
			, // пиктограмма печатной формы отсутствует
			"Документ.ОбесценениеЗапасов.ПФ_MXL_ОбесценениеЗапасов");
		
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(
		МассивОбъектов,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.

Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                               находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                               являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов.
//       * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность;
//       * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения, доступные для передачи на клиент.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Результат = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	
	Наименования = Новый Соответствие;
	
	Для Каждого ИсходныеДанные Из ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных) Цикл
		
		Запись = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ИсходныеДанные, "Идентификатор, Цена, Комментарий");
		
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИсходныеДанные.Номенклатура_Идентификатор) Тогда
			
			Попытка
				Идентификатор = Новый УникальныйИдентификатор(ИсходныеДанные.Номенклатура_Идентификатор);
			Исключение
				// Приведение типа. Запись исключения не требуется.
				Идентификатор = Неопределено;
			КонецПопытки;
			
			Если Идентификатор <> Неопределено Тогда
				Номенклатура  = Справочники.Номенклатура.ПолучитьСсылку(Идентификатор);
				Если ОбщегоНазначения.СсылкаСуществует(Номенклатура) Тогда
					Запись.Номенклатура = Номенклатура;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИсходныеДанные.Номенклатура) Тогда
			Наименования.Вставить(Запись.Идентификатор, ИсходныеДанные.Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	Номенклатура = НайтиНоменклатуру(Наименования);
	
	Для Каждого Запись Из Результат Цикл
		
		Значение = Номенклатура[Запись.Идентификатор];
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Значение) <> Тип("Массив") Тогда
			Запись.Номенклатура = Значение;
		Иначе
			Неоднозначность = СписокНеоднозначностей.Добавить();
			Неоднозначность.Колонка       = "Номенклатура";
			Неоднозначность.Идентификатор = Запись.Идентификатор;
			
			Запись.Номенклатура = Значение[0];
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//  ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность. 
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Структура - Загружаемые данные, на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - данные, переданные через клиент из СопоставитьЗагружаемыеДанные
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	// Поскольку из СопоставитьЗагружаемыеДанные нельзя получить перечень номенклатуры, вычислим его заново
	Наименования = Новый Соответствие;
	Наименования.Вставить(0, ЗагружаемыеЗначенияСтрока.Номенклатура);
	Номенклатура = НайтиНоменклатуру(Наименования);
	
	Значения = Номенклатура[0];
	Если Не ЗначениеЗаполнено(Значения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значения) = Тип("Массив") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокНеоднозначностей, Значения);
	Иначе
		СписокНеоднозначностей.Добавить(Значения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для обхода ошибки 00-00333085
//
// Параметры:
//  НеиспользуемыйПараметр - Неопределено
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(НеиспользуемыйПараметр) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон(НСтр("ru = 'Обесценение запасов на %1'"), Формат(Данные.Дата, "ДЛФ=DD"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НайтиНоменклатуру(Наименования)
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(Наименования) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Справочник = Метаданные.Справочники.Номенклатура;
	ТипПредставленияЕдиницыИзмерения = Метаданные.Справочники.КлассификаторЕдиницИзмерения.Реквизиты.НаименованиеПолное.Тип;
	
	ДанныеПоиска = Новый ТаблицаЗначений;
	ДанныеПоиска.Колонки.Добавить("НомерСтроки",        Новый ОписаниеТипов("Число"));
	ДанныеПоиска.Колонки.Добавить("Наименование",       ОбщегоНазначения.ОписаниеТипаСтрока(Справочник.ДлинаНаименования));
	ДанныеПоиска.Колонки.Добавить("НаименованиеПолное", Справочник.Реквизиты.НаименованиеПолное.Тип);
	ДанныеПоиска.Колонки.Добавить("Артикул",            Справочник.Реквизиты.Артикул.Тип);
	ДанныеПоиска.Колонки.Добавить("ЕдиницаИзмерения",   ТипПредставленияЕдиницыИзмерения);
	ДанныеПоиска.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Для Каждого ОписаниеНоменклатуры Из Наименования Цикл
		
		Запись = ДанныеПоиска.Добавить();
		Запись.НомерСтроки        = ОписаниеНоменклатуры.Ключ;
		Запись.Наименование       = ОписаниеНоменклатуры.Значение;
		Запись.НаименованиеПолное = ОписаниеНоменклатуры.Значение;
		
	КонецЦикла;
	
	Запрос = Обработки.ЗагрузкаНоменклатурыИзФайла.ЗапросПоискаНоменклатуры(ДанныеПоиска, "Наименование");
	ВыборкаНомерСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		НайденнаяНоменклатура = Новый Массив;
		
		ВыборкаВесСтроки = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВесСтроки.Следующий() Цикл
			ВыборкаНоменклатура = ВыборкаВесСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаНоменклатура.Следующий() Цикл
				НайденнаяНоменклатура.Добавить(ВыборкаНоменклатура.Номенклатура);
			КонецЦикла;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(НайденнаяНоменклатура) Тогда
			Продолжить;
		ИначеЕсли НайденнаяНоменклатура.Количество() = 1 Тогда
			Значение = НайденнаяНоменклатура[0];
		Иначе
			Значение = НайденнаяНоменклатура;
		КонецЕсли;
		
		Результат.Вставить(ВыборкаНомерСтроки.НомерСтроки, Значение);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПечатьОбесценениеЗапасов(Ссылки, ОбъектыПечати)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбесценениеЗапасов.Ссылка КАК Ссылка,
	|	ОбесценениеЗапасов.Дата КАК Дата,
	|	ОбесценениеЗапасов.Организация КАК Организация,
	|	ОбесценениеЗапасов.Организация.НаименованиеСокращенное КАК ОрганизацияПредставление,
	|	ОбесценениеЗапасов.Ответственный.ФизическоеЛицо КАК ОтветственныйФизическоеЛицо,
	|	ОбесценениеЗапасов.Запасы.(
	|		НомерСтроки КАК НомерСтроки,
	|		ПРЕДСТАВЛЕНИЕ(ОбесценениеЗапасов.Запасы.Номенклатура) КАК НоменклатураПредставление,
	|		Цена КАК Цена,
	|		Комментарий КАК Комментарий
	|	) КАК Запасы
	|ИЗ
	|	Документ.ОбесценениеЗапасов КАК ОбесценениеЗапасов
	|ГДЕ
	|	ОбесценениеЗапасов.Ссылка В(&Ссылки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка,
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	Результат = Новый ТабличныйДокумент;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Результат.КлючПараметровПечати = "Документ.ОбесценениеЗапасов.ПФ_MXL_ОбесценениеЗапасов";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОбесценениеЗапасов.ПФ_MXL_ОбесценениеЗапасов");
	
	ОбластиМакета = Новый Структура("Шапка, НачалоТаблицы, Строка, КонецТаблицы, Подпись");
	Для Каждого ОписаниеОбласти Из ОбластиМакета Цикл
		ОбластиМакета[ОписаниеОбласти.Ключ] = Макет.ПолучитьОбласть(ОписаниеОбласти.Ключ);
	КонецЦикла;
	
	ВыборкаДокумент = РезультатЗапроса.Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока ВыборкаДокумент.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НачалоОбластиПечати = Результат.ВысотаТаблицы + 1;
		
		// Начало документа
		ОбластиМакета.Шапка.Параметры.Заполнить(ВыборкаДокумент);
		ФорматированныеПараметры = Новый Структура;
		ФорматированныеПараметры.Вставить("Дата", Формат(ВыборкаДокумент.Дата, "ДЛФ=DD"));
		ОбластиМакета.Шапка.Параметры.Заполнить(ФорматированныеПараметры);
		Результат.Вывести(ОбластиМакета.Шапка);
		Результат.Вывести(ОбластиМакета.НачалоТаблицы);
		
		// Строки таблицы
		ВыборкаСтрока = ВыборкаДокумент.Запасы.Выбрать();
		Пока ВыборкаСтрока.Следующий() Цикл
			
			ОбластиМакета.Строка.Параметры.Заполнить(ВыборкаСтрока);
			Ячейки = Результат.Вывести(ОбластиМакета.Строка);
			Ячейки.АвтоВысотаСтроки = Истина;
			
		КонецЦикла;
		
		// Конец документа
		Результат.Вывести(ОбластиМакета.КонецТаблицы);
		ОбластиМакета.Подпись.Параметры.Заполнить(ВыборкаДокумент);
		
		Полномочия = ОтветственныеЛицаБП.ПолномочияОтветственного(
			ВыборкаДокумент.ОтветственныйФизическоеЛицо,
			ВыборкаДокумент.Организация,
			ВыборкаДокумент.Дата);
		СведенияПодписи = Новый Структура;
		СведенияПодписи.Вставить("ДолжностьПодписавшегоЛица", Полномочия.ДолжностьПредставление);
		СведенияПодписи.Вставить("ДокументПодписал",          Полномочия.ФИО.Представление);
		ОбластиМакета.Подпись.Параметры.Заполнить(СведенияПодписи);
		
		Результат.Вывести(ОбластиМакета.Подпись);
		
		// В табличном документе зададим имя области, в которую был выведен объект.
		// Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			Результат,
			НачалоОбластиПечати,
			ОбъектыПечати,
			ВыборкаДокумент.Ссылка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
