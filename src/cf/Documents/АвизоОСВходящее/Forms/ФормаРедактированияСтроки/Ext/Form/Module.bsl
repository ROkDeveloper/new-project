#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ДанныеЗаполнения);
	
	ПеренестиВДокумент 	= Ложь;
	ЭтаФорма.ЭтоНовый 	= Параметры.ЭтоНовый;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(ЭтаФорма, Организация, Дата);
	
	// Установка значений по умолчанию.
	Если Параметры.ЭтоНовый И НЕ Параметры.Копирование Тогда
		
		СчетУчета 						= ПланыСчетов.Хозрасчетный.ОСвОрганизации;     //01.01
		СчетНачисленияАмортизации 		= ПланыСчетов.Хозрасчетный.АмортизацияОС_01;   //02.01
		СпособПоступления	 			= Перечисления.СпособыПоступленияАктивов.ПриобретениеЗаПлату;
		ПорядокПогашенияСтоимости 		= Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации;
		СпособНачисленияАмортизации 	= Перечисления.СпособыНачисленияАмортизацииОС.Линейный;
		ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
		НачислятьАмортизацию 			= Истина;
		НачислятьАмортизациюНУ 			= Истина;
		
	КонецЕсли;
	
	Заголовок = НСтр("ru='Основные средства: %1'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Заголовок,
		?(Параметры.ЭтоНовый, Нстр("ru='Новая строка'"), ОсновноеСредство));
	
	// Ограничение выбора счета учета:
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);         		//01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств); 	//02
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ);       	//03
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств);       	//010
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.АрендованныеОсновныеСредства);   //001
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредстваСданныеВАренду); //011
	МассивИсключений.Добавить(ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества);
	
	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.ИспользоватьВПроводках = Истина;
	УсловияОтбораСубсчетов.СчетаИсключения = МассивИсключений;
	СчетаДляОтбора = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов, УсловияОтбораСубсчетов);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.СчетУчета, СчетаДляОтбора);
	БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораСчета(Элементы.СчетНачисленияАмортизации, СчетаДляОтбора);
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(ЭтаФорма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(ЭтаФорма);
	
	ПлательщикНалогаНаПрибыль        = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПоддержкаПБУ18                   = УчетнаяПолитика.ПоддержкаПБУ18(Организация, Дата);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата);
	ПлательщикНДФЛ                   = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	
	Элементы.ГруппаНалоговыйУчет.Видимость		= ПлательщикНалогаНаПрибыль ИЛИ ПлательщикНДФЛ;
	Элементы.ГруппаУчетУСН.Видимость 			= ПрименяетсяУСНДоходыМинусРасходы;

	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросСохранитьИзмененияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПеренестиВДокумент Тогда
		ДанныеФормы = ПолучитьСтруктуруДанныхФормы();
		ОповеститьОВыборе(ДанныеФормы);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПлательщикНалогаНаПрибыль        = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Дата);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Организация, Дата);
	ПлательщикНДФЛ                   = УчетнаяПолитика.ПлательщикНДФЛ(Организация, Дата);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если СпособПоступления <> Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьНУ");
	
	Если ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается
	 ИЛИ ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзноса 
	 ИЛИ НЕ ЗначениеЗаполнено(ПорядокПогашенияСтоимости) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользования");
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентУскорения");
		МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработки");
		МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРабот");
		МассивНепроверяемыхРеквизитов.Добавить("СчетНачисленияАмортизации");
	ИначеЕсли ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользования");
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентУскорения");
		МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработки");
		МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРабот");
	ИначеЕсли ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Стоимость");
		МассивНепроверяемыхРеквизитов.Добавить("СпособНачисленияАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользования");
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизации");
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентУскорения");
		МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработки");
		МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРабот");
		МассивНепроверяемыхРеквизитов.Добавить("СчетНачисленияАмортизации");
	ИначеЕсли ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		Если СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный
		 ИЛИ СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизации");
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентУскорения");
			МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработки");
			МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРабот");
		ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизации");
			МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработки");
			МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРабот");
		ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользования");
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизации");
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентУскорения");
		ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользования");
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентУскорения");
			МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработки");
			МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРабот");
		ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользования");
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентУскорения");
		ИначеЕсли СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользования");
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизации");
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентУскорения");
			МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработки");
			МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРабот");
		ИначеЕсли НЕ ЗначениеЗаполнено(СпособНачисленияАмортизации) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользования");
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентАмортизации");
			МассивНепроверяемыхРеквизитов.Добавить("КоэффициентУскорения");
			МассивНепроверяемыхРеквизитов.Добавить("ПараметрВыработки");
			МассивНепроверяемыхРеквизитов.Добавить("ОбъемПродукцииРабот");
			МассивНепроверяемыхРеквизитов.Добавить("СчетНачисленияАмортизации");
		КонецЕсли;
	КонецЕсли;
	
	Если ПлательщикНалогаНаПрибыль ИЛИ ПлательщикНДФЛ Тогда
	
		Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
		ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету 
			  ИЛИ НЕ ЗначениеЗаполнено(ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СтоимостьНУ");
			МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
		КонецЕсли;
		
		Если НЕ СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СпособОтраженияРасходовПоАренднымПлатежам");
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокВключенияСтоимостиВСоставРасходовНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СтоимостьНУ");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияНУ");
		МассивНепроверяемыхРеквизитов.Добавить("АмортизацияДо2009НУ");
		МассивНепроверяемыхРеквизитов.Добавить("ФактическийСрокИспользованияДо2009НУ");
		МассивНепроверяемыхРеквизитов.Добавить("СпособОтраженияРасходовПоАренднымПлатежам");
	
	КонецЕсли;
 	
	Если (ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается
		ИЛИ ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету
		ИЛИ ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ)
		И ((ПлательщикНалогаНаПрибыль ИЛИ ПлательщикНДФЛ)
			И (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы 
				ИЛИ ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету
				ИЛИ НЕ ЗначениеЗаполнено(ПорядокВключенияСтоимостиВСоставРасходовНУ))) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособОтраженияРасходовПоАмортизации");
	КонецЕсли;
	
	Если НЕ ПрименяетсяУСНДоходыМинусРасходы Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПервоначальнаяСтоимостьУСН");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПриобретенияУСН");
		МассивНепроверяемыхРеквизитов.Добавить("СрокПолезногоИспользованияУСН");
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокВключенияСтоимостиВСоставРасходовУСН");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПервоначальнаяСтоимостьПриИзменении(Элемент)
	
	Если Стоимость = 0 Тогда
		Стоимость = ПервоначальнаяСтоимость;
	КонецЕсли;
	
	Если ПервоначальнаяСтоимостьНУ = 0 Тогда
		ПервоначальнаяСтоимостьНУ = ПервоначальнаяСтоимость;
	КонецЕсли;
	
	Если СтоимостьНУ = 0 
		И НЕ (ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету"))Тогда
		СтоимостьНУ = ПервоначальнаяСтоимостьНУ;
	КонецЕсли;
	
	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		Если ПервоначальнаяСтоимостьУСН = 0 Тогда
			ПервоначальнаяСтоимостьУСН = ПервоначальнаяСтоимость;
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПервоначальнаяСтоимостьНУПриИзменении(Элемент)
	
	Если СтоимостьНУ = 0 
		И ПорядокВключенияСтоимостиВСоставРасходовНУ <> ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
		СтоимостьНУ = ПервоначальнаяСтоимостьНУ;
	КонецЕсли;
	
	ПересчитатьСуммыРазниц(ЭтаФорма);  
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПриИзменении(Элемент)
	
	Если СтоимостьНУ = 0 
		И НЕ (ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету"))Тогда
		СтоимостьНУ = ПервоначальнаяСтоимостьНУ;
	КонецЕсли;
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияПриИзменении(Элемент)
	
	Если АмортизацияНУ = 0 Тогда
		АмортизацияНУ = Амортизация;
	КонецЕсли;
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияНУПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АмортизацияПРПриИзменении(Элемент)
	
	ПересчитатьСуммыРазниц(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособыОтраженияРасходовПоАмортизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПриНачалеВыбореИзСправочникаСпособовОтраженияРасходовНаКлиенте(Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СпособПоступленияПриИзменении(Элемент)

	УстановитьПорядокВключенияСтоимостиВСоставРасходовНУ(ЭтаФорма);

	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокПогашенияСтоимостиПриИзменении(Элемент)
		
	ОчиститьНеиспользуемыеРеквизиты();
	ПересчитатьСуммыРазниц(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНачисленияАмортизацииПриИзменении(Элемент)

	ОчиститьНеиспользуемыеРеквизиты();
	ПересчитатьСуммыРазниц(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияПриИзменении(Элемент)
	
	СрокПолезногоИспользованияОбработатьИзменение();

КонецПроцедуры

&НаКлиенте
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)
	
	ОчиститьНеиспользуемыеРеквизиты();
	ЗаполнитьИспользуемыеРеквизитыНУ(ЭтаФорма);
	ПересчитатьСуммыРазниц(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтраженияРасходовПоЛизинговымПлатежамНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПриНачалеВыбореИзСправочникаСпособовОтраженияРасходовНаКлиенте(Элемент, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПолезногоИспользованияУСНПриИзменении(Элемент)
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ПоступлениеПоДоговоруЛизинга = 
		Форма.СпособПоступления = ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга");
		
	Элементы.ГруппаКонтрагентДоговор.Видимость = ПоступлениеПоДоговоруЛизинга;
	
	НачислениеАмортизации = 
		Форма.ПорядокПогашенияСтоимости = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации");
	НачислениеИзносаПоЕНАОФ = 
		Форма.ПорядокПогашенияСтоимости = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ");
	
	Элементы.ГруппаНачислениеАмортизации.Видимость = НачислениеАмортизации ИЛИ НачислениеИзносаПоЕНАОФ;
	Элементы.ГруппаПараметрыРасчетаАмортизации.ОтображениеСтраниц = 
		?(НачислениеИзносаПоЕНАОФ, ОтображениеСтраницФормы.Нет, ОтображениеСтраницФормы.ЗакладкиСверху);
	Элементы.СпособНачисленияАмортизации.Видимость = НачислениеАмортизации;
	
	Линейный = Форма.СпособНачисленияАмортизации = 
		ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
	УменьшаемогоОстатка = Форма.СпособНачисленияАмортизации = 
		ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка");
	ПоСуммеЧиселЛетИспользования = Форма.СпособНачисленияАмортизации = 
		ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования");
	ПропорциональноОбъемуПродукции = Форма.СпособНачисленияАмортизации = 
		ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции");
	ПоЕНАОФ = Форма.СпособНачисленияАмортизации = 
		ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФ");
	ПоЕНАОФНа1000кмПробега = Форма.СпособНачисленияАмортизации = 
		ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега");
	ЕдиновременноПриПринятииКУчету = Форма.СпособНачисленияАмортизации = 
		ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету");
		
	Элементы.ГруппаПараметрыРасчетаАмортизации.Видимость = НЕ ЕдиновременноПриПринятииКУчету;
		
	Элементы.СрокПолезногоИспользования.АвтоОтметкаНезаполненного = Линейный ИЛИ УменьшаемогоОстатка ИЛИ ПоСуммеЧиселЛетИспользования;
	Элементы.СрокПолезногоИспользования.ОтметкаНезаполненного = (Линейный ИЛИ УменьшаемогоОстатка ИЛИ ПоСуммеЧиселЛетИспользования)
		И Форма.СрокПолезногоИспользования = 0;
		
	Элементы.НачислятьАмортизацию.Видимость = НЕ НачислениеИзносаПоЕНАОФ;
	Элементы.КоэффициентУскорения.Видимость = УменьшаемогоОстатка;
	Элементы.ПараметрВыработки.Видимость = ПропорциональноОбъемуПродукции ИЛИ ПоЕНАОФНа1000кмПробега;
	Элементы.ГруппаОбъемПродукции.Видимость = ПропорциональноОбъемуПродукции ИЛИ ПоЕНАОФНа1000кмПробега;
	Элементы.ГруппаГодоваяНормаАмортизационныхОтчисленийПоЕНАОФ.Видимость = НачислениеИзносаПоЕНАОФ ИЛИ ПоЕНАОФ ИЛИ ПоЕНАОФНа1000кмПробега;
	Элементы.ГрафикАмортизации.Видимость = Линейный ИЛИ УменьшаемогоОстатка ИЛИ ПоСуммеЧиселЛетИспользования ИЛИ ПоЕНАОФ;
	Элементы.СрокИспользованияДляВычисленияАмортизации.Видимость = НЕ НачислениеИзносаПоЕНАОФ;
	Элементы.СтоимостьДляВычисленияАмортизации.Видимость = НЕ НачислениеИзносаПоЕНАОФ;
	Элементы.ГруппаОбъемПродукцииРаботДляВычисленияАмортизации.Видимость = ПропорциональноОбъемуПродукции ИЛИ ПоЕНАОФНа1000кмПробега;
	
	ВключениеВРасходыПриПринятииКУчетуНУ = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету");
	НачислениеАмортизацииНУ = Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ 
		= ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации");
		
	Элементы.ГруппаЛизинг.Видимость = ПоступлениеПоДоговоруЛизинга И НЕ ВключениеВРасходыПриПринятииКУчетуНУ;
	Элементы.ГруппаНачислениеАмортизацииНУСтраницы.Видимость = НачислениеАмортизацииНУ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьСуммыРазниц(Форма)
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Форма.СчетУчета).НалоговыйУчет Тогда
		Форма.СтоимостьВР = Форма.Стоимость - Форма.СтоимостьНУ - Форма.СтоимостьПР;
	Иначе
		Форма.СтоимостьВР = 0;
		Форма.СтоимостьПР = 0;
	КонецЕсли;
	
	Если БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Форма.СчетНачисленияАмортизации).НалоговыйУчет Тогда
		ТекущаяАмортизация = Форма.Амортизация;
		Если Форма.ПорядокПогашенияСтоимости = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса")
			ИЛИ Форма.ПорядокПогашенияСтоимости = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ") Тогда
			ТекущаяАмортизация = 0 
		КонецЕсли;
		Форма.АмортизацияВР = ТекущаяАмортизация - Форма.АмортизацияНУ - Форма.АмортизацияПР;
	Иначе
		Форма.АмортизацияВР = 0;
		Форма.АмортизацияПР = 0;
	КонецЕсли;
				
	Если Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы") Тогда
		Форма.АмортизацияНУ = 0;
		Форма.АмортизацияПР = Форма.Амортизация;
		Форма.АмортизацияВР = 0;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияБУ = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Форма.СрокПолезногоИспользования);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияНУ = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Форма.СрокПолезногоИспользованияНУ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(Форма)
	
	Форма.РасшифровкаСрокаПолезногоИспользованияУСН = 
		УправлениеВнеоборотнымиАктивамиКлиентСервер.РасшифровкаСрокаПолезногоИспользования(Форма.СрокПолезногоИспользованияУСН);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНеиспользуемыеРеквизиты()
	
	// Бухгалтерский учет.
	
	Если СпособПоступления <> ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга") Тогда
		Контрагент = Неопределено;
		ДоговорКонтрагента = Неопределено;
		КорректировкаСтоимостиНУ = Неопределено;
	КонецЕсли;
	
	Если ПорядокПогашенияСтоимости = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации") Тогда
		
		Если СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный") Тогда
			
			КоэффициентУскорения = 0;
			КоэффициентАмортизации = 0;
			ПараметрВыработки = Неопределено;
			ОбъемПродукцииРабот = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
			
		ИначеЕсли СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка") Тогда
			
			КоэффициентАмортизации = 0;
			ПараметрВыработки = Неопределено;
			ОбъемПродукцииРабот = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизации = 0;

		ИначеЕсли СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования") Тогда
			
			КоэффициентУскорения = 0;
			КоэффициентАмортизации = 0;
			ПараметрВыработки = Неопределено;
			ОбъемПродукцииРабот = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
			
		ИначеЕсли СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции") Тогда
			
			КоэффициентУскорения = 0;
			КоэффициентАмортизации = 0;
			ГрафикАмортизации = Неопределено;
			ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
			
		ИначеЕсли СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФ") Тогда
			
			КоэффициентУскорения = 0;
			ПараметрВыработки = Неопределено;
			ОбъемПродукцииРабот  = 0;
			
		ИначеЕсли СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега") Тогда
			
			КоэффициентУскорения = 0;
			ГрафикАмортизации = Неопределено;
			ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
			
		ИначеЕсли СпособНачисленияАмортизации = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ЕдиновременноПриПринятииКУчету") Тогда
			
			НачислятьАмортизацию = Ложь;
			СрокПолезногоИспользования = 0;
			КоэффициентУскорения = 0;
			КоэффициентАмортизации = 0;
			ПараметрВыработки = Неопределено;
			ОбъемПродукцииРабот = 0;
			ГрафикАмортизации = Неопределено;
			СтоимостьДляВычисленияАмортизации = 0;
			СрокИспользованияДляВычисленияАмортизации = 0;
			ОбъемПродукцииРаботДляВычисленияАмортизации = 0;
			ЛиквидационнаяСтоимость = 0;
			
		КонецЕсли;
		
	ИначеЕсли ПорядокПогашенияСтоимости = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается") Тогда
		
		НакопленнаяАмортизация = 0;
		СпособНачисленияАмортизации = Неопределено;
		СрокПолезногоИспользования = 0;
		КоэффициентУскорения = 0;
		НачислятьАмортизацию = Ложь;
		ГрафикАмортизации = Неопределено;
		СтоимостьДляВычисленияАмортизации = 0;
		СрокИспользованияДляВычисленияАмортизации = 0;
		ЛиквидационнаяСтоимость = 0;
		
	ИначеЕсли ПорядокПогашенияСтоимости = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету") Тогда
		
		Амортизация = 0;
		СпособНачисленияАмортизации = Неопределено;
		СрокПолезногоИспользования = 0;
		КоэффициентУскорения = 0;
		НачислятьАмортизацию = Ложь;
		ГрафикАмортизации = Неопределено;
		СуммаПоследнейМодернизации = 0;
		СтоимостьДляВычисленияАмортизации = 0;
		СрокИспользованияДляВычисленияАмортизации = 0;
		ЛиквидационнаяСтоимость = 0;
		
	ИначеЕсли ПорядокПогашенияСтоимости = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ") Тогда
		
		Амортизация = 0;
		СпособНачисленияАмортизации = Неопределено;
		КоэффициентУскорения = 0;
		ГрафикАмортизации = Неопределено;
		СтоимостьДляВычисленияАмортизации = 0;
		СрокИспользованияДляВычисленияАмортизации = 0;
		
	КонецЕсли;
	
	Если (ПорядокПогашенияСтоимости = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СтоимостьНеПогашается")
		ИЛИ ПорядокПогашенияСтоимости = ПредопределенноеЗначение("Перечисление.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету")) 
		И (ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы") 
			ИЛИ ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету")) Тогда
		
		СпособыОтраженияРасходовПоАмортизации = Неопределено
		
	КонецЕсли;
	
	// Налоговый учет.
	
	Если ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы") Тогда
		
		АмортизацияНУ = 0;
		СрокПолезногоИспользованияНУ = 0;
		НачислятьАмортизациюНУ = 0;
		СпециальныйКоэффициентНУ = 0;
		СтоимостьДо2002НУ = 0;
		АмортизацияДо2002НУ = 0;
		СуммаПоследнейМодернизацииНУ = 0;
		
	ИначеЕсли ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету") Тогда
		
		АмортизацияНУ = 0;
		СрокПолезногоИспользованияНУ = 0;
		НачислятьАмортизациюНУ = 0;
		СпециальныйКоэффициентНУ = 0;
		СтоимостьДо2002НУ = 0;
		АмортизацияДо2002НУ = 0;
		
	КонецЕсли;

	ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(ЭтаФорма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура СрокПолезногоИспользованияОбработатьИзменение()

	Если СрокПолезногоИспользованияНУ = 0 Тогда
		СрокПолезногоИспользованияНУ = СрокПолезногоИспользования;
		ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(ЭтаФорма);
	КонецЕсли;
	
	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		Если СрокПолезногоИспользованияУСН = 0 Тогда
			СрокПолезногоИспользованияУСН = СрокПолезногоИспользования;
			ОтобразитьРасшифровкуСрокаПолезногоИспользованияУСН(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьРасшифровкуСрокаПолезногоИспользованияБУ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИспользуемыеРеквизитыНУ(Форма)
	
	Если Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации") Тогда
		Если Форма.СрокПолезногоИспользованияНУ = 0 Тогда
			Форма.СрокПолезногоИспользованияНУ 	= Форма.СрокПолезногоИспользования;		
			Форма.НачислятьАмортизациюНУ 		= Истина;
			ОтобразитьРасшифровкуСрокаПолезногоИспользованияНУ(Форма);
		КонецЕсли;
	Иначе
		Форма.АмортизацияНУ = 0;
		Форма.АмортизацияПР = 0;
		Форма.АмортизацияВР = 0;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруДанныхФормы()

	СтруктураДанныхФормы = Новый Структура(
		"Амортизация, 
		|АмортизацияВР,
		|АмортизацияДо2002НУ,
		|АмортизацияДо2009НУ,
		|АмортизацияНУ,
		|АмортизацияПР,
		|ГрафикАмортизации,
		|ДатаПринятияКУчету,
		|ДатаПриобретенияУСН,
		|ИнвентарныйНомер,
		|КоэффициентАмортизации,
		|КоэффициентУскорения,
		|Местонахождение,
		|МОЛ,
		|НачислятьАмортизацию,
		|НачислятьАмортизациюНУ,
		|ОбъемПродукцииРабот,
		|ОбъемПродукцииРаботДляВычисленияАмортизации,
		|ОсновноеСредство,
		|ПараметрВыработки,
		|ПервоначальнаяСтоимость,
		|ПервоначальнаяСтоимостьНУ,
		|ПервоначальнаяСтоимостьУСН,
		|ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|ПорядокВключенияСтоимостиВСоставРасходовУСН,
		|ПорядокПогашенияСтоимости,
		|ПРДляВычисленияАмортизации,
		|СпециальныйКоэффициентНУ,
		|СпособНачисленияАмортизации,
		|СпособПоступления,
		|СпособыОтраженияРасходовПоАмортизации,
		|СрокИспользованияДляВычисленияАмортизации,
		|СрокПолезногоИспользования,
		|СрокПолезногоИспользованияНУ,
		|СрокПолезногоИспользованияУСН,
		|Стоимость,
		|СтоимостьВР,
		|СтоимостьДляВычисленияАмортизации,
		|СтоимостьДо2002НУ,
		|СтоимостьНУ,
		|СтоимостьПР,
		|СуммаНачисленнойАмортизацииУСН,
		|СчетНачисленияАмортизации,
		|СчетУчета,
		|ФактическийСрокИспользованияДо2009НУ,
		|ЭтоНовый,
		|Контрагент,
		|Обесценение,
		|ДоговорКонтрагента,
		|СпособОтраженияРасходовПоАренднымПлатежам,
		|КорректировкаСтоимостиНУ,
		|ЛиквидационнаяСтоимость");

	ЗаполнитьЗначенияСвойств(СтруктураДанныхФормы, ЭтаФорма);
		
	Возврат СтруктураДанныхФормы;

КонецФункции

&НаКлиенте
Процедура ВопросСохранитьИзмененияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			Модифицированность = Ложь;
			ПеренестиВДокумент = Истина;
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()

	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВидовДоговоров = БухгалтерскийУчетПереопределяемый.ПолучитьМассивВидовДоговоров(Истина); // СПоставщиком

	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(ДоговорКонтрагента,
		Контрагент, Организация, МассивВидовДоговоров);

КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеВыбореИзСправочникаСпособовОтраженияРасходовНаКлиенте(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	СписокОрганизацийОтбора = Новый СписокЗначений;
	СписокОрганизацийОтбора.Добавить(Организация);
	СписокОрганизацийОтбора.Добавить(ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Организация", СписокОрганизацийОтбора);

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	
	ИмяЭлемента = Элемент.Имя;
	Поз = СтрДлина(ИмяЭлемента);
	Пока СтрНайти("0123456789", Сред(ИмяЭлемента, Поз, 1)) <> 0 Цикл
		Поз = Поз - 1;
	КонецЦикла;
	
	Если Поз > 0 Тогда
		ИмяЭлемента = Лев(ИмяЭлемента, Поз);	
		ПараметрыФормы.Вставить("ТекущаяСтрока", ЭтаФорма[ИмяЭлемента]);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.СпособыОтраженияРасходовПоАмортизации.Форма.ФормаВыбора", ПараметрыФормы, Элемент);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПорядокВключенияСтоимостиВСоставРасходовНУ(Форма)

	СпособПоступления = Форма.СпособПоступления;
	Если СпособПоступления = ПредопределенноеЗначение("Перечисление.СпособыПоступленияАктивов.ПоДоговоруЛизинга") Тогда
		
		Если Форма.ПрименяетсяУСНДоходыМинусРасходы Тогда
			Форма.ПорядокВключенияСтоимостиВСоставРасходовУСН = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов");
		КонецЕсли;
		
		Если Форма.ПлательщикНДФЛ Тогда
			Если Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ <> ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы") Тогда
				Форма.ПорядокВключенияСтоимостиВСоставРасходовНУ = ПредопределенноеЗначение("Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы");
				ЗаполнитьИспользуемыеРеквизитыНУ(Форма);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти