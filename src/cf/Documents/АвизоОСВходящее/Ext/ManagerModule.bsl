#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 7, 0);
	
КонецФункции

#Область ЗаполнениеНаОсновании

Процедура ЗаполнитьПоАвизоОСИсходящее(Объект, Основание) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.ОрганизацияПолучатель КАК Организация,
	|	Реквизиты.Организация КАК ОрганизацияОтправитель,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.Номер КАК НомерВходящегоДокумента,
	|	Реквизиты.Дата КАК ДатаВходящегоДокумента,
	|	Реквизиты.Ссылка КАК ДокументОснование,
	|	Реквизиты.СобытиеОС КАК СобытиеОС
	|ИЗ
	|	Документ.АвизоОСИсходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОС.Амортизация КАК Амортизация,
	|	ОС.АмортизацияВР КАК АмортизацияВР,
	|	ОС.АмортизацияДо2002НУ КАК АмортизацияДо2002НУ,
	|	ОС.АмортизацияДо2009НУ КАК АмортизацияДо2009НУ,
	|	ОС.АмортизацияНУ КАК АмортизацияНУ,
	|	ОС.АмортизацияПР КАК АмортизацияПР,
	|	ОС.ГрафикАмортизации КАК ГрафикАмортизации,
	|	ОС.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ОС.ДатаПриобретенияУСН КАК ДатаПриобретенияУСН,
	|	ОС.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ОС.КоэффициентАмортизации КАК КоэффициентАмортизации,
	|	ОС.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ОС.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	ОС.НачислятьАмортизациюНУ КАК НачислятьАмортизациюНУ,
	|	ОС.ОбъемПродукцииРабот КАК ОбъемПродукцииРабот,
	|	ОС.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ОС.ПараметрВыработки КАК ПараметрВыработки,
	|	ОС.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ОС.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|	ОС.ПервоначальнаяСтоимостьУСН КАК ПервоначальнаяСтоимостьУСН,
	|	ОС.ПорядокВключенияСтоимостиВСоставРасходовНУ КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	ОС.ПорядокВключенияСтоимостиВСоставРасходовУСН КАК ПорядокВключенияСтоимостиВСоставРасходовУСН,
	|	ОС.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	ОС.ПРДляВычисленияАмортизации КАК ПРДляВычисленияАмортизации,
	|	ОС.СпециальныйКоэффициентНУ КАК СпециальныйКоэффициентНУ,
	|	ОС.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ОС.СпособПоступления КАК СпособПоступления,
	|	ВЫБОР
	|		КОГДА ОС.СпособыОтраженияРасходовПоАмортизации.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОС.СпособыОтраженияРасходовПоАмортизации
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка)
	|	КОНЕЦ КАК СпособыОтраженияРасходовПоАмортизации,
	|	ОС.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ОС.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ОС.СрокПолезногоИспользованияНУ КАК СрокПолезногоИспользованияНУ,
	|	ОС.СрокПолезногоИспользованияУСН КАК СрокПолезногоИспользованияУСН,
	|	ОС.Стоимость КАК Стоимость,
	|	ОС.СтоимостьВР КАК СтоимостьВР,
	|	ОС.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ОС.СтоимостьДо2002НУ КАК СтоимостьДо2002НУ,
	|	ОС.СтоимостьНУ КАК СтоимостьНУ,
	|	ОС.СтоимостьПР КАК СтоимостьПР,
	|	ОС.СуммаНачисленнойАмортизацииУСН КАК СуммаНачисленнойАмортизацииУСН,
	|	ОС.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ОС.СчетУчета КАК СчетУчета,
	|	ОС.ФактическийСрокИспользованияДо2009НУ КАК ФактическийСрокИспользованияДо2009НУ,
	|	ОС.НомерСтроки КАК НомерСтроки,
	|	ОС.Контрагент КАК Контрагент,
	|	ОС.Обесценение КАК Обесценение,
	|	ОС.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОС.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ВЫБОР
	|		КОГДА ОС.СпособОтраженияРасходовПоАренднымПлатежам.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ОС.СпособОтраженияРасходовПоАренднымПлатежам
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка)
	|	КОНЕЦ КАК СпособОтраженияРасходовПоАренднымПлатежам,
	|	ОС.КорректировкаСтоимостиНУ КАК КорректировкаСтоимостиНУ
	|ИЗ
	|	Документ.АвизоОСИсходящее.ОС КАК ОС
	|ГДЕ
	|	ОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
		
	Результаты 		= Запрос.ВыполнитьПакет();
	Реквизиты 		= Результаты[0];
	ОС 				= Результаты[1];
	
	// Шапка
	ДанныеОснования = Реквизиты.Выбрать();
	ДанныеОснования.Следующий();
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОснования);
	
	Объект.НомерВходящегоДокумента 	= 
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеОснования.НомерВходящегоДокумента, Истина, Ложь);

	// Табличная часть
	Объект.ОС.Загрузить(ОС.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаПараметровПроведенияДокумента

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	Документ.АвизоОСВходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Результат    	= Запрос.Выполнить();
	
	Реквизиты       = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);
	Период          = Реквизиты.Период;
	Организация     = Реквизиты.Организация;
	
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СодержаниеПроводки", 		НСтр("ru = 'Поступление ОС по авизо'"));
	Запрос.УстановитьПараметр("ПрименениеПБУ18", 			УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ПлательщикНалогаНаПрибыль",	УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ПрименяетсяУСН",				УчетнаяПолитика.ПрименяетсяУСН(Реквизиты.Организация, Реквизиты.Период));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц)
		+ ТекстЗапросаОС(НомераТаблиц)
		+ ТекстЗапросаСтоимостьОС(НомераТаблиц)
		+ ТекстЗапросаНакопленнаяАмортизация(НомераТаблиц)
		+ ТекстЗапросаНакопленныйИзнос(НомераТаблиц)
		+ ТекстЗапросаОбесценение(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц = Неопределено)
	
	НомераТаблиц.Вставить("ВременнаяТаблицаРеквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СобытиеОС КАК СобытиеОС,
	|	Реквизиты.ОрганизацияОтправитель КАК ОрганизацияОтправитель,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов
	|ПОМЕСТИТЬ ТаблицаРеквизиты
	|ИЗ
	|	Документ.АвизоОСВходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СобытиеОС КАК СобытиеОС,
	|	Реквизиты.ОрганизацияОтправитель КАК ОрганизацияОтправитель,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.Организация.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	&ПрименениеПБУ18 КАК ПрименениеПБУ18,
	|	&ПлательщикНалогаНаПрибыль КАК ПлательщикНалогаНаПрибыль,
	|	&ПрименяетсяУСН КАК ПрименяетсяУСН,
	|	&СодержаниеПроводки КАК СодержаниеПроводки
	|ИЗ
	|	ТаблицаРеквизиты КАК Реквизиты";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаОС", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОС.Ссылка КАК Регистратор,
	|	ОС.НомерСтроки,
	|	ОС.Амортизация,
	|	ОС.АмортизацияВР,
	|	ОС.АмортизацияДо2002НУ,
	|	ОС.АмортизацияДо2009НУ,
	|	ОС.АмортизацияНУ,
	|	ОС.АмортизацияПР,
	|	ОС.ГрафикАмортизации,
	|	ОС.ДатаПринятияКУчету,
	|	ОС.ДатаПриобретенияУСН,
	|	ОС.ИнвентарныйНомер,
	|	ОС.КоэффициентАмортизации,
	|	ОС.КоэффициентУскорения,
	|	ОС.Местонахождение,
	|	ОС.МОЛ,
	|	ОС.НачислятьАмортизацию,
	|	ОС.НачислятьАмортизациюНУ,
	|	ОС.ОбъемПродукцииРабот,
	|	ОС.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ОС.ОсновноеСредство,
	|	ОС.ПараметрВыработки,
	|	ОС.ПервоначальнаяСтоимость,
	|	ОС.ПервоначальнаяСтоимостьНУ,
	|	ОС.ПервоначальнаяСтоимостьУСН,
	|	ОС.ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	ОС.ПорядокВключенияСтоимостиВСоставРасходовУСН,
	|	ОС.ПорядокПогашенияСтоимости,
	|	ОС.ПРДляВычисленияАмортизации,
	|	ОС.СпециальныйКоэффициентНУ,
	|	ОС.СпособНачисленияАмортизации,
	|	ОС.СпособПоступления,
	|	ОС.СпособыОтраженияРасходовПоАмортизации,
	|	ОС.СрокИспользованияДляВычисленияАмортизации,
	|	ОС.СрокПолезногоИспользования,
	|	ОС.СрокПолезногоИспользованияНУ,
	|	ОС.СрокПолезногоИспользованияУСН,
	|	ОС.Стоимость,
	|	ОС.СтоимостьВР,
	|	ОС.СтоимостьДляВычисленияАмортизации,
	|	ОС.СтоимостьДо2002НУ,
	|	ОС.СтоимостьНУ,
	|	ОС.СтоимостьПР,
	|	ОС.СуммаНачисленнойАмортизацииУСН,
	|	ОС.СчетНачисленияАмортизации,
	|	ОС.СчетУчета,
	|	ОС.ФактическийСрокИспользованияДо2009НУ,
	|	ОС.Контрагент,
	|	ОС.Обесценение,
	|	ОС.ДоговорКонтрагента,
	|	ОС.СпособОтраженияРасходовПоАренднымПлатежам,
	|	ОС.КорректировкаСтоимостиНУ,
	|	ОС.ЛиквидационнаяСтоимость
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	Документ.АвизоОСВходящее.ОС КАК ОС
	|ГДЕ
	|	ОС.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("ОсновныеСредства", 	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОС.Регистратор,
	|	ОС.НомерСтроки,
	|	ОС.Амортизация,
	|	ОС.АмортизацияВР,
	|	ОС.АмортизацияДо2002НУ,
	|	ОС.АмортизацияДо2009НУ,
	|	ОС.АмортизацияНУ,
	|	ОС.АмортизацияПР,
	|	ОС.ГрафикАмортизации,
	|	ОС.ДатаПринятияКУчету,
	|	ОС.ДатаПриобретенияУСН,
	|	ОС.ИнвентарныйНомер,
	|	ОС.КоэффициентАмортизации,
	|	ОС.КоэффициентУскорения,
	|	ОС.Местонахождение,
	|	ОС.МОЛ,
	|	ОС.НачислятьАмортизацию,
	|	ОС.НачислятьАмортизациюНУ,
	|	ОС.ОбъемПродукцииРабот,
	|	ОС.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ОС.ОсновноеСредство,
	|	ОС.ПараметрВыработки,
	|	ОС.ПервоначальнаяСтоимость,
	|	ОС.ПервоначальнаяСтоимостьНУ,
	|	ОС.ПервоначальнаяСтоимостьУСН,
	|	ОС.ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	ОС.ПорядокВключенияСтоимостиВСоставРасходовУСН,
	|	ОС.ПорядокПогашенияСтоимости,
	|	ОС.ПРДляВычисленияАмортизации,
	|	ОС.СпециальныйКоэффициентНУ,
	|	ОС.СпособНачисленияАмортизации,
	|	ОС.СпособПоступления,
	|	ОС.СпособыОтраженияРасходовПоАмортизации,
	|	ОС.СрокИспользованияДляВычисленияАмортизации,
	|	ОС.СрокПолезногоИспользования,
	|	ОС.СрокПолезногоИспользованияНУ,
	|	ОС.СрокПолезногоИспользованияУСН,
	|	ОС.Стоимость,
	|	ОС.СтоимостьВР,
	|	ОС.СтоимостьДляВычисленияАмортизации,
	|	ОС.СтоимостьДо2002НУ,
	|	ОС.СтоимостьНУ,
	|	ОС.СтоимостьПР,
	|	ОС.СуммаНачисленнойАмортизацииУСН,
	|	ОС.СчетНачисленияАмортизации,
	|	ОС.СчетУчета,
	|	ОС.ФактическийСрокИспользованияДо2009НУ,
	|	ОС.Контрагент,
	|	ОС.Обесценение,
	|	ОС.ДоговорКонтрагента,
	|	ОС.СпособОтраженияРасходовПоАренднымПлатежам,
	|	ОС.ЛиквидационнаяСтоимость
	|ИЗ
	|	ТаблицаОС КАК ОС";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаСтоимостьОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаСтоимостьОС", 	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОС.Местонахождение,
	|	ОС.СпособПоступления,
	|	ОС.ОсновноеСредство,
	|	ОС.Стоимость,
	|	ОС.СтоимостьВР,
	|	ОС.СтоимостьНУ,
	|	ОС.КорректировкаСтоимостиНУ,
	|	ОС.СтоимостьПР,
	|	ОС.СчетУчета
	|ИЗ
	|	ТаблицаОС КАК ОС
	|ГДЕ
	|	ОС.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И (ОС.Стоимость <> 0
	|			ИЛИ ОС.СтоимостьНУ <> 0
	|			ИЛИ ОС.СтоимостьПР <> 0
	|			ИЛИ ОС.СтоимостьВР <> 0
	|			ИЛИ ОС.КорректировкаСтоимостиНУ <> 0)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаНакопленнаяАмортизация(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаНакопленнаяАмортизация", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОС.Амортизация,
	|	ОС.АмортизацияВР,
	|	ОС.АмортизацияНУ,
	|	ОС.АмортизацияПР,
	|	ОС.ОсновноеСредство,
	|	ОС.Местонахождение,
	|	ОС.СчетНачисленияАмортизации
	|ИЗ
	|	ТаблицаОС КАК ОС
	|ГДЕ
	|	(ОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|			ИЛИ ОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации))
	|	И ОС.СчетНачисленияАмортизации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И (ОС.Амортизация <> 0
	|			ИЛИ ОС.АмортизацияНУ <> 0
	|			ИЛИ ОС.АмортизацияПР <> 0
	|			ИЛИ ОС.АмортизацияВР <> 0)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаНакопленныйИзнос(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаНакопленныйИзнос", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОС.Амортизация,
	|	ОС.ОсновноеСредство,
	|	ОС.Местонахождение,
	|	ОС.СчетНачисленияАмортизации
	|ИЗ
	|	ТаблицаОС КАК ОС
	|ГДЕ
	|	ОС.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ)
	|	И ОС.СчетНачисленияАмортизации <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И ОС.Амортизация <> 0";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

Функция ТекстЗапросаОбесценение(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаОбесценение", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОС.Обесценение,
	|	ОС.ОсновноеСредство,
	|	ОС.Местонахождение,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОбесценениеОС_01) КАК СчетОбесценения
	|ИЗ
	|	ТаблицаОС КАК ОС
	|ГДЕ
	|	ОС.Обесценение <> 0";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 

#КонецОбласти

#Область ФормированиеДвижений

Функция ПодготовитьПараметрыСтоимостьОС(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "Местонахождение,"       							// <Ссылка на справочник подразделений>
	+ "СпособПоступления,"     							// <ПеречислениеСсылка.СпособыПоступленияАктивов>
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "Стоимость,"           	 						// <Число (15,2)>
	+ "СтоимостьВР,"             						// <Число (15,2)>
	+ "СтоимостьНУ,"         							// <Число (15,2)>
	+ "КорректировкаСтоимостиНУ,"						// <Число (15,2)>
	+ "СтоимостьПР,"             						// <Число (15,2)>
	+ "СчетУчета," 										// <План счетов бухгалтерского учета>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ОрганизацияОтправитель,"       	// <СправочникСсылка.Организации>
	+ "СчетРасчетов,"                   // <План счетов бухгалтерского учета>
	+ "ПрименениеПБУ18,"       			// <Булево>
	+ "ПлательщикНалогаНаПрибыль,"      // <Булево>
	+ "СодержаниеПроводки,"             // <Строка>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру бухгалтерии Хозрасчетный
Процедура СформироватьДвиженияСтоимостьОС(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт 
	
	Проводки  = Движения.Хозрасчетный;
	
	Параметры = ПодготовитьПараметрыСтоимостьОС(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
	
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = Реквизиты.СодержаниеПроводки;
		Проводка.Сумма        = СтрокаОС.Стоимость;
		
		Проводка.СчетДт       = СтрокаОС.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);

		Проводка.СчетКт       = Реквизиты.СчетРасчетов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделения", Реквизиты.ОрганизацияОтправитель);
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.Местонахождение, "Дт");
		
		Если Реквизиты.ПлательщикНалогаНаПрибыль Тогда
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаОС.СтоимостьНУ,СтрокаОС.СтоимостьНУ,
					СтрокаОС.СтоимостьПР,СтрокаОС.СтоимостьПР,
					СтрокаОС.СтоимостьВР,СтрокаОС.СтоимостьВР,
					Проводка, Реквизиты.ПрименениеПБУ18);
					
			Если СтрокаОС.КорректировкаСтоимостиНУ <> 0
				И СтрокаОС.СпособПоступления = Перечисления.СпособыПоступленияАктивов.ПоДоговоруЛизинга Тогда
				
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = Реквизиты.Период;
				Проводка.Организация  = Реквизиты.Организация;
				Проводка.Содержание   = Реквизиты.СодержаниеПроводки;
				
				Проводка.СчетДт       = ПланыСчетов.Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);

				Проводка.СчетКт       = Реквизиты.СчетРасчетов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделения", Реквизиты.ОрганизацияОтправитель);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.Местонахождение, "Дт");
				
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаОС.КорректировкаСтоимостиНУ,СтрокаОС.КорректировкаСтоимостиНУ,
						0,0,
						-СтрокаОС.КорректировкаСтоимостиНУ,-СтрокаОС.КорректировкаСтоимостиНУ,
						Проводка, Реквизиты.ПрименениеПБУ18);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Проводки.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыНакопленнаяАмортизация(ТаблицаНакопленнаяАмортизация, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "Амортизация,"           	 						// <Число (15,2)>
	+ "АмортизацияВР,"             						// <Число (15,2)>
	+ "АмортизацияНУ,"         							// <Число (15,2)>
	+ "АмортизацияПР,"             						// <Число (15,2)>
	+ "Местонахождение,"       							// <Ссылка на справочник подразделений>
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "СчетНачисленияАмортизации," 						// <План счетов бухгалтерского учета>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНакопленнаяАмортизация, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ОрганизацияОтправитель,"       	// <СправочникСсылка.Организации>
	+ "СчетРасчетов,"                   // <План счетов бухгалтерского учета>
	+ "ПрименениеПБУ18,"       			// <Булево>
	+ "ПлательщикНалогаНаПрибыль,"      // <Булево>
	+ "СодержаниеПроводки,"             // <Строка>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру бухгалтерии Хозрасчетный
Процедура СформироватьДвиженияНакопленнаяАмортизация(ТаблицаНакопленнаяАмортизация, ТаблицаРеквизиты, Движения, Отказ) Экспорт 
	
	Проводки = Движения.Хозрасчетный;
		
	Параметры = ПодготовитьПараметрыНакопленнаяАмортизация(ТаблицаНакопленнаяАмортизация, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
	
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = Реквизиты.СодержаниеПроводки;
		Проводка.Сумма        = СтрокаОС.Амортизация;
		
		Проводка.СчетДт       = Реквизиты.СчетРасчетов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбособленныеПодразделения", Реквизиты.ОрганизацияОтправитель);
		
		Проводка.СчетКт       = СтрокаОС.СчетНачисленияАмортизации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.Местонахождение, "Кт");
	
		Если Реквизиты.ПлательщикНалогаНаПрибыль Тогда
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаОС.АмортизацияНУ,СтрокаОС.АмортизацияНУ,
				СтрокаОС.АмортизацияПР,СтрокаОС.АмортизацияПР,
				СтрокаОС.АмортизацияВР,СтрокаОС.АмортизацияВР,
				Проводка, Реквизиты.ПрименениеПБУ18);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Проводки.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыНакопленныйИзнос(ТаблицаНакопленныйИзнос, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "Амортизация,"           	 			// <Число (15,2)>
	+ "Местонахождение,"       				// <Ссылка на справочник подразделений>
 	+ "ОсновноеСредство,"       			// <СправочникСсылка.ОсновныеСредства>
	+ "СчетНачисленияАмортизации," 			// <План счетов бухгалтерского учета>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаНакопленныйИзнос, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "СодержаниеПроводки,"             // <Строка>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру бухгалтерии Хозрасчетный
Процедура СформироватьДвиженияНакопленныйИзнос(ТаблицаНакопленныйИзнос, ТаблицаРеквизиты, Движения, Отказ) Экспорт 
	
	Проводки = Движения.Хозрасчетный;
	
	Параметры = ПодготовитьПараметрыНакопленныйИзнос(ТаблицаНакопленныйИзнос, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
	
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = Реквизиты.СодержаниеПроводки;
		Проводка.Сумма        = СтрокаОС.Амортизация;

		Проводка.СчетДт       = СтрокаОС.СчетНачисленияАмортизации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.Местонахождение, "Дт");
		
	КонецЦикла;
	
	Проводки.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыОбесценение(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"      // <СправочникСсылка.ОсновныеСредства>
	+ "СчетОбесценения," 	   // <План счетов бухгалтерского учета>
	+ "Местонахождение,"       // <Ссылка на справочник подразделений>
	+ "Обесценение,";          // <Число (15,2)>
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ОрганизацияОтправитель,"       	// <СправочникСсылка.Организации>
	+ "СчетРасчетов,"                   // <План счетов бухгалтерского учета>
	+ "СодержаниеПроводки,"             // <Строка>
	;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру бухгалтерии Хозрасчетный
Процедура СформироватьДвиженияОбесценение(ТаблицаПеремещенияКО, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Проводки = Движения.Хозрасчетный;
	
	Параметры = ПодготовитьПараметрыОбесценение(ТаблицаПеремещенияКО, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = Реквизиты.Период;
		Проводка.Организация  = Реквизиты.Организация;
		Проводка.Содержание   = Реквизиты.СодержаниеПроводки;
		Проводка.Сумма        = СтрокаОС.Обесценение;
		
		Проводка.СчетДт       = Реквизиты.СчетРасчетов;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбособленныеПодразделения", Реквизиты.ОрганизацияОтправитель);
		
		Проводка.СчетКт       = СтрокаОС.СчетОбесценения;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", СтрокаОС.ОсновноеСредство);
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаОС.Местонахождение, "Кт");
				
	КонецЦикла;
	
	Проводки.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыПервоначальныеСведенияОСБух(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ИнвентарныйНомер,"             					// <Строка(9, Переменная)>
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "ПараметрВыработки,"              				// <СправочникСсылка.ПараметрыВыработкиОС>
	+ "ПервоначальнаяСтоимость,"        				// <Число (15,2)>
	+ "ПорядокПогашенияСтоимости,"      				// <ПеречислениеСсылка.ПорядокПогашенияСтоимостиОС>
	+ "СпособНачисленияАмортизации,"    				// <ПеречислениеСсылка.СпособыНачисленияАмортизацииОС>
	+ "СпособПоступления,"              				// <ПеречислениеСсылка.СпособыПоступленияАктивов>
	+ "Контрагент,"              						// <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента"              				// <СправочникСсылка.ДоговорыКонтрагентов>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру Первоначальные сведения об ОС бух.
//
Процедура СформироватьДвиженияПервоначальныеСведенияОСБух(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт 

	НаборЗаписейДвижения = Движения.ПервоначальныеСведенияОСБухгалтерскийУчет;
	
	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОСБух(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                      = Реквизиты.Период;
		НоваяСтрока.Организация                 = Реквизиты.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер            = СтрокаОС.ИнвентарныйНомер;
		НоваяСтрока.СпособПоступления	        = СтрокаОС.СпособПоступления;
		НоваяСтрока.ПервоначальнаяСтоимость     = СтрокаОС.ПервоначальнаяСтоимость;
		НоваяСтрока.ПорядокПогашенияСтоимости   = СтрокаОС.ПорядокПогашенияСтоимости;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизации;
		НоваяСтрока.ПараметрВыработки           = СтрокаОС.ПараметрВыработки;
		НоваяСтрока.Контрагент                  = СтрокаОС.Контрагент;
		НоваяСтрока.ДоговорКонтрагента          = СтрокаОС.ДоговорКонтрагента;
		
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыМестонахождениеОСБух(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "Местонахождение,"       							// <Ссылка на справочник подразделений>
	+ "МОЛ,"              								// <СправочникСсылка.ФизическиеЛица>
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру Местонахождение ОС бух.
//
Процедура СформироватьДвиженияМестонахождениеОСБух(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.МестонахождениеОСБухгалтерскийУчет;
	
	Параметры = ПодготовитьПараметрыМестонахождениеОСБух(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период           = Реквизиты.Период;
		НоваяСтрока.Организация      = Реквизиты.Организация;
		НоваяСтрока.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.МОЛ              = СтрокаОС.МОЛ;
		НоваяСтрока.Местонахождение  = СтрокаОС.Местонахождение;
		
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПараметрыАмортизацииБух(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "КоэффициентАмортизации,"     					// <Число(4, 2)>
	+ "КоэффициентУскорения,"     						// <Число(5, 2)>
	+ "ОбъемПродукцииРабот,"     						// <Число(10, 0)>
	+ "ОбъемПродукцииРаботДляВычисленияАмортизации,"    // <Число(10, 0)>
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "СрокИспользованияДляВычисленияАмортизации,"     	// <Число(4, 0, Неотрицательный)>
	+ "СпособНачисленияАмортизации,"                    // <ПеречислениеСсылка.СпособыНачисленияАмортизацииОС>
	+ "СрокПолезногоИспользования,"     				// <Число(4, 0, Неотрицательный)>
	+ "Стоимость,"           	 						// <Число (15,2)>
	+ "СтоимостьДляВычисленияАмортизации,"     			// <Число(4, 0, Неотрицательный)>
	+ "ЛиквидационнаяСтоимость,"	 					// <Число (15,2)>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру ПараметрыАмортизации ОС бух.
//
Процедура СформироватьДвиженияПараметрыАмортизацииБух(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.ПараметрыАмортизацииОСБухгалтерскийУчет;

	Параметры = ПодготовитьПараметрыПараметрыАмортизацииБух(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл

		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                     = Реквизиты.Период;
		НоваяСтрока.Организация                = Реквизиты.Организация;
		НоваяСтрока.ОсновноеСредство           = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СрокПолезногоИспользования = СтрокаОС.СрокПолезногоИспользования;
		НоваяСтрока.ОбъемПродукцииРабот        = СтрокаОС.ОбъемПродукцииРабот;
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СрокИспользованияДляВычисленияАмортизации) Тогда
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации = СтрокаОС.СрокПолезногоИспользования;
		Иначе
			НоваяСтрока.СрокИспользованияДляВычисленияАмортизации = СтрокаОС.СрокИспользованияДляВычисленияАмортизации;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СтоимостьДляВычисленияАмортизации) Тогда
			НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.Стоимость;
		Иначе
			НоваяСтрока.СтоимостьДляВычисленияАмортизации = СтрокаОС.СтоимостьДляВычисленияАмортизации;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРабот;
		Иначе
			НоваяСтрока.ОбъемПродукцииРаботДляВычисленияАмортизации = СтрокаОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
		КонецЕсли;
		НоваяСтрока.КоэффициентАмортизации      = СтрокаОС.КоэффициентАмортизации;
		НоваяСтрока.КоэффициентУскорения        = СтрокаОС.КоэффициентУскорения;
		НоваяСтрока.СпособНачисленияАмортизации = СтрокаОС.СпособНачисленияАмортизации;
		НоваяСтрока.ЛиквидационнаяСтоимость     = СтрокаОС.ЛиквидационнаяСтоимость;

	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеАмортизацииБух(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "НачислятьАмортизацию,"     						// <Булево>
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ЮридическоеФизическоеЛицо,"     	// <ПеречислениеСсылка.ЮридическоеФизическоеЛицо>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру Начисление амортизации бух.
//
Процедура СформироватьДвиженияНачислениеАмортизацииБух(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.НачислениеАмортизацииОСБухгалтерскийУчет;

	Параметры = ПодготовитьПараметрыНачислениеАмортизацииБух(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период               = Реквизиты.Период;
		НоваяСтрока.Организация          = Реквизиты.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизацию;
		
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыСпособыОтраженияРасходовПоАмортизацииБух(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "СпособыОтраженияРасходовПоАмортизации,"     		// <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>
	+ "ПорядокПогашенияСтоимости,"      				// <ПеречислениеСсылка.ПорядокПогашенияСтоимостиОС>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура СформироватьДвиженияСпособыОтраженияРасходовПоАмортизацииБух(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет;
	
	Параметры = ПодготовитьПараметрыСпособыОтраженияРасходовПоАмортизацииБух(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		Если СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаОС.СпособыОтраженияРасходовПоАмортизации) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СпособыОтраженияРасходовПоАмортизации = СтрокаОС.СпособыОтраженияРасходовПоАмортизации;
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыГрафикиАмортизацииОСБух(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ГрафикАмортизации,"     							// <СправочникСсылка.ГодовыеГрафикиАмортизацииОС>
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру Графики амортизации ОС бух.
//
Процедура СформироватьДвиженияГрафикиАмортизацииОСБух(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.ГрафикиАмортизацииОСБухгалтерскийУчет;
	
	Параметры = ПодготовитьПараметрыГрафикиАмортизацииОСБух(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		Если ЗначениеЗаполнено(СтрокаОС.ГрафикАмортизации) Тогда
			НоваяСтрока = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период            = Реквизиты.Период;
			НоваяСтрока.Организация       = Реквизиты.Организация;
			НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.ГрафикАмортизации = СтрокаОС.ГрафикАмортизации;
		КонецЕсли;
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыСчетовУчетаОСБух(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "СчетНачисленияАмортизации," 						// <План счетов бухгалтерского учета>
	+ "СчетУчета," 										// <План счетов бухгалтерского учета>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру СчетаУчета ОС бух.
//
Процедура СформироватьДвиженияСчетовУчетаОСБух(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.СчетаБухгалтерскогоУчетаОС;

	Параметры = ПодготовитьПараметрыСчетовУчетаОСБух(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                    = Реквизиты.Период;
		НоваяСтрока.ОсновноеСредство          = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация               = Реквизиты.Организация;
		НоваяСтрока.СчетУчета                 = СтрокаОС.СчетУчета;
		НоваяСтрока.СчетНачисленияАмортизации = СтрокаОС.СчетНачисленияАмортизации;
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры
 
Функция ПодготовитьПараметрыСостоянияОСБух(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ДатаПринятияКУчету," // <Дата>
	+ "ОсновноеСредство,"   // <СправочникСсылка.ОсновныеСредства>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура СформироватьДвиженияСостоянияОСБух(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ)  Экспорт

	НаборЗаписейДвижения = Движения.СостоянияОСОрганизаций;
	
	Параметры = ПодготовитьПараметрыСостоянияОСБух(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.ДатаСостояния     = СтрокаОС.ДатаПринятияКУчету;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация       = Реквизиты.Организация;
		НоваяСтрока.Состояние         = Перечисления.СостоянияОС.ПринятоКУчету;
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыСобытияОСОрганизаций(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ДатаПринятияКУчету," // <Дата>
	+ "ОсновноеСредство,"   // <СправочникСсылка.ОсновныеСредства>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "СобытиеОС,"       				// <СправочникСсылка.СобытияОС>
	+ "Регистратор,"                   	// <ДокументСсылка.АвизоОСВходящее>
	+ "Номер,"       					// <Строка(11, Переменная)>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру Состояния ОС бух.
//
Процедура СформироватьДвиженияСобытияОСОрганизаций(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.СобытияОСОрганизаций;
	
	Параметры = ПодготовитьПараметрыСобытияОСОрганизаций(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период				= Реквизиты.Период;
		НоваяСтрока.ОсновноеСредство	= СтрокаОС.ОсновноеСредство;
		НоваяСтрока.Организация			= Реквизиты.Организация;
		НоваяСтрока.Событие 			= Реквизиты.СобытиеОС;
		НоваяСтрока.НазваниеДокумента	= Реквизиты.Регистратор.Метаданные().Представление();
		НоваяСтрока.НомерДокумента		= Реквизиты.Номер;
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПервоначальныеСведенияОСНал(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "АмортизацияДо2002НУ,"     						// <Число(15, 2)>
	+ "АмортизацияДо2009НУ,"     						// <Число(15, 2)>
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "ПервоначальнаяСтоимостьНУ,"     					// <Число(15, 2)>
	+ "ПорядокВключенияСтоимостиВСоставРасходовНУ,"     // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ>
	+ "СтоимостьДо2002НУ,"     							// <Число(15, 2)>
	+ "ФактическийСрокИспользованияДо2009НУ,"     		// <Число(4, 0, Неотрицательный)>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПлательщикНалогаНаПрибыль,"      // <Булево>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру Первоначальные сведения об ОС нал.
//
Процедура СформироватьДвиженияПервоначальныеСведенияОСНал(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.ПервоначальныеСведенияОСНалоговыйУчет;
	
	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОСНал(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ Реквизиты.ПлательщикНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                                   = Реквизиты.Период;
		НоваяСтрока.Организация                              = Реквизиты.Организация;
		НоваяСтрока.ОсновноеСредство                         = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьНУ                = СтрокаОС.ПервоначальнаяСтоимостьНУ;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходов = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ;
		НоваяСтрока.СтоимостьДо2002                          = СтрокаОС.СтоимостьДо2002НУ;
		НоваяСтрока.АмортизацияДо2002                        = СтрокаОС.АмортизацияДо2002НУ;
		НоваяСтрока.АмортизацияДо2009                        = СтрокаОС.АмортизацияДо2009НУ;
		НоваяСтрока.ФактическийСрокИспользованияДо2009       = СтрокаОС.ФактическийСрокИспользованияДо2009НУ;
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПараметрыАмортизацииНал(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "ПорядокВключенияСтоимостиВСоставРасходовНУ,"     // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ>
	+ "ПРДляВычисленияАмортизации,"     				// <Число(15, 2)>
	+ "СрокПолезногоИспользованияНУ,"     				// <Число(4, 0, Неотрицательный)>
	+ "СтоимостьПР,"             						// <Число (15,2)>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПлательщикНалогаНаПрибыль,"      // <Булево>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру ПараметрыАмортизации ОС нал.
//
Процедура СформироватьДвиженияПараметрыАмортизацииНал(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.ПараметрыАмортизацииОСНалоговыйУчет;

	Параметры = ПодготовитьПараметрыПараметрыАмортизацииНал(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ Реквизиты.ПлательщикНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                      = Реквизиты.Период;
		НоваяСтрока.Организация                 = Реквизиты.Организация;
		НоваяСтрока.ОсновноеСредство            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СрокПолезногоИспользования  = СтрокаОС.СрокПолезногоИспользованияНУ;
		Если СтрокаОС.ПРДляВычисленияАмортизации = 0  тогда
			НоваяСтрока.ПРДляВычисленияАмортизации = СтрокаОС.СтоимостьПР;
		Иначе
			НоваяСтрока.ПРДляВычисленияАмортизации = СтрокаОС.ПРДляВычисленияАмортизации;
		КонецЕсли;
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыНачислениеАмортизацииНал(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "НачислятьАмортизациюНУ,"     					// <Булево>  
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "ПорядокВключенияСтоимостиВСоставРасходовНУ,"     // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПлательщикНалогаНаПрибыль,"      // <Булево>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру Начисление амортизации нал.
//
Процедура СформироватьДвиженияНачислениеАмортизацииНал(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.НачислениеАмортизацииОСНалоговыйУчет;
	
	Параметры = ПодготовитьПараметрыНачислениеАмортизацииНал(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ Реквизиты.ПлательщикНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		Если НЕ (СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период               = Реквизиты.Период;
		НоваяСтрока.Организация          = Реквизиты.Организация;
		НоваяСтрока.ОсновноеСредство     = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.НачислятьАмортизацию = СтрокаОС.НачислятьАмортизациюНУ;
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры
 
Функция ПодготовитьПараметрыСпецКоэффициентНал(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "ПорядокВключенияСтоимостиВСоставРасходовНУ,"     // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСВСоставРасходовНУ>
	+ "СпециальныйКоэффициентНУ,"     					// <Число(5, 2, Неотрицательный)>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПлательщикНалогаНаПрибыль,"      // <Булево>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру Спец. коэф. амортизации ОС нал.
//
Процедура СформироватьДвиженияСпецКоэффициентНал(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет;
	
	Параметры = ПодготовитьПараметрыСпецКоэффициентНал(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ Реквизиты.ПлательщикНалогаНаПрибыль Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		Если СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = 
				Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
			НоваяСтрока = НаборЗаписейДвижения.Добавить();
			НоваяСтрока.Период                 = Реквизиты.Период;
			НоваяСтрока.ОсновноеСредство       = СтрокаОС.ОсновноеСредство;
			НоваяСтрока.Организация            = Реквизиты.Организация;
			НоваяСтрока.СпециальныйКоэффициент = СтрокаОС.СпециальныйКоэффициентНУ;
		КонецЕсли;
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыПервоначальныеСведенияОСУСН(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ДатаПриобретенияУСН,"     						// <Дата(Дата)>
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "ПервоначальнаяСтоимостьУСН,"     				// <Число(15, 2)>
	+ "ПорядокВключенияСтоимостиВСоставРасходовУСН,"    // <ПеречислениеСсылка.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН>
	+ "ПорядокПогашенияСтоимости,"      				// <ПеречислениеСсылка.ПорядокПогашенияСтоимостиОС>
	+ "СрокПолезногоИспользованияУСН,"     				// <Число(4, 0, Неотрицательный)>
	+ "СуммаНачисленнойАмортизацииУСН,"     			// <Число(15, 2, Неотрицательный)>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПрименяетсяУСН,"     			// <Булево>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру Первоначальные сведения об ОС УСН.
//
Процедура СформироватьДвиженияПервоначальныеСведенияОСУСН(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт 

	НаборЗаписейДвижения = Движения.ПервоначальныеСведенияОСНалоговыйУчетУСН;
	
	Параметры = ПодготовитьПараметрыПервоначальныеСведенияОСУСН(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	Если НЕ Реквизиты.ПрименяетсяУСН Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		Если СтрокаОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.СписаниеПриПринятииКУчету Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период                                      = Реквизиты.Период;
		НоваяСтрока.Организация                                 = Реквизиты.Организация;
		НоваяСтрока.ОсновноеСредство                            = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.ПервоначальнаяСтоимостьУСН                  = СтрокаОС.ПервоначальнаяСтоимостьУСН;
		НоваяСтрока.ПорядокВключенияСтоимостиВСоставРасходовУСН = СтрокаОС.ПорядокВключенияСтоимостиВСоставРасходовУСН;
		НоваяСтрока.СрокПолезногоИспользования                  = СтрокаОС.СрокПолезногоИспользованияУСН;
		НоваяСтрока.СуммаНачисленнойАмортизации                 = СтрокаОС.СуммаНачисленнойАмортизацииУСН;
		НоваяСтрока.ДатаПриобретения                            = СтрокаОС.ДатаПриобретенияУСН;
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

Функция ПодготовитьПараметрыСпособыОтраженияРасходовПоАренднымПлатежамНал(ТаблицаОС, ТаблицаРеквизиты)
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.ТаблицаОС
	
	СписокОбязательныхКолонок = ""
	+ "ОсновноеСредство,"       						// <СправочникСсылка.ОсновныеСредства>
	+ "СпособОтраженияРасходовПоАренднымПлатежам,"     	// <СправочникСсылка.СпособыОтраженияРасходовПоАмортизации>
	+ "ПорядокПогашенияСтоимости,"      				// <ПеречислениеСсылка.ПорядокПогашенияСтоимостиОС>
	;
	
	Параметры.Вставить("ТаблицаОС",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаОС, СписокОбязательныхКолонок));
	
	// Подготовка таблицы Параметры.Реквизиты
	
	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	;  
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по регистру СпособыОтраженияРасходовПоАренднымПлатежамОСНалоговыйУчет.
//
Процедура СформироватьДвиженияСпособыОтраженияРасходовПоАренднымПлатежамНал(ТаблицаОС, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	НаборЗаписейДвижения = Движения.СпособыОтраженияРасходовПоАренднымПлатежамОСНалоговыйУчет;
	
	Параметры = ПодготовитьПараметрыСпособыОтраженияРасходовПоАренднымПлатежамНал(ТаблицаОС, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период);
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛ(Реквизиты.Организация, Реквизиты.Период);
	
	Если НЕ ПлательщикНалогаНаПрибыль И НЕ ПлательщикНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаОС Из Параметры.ТаблицаОС Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОС.СпособОтраженияРасходовПоАренднымПлатежам) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НаборЗаписейДвижения.Добавить();
		НоваяСтрока.Период            = Реквизиты.Период;
		НоваяСтрока.Организация       = Реквизиты.Организация;
		НоваяСтрока.ОсновноеСредство  = СтрокаОС.ОсновноеСредство;
		НоваяСтрока.СпособОтраженияРасходовПоАренднымПлатежам = СтрокаОС.СпособОтраженияРасходовПоАренднымПлатежам;
	КонецЦикла;

	НаборЗаписейДвижения.Записывать = Истина;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Авизо по ОС входящее""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ОрганизацияОтправитель");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	ИЛИ ЗначениеРазрешено(ОрганизацияОтправитель)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// ОБНОВЛЕНИЕ ИНФОРМАЦИОННОЙ БАЗЫ
Процедура ОбновитьЗаписиРегистровСведений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АвизоОСВходящееОС.Ссылка КАК Ссылка,
	|	АвизоОСВходящееОС.ОсновноеСредство КАК ОсновноеСредство,
	|	АвизоОСВходящееОС.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	АвизоОСВходящееОС.Ссылка.Дата КАК Период,
	|	АвизоОСВходящееОС.Ссылка.Организация КАК Организация
	|ИЗ
	|	Документ.АвизоОСВходящее.ОС КАК АвизоОСВходящееОС
	|ИТОГИ
	|	МАКСИМУМ(ДатаПринятияКУчету)
	|ПО
	|	Ссылка,
	|	ОсновноеСредство";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивРегистров = Новый Массив;
	МассивРегистров.Добавить("ПервоначальныеСведенияОСБухгалтерскийУчет");
	МассивРегистров.Добавить("НачислениеАмортизацииОСБухгалтерскийУчет");
	МассивРегистров.Добавить("ПервоначальныеСведенияОСНалоговыйУчет");
	МассивРегистров.Добавить("ПараметрыАмортизацииОСНалоговыйУчет");
	МассивРегистров.Добавить("ПервоначальныеСведенияОСНалоговыйУчетУСН");
	
	ВыборкаДокументы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	Пока ВыборкаДокументы.Следующий() Цикл
	
		Для Каждого Регистр Из МассивРегистров Цикл
			
			НаборЗаписей = РегистрыСведений[Регистр].СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументы.Ссылка);
			НаборЗаписей.Прочитать();
			
			Для каждого СтрокаНабора Из НаборЗаписей Цикл
				Если ЗначениеЗаполнено(ВыборкаДокументы.Период) Тогда
					СтрокаНабора.Период = ВыборкаДокументы.Период;
				КонецЕсли;
			КонецЦикла;
			
			Попытка
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Исключение
				ШаблонСообщения	= НСтр("ru = 'Не выполнено обновление записей регистра сведений %1
											|%2'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Регистр, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.РегистрыСведений.РасчетНалогаНаИмущество,, 
					ТекстСообщения);
			КонецПопытки;
			
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.СостоянияОСОрганизаций.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументы.Ссылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		Выборка = ВыборкаДокументы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОсновноеСредство");
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Период            = Выборка.Период;
			НоваяСтрока.ДатаСостояния     = Выборка.ДатаПринятияКУчету;
			НоваяСтрока.ОсновноеСредство  = Выборка.ОсновноеСредство;
			НоваяСтрока.Организация       = Выборка.Организация;
			НоваяСтрока.Состояние         = Перечисления.СостоянияОС.ПринятоКУчету;
			
		КонецЦикла;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		Исключение
			ШаблонСообщения	= НСтр("ru = 'Не выполнено обновление записей регистра сведений СостоянияОСОрганизаций
										|%2'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.РасчетНалогаНаИмущество,, 
				ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецЕсли