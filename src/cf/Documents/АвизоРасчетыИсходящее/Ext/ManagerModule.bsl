#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 20, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	ИЛИ ЗначениеРазрешено(ОрганизацияПолучатель)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение. Подготовка параметров проведения документа

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", 			ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	Документ.АвизоРасчетыИсходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();

	Реквизиты = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);

	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СодержаниеПроводки", 	 НСтр("ru = 'Передача задолженности по авизо'"));
	Запрос.УстановитьПараметр("ПрименениеПБУ18", 		 УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ОтражатьВНалоговомУчете", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаСуммыДолга(НомераТаблиц)
		+ ТекстЗапросаПереоценкаВалютныхОстатков(НомераТаблиц)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты);

	Результат = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц = Неопределено)

	НомераТаблиц.Вставить("ВТ_Реквизиты", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента КАК ВалютаДокумента,
	|	&ПрименениеПБУ18 КАК ПрименениеПБУ18,
	|	&ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете,
	|	&СодержаниеПроводки КАК СодержаниеПроводки
	|ПОМЕСТИТЬ Реквизиты
	|ИЗ
	|	Документ.АвизоРасчетыИсходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Реквизиты.Регистратор,
	|	Реквизиты.Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ОрганизацияПолучатель,
	|	Реквизиты.СчетРасчетов,
	|	Реквизиты.ПодразделениеОрганизации,
	|	Реквизиты.ВалютаДокумента,
	|	Реквизиты.ПрименениеПБУ18,
	|	Реквизиты.ОтражатьВНалоговомУчете,
	|	Реквизиты.СодержаниеПроводки
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаСуммыДолга(НомераТаблиц)

	НомераТаблиц.Вставить("ВТ_СуммыДолга", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("СуммыДолга", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СуммыДолга.Ссылка КАК Регистратор,
	|	СуммыДолга.НомерСтроки,
	|	СуммыДолга.ВидЗадолженности,
	|	СуммыДолга.Контрагент,
	|	СуммыДолга.ДоговорКонтрагента,
	|	СуммыДолга.ДокументРасчетов,
	|	СуммыДолга.КурсВзаиморасчетов,
	|	СуммыДолга.КратностьВзаиморасчетов,
	|	СуммыДолга.СчетУчетаРасчетовСконтрагентом,
	|	СуммыДолга.Сумма,
	|	СуммыДолга.СуммаВзаиморасчетов,
	|	СуммыДолга.СуммаНУ,
	|	СуммыДолга.СуммаПР,
	|	СуммыДолга.СуммаВР,
	|	СуммыДолга.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СуммыДолга.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора
	|ПОМЕСТИТЬ СуммыДолга
	|ИЗ
	|	Документ.АвизоРасчетыИсходящее.СуммыДолга КАК СуммыДолга
	|ГДЕ
	|	СуммыДолга.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыДолга.Регистратор,
	|	СуммыДолга.НомерСтроки,
	|	СуммыДолга.ВидЗадолженности,
	|	СуммыДолга.Контрагент,
	|	СуммыДолга.ДоговорКонтрагента,
	|	СуммыДолга.ДокументРасчетов,
	|	СуммыДолга.КурсВзаиморасчетов,
	|	СуммыДолга.КратностьВзаиморасчетов,
	|	СуммыДолга.СчетУчетаРасчетовСконтрагентом,
	|	СуммыДолга.Сумма,
	|	СуммыДолга.СуммаВзаиморасчетов,
	|	СуммыДолга.СуммаНУ,
	|	СуммыДолга.СуммаПР,
	|	СуммыДолга.СуммаВР
	|ИЗ
	|	СуммыДолга КАК СуммыДолга";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаПереоценкаВалютныхОстатков(НомераТаблиц)

	НомераТаблиц.Вставить("ПереоценкаВалютныхОстатковРеквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Регистратор КАК Регистратор,
	|	Реквизиты.Период КАК Период,
	|	Реквизиты.Организация,
	|	Реквизиты.ВалютаДокумента
	|ИЗ
	|	Реквизиты КАК Реквизиты";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовСКонтрагентами(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", Неопределено);
		Возврат "";
	КонецЕсли;

	НомераТаблиц.Вставить("РасчетыСКонтрагентамиОтложенноеПроведение", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммыДолга.Контрагент КАК Контрагент,
	|	СуммыДолга.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СуммыДолга.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СуммыДолга.ВидДоговора КАК ВидДоговора,
	|	&Период КАК Дата
	|ИЗ
	|	СуммыДолга КАК СуммыДолга";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение. Формирование движений

Функция ПодготовитьПараметрыСуммыДолга(ТаблицаПоСуммамДолга, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПоСуммамДолга
	
	СписокОбязательныхКолонок = ""
	+ "ВидЗадолженности,"       		// <ПеречислениеСсылка.ВидыЗадолженности>
	+ "СчетУчетаРасчетовСКонтрагентом," // <План счетов бухгалтерского учета>
	+ "Контрагент,"       				// <СправочникСсылка.Контрагенты>
	+ "ДоговорКонтрагента,"       		// <СправочникСсылка.ДоговорыКонтрагентов>
	+ "ДокументРасчетов,"       		// <ДокументСсылка> - документ расчетов
	+ "Сумма,"           	 			// <Число (15,2)>
	+ "СуммаВзаиморасчетов,"         	// <Число (15,2)>
	+ "СуммаНУ,"             			// <Число (15,2)>
	+ "СуммаПР,"             			// <Число (15,2)>
	+ "СуммаВР";             			// <Число (15,2)>

	Параметры.Вставить("ТаблицаПоСуммамДолга",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПоСуммамДолга, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ОрганизацияПолучатель,"       	// <СправочникСсылка.Организации>
	+ "СчетРасчетов,"                   // <План счетов бухгалтерского учета>
	+ "ПодразделениеОрганизации,"       // <Ссылка на справочник подразделений>
	+ "ВалютаДокумента,"       			// <СправочникСсылка.Валюта>
	+ "ПрименениеПБУ18,"       			// <Булево>
	+ "ОтражатьВНалоговомУчете,"        // <Булево>
	+ "СодержаниеПроводки,"             // <Строка>
	; 

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияСуммыДолга(ТаблицаПоСуммамДолга, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Проводки  = Движения.Хозрасчетный;
	
	Параметры = ПодготовитьПараметрыСуммыДолга(ТаблицаПоСуммамДолга, ТаблицаРеквизиты);
   	Реквизиты = Параметры.Реквизиты[0];
	
	Для каждого СтрокаДолга Из Параметры.ТаблицаПоСуммамДолга Цикл
		
		СвойстваСчетаУчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаДолга.СчетУчетаРасчетовСКонтрагентом);
		
		Проводка = Проводки.Добавить();
		Проводка.Организация 	= Реквизиты.Организация;
		Проводка.Период 		= Реквизиты.Период;
		Проводка.Содержание 	= Реквизиты.СодержаниеПроводки;
		
		Проводка.Сумма = СтрокаДолга.Сумма;
		
		Если СтрокаДолга.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
		
			Проводка.СчетДт = Реквизиты.СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбособленныеПодразделения", Реквизиты.ОрганизацияПолучатель);
			
			Проводка.СчетКт = СтрокаДолга.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", 	СтрокаДолга.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры", 		СтрокаДолга.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СтрокаДолга.ДокументРасчетов);

			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Кт");
			
			Если СвойстваСчетаУчетаРасчетов.Валютный Тогда
				Проводка.ВалютаКт        = Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаКт = СтрокаДолга.СуммаВзаиморасчетов;
			КонецЕсли;
		
		Иначе
		
			Проводка.СчетДт = СтрокаДолга.СчетУчетаРасчетовСКонтрагентом;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", 	СтрокаДолга.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры", 		СтрокаДолга.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СтрокаДолга.ДокументРасчетов);
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Дт");
			
			Если СвойстваСчетаУчетаРасчетов.Валютный Тогда
				Проводка.ВалютаДт        = Реквизиты.ВалютаДокумента;
				Проводка.ВалютнаяСуммаДт = СтрокаДолга.СуммаВзаиморасчетов;
			КонецЕсли;
		
			Проводка.СчетКт = Реквизиты.СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделения", Реквизиты.ОрганизацияПолучатель);
			
		КонецЕсли;
		
		Если Реквизиты.ОтражатьВНалоговомУчете Тогда 
			Если СвойстваСчетаУчетаРасчетов.Валютный Тогда 
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаДолга.СуммаНУ, СтрокаДолга.СуммаНУ,
					СтрокаДолга.СуммаПР, СтрокаДолга.СуммаПР, СтрокаДолга.СуммаВР, СтрокаДолга.СуммаВР, 
					Проводка, Реквизиты.ПрименениеПБУ18);
			Иначе
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаДолга.Сумма, СтрокаДолга.Сумма,,,,,
					Проводка, Реквизиты.ПрименениеПБУ18);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Проводки.Записывать = Истина;
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Авизо
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Авизо";
	КомандаПечати.Представление = НСтр("ru = 'Авизо'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Авизо по расчетам исходящее""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Функция ПолучитьПериодВыборкиДвиженийССубконто(МассивОбъектов)

	СтруктураДат = Новый Структура("ДатаОТ, ДатаДО");
	
	ЗапросПериодОборотов = Новый Запрос;
	ЗапросПериодОборотов.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПериодОборотов.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Док.Дата) КАК ДатаОТ,
	|	МАКСИМУМ(Док.Дата) КАК ДатаДО
	|ИЗ
	|	Документ.АвизоРасчетыИсходящее КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивОбъектов)";
	
	ВыборкаПериодОборотов = ЗапросПериодОборотов.Выполнить().Выбрать();
	ВыборкаПериодОборотов.Следующий();
	
	СтруктураДат.Вставить("ДатаОТ", 	ВыборкаПериодОборотов.ДатаОТ - 1);
	СтруктураДат.Вставить("ДатаДО", 	ВыборкаПериодОборотов.ДатаДО + 1);

	Возврат СтруктураДат;
	
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыАвизо()
	
	ТекстЗапроса =   
	"ВЫБРАТЬ
	|	Авизо.Ссылка,
	|	Авизо.Номер,
	|	Авизо.Дата,
	|	Авизо.СчетРасчетов,
	|	Авизо.ВалютаДокумента,
	|	Авизо.Организация КАК ОрганизацияОтправитель,
	|	ВЫБОР
	|		КОГДА Авизо.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Авизо.Организация
	|		ИНАЧЕ Авизо.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	Авизо.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Авизо.Ответственный,
	|	Авизо.Ответственный.Представление КАК ОтветственныйПредставление
	|ПОМЕСТИТЬ ТаблицаШапка
	|ИЗ
	|	Документ.АвизоРасчетыИсходящее КАК Авизо
	|ГДЕ
	|	Авизо.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШапка.Ссылка КАК Ссылка,
	|	ТаблицаШапка.Номер КАК Номер,
	|	ТаблицаШапка.Дата КАК Дата,
	|	ТаблицаШапка.СчетРасчетов,
	|	ТаблицаШапка.ВалютаДокумента,
	|	ТаблицаШапка.ОрганизацияОтправитель,
	|	ТаблицаШапка.Организация,
	|	ТаблицаШапка.ОрганизацияПолучатель,
	|	ТаблицаШапка.Ответственный,
	|	ТаблицаШапка.ОтветственныйПредставление
	|ИЗ
	|	ТаблицаШапка КАК ТаблицаШапка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвизоРасчетыИсходящее.Ссылка КАК Ссылка,
	|	АвизоРасчетыИсходящее.ВидЗадолженности КАК ВидЗадолженности,
	|	АвизоРасчетыИсходящее.Контрагент КАК КонтрагентСсылка,
	|	АвизоРасчетыИсходящее.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	СУММА(АвизоРасчетыИсходящее.Сумма) КАК Сумма,
	|	СУММА(АвизоРасчетыИсходящее.СуммаВзаиморасчетов) КАК ВалСумма
	|ИЗ
	|	Документ.АвизоРасчетыИсходящее.СуммыДолга КАК АвизоРасчетыИсходящее
	|ГДЕ
	|	АвизоРасчетыИсходящее.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	АвизоРасчетыИсходящее.Ссылка,
	|	АвизоРасчетыИсходящее.ВидЗадолженности,
	|	АвизоРасчетыИсходящее.Контрагент,
	|	АвизоРасчетыИсходящее.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВалютаДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.ВалютаКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.ВалютаДт
	|	КОНЕЦ КАК Валюта,
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт
	|	КОНЕЦ КАК ВалСумма,
	|	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	|	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	|	ХозрасчетныйДвиженияССубконто.Содержание,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СуммаНУДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СуммаНУКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаНУДт
	|	КОНЕЦ КАК СуммаНУ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СуммаПРДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СуммаПРКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаПРДт
	|	КОНЕЦ КАК СуммаПР,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СуммаВРДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СуммаВРКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаВРДт
	|	КОНЕЦ КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&ДатаОТ,
	|			&ДатаДО,
	|			(Регистратор, СчетДт) В
	|					(ВЫБРАТЬ
	|						ТаблицаШапка.Ссылка,
	|						ТаблицаШапка.СчетРасчетов
	|					ИЗ
	|						ТаблицаШапка)
	|				ИЛИ (Регистратор, СчетКт) В
	|					(ВЫБРАТЬ
	|						ТаблицаШапка.Ссылка,
	|						ТаблицаШапка.СчетРасчетов
	|					ИЗ
	|						ТаблицаШапка),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвизо(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвизоРасчетыИсходящее_Авизо";
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	СтруктураДат = ПолучитьПериодВыборкиДвиженийССубконто(МассивОбъектов);
	Запрос.УстановитьПараметр("ДатаОТ", 		СтруктураДат.ДатаОТ);
	Запрос.УстановитьПараметр("ДатаДО", 		СтруктураДат.ДатаДО);
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыАвизо();
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Шапка 			= Результаты[1].Выбрать();
	ВыборкаСтрок 	= Результаты[2].Выбрать();
	ВыборкаДвижений = Результаты[3].Выбрать();
	
	ПервыйДокумент  = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АвизоРасчетыИсходящее.ПФ_MXL_Авизо");
	
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Выводим основную шапку
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Извещение (авизо) на передачу расчетов'"));
		
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.Организация = ПредставлениеОрганизации;
		
		СведенияОбОтправителе    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.ОрганизацияОтправитель, Шапка.Дата);
		ПредставлениеОтправителя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОтправителе, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.Отправитель = ПредставлениеОтправителя;
		
		СведенияОПолучателе     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.ОрганизацияПолучатель, Шапка.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПолучателе, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.Получатель = ПредставлениеПолучателя;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим шапку таблицы дебиторской задолженности
		ВыборкаСтрок.Сбросить();
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыРасчетов");
		ОбластьМакета.Параметры.ВидЗадолженности = "1. " + Перечисления.ВидыЗадолженности.Дебиторская + " задолженность";
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим строки таблицы задолженности
		ИтогоСумма = 0;
		ИтогоВалСумма = 0;
		НС = 1;
		
		СтруктураПоиска = Новый Структура("Ссылка, ВидЗадолженности", Шапка.Ссылка, Перечисления.ВидыЗадолженности.Дебиторская);
		Пока ВыборкаСтрок.НайтиСледующий(СтруктураПоиска) Цикл
		
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыРасчетов");
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
			ОбластьМакета.Параметры.Валюта = Шапка.ВалютаДокумента;
			ОбластьМакета.Параметры.НомерСтроки = НС;
			
			ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаСтрок.КонтрагентСсылка, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,");
			
			ОбластьМакета.Параметры.КонтрагентДоговор = СокрЛП(ПредставлениеКонтрагента) + Символы.ПС
											+ Строка(ВыборкаСтрок.ДоговорКонтрагента);
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ИтогоСумма = ИтогоСумма + ВыборкаСтрок.Сумма;
			ИтогоВалСумма = ИтогоВалСумма + ВыборкаСтрок.ВалСумма;
			
			НС = НС + 1;		
		КонецЦикла;
		
		// Выводим подвал таблицы задолженности
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыРасчетов");
		ОбластьМакета.Параметры.ИтогоСумма = ИтогоСумма;
		ОбластьМакета.Параметры.ИтогоВалСумма = ИтогоВалСумма;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим шапку таблицы кредиторской задолженности
		ВыборкаСтрок.Сбросить();
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыРасчетов");
		ОбластьМакета.Параметры.ВидЗадолженности = "2. " + Перечисления.ВидыЗадолженности.Кредиторская + " задолженность";
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим строки таблицы задолженности
		ИтогоСумма = 0;
		ИтогоВалСумма = 0;
		НС = 1;
		СтруктураПоиска = Новый Структура("Ссылка, ВидЗадолженности", Шапка.Ссылка, Перечисления.ВидыЗадолженности.Кредиторская);
		Пока ВыборкаСтрок.НайтиСледующий(СтруктураПоиска) Цикл
		
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыРасчетов");
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
			ОбластьМакета.Параметры.Валюта = Шапка.ВалютаДокумента;
			ОбластьМакета.Параметры.НомерСтроки = НС;
			
			ПредставлениеКонтрагента = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаСтрок.КонтрагентСсылка, Шапка.Дата), "ПолноеНаименование,ИНН,КПП,");
			
			ОбластьМакета.Параметры.КонтрагентДоговор = СокрЛП(ПредставлениеКонтрагента) + Символы.ПС
											+ Строка(ВыборкаСтрок.ДоговорКонтрагента);
			
			ТабДокумент.Вывести(ОбластьМакета);
			
			ИтогоСумма = ИтогоСумма + ВыборкаСтрок.Сумма;
			ИтогоВалСумма = ИтогоВалСумма + ВыборкаСтрок.ВалСумма;
			
			НС = НС + 1;		
		КонецЦикла;
		
		// Выводим подвал таблицы задолженности
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыРасчетов");
		ОбластьМакета.Параметры.ИтогоСумма = ИтогоСумма;
		ОбластьМакета.Параметры.ИтогоВалСумма = ИтогоВалСумма;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим шапку таблицы БУ
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыБУ");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ВыборкаДвижений.Сбросить();
		СтруктураПоиска = Новый Структура("Регистратор", Шапка.Ссылка);
			
		НС = 1;
		// Выводим строки таблицы БУ
		Пока ВыборкаДвижений.НайтиСледующий(СтруктураПоиска) Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыБУ");
			ОбластьМакета.Параметры.Заполнить(ВыборкаДвижений);
			ОбластьМакета.Параметры.НомерСтроки = НС;
			
			АналитикаДт = 
				?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоДт1), Строка(ВыборкаДвижений.СубконтоДт1) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоДт2), Строка(ВыборкаДвижений.СубконтоДт2) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоДт3), Строка(ВыборкаДвижений.СубконтоДт3), "");
						
			АналитикаКт = 
				?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоКт1), Строка(ВыборкаДвижений.СубконтоКт1) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоКт2), Строка(ВыборкаДвижений.СубконтоКт2) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаДвижений.СубконтоКт3), Строка(ВыборкаДвижений.СубконтоКт3), "");
						
			ОбластьМакета.Параметры.АналитикаДт = АналитикаДт;
			ОбластьМакета.Параметры.АналитикаКт = АналитикаКт;
			
			ТабДокумент.Вывести(ОбластьМакета);
			НС = НС +1;		
		КонецЦикла;
		
		// Выводим подвал таблицы БУ
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыБУ");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим общий подвал
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Шапка.ОтветственныйПредставление), "", 
																							Шапка.ОтветственныйПредставление);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабДокумент;

КонецФункции // ПечатьПеремещениеТоваров()

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Авизо") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Авизо", "Авизо", 
			ПечатьАвизо(МассивОбъектов, ОбъектыПечати), , "Документ.АвизоРасчетыИсходящее.ПФ_MXL_Авизо");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение счетов учета

Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, СтрокаТЧ) Экспорт

	СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Объект.Организация, СтрокаТЧ.Контрагент, СтрокаТЧ.ДоговорКонтрагента);

	ВидДоговораКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТЧ.ДоговорКонтрагента, "ВидДоговора");
	
	Если (ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком)
		ИЛИ (ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)
		ИЛИ (ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку)
		ИЛИ (ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.Прочее)
		Тогда
		
		Если СтрокаТЧ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетАвансов;
		Иначе
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		КонецЕсли;
		
	ИначеЕсли (ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
		ИЛИ (ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером)
		ИЛИ (ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку)
		Тогда
		
		Если СтрокаТЧ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		Иначе
			СтрокаТЧ.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ОрганизацияПолучатель");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли