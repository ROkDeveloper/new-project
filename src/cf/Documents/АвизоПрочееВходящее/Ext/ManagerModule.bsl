#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 20, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	ИЛИ ЗначениеРазрешено(ОрганизацияОтправитель)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение. Подготовка параметров проведения документа

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", 			ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация
	|ИЗ
	|	Документ.АвизоПрочееВходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Результат    = Запрос.Выполнить();

	Реквизиты       = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);
	Период          = Реквизиты.Период;
	Организация     = Реквизиты.Организация;

	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПрименениеПБУ18", 		 УчетнаяПолитика.ПоддержкаПБУ18(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("ОтражатьВНалоговомУчете", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период));
	
	НомераТаблиц = Новый Структура;

	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаДанныеБух(НомераТаблиц);

	Результат = Запрос.ВыполнитьПакет();

	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;

	Возврат ПараметрыПроведения;

КонецФункции
        
Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц = Неопределено)

	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.ОрганизацияОтправитель КАК ОрганизацияОтправитель,
	|	&ПрименениеПБУ18 КАК ПрименениеПБУ18,
	|	&ОтражатьВНалоговомУчете КАК ОтражатьВНалоговомУчете
	|ИЗ
	|	Документ.АвизоПрочееВходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаДанныеБух(НомераТаблиц)

	НомераТаблиц.Вставить("ДанныеБух", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеБух.Ссылка КАК Регистратор,
	|	ДанныеБух.НомерСтроки,
	|	ДанныеБух.СчетУчета,
	|	ДанныеБух.Подразделение,
	|	ДанныеБух.Субконто1,
	|	ДанныеБух.Субконто2,
	|	ДанныеБух.Субконто3,
	|	ДанныеБух.Сумма,
	|	ДанныеБух.СуммаНУ,
	|	ДанныеБух.СуммаПР,
	|	ДанныеБух.СуммаВР,
	|	ДанныеБух.СуммаКТ,
	|	ДанныеБух.Количество,
	|	ДанныеБух.Валюта,
	|	ДанныеБух.ВалютнаяСумма,
	|	ДанныеБух.СодержаниеПроводки
	|ИЗ
	|	Документ.АвизоПрочееВходящее.ДанныеБух КАК ДанныеБух
	|ГДЕ
	|	ДанныеБух.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение. Формирование движений

Функция ПодготовитьПараметрыДанныеБух(ТаблицаДанныеБух, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ДанныеБух
	
	СписокОбязательныхКолонок = ""
	+ "СчетУчета,"           // <План счетов бухгалтерского учета>
	+ "Субконто1," 			 // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто2," 			 // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Субконто3," 			 // <Характеристика.ВидыСубконтоХозрасчетные>
	+ "Подразделение,"       // <СправочникСсылка.Подразделения организаций>
	+ "Сумма,"           	 // <Число (15,2)>
	+ "СуммаКт,"         	 // <Число (15,2)>
	+ "Валюта,"              // <СправочникСсылка.Валюта>
	+ "ВалютнаяСумма,"       // <Число (15,3)>
	+ "Количество,"   		 // <Число (15,3)>
	+ "СуммаНУ,"             // <Число (15,2)>
	+ "СуммаПР,"             // <Число (15,2)>
	+ "СуммаВР,"             // <Число (15,2)>
	+ "СодержаниеПроводки,"; // <Строка,0>

	Параметры.Вставить("ТаблицаДанныеБух",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаДанныеБух, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ОрганизацияОтправитель,"       	// <СправочникСсылка.Организации>
	+ "СчетРасчетов,"                   // <План счетов бухгалтерского учета>
	+ "ПрименениеПБУ18,"       			// <Булево>
	+ "ОтражатьВНалоговомУчете,";       // <Булево>

	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Процедура СформироватьДвиженияДанныеБух(ТаблицаДанныеБух, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Проводки  = Движения.Хозрасчетный;
	
	Параметры = ПодготовитьПараметрыДанныеБух(ТаблицаДанныеБух, ТаблицаРеквизиты);
   	Реквизиты = Параметры.Реквизиты[0];
	
	Для Каждого СтрокаТЧ Из Параметры.ТаблицаДанныеБух Цикл
		
		ОтразитьПоДебету 	= (СтрокаТЧ.Сумма <> 0);
		СуммаПроводки 		= ?(ОтразитьПоДебету, СтрокаТЧ.Сумма, СтрокаТЧ.СуммаКт);
		СвойстваСчетаУчета 	= БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТЧ.СчетУчета);
		
		Проводка = Проводки.Добавить();
		Проводка.Период      = Реквизиты.Период;
		Проводка.Организация = Реквизиты.Организация;
		Проводка.Содержание  = СтрокаТЧ.СодержаниеПроводки;
		Проводка.Сумма 		 = СуммаПроводки;
		
		Если ОтразитьПоДебету Тогда
			
			Проводка.СчетДт = СтрокаТЧ.СчетУчета;
			Для Инд = 1 По 3 Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, Инд, СтрокаТЧ["Субконто" + Инд]);
			КонецЦикла;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаТЧ.Подразделение, "Дт");
			
			Если СвойстваСчетаУчета.Валютный Тогда
				Проводка.ВалютаДт 			= СтрокаТЧ.Валюта;
				Проводка.ВалютнаяСуммаДт 	= СтрокаТЧ.ВалютнаяСумма;
			КонецЕсли;
			Если СвойстваСчетаУчета.Количественный Тогда
				Проводка.КоличествоДт 		= СтрокаТЧ.Количество;
			КонецЕсли;
			
			Если НЕ СвойстваСчетаУчета.Забалансовый Тогда
				Проводка.СчетКт = Реквизиты.СчетРасчетов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Реквизиты.ОрганизацияОтправитель);
			КонецЕсли;
			
		Иначе
			
			Если НЕ СвойстваСчетаУчета.Забалансовый Тогда
				Проводка.СчетДт = Реквизиты.СчетРасчетов;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Реквизиты.ОрганизацияОтправитель);
			КонецЕсли;
			
			Проводка.СчетКт = СтрокаТЧ.СчетУчета;
			Для Инд = 1 По 3 Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, Инд, СтрокаТЧ["Субконто" + Инд]);
			КонецЦикла;
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаТЧ.Подразделение, "Кт");
			
			Если СвойстваСчетаУчета.Валютный Тогда
				Проводка.ВалютаКт 			= СтрокаТЧ.Валюта;
				Проводка.ВалютнаяСуммаКт 	= СтрокаТЧ.ВалютнаяСумма;
			КонецЕсли;
			Если СвойстваСчетаУчета.Количественный Тогда
				Проводка.КоличествоКт 		= СтрокаТЧ.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Реквизиты.ОтражатьВНалоговомУчете Тогда
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаТЧ.СуммаНУ,СтрокаТЧ.СуммаНУ,
				СтрокаТЧ.СуммаПР,СтрокаТЧ.СуммаПР,
				СтрокаТЧ.СуммаВР,СтрокаТЧ.СуммаВР,
				Проводка, Реквизиты.ПрименениеПБУ18);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Проводки.Записывать = Истина;


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение на основании

Процедура ЗаполнитьПоАвизоПрочееИсходящее(Объект, Основание) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.ОрганизацияПолучатель КАК Организация,
	|	Реквизиты.Организация КАК ОрганизацияОтправитель,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.Номер КАК НомерВходящегоДокумента,
	|	Реквизиты.Дата КАК ДатаВходящегоДокумента,
	|	Реквизиты.Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.АвизоПрочееИсходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеБух.СчетУчета,
	|	ДанныеБух.Субконто1,
	|	ДанныеБух.Субконто2,
	|	ДанныеБух.Субконто3,
	|	ДанныеБух.Сумма КАК СуммаКТ,
	|	ДанныеБух.СуммаНУ,
	|	ДанныеБух.СуммаПР,
	|	ДанныеБух.СуммаВР,
	|	ДанныеБух.СуммаКТ КАК Сумма,
	|	ДанныеБух.Количество,
	|	ДанныеБух.Валюта,
	|	ДанныеБух.ВалютнаяСумма,
	|	ДанныеБух.СодержаниеПроводки,
	|	ДанныеБух.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.АвизоПрочееИсходящее.ДанныеБух КАК ДанныеБух
	|ГДЕ
	|	ДанныеБух.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результаты 		= Запрос.ВыполнитьПакет();
	Реквизиты 		= Результаты[0];
	ДанныеБух 		= Результаты[1];

	// Шапка
	ДанныеОснования = Реквизиты.Выбрать();
	ДанныеОснования.Следующий();
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОснования);
	
	Объект.НомерВходящегоДокумента 	= 
		ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеОснования.НомерВходящегоДокумента, Истина, Ложь);

	// Табличная часть
	Объект.ДанныеБух.Загрузить(ДанныеБух.Выгрузить());
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ОрганизацияОтправитель");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Авизо по прочим операциям входящее""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

#КонецЕсли