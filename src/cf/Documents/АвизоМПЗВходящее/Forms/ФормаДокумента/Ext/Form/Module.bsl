
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	ЗначениеРабочейДаты = ОбщегоНазначения.РабочаяДатаПользователя();
	
	// Активизировать первую непустую табличную часть
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокВидимыхТабличныхЧастей());
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	ДатаНачалаВеденияПолныхЗаписейПоРУ = УчетНДСРаздельный.ДатаНачалаВеденияСамодостаточнойАналитики();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДанныеПоПартиям

&НаКлиенте
Процедура ДанныеПоПартиямПриАктивизацииСтроки(Элемент)
	
	ДанныеПоСФУстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПартиямПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("Ключ" , ТекущиеДанные.Ключ);
	УдалитьСвязанныеЗаписи(КлючПоиска, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПартиямПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		// Инициализируем значение "Ключ" для установки связи данной таблицы с таблицей "ДанныеПоСФ".
		// Значение должно быть уникальным в пределах таблицы ДанныеПоПартиям
		Элементы.ДанныеПоПартиям.ТекущиеДанные.Ключ = ПолучитьНовыйКлючСтроки();
		
		ДанныеПоСФУстановитьОтборСтрок();
		
	КонецЕсли;
 	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПартиямНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|СчетУчета, НомерГТД, СтранаПроисхождения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеПоПартиямНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПартиямСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаНУ = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПР - СтрокаТабличнойЧасти.СуммаВР;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПартиямДокументПартииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",   Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",    Объект.ОрганизацияОтправитель);
	ПараметрыОбъекта.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",      ТекущиеДанные.СчетУчета);
	ПараметрыОбъекта.Вставить("Склад",      	Объект.Склад);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.АвизоМПЗВходящее.ТабличныеЧасти.ДанныеПоПартиям.Реквизиты.ДокументПартии.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДанныеПоСФ

&НаКлиенте
Процедура ДанныеПоСФПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Элементы.ДанныеПоПартиям.ТекущиеДанные <> Неопределено И НоваяСтрока Тогда
		КлючОтбора = Элементы.ДанныеПоСФ.ОтборСтрок.Ключ;
		Элементы.ДанныеПоСФ.ТекущиеДанные.Ключ = КлючОтбора;
		КлючПоиска = Новый Структура("Ключ" , КлючОтбора);
		Элементы.ДанныеПоСФ.ТекущиеДанные.НомерСтрокиТЧ = ПолучитьНовыйНомерТЧТабличнойЧастиДанныеПоСФ(КлючПоиска);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФПослеУдаления(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	КлючПоиска = Новый Структура("Ключ" , ТекущиеДанные.Ключ);
	ПересчитатьНомераТЧТабличнойЧастиДанныеПоСФ(КлючПоиска);  	
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоСФ.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		Если РаздельныйУчетНДСНаСчете19 Тогда
			
			СтрокаТабличнойЧасти.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти.СуммаБезНДС, Ложь,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
		Иначе
			
			СтрокаТабличнойЧасти.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти.Стоимость,	Истина,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСтоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоСФ.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
									СтрокаТабличнойЧасти.Стоимость,	Истина,
									УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСуммаБезНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоСФ.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти.СуммаБезНДС, Ложь,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборДанныеПоПартиям(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("ДанныеПоПартиям");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("АвизоПроинициализировано")
		И Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаАвизо Тогда

		Форма.УстановитьУсловноеОформлениеАвизо();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАвизо() Экспорт

	НастройкиУсловногоОформления.Вставить("АвизоПроинициализировано", Истина);


	// ДанныеПоПартиямДокументПартии

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоПартиямДокументПартии");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Истина);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"РаздельныйУчетНДСНаСчете19", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоПартиямДокументПартии");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"РаздельныйУчетНДСНаСчете19", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ДанныеПоСФСчетФактура
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФСчетФактура");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.Стоимость", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.Количество", ВидСравненияКомпоновкиДанных.НеРавно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ДанныеПоСФНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ДанныеПоСФСчетФактура, ДанныеПоСФСтавкаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФСчетФактура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.СчетФактура", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.Количество", ВидСравненияКомпоновкиДанных.НеРавно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.Стоимость", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ДанныеПоСФСпособУчетаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.НДС", ВидСравненияКомпоновкиДанных.НеРавно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	// ДанныеПоСФПоставщик
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФПоставщик");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Дата", ВидСравненияКомпоновкиДанных.Меньше, ДатаНачалаВеденияПолныхЗаписейПоРУ);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДанныеПоСФИсправленныйСчетФактура
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФИсправленныйСчетФактура");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Дата", ВидСравненияКомпоновкиДанных.Меньше, ДатаНачалаВеденияПолныхЗаписейПоРУ);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента			= Объект.Дата;

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ЗагрузитьСписокВыбораПодразделений(Истина);
			
	МаксимальныйКлючСтроки = Документы.АвизоМПЗВходящее.ПолучитьМаксимальныйКлючСтроки(Объект.ДанныеПоПартиям);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ДокументОснование.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокВыбораПодразделений(ОтборПоОрганизации = Истина)
	
	УправляющийРеквизит = ?(ОтборПоОрганизации, Объект.Организация, Объект.ОрганизацияОтправитель);
	УправляющийЭлемент	= ?(ОтборПоОрганизации,Элементы.Организация, Элементы.ОрганизацияОтправитель);
	
	УправляемыйРеквизит = ?(ОтборПоОрганизации, Объект.ОрганизацияОтправитель, Объект.Организация);
	УправляемыйЭлемент	= ?(ОтборПоОрганизации, Элементы.ОрганизацияОтправитель, Элементы.Организация);
	
	Если ЗначениеЗаполнено(УправляющийРеквизит) Тогда 
		
		СписокВыбораПодразделений = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(УправляющийРеквизит).ВыгрузитьЗначения();	
		
		УправляемыйЭлемент.РежимВыбораИзСписка = Истина;
		УправляемыйЭлемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбораПодразделений);
			
		Если УправляемыйЭлемент.СписокВыбора.НайтиПоЗначению(УправляющийРеквизит) = Неопределено Тогда
			
			УправляемыйРеквизит = Справочники.Организации.ПустаяСсылка();
			
			Если УправляемыйЭлемент = Элементы.ОрганизацияОтправитель Тогда
				Если НЕ СпособОценкиМПЗПоСредней Тогда
					Для Каждого СтрокаТабличнойЧасти ИЗ Объект.ДанныеПоПартиям Цикл
						СтрокаТабличнойЧасти.ДокументПартии = Неопределено;	
					КонецЦикла;
				КонецЕсли;
				Для Каждого СтрокаТабличнойЧасти ИЗ Объект.ДанныеПоСФ Цикл
					СтрокаТабличнойЧасти.СчетФактура = Неопределено;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(УправляемыйРеквизит) Тогда
			
			УправляющийЭлемент.РежимВыбораИзСписка = Истина;
			УправляющийЭлемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбораПодразделений);

		КонецЕсли;                                            	
		
	Иначе
		
		УправляемыйЭлемент.РежимВыбораИзСписка = Ложь;
		УправляемыйЭлемент.СписокВыбора.Очистить();
		
		Если Не ЗначениеЗаполнено(УправляемыйРеквизит) Тогда 
			
			УправляющийЭлемент.РежимВыбораИзСписка = Ложь;
			УправляющийЭлемент.СписокВыбора.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	СпособОценкиМПЗПоСредней 	= УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата) = Перечисления.СпособыОценки.ПоСредней;
    РаздельныйУчетНДСНаСчете19 	= УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Функция СписокВидимыхТабличныхЧастей()

	СписокТабличныхЧастей = Новый СписокЗначений;

	СписокТабличныхЧастей.Добавить("ДанныеПоПартиям",  "ДанныеПоПартиям");
	СписокТабличныхЧастей.Добавить("ДанныеПоСФ",   	   "ДанныеПоСФ");
	
	Возврат СписокТабличныхЧастей;

КонецФункции

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	Если ЗначениеЗаполнено(Объект.Организация) Тогда 
		
		УстановитьФункциональныеОпцииФормы();
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
		
		ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
		
	КонецЕсли;
	
	ЗагрузитьСписокВыбораПодразделений(Истина);
				
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ДанныеПоПартиям" Тогда
		Документы.АвизоМПЗВходящее.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ДанныеПоПартиям");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");

	ПредставлениеТаблицы = НСтр("ru = 'Данные по партиям'");

	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);

	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ДатаРасчетов"         , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"               , ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Организация"          , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение"        , Объект.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("Склад"                , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"            , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"           , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"           , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"               , Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество"       , Истина);
	ПараметрыФормы.Вставить("КомандаВыбратьОстаток", Ложь);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "ДанныеПоПартиям", СтруктураОтбора);
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
		Иначе
			
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			// Заполняем ключ для отбора связанных записей 
			Если Объект.ДанныеПоПартиям.Количество() > 1 Тогда
				ЭтаФорма.МаксимальныйКлючСтроки = ЭтаФорма.МаксимальныйКлючСтроки + 1;
			КонецЕсли;
			СтрокаТабличнойЧасти.Ключ = ЭтаФорма.МаксимальныйКлючСтроки;
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
			СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
			
			Документы.АвизоМПЗВходящее.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФУстановитьОтборСтрок()
	
	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		// Включаем отбор по ключу из текущей строки табличной части "ДанныеПоПартиям"
		ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", ТекущиеДанные.Ключ); 
		Элементы.ДанныеПоСФ.ОтборСтрок = ОтборСтрок;
	Иначе
	 	ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", 0); 
		Элементы.ДанныеПоСФ.ОтборСтрок = ОтборСтрок;
    КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеПоПартиямНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
	
	Документы.АвизоМПЗВходящее.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ДанныеПоПартиям", СведенияОНоменклатуре);

КонецПроцедуры

 &НаСервере
Функция ПолучитьНовыйНомерТЧТабличнойЧастиДанныеПоСФ(КлючПоиска)
	
	МассивСтрокДанныеПоСФ = Объект.ДанныеПоСФ.НайтиСтроки(КлючПоиска);
	РасчетныйНомерСтроки = МассивСтрокДанныеПоСФ.Количество();
	
	Возврат РасчетныйНомерСтроки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьНовыйКлючСтроки()
	
	// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
	// рассчитывается от максимального существующего значения.
	Если Объект.ДанныеПоПартиям.Количество() > 1 Тогда
		МаксимальныйКлючСтроки = МаксимальныйКлючСтроки + 1;
	КонецЕсли;

	Возврат МаксимальныйКлючСтроки;
	
КонецФункции

&НаСервере
Процедура УдалитьСвязанныеЗаписи(КлючПоиска, Отказ)

	МассивСтрокДанныеПоСФ = Объект.ДанныеПоСФ.НайтиСтроки(КлючПоиска);
	Для Каждого Строка Из МассивСтрокДанныеПоСФ Цикл
		Объект.ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьНомераТЧТабличнойЧастиДанныеПоСФ(КлючПоиска)

	Счетчик = 0;
	
	МассивСтрокДанныеПоСФ = Объект.ДанныеПоСФ.НайтиСтроки(КлючПоиска);
	Для Каждого Строка Из МассивСтрокДанныеПоСФ Цикл
		Счетчик = Счетчик + 1;
		Строка.НомерСтрокиТЧ = Счетчик;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтправительПриИзменении(Элемент)
	
	ЗагрузитьСписокВыбораПодразделений(Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И НЕ Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзмененииНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если Объект.ДанныеПоПартиям.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
				|Заполнить?'");
			
			Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоОснованиюЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			ОснованиеПриИзмененииНаСервере();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОснованиеПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОснованиеПриИзмененииНаСервере()

	Документы.АвизоМПЗВходящее.ЗаполнитьПоАвизоМПЗИсходящее(Объект, Объект.ДокументОснование);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЗначениеРабочейДаты) Тогда
		Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) 
			И НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
			Объект.ДатаВходящегоДокумента = ЗначениеРабочейДаты;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти
