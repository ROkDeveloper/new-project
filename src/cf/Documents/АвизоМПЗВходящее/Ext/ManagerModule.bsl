#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 7, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	ИЛИ ЗначениеРазрешено(ОрганизацияОтправитель)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчета") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "ДанныеПоПартиям" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоАвизоМПЗИсходящее(Объект, Основание) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.ОрганизацияПолучатель КАК Организация,
	|	Реквизиты.Организация КАК ОрганизацияОтправитель,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	Реквизиты.Номер КАК НомерВходящегоДокумента,
	|	Реквизиты.Дата КАК ДатаВходящегоДокумента,
	|	Реквизиты.Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.АвизоМПЗИсходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоПартиям.Номенклатура КАК Номенклатура,
	|	ДанныеПоПартиям.Количество КАК Количество,
	|	ДанныеПоПартиям.СчетУчета КАК СчетУчета,
	|	ДанныеПоПартиям.НомерГТД КАК НомерГТД,
	|	ДанныеПоПартиям.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ДанныеПоПартиям.Сумма КАК Сумма,
	|	ДанныеПоПартиям.СуммаНУ КАК СуммаНУ,
	|	ДанныеПоПартиям.СуммаПР КАК СуммаПР,
	|	ДанныеПоПартиям.СуммаВР КАК СуммаВР,
	|	ДанныеПоПартиям.ДокументПартии КАК ДокументПартии,
	|	ДанныеПоПартиям.Ключ КАК Ключ,
	|	ДанныеПоПартиям.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.АвизоМПЗИсходящее.ДанныеПоПартиям КАК ДанныеПоПартиям
	|ГДЕ
	|	ДанныеПоПартиям.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоСФ.Ключ КАК Ключ,
	|	ДанныеПоСФ.СчетФактура КАК СчетФактура,
	|	ДанныеПоСФ.ВидЦенности КАК ВидЦенности,
	|	ДанныеПоСФ.Количество КАК Количество,
	|	ДанныеПоСФ.Стоимость КАК Стоимость,
	|	ДанныеПоСФ.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеПоСФ.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ДанныеПоСФ.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеПоСФ.НДС КАК НДС,
	|	ДанныеПоСФ.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ДанныеПоСФ.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ДанныеПоСФ.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	ДанныеПоСФ.НомерСтроки КАК НомерСтроки,
	|	ДанныеПоСФ.Поставщик КАК Поставщик,
	|	ДанныеПоСФ.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ИЗ
	|	Документ.АвизоМПЗИсходящее.ДанныеПоСФ КАК ДанныеПоСФ
	|ГДЕ
	|	ДанныеПоСФ.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Результаты 			= Запрос.ВыполнитьПакет();
	Реквизиты 			= Результаты[0];
	ДанныеПоПартиям 	= Результаты[1];
	ДанныеПоСФ 			= Результаты[2];
	
	// Шапка
	ДанныеОснования = Реквизиты.Выбрать();
	ДанныеОснования.Следующий();
	ЗаполнитьЗначенияСвойств(Объект, ДанныеОснования);
	
	Объект.НомерВходящегоДокумента 	= 
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеОснования.НомерВходящегоДокумента, Истина, Ложь);
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда 
		Если НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Объект.ПодразделениеОрганизации, Объект.Организация) Тогда
			Объект.ПодразделениеОрганизации = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Табличные части
	Объект.ДанныеПоПартиям.Загрузить(ДанныеПоПартиям.Выгрузить());
	Объект.ДанныеПоСФ.Загрузить(ДанныеПоСФ.Выгрузить());
		
КонецПроцедуры

Функция ПолучитьМаксимальныйКлючСтроки(ДанныеПоПартиям) Экспорт
	
	Если ДанныеПоПартиям.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	СписокКлючей = Новый СписокЗначений;
	СписокКлючей.ЗагрузитьЗначения(ДанныеПоПартиям.Выгрузить(, "Ключ").ВыгрузитьКолонку("Ключ"));
	СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Возврат СписокКлючей[0].Значение;
	
КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СчетРасчетов
	|ИЗ
	|	Документ.АвизоМПЗВходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Результат 	= Запрос.Выполнить();
	
	Реквизиты 	= ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);
	
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СинонимДанныеПоПартиям",     НСтр("ru = 'Данные по партиям'"));
	Запрос.УстановитьПараметр("СодержаниеПоступлениеМПЗ",  	НСтр("ru = 'Поступление МПЗ по авизо'"));
	Запрос.УстановитьПараметр("МассивСчетовДляГТД",        	УчетНДСВызовСервераПовтИсп.СчетаУчетаДляГТД());
	Запрос.УстановитьПараметр("СчетРасчетов",               Реквизиты.СчетРасчетов);
	Запрос.УстановитьПараметр("ВедетсяУчетПоПартиям",  
		УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) <> Перечисления.СпособыОценки.ПоСредней);
	Запрос.УстановитьПараметр("ВедетсяСуммовойУчетПоСкладам", 		
		БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары));
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНаСчете19", 
		УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("СокращеннаяАналитика", УчетНДСРаздельный.СокращеннаяАналитика(Реквизиты.Период));
	
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицаПоПартиям(НомераТаблиц)
		+ ТекстЗапросаТаблицаПоступленияПоСчетуГТД(НомераТаблиц)
		+ ТекстЗапросаТаблицаПоСФ(НомераТаблиц)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц = Неопределено)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ОрганизацияОтправитель КАК ОрганизацияОтправитель,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	&СодержаниеПоступлениеМПЗ КАК СодержаниеПроводки,
	|	&ВедетсяУчетПоПартиям КАК ВедетсяУчетПоПартиям,
	|	&РаздельныйУчетНДСНаСчете19 КАК РаздельныйУчетНДСНаСчете19,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент
	|ИЗ
	|	Документ.АвизоМПЗВходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаДанныеПоПартиям", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДанныеПоСФ", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПоПартиям.Ссылка КАК Регистратор,
	|	ДанныеПоПартиям.НомерСтроки КАК НомерСтроки,
	|	ДанныеПоПартиям.Номенклатура КАК Номенклатура,
	|	ДанныеПоПартиям.Количество КАК Количество,
	|	ДанныеПоПартиям.СчетУчета КАК СчетУчета,
	|	ДанныеПоПартиям.НомерГТД КАК НомерГТД,
	|	ДанныеПоПартиям.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ДанныеПоПартиям.Сумма КАК Сумма,
	|	ДанныеПоПартиям.СуммаНУ КАК СуммаНУ,
	|	ДанныеПоПартиям.СуммаПР КАК СуммаПР,
	|	ДанныеПоПартиям.СуммаВР КАК СуммаВР,
	|	ДанныеПоПартиям.ДокументПартии КАК ДокументПартии,
	|	ДанныеПоПартиям.Ключ КАК Ключ
	|ПОМЕСТИТЬ ТаблицаДанныеПоПартиям
	|ИЗ
	|	Документ.АвизоМПЗВходящее.ДанныеПоПартиям КАК ДанныеПоПартиям
	|ГДЕ
	|	ДанныеПоПартиям.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоСФ.Ссылка КАК Регистратор,
	|	ДанныеПоСФ.НомерСтроки КАК НомерСтроки,
	|	ДанныеПоСФ.Ключ КАК Ключ,
	|	ДанныеПоСФ.СчетФактура КАК СчетФактура,
	|	ДанныеПоСФ.ВидЦенности КАК ВидЦенности,
	|	ДанныеПоСФ.Количество КАК Количество,
	|	ДанныеПоСФ.Стоимость КАК Стоимость,
	|	ДанныеПоСФ.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеПоСФ.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ДанныеПоСФ.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеПоСФ.НДС КАК НДС,
	|	ДанныеПоСФ.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ДанныеПоСФ.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ДанныеПоСФ.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	ДанныеПоСФ.Поставщик КАК Поставщик,
	|	ДанныеПоСФ.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ПОМЕСТИТЬ ТаблицаДанныеПоСФ
	|ИЗ
	|	Документ.АвизоМПЗВходящее.ДанныеПоСФ КАК ДанныеПоСФ
	|ГДЕ
	|	ДанныеПоСФ.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаПоПартиям(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПоПартиям", 	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПоПартиям.Регистратор,
	|	ДанныеПоПартиям.Номенклатура,
	|	ДанныеПоПартиям.Количество,
	|	ДанныеПоПартиям.СчетУчета,
	|	ДанныеПоПартиям.НомерГТД,
	|	ДанныеПоПартиям.СтранаПроисхождения,
	|	ДанныеПоПартиям.Сумма,
	|	ДанныеПоПартиям.СуммаНУ,
	|	ДанныеПоПартиям.СуммаПР,
	|	ДанныеПоПартиям.СуммаВР,
	|	ДанныеПоПартиям.ДокументПартии,
	|	ДанныеПоПартиям.Ключ
	|ИЗ
	|	ТаблицаДанныеПоПартиям КАК ДанныеПоПартиям";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаПоступленияПоСчетуГТД(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПоступленияПоСчетуГТД", 	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ДанныеПоПартиям"" КАК ИмяСписка,
	|	&СинонимДанныеПоПартиям КАК СинонимСписка,
	|	ДанныеПоПартиям.НомерСтроки КАК НомерСтрокиДокумента,
	|	ДанныеПоПартиям.Номенклатура,
	|	ДанныеПоПартиям.Количество,
	|	ДанныеПоПартиям.СчетУчета,
	|	ДанныеПоПартиям.НомерГТД,
	|	ДанныеПоПартиям.СтранаПроисхождения,
	|	&СодержаниеПоступлениеМПЗ КАК Содержание
	|ИЗ
	|	ТаблицаДанныеПоПартиям КАК ДанныеПоПартиям
	|ГДЕ
	|	ДанныеПоПартиям.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|	И ДанныеПоПартиям.СчетУчета В (&МассивСчетовДляГТД)";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаПоСФ(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПоСФ", 	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеПоСФ.Регистратор КАК Регистратор,
	|	ДанныеПоСФ.Регистратор.Дата КАК Период,
	|	ДанныеПоСФ.Регистратор.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ВедетсяСуммовойУчетПоСкладам
	|			ТОГДА ДанныеПоСФ.Регистратор.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаДанныеПоПартиям.Номенклатура КАК Номенклатура,
	|	ТаблицаДанныеПоПартиям.СчетУчета КАК СчетУчета,
	|	ТаблицаДанныеПоПартиям.ДокументПартии КАК Партия,
	|	ДанныеПоСФ.СчетФактура,
	|	ДанныеПоСФ.НДСВключенВСтоимость,
	|	ДанныеПоСФ.СпособУчетаНДС,
	|	ДанныеПоСФ.ВидЦенности,
	|	ДанныеПоСФ.СчетУчетаНДС,
	|	ДанныеПоСФ.СтавкаНДС,
	|	ДанныеПоСФ.СуммаБезНДС,
	|	ДанныеПоСФ.Количество,
	|	ДанныеПоСФ.Стоимость,
	|	ДанныеПоСФ.НДС,
	|	ДанныеПоСФ.Ключ,
	|	ДанныеПоСФ.НомерСтрокиТЧ,
	|	ВЫБОР
	|		КОГДА НЕ &СокращеннаяАналитика
	|			ТОГДА ДанныеПоСФ.Поставщик
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА НЕ &СокращеннаяАналитика
	|			ТОГДА ДанныеПоСФ.ИсправленныйСчетФактура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.КорректировкаПоступления.ПустаяСсылка)
	|	КОНЕЦ КАК ИсправленныйСчетФактура
	|ИЗ
	|	ТаблицаДанныеПоСФ КАК ДанныеПоСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныеПоПартиям КАК ТаблицаДанныеПоПартиям
	|		ПО ДанныеПоСФ.Ключ = ТаблицаДанныеПоПартиям.Ключ";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("ТаблицаРегистрации", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаРегистрации", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанныеПоПартиям.СчетУчета,
	|	&СчетРасчетов КАК КорСчетСписания
	|ИЗ
	|	ТаблицаДанныеПоПартиям КАК ТаблицаДанныеПоПартиям";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

// Процедура формирования движений по регистру бухгалтерии Хозрасчетный
Процедура СформироватьДвиженияДанныеПоПартиям(ТаблицаПоПартиям, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Проводки 				= Движения.Хозрасчетный;
	
	Параметры = ПодготовитьПараметрыДанныеПоПартиям(ТаблицаПоПартиям, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Реквизиты.СчетРасчетов);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Для Каждого СтрокаПартии Из Параметры.ТаблицаПоПартиям Цикл
		
		СвойстваСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.СчетУчета);

		Проводка 					= Проводки.Добавить();
		Проводка.Период      		= Реквизиты.Период;
		Проводка.Организация 		= Реквизиты.Организация;
		Проводка.Содержание 		= Реквизиты.СодержаниеПроводки;
		Проводка.СчетДт 			= СтрокаПартии.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  СтрокаПартии.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  		Реквизиты.Склад);
		Если Реквизиты.ВедетсяУчетПоПартиям ИЛИ СвойстваСчетаУчета.Забалансовый Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  	СтрокаПартии.ДокументПартии);
		КонецЕсли;
		
		// Балансовый счет учета не может корреспондировать с забалансовым
		Если СвойстваСчетаРасчетов.Забалансовый = СвойстваСчетаУчета.Забалансовый Тогда
			Проводка.СчетКт 		= Реквизиты.СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделения",  Реквизиты.ОрганизацияОтправитель);			
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Дт");
		
		Проводка.Сумма 				= СтрокаПартии.Сумма;
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаПартии.СуммаНУ,СтрокаПартии.СуммаНУ,
				СтрокаПартии.СуммаПР,СтрокаПартии.СуммаПР,
				СтрокаПартии.СуммаВР,СтрокаПартии.СуммаВР,
				Проводка);
		
		Если СвойстваСчетаУчета.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.Количество;
		КонецЕсли;
		
		Если СвойстваСчетаРасчетов.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;
		
		Если СвойстваСчетаУчета.Валютный Тогда
			Проводка.ВалютаКт 			= ВалютаРегламентированногоУчета;
			Проводка.ВалютнаяСуммаКт 	= СтрокаПартии.Сумма;			
		КонецЕсли;
		
		Проводка.НеКорректироватьСтоимостьАвтоматически = Истина;
		
	КонецЦикла;

	Проводки.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыДанныеПоПартиям(ТаблицаПоПартиям, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПоПартиям
	
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"       			// <СправочникСсылка.Номенклатура>
	+ "СчетУчета," 						// <План счетов бухгалтерского учета>
	+ "ДокументПартии,"       			// <ДокументСсылка> - документ партии
	+ "Количество,"		        	 	// <Число (15,3)>
	+ "Сумма,"           	 			// <Число (15,2)>
	+ "СуммаНУ,"             			// <Число (15,2)>
	+ "СуммаПР,"             			// <Число (15,2)>
	+ "СуммаВР,"             			// <Число (15,2)>
	;
	
	Параметры.Вставить("ТаблицаПоПартиям",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПоПартиям, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ОрганизацияОтправитель,"       	// <СправочникСсылка.Организации>
	+ "Склад,"                   		// <СправочникСсылка.Склады>
	+ "СчетРасчетов,"                   // <План счетов бухгалтерского учета>
	+ "ПодразделениеОрганизации,"       // <Ссылка на справочник подразделений>
	+ "СодержаниеПроводки,"             // <Строка>
	+ "ВедетсяУчетПоПартиям,"           // <Булево>
	;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Процедура формирования движений по регистру бухгалтерии Хозрасчетный
Процедура СформироватьДвиженияТаблицаПоступленияПоСчетуГТД(ТаблицаПоступленияПоСчетуГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры 	= ПодготовитьПараметрыТаблицаПоступленияПоСчетуГТД(ТаблицаПоступленияПоСчетуГТД, ТаблицаРеквизиты);
	Реквизиты 	= Параметры.Реквизиты[0];
	ТаблицаПоступленияПоСчетуГТД = Параметры.ТаблицаПоступленияПоСчетуГТД;
	
	// Учет товаров по номерам ГТД
	УчетНДСПереопределяемый.СформироватьПроводкиПоступлениеГТД(
		ТаблицаПоступленияПоСчетуГТД, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыТаблицаПоступленияПоСчетуГТД(ТаблицаПоступленияПоСчетуГТД, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПоступленияПоСчетуГТД
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"                  // <Строка>
	+ "СинонимСписка,"              // <Строка>
	+ "НомерСтрокиДокумента,"       // <Число>
	+ "Номенклатура,"		        // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"                  // <План счетов бухгалтерского учета>
	+ "НомерГТД,"                   // <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"        // <СправочникСсылка.СтраныМира>
	+ "Количество,"                 // <Число (15,3)>
	+ "Содержание";                 // <Строка>
		
	Параметры.Вставить("ТаблицаПоступленияПоСчетуГТД",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПоступленияПоСчетуГТД, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "Контрагент";
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Процедура формирования движений по регистрам НДС
Процедура СформироватьДвиженияПоРегистрамНДС(ТаблицаПоСФ, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПроведенияНДС(ТаблицаПоСФ, ТаблицаРеквизиты);
	ТаблицаПоСФ = Параметры.ТаблицаПоСФ;
	Реквизиты 	= Параметры.Реквизиты[0];
	
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда 
		
		ТаблицаДвижений = ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(Реквизиты, ТаблицаПоСФ);
		
		// Движения по регистру "НДС раздельный учет НДС"
		НаборЗаписейДвижения = Движения.НДСРаздельныйУчет;
		
		Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
			
			НоваяСтрока = НаборЗаписейДвижения.ДобавитьПриход();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			
		КонецЦикла;
		
		НаборЗаписейДвижения.Записывать = Истина;

	Иначе
		
		// НДС по приобретенным ценностям
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностям(
		ТаблицаПоСФ, Движения, Отказ);
	КонецЕсли;
		
КонецПроцедуры

Функция ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(Реквизиты, ТаблицаПоСФ)
	
	ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) = Перечисления.СпособыОценки.ФИФО;
	
	ДанныеДвижений = ТаблицаПоСФ;

	ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";
	
	ДанныеДвижений.Колонки.Добавить("Субконто1");
	ДанныеДвижений.Колонки.Добавить("Субконто2");
	ДанныеДвижений.Колонки.Добавить("Субконто3");
	ДанныеДвижений.Колонки.Добавить("Подразделение");
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаЗатрат",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаНДС",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНДС"));
		
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
				ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
				СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Склад;
				КонецЕсли;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если ПартионныйУчет Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Партия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТаблицы.Подразделение = Реквизиты.ПодразделениеОрганизации;
		
		СтрокаТаблицы.АналитикаУчетаЗатрат = Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(СтрокаТаблицы);
		СтрокаТаблицы.АналитикаУчетаНДС = Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(СтрокаТаблицы);
		
	КонецЦикла;

	ДанныеДвижений.Колонки.Удалить("Номенклатура");
	ДанныеДвижений.Колонки.Удалить("Склад");

	ДанныеДвижений.Свернуть("
		|Период,Организация,СпособУчетаНДС,
		|Партия,АналитикаУчетаЗатрат,АналитикаУчетаНДС",
		"Количество,СуммаБезНДС,НДС");
		
	Возврат ДанныеДвижений;
	
КонецФункции	

Функция ПодготовитьПараметрыПроведенияНДС(ТаблицаПоСФ, ТаблицаРеквизиты)

	Параметры = Новый Структура;
	
	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РаздельныйУчетНДСНаСчете19";     // <Булево>
	;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		
		// Подготовка таблицы Параметры.ТаблицаПоСФ
		
		СписокОбязательныхКолонок = ""
		+ "ВидДвижения,"       		// <ВидДвиженияНакопления>
		+ "Период," 				// <Дата> - период движений - дата документа
		+ "Организация,"       		// <СправочникСсылка.Организации>
		+ "Склад,"		        	// <СправочникСсылка.Склады>
		+ "Номенклатура,"           // <СправочникСсылка.Номенклатура>
		+ "СчетУчета,"             	// <План счетов бухгалтерского учета>
		+ "Партия,"        			// <ДокументСсылка> - документ партии
		+ "СчетФактура,"            // <ДокументСсылка> - документ счета-фактуры
		+ "СпособУчетаНДС,"   		// <Булево>
		+ "ВидЦенности,"            // <ПеречислениеСсылка.ВидыЦенностей>
		+ "СчетУчетаНДС,"           // <ПланСчетовСсылка.Хозрасчетный>
		+ "СтавкаНДС,"             	// <ПеречислениеСсылка.СтавкиНДС>
		+ "Количество,"             // <Число (15,3)>
		+ "СуммаБезНДС,"           	// <Число (15,2)>
		+ "НДС,"             		// <Число (15,2)>
		+ "Поставщик,"              // <СправочникСсылка.Контрагенты>
		+ "ИсправленныйСчетФактура,"// <ДокументСсылка.КорректировкаПоступления>
		;
	Иначе	
		
		// Подготовка таблицы Параметры.ТаблицаПоСФ
		
		СписокОбязательныхКолонок = ""
		+ "ВидДвижения,"       		// <ВидДвиженияНакопления>
		+ "Период," 				// <Дата> - период движений - дата документа
		+ "Организация,"       		// <СправочникСсылка.Организации>
		+ "Склад,"		        	// <СправочникСсылка.Склады>
		+ "Номенклатура,"           // <СправочникСсылка.Номенклатура>
		+ "СчетУчета,"             	// <План счетов бухгалтерского учета>
		+ "Партия,"        			// <ДокументСсылка> - документ партии
		+ "СчетФактура,"            // <ДокументСсылка> - документ счета-фактуры
		+ "НДСВключенВСтоимость,"   // <Булево>
		+ "ВидЦенности,"            // <ПеречислениеСсылка.ВидыЦенностей>
		+ "СчетУчетаНДС,"           // <ПланСчетовСсылка.Хозрасчетный>
		+ "СтавкаНДС,"             	// <ПеречислениеСсылка.СтавкиНДС>
		+ "Количество,"             // <Число (15,3)>
		+ "Стоимость,"             	// <Число (15,2)>
		+ "НДС,"             		// <Число (15,2)>
		;
	КонецЕсли;
	
	Параметры.Вставить("ТаблицаПоСФ",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПоСФ, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ОрганизацияОтправитель");
	
	Возврат Результат;
	
КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Авизо по МПЗ входящее""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;

КонецПроцедуры

#КонецЕсли