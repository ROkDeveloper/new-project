#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	
	ПараметрыПроведения = Документы.АвизоМПЗВходящее.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	
	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ
	
	
	// ФОРМИРОВАНИЕ ДВИЖЕНИЙ

	// Алгоритмы формирования проводок этого документа рассчитывают суммы проводок налогового учета
	Движения.Хозрасчетный.ДополнительныеСвойства.Вставить("СуммыНалоговогоУчетаЗаполнены", Истина);
	
	Документы.АвизоМПЗВходящее.СформироватьДвиженияДанныеПоПартиям(
		ПараметрыПроведения.ТаблицаПоПартиям,
		ПараметрыПроведения.Реквизиты, Движения, Отказ);

	// Учет товаров по номерам ГТД
	Документы.АвизоМПЗВходящее.СформироватьДвиженияТаблицаПоступленияПоСчетуГТД(
		ПараметрыПроведения.ТаблицаПоступленияПоСчетуГТД, 
		ПараметрыПроведения.Реквизиты, Движения, Отказ);
		
	// Учет НДС
	Документы.АвизоМПЗВходящее.СформироватьДвиженияПоРегистрамНДС(
			ПараметрыПроведения.ТаблицаПоСФ, 
			ПараметрыПроведения.Реквизиты, Движения, Отказ);
			
	// Регистрация в последовательности
	РаботаСПоследовательностями.ЗарегистрироватьОтложенныеРасчетыВПоследовательности(
		ЭтотОбъект, Отказ, , ПараметрыПроведения.ТаблицаРегистрации);
		
	ПроведениеСервер.УстановитьЗаписьОчищаемыхНаборовЗаписей(ЭтотОбъект);
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//организация и отправитель должны отличаться
	Если Организация = ОрганизацияОтправитель Тогда
		ТекстСообщения = НСтр("ru = 'Отправитель должен отличаться от получателя.'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", 
																НСтр("ru = 'Отправитель'"),,, ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ОрганизацияОтправитель", "Объект", Отказ);
	КонецЕсли;
	
	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Организация, Дата);
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если ПроверяемыеРеквизиты.Найти("Склад") = Неопределено Тогда
		ПроверяемыеРеквизиты.Добавить("Склад");
	КонецЕсли;

	Если НЕ РаздельныйУчетНДСНаСчете19 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДанныеПоПартиям.ДокументПартии");
	КонецЕсли;
	
	// Проверять надо только по доп. условиям
    МассивНепроверяемыхРеквизитов.Добавить("ДанныеПоСФ.СчетФактура");
	МассивНепроверяемыхРеквизитов.Добавить("ДанныеПоСФ.СтавкаНДС");
	
	Для Каждого СтрокаТаблицы ИЗ ДанныеПоСФ Цикл
		
		НеЗаполненаСчетФактура 	= НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура);
		НеЗаполненаСтавкаНДС	= НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС);
		
		// В случаях, когда количество заполнено, сумма - не заполнена, и
		// 1. СтавкаНДС - БезНДС (случай поступления МПЗ по партии вида "Комплектация номенклатуры"
		// 2. СтавкаНДС - не заполнена (случай поступления МПЗ по партии вида "Оприходование товара", "Отчет производства за смену" и т.п.
		// то не нужно проверять заполненность счета-фактуры и ставки НДС
		Если СтрокаТаблицы.Количество <> 0 И СтрокаТаблицы.Стоимость = 0 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СчетФактура) 
			И (СтрокаТаблицы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС))
			Тогда
			НеЗаполненаСчетФактура 	= Ложь;
			НеЗаполненаСтавкаНДС 	= Ложь;
		КонецЕсли;  
		
		Если НеЗаполненаСчетФактура Тогда

			Поле = "ДанныеПоСФ[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СчетФактура";

			СвязаннаяНоменклатура = ДанныеПоПартиям.Найти(СтрокаТаблицы.Ключ, "Ключ").Номенклатура;
			ИмяСписка = НСтр("ru = 'Данные по счетам-фактурам номенклатуры ""%1""'");
           	ИмяСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяСписка, СвязаннаяНоменклатура);
				
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, 
				НСтр("ru = 'Счет-фактура (документ расчетов)'"), СтрокаТаблицы.НомерСтрокиТЧ, ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
		Если НеЗаполненаСтавкаНДС Тогда
			
			Поле = "ДанныеПоСФ[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СтавкаНДС";
			
			СвязаннаяНоменклатура = ДанныеПоПартиям.Найти(СтрокаТаблицы.Ключ, "Ключ").Номенклатура;
			ИмяСписка = НСтр("ru = 'Данные по счетам-фактурам номенклатуры ""%1""'");
			ИмяСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяСписка, СвязаннаяНоменклатура);
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, 
				НСтр("ru = 'Ставка НДС'"), СтрокаТаблицы.НомерСтрокиТЧ, ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
		//Проверка способа учета НДС
		Если РаздельныйУчетНДСНаСчете19 И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособУчетаНДС)
			И СтрокаТаблицы.НДС <> 0 Тогда
			
			Поле = "ДанныеПоСФ[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].СпособУчетаНДС";
			
			СвязаннаяНоменклатура = ДанныеПоПартиям.Найти(СтрокаТаблицы.Ключ, "Ключ").Номенклатура;
			ИмяСписка = НСтр("ru = 'Данные по счетам-фактурам номенклатуры ""%1""'");
			ИмяСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяСписка, СвязаннаяНоменклатура);
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка",, НСтр("ru = 'Способ учета НДС'"),
			СтрокаТаблицы.НомерСтрокиТЧ, ИмяСписка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, Поле, "Объект", Отказ);	
			
		КонецЕсли;		

	КонецЦикла;
			
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
	РаботаСПоследовательностями.ОтменитьРегистрациюВПоследовательности(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьПоДокументуОснованию(Основание)
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АвизоМПЗИсходящее") Тогда
		
		// Заполним реквизиты из стандартного набора по документу основанию.
		ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);
		
		Документы.АвизоМПЗВходящее.ЗаполнитьПоАвизоМПЗИсходящее(ЭтотОбъект, Основание);
		
	КонецЕсли;
   	
КонецПроцедуры



#КонецЕсли