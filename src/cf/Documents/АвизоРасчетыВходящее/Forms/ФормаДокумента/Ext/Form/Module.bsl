////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ЗначениеРабочейДаты = ОбщегоНазначения.РабочаяДатаПользователя();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииНаКлиенте()
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента, Объект.ВалютаДокумента, ВалютаРегламентированногоУчета);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)

	ВалютаДокументаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаПриИзменении(Элемент)

	Если Объект.СуммыДолга.Количество() > 0 Тогда
		КурсДокументаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КурсДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("Валюта"     , 			   Объект.ВалютаДокумента);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов"     , Объект.КурсДокумента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", Объект.КратностьДокумента);
	ПараметрыДокумента.Вставить("Дата"                   , Объект.Дата);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("КурсДокументаНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СуммыДолгаДебиторская

&НаКлиенте
Процедура СуммыДолгаДебиторскаяПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.СуммыДолгаДебиторская.ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская");
	КонецЕсли;
 	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаВидЗадолженностиПриИзменении(Элемент)

	ДанныеСтрокиТаблицы = Новый Структура("ВидЗадолженности, СуммаВзаиморасчетов, 
		|СуммаВзаиморасчетовДт, СуммаВзаиморасчетовКт");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, Элементы.СуммыДолгаДебиторская.ТекущиеДанные);

	РассчитатьСуммыВзаиморасчетовДтКт(ДанныеСтрокиТаблицы);	
	
	ЗаполнитьЗначенияСвойств(Элементы.СуммыДолгаДебиторская.ТекущиеДанные, ДанныеСтрокиТаблицы);
 	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяКонтрагентПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.СуммыДолгаДебиторская.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтрокиТаблицы = ПолучитьПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	
	ОбработатьИзменениеКонтрагентаНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(Элементы.СуммыДолгаДебиторская.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.СуммыДолгаДебиторская.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтрокиТаблицы = ПолучитьПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	
	ДоговорКонтрагентаОбработатьИзменение(ДанныеСтрокиТаблицы);

	ЗаполнитьЗначенияСвойств(Элементы.СуммыДолгаДебиторская.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяДокументРасчетовПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = ПолучитьПоляСтрокиТабличнойЧасти(Элементы.СуммыДолгаДебиторская.ТекущиеДанные);
	
	РассчитатьКурсПоСтроке(ДанныеСтрокиТаблицы);  
	
	ЗаполнитьЗначенияСвойств(Элементы.СуммыДолгаДебиторская.ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяДокументРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СуммыДолгаДебиторская.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , ТекущиеДанные.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	
	СторонаСчета = ?(ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"), "Кт", "Дт");
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , СторонаСчета);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.АвизоРасчетыИсходящее.ТабличныеЧасти.СуммыДолга.Реквизиты.ДокументРасчетов.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяКурсВзаиморасчетовПриИзменении(Элемент)
	
	КурсВзаиморасчетовДебиторскаяОбработатьИзменение();		

КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.СуммыДолгаДебиторская.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента"     , ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", ТекущиеДанные.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов"     , ТекущиеДанные.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата"                   , Объект.Дата);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СуммыДолгаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяСуммаВзаиморасчетовПриИзменении(Элемент)
	
	КурсВзаиморасчетовДебиторскаяОбработатьИзменение();	
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяСуммаПриИзменении(Элемент)

	СуммаДебиторскаяОбработатьИзменение();	
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяСуммаНУПриИзменении(Элемент)
	
	СуммаДебиторскаяОбработатьИзменение();	
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяСуммаПРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыДолгаДебиторская.ТекущиеДанные;
	ТекущиеДанные.СуммаВР = ТекущиеДанные.Сумма - ТекущиеДанные.СуммаНУ - ТекущиеДанные.СуммаПР;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаДебиторскаяСуммаВРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыДолгаДебиторская.ТекущиеДанные;
	ТекущиеДанные.СуммаПР = ТекущиеДанные.Сумма - ТекущиеДанные.СуммаНУ - ТекущиеДанные.СуммаВР;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СуммыДолгаКредиторская

&НаКлиенте
Процедура СуммыДолгаКредиторскаяПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.СуммыДолгаКредиторская.ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяКонтрагентПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.СуммыДолгаКредиторская.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтрокиТаблицы = ПолучитьПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	
	ОбработатьИзменениеКонтрагентаНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(Элементы.СуммыДолгаКредиторская.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяДоговорКонтрагентаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.СуммыДолгаКредиторская.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;

	ДанныеСтрокиТаблицы = ПолучитьПоляСтрокиТабличнойЧасти(СтрокаТаблицы);
	
	ДоговорКонтрагентаОбработатьИзменение(ДанныеСтрокиТаблицы);

	ЗаполнитьЗначенияСвойств(Элементы.СуммыДолгаКредиторская.ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяДокументРасчетовПриИзменении(Элемент)
	
	ДанныеСтрокиТаблицы = ПолучитьПоляСтрокиТабличнойЧасти(Элементы.СуммыДолгаКредиторская.ТекущиеДанные);
	
	РассчитатьКурсПоСтроке(ДанныеСтрокиТаблицы);  
	
	ЗаполнитьЗначенияСвойств(Элементы.СуммыДолгаКредиторская.ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяДокументРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СуммыДолгаКредиторская.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("СчетУчета"            , ТекущиеДанные.СчетУчетаРасчетовСКонтрагентом);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	
	СторонаСчета = ?(ТекущиеДанные.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская"), "Кт", "Дт");
	ПараметрыОбъекта.Вставить("ОстаткиОбороты"       , СторонаСчета);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.АвизоРасчетыИсходящее.ТабличныеЧасти.СуммыДолга.Реквизиты.ДокументРасчетов.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяКурсВзаиморасчетовПриИзменении(Элемент)
	
	КурсВзаиморасчетовКредиторскаяОбработатьИзменение();

КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ТекущиеДанные = Элементы.СуммыДолгаКредиторская.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("ДоговорКонтрагента"     , ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыДокумента.Вставить("КратностьВзаиморасчетов", ТекущиеДанные.КратностьВзаиморасчетов);
	ПараметрыДокумента.Вставить("КурсВзаиморасчетов"     , ТекущиеДанные.КурсВзаиморасчетов);
	ПараметрыДокумента.Вставить("Дата"                   , Объект.Дата);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("СуммыДолгаКурсВзаиморасчетовНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Общаяформа.ФормаВводаКурсаИКратности", ПараметрыДокумента,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяСуммаВзаиморасчетовПриИзменении(Элемент)
	
	КурсВзаиморасчетовКредиторскаяОбработатьИзменение();	
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяСуммаПриИзменении(Элемент)

	СуммаКредиторскаяОбработатьИзменение();	
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяСуммаНУПриИзменении(Элемент)
	
	СуммаКредиторскаяОбработатьИзменение();	
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяСуммаПРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыДолгаКредиторская.ТекущиеДанные;
	ТекущиеДанные.СуммаВР = ТекущиеДанные.Сумма - ТекущиеДанные.СуммаНУ - ТекущиеДанные.СуммаПР;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКредиторскаяСуммаВРПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СуммыДолгаКредиторская.ТекущиеДанные;
	ТекущиеДанные.СуммаПР = ТекущиеДанные.Сумма - ТекущиеДанные.СуммаНУ - ТекущиеДанные.СуммаВР;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммыДолгаДебиторскаяКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммыДолгаДебиторскаяСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммыДолгаДебиторскаяСуммаНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммыДолгаДебиторскаяСуммаПР");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммыДолгаДебиторскаяСуммаВР");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммыДолгаКредиторскаяКурсВзаиморасчетов");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммыДолгаКредиторскаяСумма");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммыДолгаКредиторскаяСуммаНУ");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммыДолгаКредиторскаяСуммаПР");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СуммыДолгаКредиторскаяСуммаВР");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АвизоПоРасчетамВВалюте", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	Если (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда
		СтруктураКурсаДокумента     = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсДокумента      	= СтруктураКурсаДокумента.Курс;
		Объект.КратностьДокумента 	= СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Объект.СуммыДолга Цикл
		РассчитатьКурсПоСтроке(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 
		
		Объект.СуммыДолга.Очистить();
		
		УстановитьФункциональныеОпцииФормы();
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
		
	КонецЕсли;
	
	ЗагрузитьСписокВыбораПодразделений(Истина);
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура АвизоПоРасчетамВВалютеПриИзмененииНаСервере()

	Если (НЕ Объект.АвизоПоРасчетамВВалюте) И Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
		Объект.ВалютаДокумента    = ВалютаРегламентированногоУчета;
		Объект.КурсДокумента      = 1;
		Объект.КратностьДокумента = 1;
		
		Объект.СуммыДолга.Очистить();
		
	КонецЕсли;
	
	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеКонтрагентаНаСервере(ДанныеСтрокиТаблицы)

	СтруктураОтбора     = Новый Структура("ЗначениеОтбора", 		Объект.ВалютаДокумента);
	СтруктураПараметров = Новый Структура("ВалютаВзаиморасчетов", 	СтруктураОтбора);
	
	РаботаСДоговорамиКонтрагентовБП.УстановитьДоговорКонтрагента(
		ДанныеСтрокиТаблицы.ДоговорКонтрагента,
		ДанныеСтрокиТаблицы.Контрагент,
		Объект.Организация,
		,
		СтруктураПараметров); 
	
	Если ЗначениеЗаполнено(ДанныеСтрокиТаблицы.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(ДанныеСтрокиТаблицы);
	КонецЕсли;

КонецПроцедуры 
 
&НаСервере
Процедура ДоговорКонтрагентаОбработатьИзменение(ТекДанные)

	РассчитатьКурсПоСтроке(ТекДанные);
	
	Документы.АвизоРасчетыВходящее.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(Объект, ТекДанные);
 
КонецПроцедуры

&НаКлиенте
Процедура КурсВзаиморасчетовДебиторскаяОбработатьИзменение()
	
	ДанныеСтрокиТаблицы = ПолучитьПоляСтрокиТабличнойЧасти(Элементы.СуммыДолгаДебиторская.ТекущиеДанные);
	
	РассчитатьСуммыПоСтроке(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(Элементы.СуммыДолгаДебиторская.ТекущиеДанные, ДанныеСтрокиТаблицы);
 
КонецПроцедуры

&НаКлиенте
Процедура СуммаДебиторскаяОбработатьИзменение()

	ТекущиеДанные = Элементы.СуммыДолгаДебиторская.ТекущиеДанные;
	
	Если ТекущиеДанные.СуммаВзаиморасчетов <> 0 Тогда
		ТекущиеДанные.КурсВзаиморасчетов = ТекущиеДанные.КратностьВзаиморасчетов * ТекущиеДанные.Сумма / ТекущиеДанные.СуммаВзаиморасчетов;
	КонецЕсли;
	ТекущиеДанные.СуммаПР = 0;
	ТекущиеДанные.СуммаВР = ТекущиеДанные.Сумма - ТекущиеДанные.СуммаНУ;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсВзаиморасчетовКредиторскаяОбработатьИзменение()
	
	ДанныеСтрокиТаблицы = ПолучитьПоляСтрокиТабличнойЧасти(Элементы.СуммыДолгаКредиторская.ТекущиеДанные);
	
	РассчитатьСуммыПоСтроке(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(Элементы.СуммыДолгаКредиторская.ТекущиеДанные, ДанныеСтрокиТаблицы);
 
КонецПроцедуры

&НаКлиенте
Процедура СуммаКредиторскаяОбработатьИзменение()

	ТекущиеДанные = Элементы.СуммыДолгаКредиторская.ТекущиеДанные;
	
	Если ТекущиеДанные.СуммаВзаиморасчетов <> 0 Тогда
		ТекущиеДанные.КурсВзаиморасчетов = ТекущиеДанные.КратностьВзаиморасчетов * ТекущиеДанные.Сумма / ТекущиеДанные.СуммаВзаиморасчетов;
	КонецЕсли;
	ТекущиеДанные.СуммаПР = 0;
	ТекущиеДанные.СуммаВР = ТекущиеДанные.Сумма - ТекущиеДанные.СуммаНУ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;

	Элементы.КурсДокумента.Доступность = Объект.АвизоПоРасчетамВВалюте;
	Элементы.ДокументОснование.Доступность = ЗначениеЗаполнено(Объект.Организация);

	Если Объект.АвизоПоРасчетамВВалюте Тогда
		Элементы.СуммыДолгаДебиторскаяСуммаВзаиморасчетов.Заголовок 	= НСтр("ru = 'Вал. сумма'");
		Элементы.СуммыДолгаДебиторскаяСуммаВзаиморасчетов.Подсказка 	= НСтр("ru = 'Валютная сумма'");
		Элементы.СуммыДолгаКредиторскаяСуммаВзаиморасчетов.Заголовок 	= НСтр("ru = 'Вал. сумма'");
		Элементы.СуммыДолгаКредиторскаяСуммаВзаиморасчетов.Подсказка 	= НСтр("ru = 'Валютная сумма'");
	Иначе
		Элементы.СуммыДолгаДебиторскаяСуммаВзаиморасчетов.Заголовок 	= НСтр("ru = 'Сумма'");
		Элементы.СуммыДолгаДебиторскаяСуммаВзаиморасчетов.Подсказка 	= НСтр("ru = 'Сумма'");
		Элементы.СуммыДолгаКредиторскаяСуммаВзаиморасчетов.Заголовок 	= НСтр("ru = 'Сумма'");
		Элементы.СуммыДолгаКредиторскаяСуммаВзаиморасчетов.Подсказка 	= НСтр("ru = 'Сумма'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента			= Объект.Дата;
 	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();

	ЗагрузитьСписокВыбораПодразделений(Истина);
		
	ЗаполнитьДобавленныеКолонки();
	
	ОтборСтрокДт = Новый ФиксированнаяСтруктура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская);
	Элементы.СуммыДолгаДебиторская.ОтборСтрок = ОтборСтрокДт;
	
	ОтборСтрокКт = Новый ФиксированнаяСтруктура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская);
	Элементы.СуммыДолгаКредиторская.ОтборСтрок = ОтборСтрокКт;
	
	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммыПоСтроке(СтрокаДанных)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ДоговорКонтрагента) Тогда
		
		ЗначенияРеквизитов 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДанных.ДоговорКонтрагента, 
							"ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах, ВидДоговора"); 
		ВалютаДоговора 		= ЗначенияРеквизитов.ВалютаВзаиморасчетов;
		РасчетыВВалюте 		= (ВалютаДоговора <> ВалютаРегламентированногоУчета);
		ВидДоговора 		= ЗначенияРеквизитов.ВидДоговора;
		ЭтоАванс 			= 
			((ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
				ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
				ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку) 
			И (СтрокаДанных.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская))
			ИЛИ ((ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
				ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
				ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку) 
			И (СтрокаДанных.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская));
	
	Иначе
		
		ВалютаДоговора 	= Объект.ВалютаДокумента;
		РасчетыВВалюте 	= (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета);
		ЭтоАванс		= Ложь;
		
	КонецЕсли; 
	
	Если НЕ РасчетыВВалюте Тогда
		
		СтрокаДанных.Сумма   = СтрокаДанных.СуммаВзаиморасчетов;
		СтрокаДанных.СуммаНУ = СтрокаДанных.СуммаВзаиморасчетов;
		
	Иначе
		
		Курс      = ?(ЭтоАванс, СтрокаДанных.КурсВзаиморасчетов, Объект.КурсДокумента);
		Кратность = ?(ЭтоАванс, СтрокаДанных.КратностьВзаиморасчетов, Объект.КратностьДокумента);
		
		СтрокаДанных.Сумма = РаботаСКурсамиВалютБПКлиентСервер.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаВзаиморасчетов,
			ВалютаДоговора, ВалютаРегламентированногоУчета,
			Курс, 1, 
			Кратность, 1);
		СтрокаДанных.СуммаНУ = СтрокаДанных.Сумма;
		
	КонецЕсли;
	
	СтрокаДанных.СуммаПР = 0;
	СтрокаДанных.СуммаВР = 0;
	
	РассчитатьСуммыВзаиморасчетовДтКт(СтрокаДанных);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммыВзаиморасчетовДтКт(СтрокаДанных)

	Если СтрокаДанных.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Дебиторская") Тогда
		СтрокаДанных.СуммаВзаиморасчетовДт = СтрокаДанных.СуммаВзаиморасчетов;
		СтрокаДанных.СуммаВзаиморасчетовКт = 0;
	ИначеЕсли СтрокаДанных.ВидЗадолженности = ПредопределенноеЗначение("Перечисление.ВидыЗадолженности.Кредиторская") Тогда
		СтрокаДанных.СуммаВзаиморасчетовДт = 0;
		СтрокаДанных.СуммаВзаиморасчетовКт = СтрокаДанных.СуммаВзаиморасчетов;
	Иначе
		СтрокаДанных.СуммаВзаиморасчетовДт = 0;
		СтрокаДанных.СуммаВзаиморасчетовКт = 0;
	КонецЕсли;	

КонецПроцедуры 

&НаСервере
Процедура РассчитатьКурсПоСтроке(СтрокаДанных)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанных.ДоговорКонтрагента) Тогда
		ВалютаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДанных.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		РасчетыВВалюте = (ВалютаДоговора <> ВалютаРегламентированногоУчета);
	Иначе
		ВалютаДоговора = Объект.ВалютаДокумента;
		РасчетыВВалюте = (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета);
	КонецЕсли; 
	
	СтрокаДанных.ДоговорКонтрагентаВалютаВзаиморасчетов = ВалютаДоговора;
	
	Если НЕ РасчетыВВалюте Тогда
		СтрокаДанных.КурсВзаиморасчетов      = 1;
		СтрокаДанных.КратностьВзаиморасчетов = 1;
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ДоговорКонтрагента) Тогда
   		СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоговора, Объект.Дата);
		СтрокаДанных.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СтрокаДанных.КратностьВзаиморасчетов = СтруктураКурса.Кратность;
	Иначе
		СтрокаДанных.КурсВзаиморасчетов      = Объект.КурсДокумента;
		СтрокаДанных.КратностьВзаиморасчетов = Объект.КратностьДокумента;
	КонецЕсли;
	
	РассчитатьСуммыПоСтроке(СтрокаДанных);
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьДобавленныеКолонки();

	МассивДоговоров = Объект.СуммыДолга.Выгрузить(, "ДоговорКонтрагента").ВыгрузитьКолонку("ДоговорКонтрагента");
	РеквизитыДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДоговоров, "ВалютаВзаиморасчетов");
	
	Для каждого СтрокаДолга ИЗ Объект.СуммыДолга Цикл
		РассчитатьСуммыВзаиморасчетовДтКт(СтрокаДолга);
		
		РеквизитыДоговора = РеквизитыДоговоров[СтрокаДолга.ДоговорКонтрагента];
		Если РеквизитыДоговора <> Неопределено Тогда
			СтрокаДолга.ДоговорКонтрагентаВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Объект = Форма.Объект;
	
	Объект.СуммаДокументаДт 	= Объект.СуммыДолга.Итог("СуммаВзаиморасчетовДт");
	Объект.СуммаДокументаКт 	= Объект.СуммыДолга.Итог("СуммаВзаиморасчетовКт");
	
КонецПроцедуры	
 
&НаСервере
Процедура ВалютаДокументаПриИзмененииНаСервере();

	СтруктураКурсаДокумента 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента      	= СтруктураКурсаДокумента.Курс;
	Объект.КратностьДокумента 	= СтруктураКурсаДокумента.Кратность;

	Объект.СуммыДолга.Очистить();

	Объект.АвизоПоРасчетамВВалюте = (Объект.ВалютаДокумента <> ВалютаРегламентированногоУчета);
	АвизоПоРасчетамВВалютеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура КурсДокументаПриИзмененииНаСервере()

	Для Каждого СтрокаТабличнойЧасти ИЗ Объект.СуммыДолга Цикл
		РассчитатьКурсПоСтроке(СтрокаТабличнойЧасти);
	КонецЦикла;

КонецПроцедуры 

&НаКлиенте
Функция ПолучитьПоляСтрокиТабличнойЧасти(СтрокаТабличнойЧасти)
	
	ПараметрыСтроки = Новый Структура("ВидЗадолженности, Контрагент, ДоговорКонтрагента, ДокументРасчетов,
			|КурсВзаиморасчетов, КратностьВзаиморасчетов, СчетУчетаРасчетовСконтрагентом, СчетУчетаРасчетовПоАвансам,
			|СуммаВзаиморасчетов, Сумма, СуммаНУ, СуммаПР, СуммаВР, СуммаВзаиморасчетовДт, СуммаВзаиморасчетовКт,
			|ДоговорКонтрагентаВалютаВзаиморасчетов");

	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТабличнойЧасти);
	
	Возврат ПараметрыСтроки;

КонецФункции

&НаКлиенте
Процедура КурсДокументаНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		
		Объект.КурсДокумента      = СтруктураКурсаИКратности.КурсВалюты;
		Объект.КратностьДокумента = СтруктураКурсаИКратности.КратностьВалюты;
		
		Если Объект.СуммыДолга.Количество() > 0 Тогда
			КурсДокументаПриИзмененииНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммыДолгаКурсВзаиморасчетовНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	СтруктураКурсаИКратности = РезультатЗакрытия;
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		ТекущиеДанные.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = ПолучитьПоляСтрокиТабличнойЧасти(ТекущиеДанные);
	
	РассчитатьСуммыПоСтроке(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокВыбораПодразделений(ОтборПоОрганизации = Истина)
	
	УправляющийРеквизит = ?(ОтборПоОрганизации, Объект.Организация, Объект.ОрганизацияОтправитель);
	УправляющийЭлемент	= ?(ОтборПоОрганизации,Элементы.Организация, Элементы.ОрганизацияОтправитель);
	
	УправляемыйРеквизит = ?(ОтборПоОрганизации, Объект.ОрганизацияОтправитель, Объект.Организация);
	УправляемыйЭлемент	= ?(ОтборПоОрганизации, Элементы.ОрганизацияОтправитель, Элементы.Организация);
	
	Если ЗначениеЗаполнено(УправляющийРеквизит) Тогда 
		
		СписокВыбораПодразделений = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(УправляющийРеквизит).ВыгрузитьЗначения();	
		
		УправляемыйЭлемент.РежимВыбораИзСписка = Истина;
		УправляемыйЭлемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбораПодразделений);
			
		Если УправляемыйЭлемент.СписокВыбора.НайтиПоЗначению(УправляющийРеквизит) = Неопределено Тогда
			
			УправляемыйРеквизит = Справочники.Организации.ПустаяСсылка();
			
		ИначеЕсли ЗначениеЗаполнено(УправляемыйРеквизит) Тогда
			
			УправляющийЭлемент.РежимВыбораИзСписка = Истина;
			УправляющийЭлемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбораПодразделений);

		КонецЕсли;                                            	
		
	Иначе
		
		УправляемыйЭлемент.РежимВыбораИзСписка = Ложь;
		УправляемыйЭлемент.СписокВыбора.Очистить();
		
		Если Не ЗначениеЗаполнено(УправляемыйРеквизит) Тогда 
			
			УправляющийЭлемент.РежимВыбораИзСписка = Ложь;
			УправляющийЭлемент.СписокВыбора.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОтправительПриИзменении(Элемент)
	
	ЗагрузитьСписокВыбораПодразделений(Ложь);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И НЕ Объект.Проведен Тогда
		Объект.Дата = Объект.ДатаВходящегоДокумента + (Объект.Дата - НачалоДня(Объект.Дата));
		ДатаПриИзмененииНаКлиенте();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если Объект.СуммыДолга.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Перед заполнением табличная часть будет очищена.
				|Заполнить?'");
			
			Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДокументПоОснованиюЗавершение", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			ОснованиеПриИзмененииНаСервере();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросЗаполнитьДокументПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОснованиеПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОснованиеПриИзмененииНаСервере()

	Документы.АвизоРасчетыВходящее.ЗаполнитьПоАвизоРасчетыИсходящее(Объект, Объект.ДокументОснование);
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВходящегоДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЗначениеРабочейДаты) Тогда
		Если ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) 
			И НЕ ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) Тогда
			Объект.ДатаВходящегоДокумента = ЗначениеРабочейДаты;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти
