#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Если Объект.СозданПриВводеНачальныхОстатков Тогда
		Элементы.ГруппаВводНачальныхОстатков.Видимость = Истина;
		Элементы.ОС.АвтоОтметкаНезаполненного = Ложь;
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтотОбъект, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Запись_ЗавершениеРемонтаОС", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	ТребуетсяВызовСервера = Объект.ОС.Количество() > 0
		И (Не ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС)
		Или МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
	
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсталисьМатериалыПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимостьЭлементовМатериалов(ЭтотОбъект);
	Если Объект.ОсталисьМатериалы Тогда
		ОсталисьМатериалыПриИзмененииНаСервере();
	Иначе
		УстановитьОписаниеДоходов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОСОписаниеМатериалов" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяСтрока = Элементы.ОС.ТекущиеДанные;
		ОткрытьСписокМатериалов(ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	СтрокаТЧ.КлючСтроки = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
	Иначе
		СтруктураСведений = РеквизитыОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураСведений);
		МаксПериодПервоначальныхСведенийОС = Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	Если Объект.ОС.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
	КонецЕсли;
	ПараметрыФормы.Вставить("ПоказыватьГрупповыеОС", Ложь);
	
	ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНезавершеннымРемонтам(Команда)
	
	ЗаполнитьПоНезавершеннымРемонтамНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	УстановитьСостояниеДокумента();
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ПользовательУправляетСчетамиУчета = СчетаУчетаВДокументахВызовСервераПовтИсп.ПользовательУправляетСчетамиУчета();
	
	УстановитьОписаниеДоходов(ЭтотОбъект);
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьВидимостьЭлементовМатериалов(ЭтотОбъект);
	
	ЗаполнитьМатериалы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) И Объект.ОС.Количество() > 0 Тогда
		ЗаполнитьДобавленныеКолонкиТаблиц();
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
	
	ПричиныИзменения = Новый Массив();
	ПричиныИзменения.Добавить("Организация");
	
	ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, Объект.Организация) Тогда
		Объект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
		ПричиныИзменения.Добавить("ПодразделениеОрганизации");
	КонецЕсли;
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		ОтчетПроизводстваЗаСменуФормыКлиентСервер.НачатьЗаполнениеСчетовУчета(ПричиныИзменения, Объект));
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	СчетаУчетаВДокументах.ЗаполнитьОбъектПриИзменении(
		ОтчетПроизводстваЗаСменуФормыКлиентСервер.НачатьЗаполнениеСчетовУчета("Склад", Объект));
	
КонецПроцедуры

&НаСервере
Процедура ОсталисьМатериалыПриИзмененииНаСервере()
	
	УстановитьОписаниеДоходов(ЭтотОбъект);
	ЗаполнитьМатериалы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки,ОсновноеСредство");
	
	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);
	
	Для каждого СтрокаОС Из Объект.ОС Цикл
		СтрокаНомера = ТаблицаНомеров.Найти(СтрокаОС.ОсновноеСредство, "ОсновноеСредство");
		Если СтрокаНомера <> Неопределено Тогда
			СтрокаОС.ИнвентарныйНомер = СтрокаНомера.ИнвентарныйНомер;
		КонецЕсли;
	КонецЦикла;
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыОС(ОсновноеСредство, Организация, Дата)
	
	Результат = Новый Структура;
	Результат.Вставить("ИнвентарныйНомер", "");
	Результат.Вставить("Период", '0001-01-01');
	СведенияОНомере = УчетОС.СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата);
	ЗаполнитьЗначенияСвойств(Результат, СведенияОНомере);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоместитьОСВХранилище()
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(Знач ВыбранноеЗначение)
	
	УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокМатериалов(ВыбраннаяСтрока)
	
	АдресВременногоХранилища = ПоместитьЦенностиВоВременноеХранилище(ВыбраннаяСтрока.КлючСтроки);
	
	ПараметрыЗакрытияФормы = Новый Структура;
	ПараметрыЗакрытияФормы.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресХранилищаЦенностей", АдресВременногоХранилища);
	ПараметрыОткрытияФормы.Вставить("Склад",                   Объект.Склад);
	ПараметрыОткрытияФормы.Вставить("Организация",             Объект.Организация);
	ПараметрыОткрытияФормы.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	ПараметрыОткрытияФормы.Вставить("Дата",                    Объект.Дата);
	ПараметрыОткрытияФормы.Вставить("ОсновноеСредство",        ВыбраннаяСтрока.ОсновноеСредство);
	
	ОповещениеОЗакрытииФормыВыбора = Новый ОписаниеОповещения("ЗавершитьРедактированиеСпискаМатериаловСтроки",
		ЭтотОбъект, ПараметрыЗакрытияФормы);
	
	ОткрытьФорму("Документ.ЗавершениеРемонтаОС.Форма.ФормаМатериалы", ПараметрыОткрытияФормы, ЭтотОбъект, , , ,
		ОповещениеОЗакрытииФормыВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЦенностиВоВременноеХранилище(КлючСтроки)
	
	Если ЗначениеЗаполнено(КлючСтроки) Тогда
		Отбор = Новый Структура("КлючСтроки", КлючСтроки);
		ТаблицаМатериалы = Объект.Материалы.Выгрузить(Отбор);
	Иначе
		ТаблицаМатериалы = Неопределено;
	КонецЕсли;
	
	ТаблицыПараметров = Новый Структура;
	ТаблицыПараметров.Вставить("ТаблицаМатериалы", ТаблицаМатериалы);
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицыПараметров, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьРедактированиеСпискаМатериаловСтроки(РезультатЗакрытия, ПараметрыЗакрытияФормы) Экспорт
	
	ВыбраннаяСтрока = ПараметрыЗакрытияФормы.ВыбраннаяСтрока;
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		ЗаполнитьОписаниеМатериаловСтроки(ВыбраннаяСтрока, РезультатЗакрытия.Материалы);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОписаниеМатериаловСтроки(ВыбраннаяСтрока, МатериалыСтроки)
	
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.КлючСтроки) Тогда
		УдалитьМатериалыСтроки(ВыбраннаяСтрока.КлючСтроки);
	Иначе
		ВыбраннаяСтрока.КлючСтроки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Для каждого СтрокаМатериал Из МатериалыСтроки Цикл
		СтрокаМатериалОбъекта = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМатериалОбъекта, СтрокаМатериал);
		СтрокаМатериалОбъекта.КлючСтроки = ВыбраннаяСтрока.КлючСтроки;
	КонецЦикла;
	
	ВыбраннаяСтрока.ОписаниеМатериалов = ОписаниеМатериаловСтроки(МатериалыСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМатериалыСтроки(КлючСтроки)
	
	Отбор = Новый Структура("КлючСтроки", КлючСтроки);
	СтрокиНаУдаление = Объект.Материалы.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из СтрокиНаУдаление Цикл
		Объект.Материалы.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовМатериалов(Форма)
	
	Элементы = Форма.Элементы;
	ОсталисьМатериалы = Форма.Объект.ОсталисьМатериалы;
	Элементы.Склад.Видимость = ОсталисьМатериалы;
	Элементы.ОписаниеДоходов.Видимость = ОсталисьМатериалы 
		И Форма.ПользовательУправляетСчетамиУчета;
	Элементы.ОСОписаниеМатериалов.Видимость = ОсталисьМатериалы;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалы()
	
	Если Не Объект.ОсталисьМатериалы Тогда
		Возврат;
	КонецЕсли;
	
	Описания = ОписанияМатериалов(Объект.Материалы);
	
	Для каждого СтрокаОС ИЗ Объект.ОС Цикл
		
		СтрокаОС.ОписаниеМатериалов = НаименованиеНетМатериалов();
		
		Если Не ЗначениеЗаполнено(СтрокаОС.КлючСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеСтроки = Описания.Получить(СтрокаОС.КлючСтроки);
		Если ОписаниеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОС.ОписаниеМатериалов = СтрСоединить(ОписаниеСтроки, ", ");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеМатериаловСтроки(МатериалыСтроки)
	
	Наименования = НаименованияМатериалов(МатериалыСтроки);
	
	Если Не ЗначениеЗаполнено(Наименования) Тогда
		Возврат НаименованиеНетМатериалов();
	КонецЕсли;
	
	НаименованияНоменклатур = Новый Массив;
	Для Каждого КлючЗначение Из Наименования Цикл
		НаименованияНоменклатур.Добавить(КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат СтрСоединить(НаименованияНоменклатур, ", ");
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписанияМатериалов(МатериалыСтроки)
	
	Наименования = НаименованияМатериалов(МатериалыСтроки);
	
	Описания = Новый Соответствие;
	
	Для Каждого СтрокаЦенности Из МатериалыСтроки Цикл
		
		НаименованиеМатериала = Наименования.Получить(СтрокаЦенности.Номенклатура);
		Если НаименованиеМатериала = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Описание = Описания.Получить(СтрокаЦенности.КлючСтроки);
		Если Описание = Неопределено Тогда
			Описание = Новый Массив;
			Описания.Вставить(СтрокаЦенности.КлючСтроки, Описание);
		КонецЕсли;
		
		Описание.Добавить(НаименованиеМатериала);
		
	КонецЦикла;
	
	Возврат Описания;
	
КонецФункции

&НаСервереБезКонтекста
Функция НаименованияМатериалов(МатериалыСтроки)
	
	ТаблицаНоменклатуры = МатериалыСтроки.Выгрузить(,"Номенклатура");
	ТаблицаНоменклатуры.Свернуть("Номенклатура");
	Наименования = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
		ТаблицаНоменклатуры.ВыгрузитьКолонку("Номенклатура"), "Наименование");
	
	Возврат Наименования;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеНетМатериалов()
	
	Возврат НСтр("ru = 'Нет'");
	
КонецФункции

&НаКлиенте
Процедура ОписаниеДоходовНажатие(Элемент, СтандартнаяОбработка)
	
	Если Не ТолькоПросмотр Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОЗакрытииФормыВыбора = Новый ОписаниеОповещения("ЗавершитьВыборСчетаДоходов", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура(ИменаПолейСчетаДоходов());
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ОткрытьФорму("Документ.ЗавершениеРемонтаОС.Форма.ФормаДоходы", ПараметрыФормы,
		ЭтотОбъект, УникальныйИдентификатор, , , ОповещениеОЗакрытииФормыВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменаПолейСчетаДоходов()
	Возврат "СчетУчетаДоходов,СубконтоДоходов";
КонецФункции

&НаКлиенте
Процедура ЗавершитьВыборСчетаДоходов(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, ИменаПолейСчетаДоходов());
		УстановитьОписаниеДоходов(ЭтотОбъект);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеСчетовДоходов(СчетаАналитика, ОсталисьМатериалы)
	
	ЧастиОписания = Новый Массив;
	
	Если ОсталисьМатериалы Тогда
		ЧастиОписания.Добавить(Строка(СчетаАналитика.СчетУчетаДоходов));
		Если ЗначениеЗаполнено(СчетаАналитика.СубконтоДоходов) Тогда
			ЧастиОписания.Добавить(Строка(СчетаАналитика.СубконтоДоходов));
		Иначе
			ЧастиОписания.Добавить(ОбщегоНазначенияБПКлиентСервер.ПредставлениеНезаполненногоЗначения());
		КонецЕсли;
	КонецЕсли;

	Возврат СтрСоединить(ЧастиОписания, ", ");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СчетаАналитикаДоходов(Форма)
	
	СчетаАналитика = Новый Структура(ИменаПолейСчетаДоходов());
	ЗаполнитьЗначенияСвойств(СчетаАналитика, Форма.Объект);
	Возврат СчетаАналитика;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОписаниеДоходов(Форма)
	
	Форма.ОписаниеДоходов = ОписаниеСчетовДоходов(
		СчетаАналитикаДоходов(Форма), Форма.Объект.ОсталисьМатериалы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНезавершеннымРемонтамНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Субконто1 КАК ОсновноеСредство,
	|	ВЫРАЗИТЬ(Остатки.Субконто1 КАК Справочник.ОсновныеСредства).Наименование КАК Наименование
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет = &Счет2305,
	|			&ВидыСубконтоОСВидыРемонта,
	|			Организация = &Организация
	|				И Субконто2 = &ВидРемонта) КАК Остатки
	|ГДЕ
	|	Остатки.Субконто1 <> ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Счет2305", ПланыСчетов.Хозрасчетный.ВыполнениеРемонтовОС);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ВидРемонта", Объект.ВидРемонта);
	ВидыСубконтоОСВидыРемонта = Новый Массив;
	ВидыСубконтоОСВидыРемонта.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	ВидыСубконтоОСВидыРемонта.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыРемонтовОС);
	Запрос.УстановитьПараметр("ВидыСубконтоОСВидыРемонта", ВидыСубконтоОСВидыРемонта);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос.УстановитьПараметр("ГраницаОстатков", Новый МоментВремени(Объект.Дата, Объект.Ссылка));
	Иначе
		Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(Объект.Дата), ВидГраницы.Включая));
	КонецЕсли;
	
	Объект.ОС.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = Выборка.ОсновноеСредство;
	КонецЦикла;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
