#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 13, 0);
	
КонецФункции

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("СодержаниеПроводокСписание", 
		НСтр("ru='Списание затрат на ремонт ОС'", ОбщегоНазначения.КодОсновногоЯзыка()));
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизиты(НомераТаблиц)
		+ ТекстЗапросаТаблицаОС(НомераТаблиц)
		+ ТекстЗапросаТаблицаМатериалы(НомераТаблиц);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Процедура СформироватьДвиженияКапитализируемыеРемонтыОС(ТаблицаОсновныеСредства, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОсновныеСредства) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	
	Для каждого СтрокаОС Из ТаблицаОсновныеСредства Цикл
		Запись = Движения.КапитализируемыеРемонтыОС.Добавить();
		Запись.Организация = Реквизиты.Организация;
		Запись.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		Запись.ВидРемонта = Реквизиты.ВидРемонта;
		Запись.Ремонт = Реквизиты.Регистратор;
		Запись.ДатаПризнания = Реквизиты.Период;
		Запись.СрокАмортизации = СтрокаОС.СрокДоСледующегоРемонта;
	КонецЦикла;
	
	Движения.КапитализируемыеРемонтыОС.Записывать = Истина;
	
КонецПроцедуры

Процедура СформироватьДвиженияСобытияОСОрганизаций(ТаблицаОсновныеСредства, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(ТаблицаОсновныеСредства) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаРеквизиты[0]);
	НазваниеДокумента = НСтр("ru='Завершение ремонта ОС'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Для каждого СтрокаОС Из ТаблицаОсновныеСредства Цикл
		Запись = Движения.СобытияОСОрганизаций.Добавить();
		Запись.Период = Реквизиты.Период;
		Запись.Организация = Реквизиты.Организация;
		Запись.ОсновноеСредство = СтрокаОС.ОсновноеСредство;
		Запись.Событие = Реквизиты.СобытиеОС;
		Запись.НазваниеДокумента = НазваниеДокумента;
		Запись.НомерДокумента = Реквизиты.Номер;
	КонецЦикла;
	
	Движения.СобытияОСОрганизаций.Записывать = Истина;
	
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Накладная на оприходование товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru = 'Накладная на оприходование материалов'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.Порядок       = 40;
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ОсталисьМатериалы", Истина);
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru = 'Реестр документов ""Завершение ремонта ОС""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", 
			НСтр("ru = 'Накладная на оприходование материалов'"),
			ПечатьОприходованияМатериалов(МассивОбъектов, ОбъектыПечати), , "Документ.ЗавершениеРемонтаОС.ПФ_MXL_Накладная");
		
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ВидРемонта");
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт
	
	Набор = Наборы.Строки.Добавить();
	Набор.Имя = "Документ_ЗавершениеРемонтаОС";
	Набор.Идентификатор = Новый УникальныйИдентификатор("fddaedfd-1291-4c21-9174-cf40787ab0eb");
	Набор.Используется = ПолучитьФункциональнуюОпцию("КомпонентыАмортизацииОС");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаТаблицаОС(НомераТаблиц)
	
	НомераТаблиц.Вставить("ОсновныеСредства", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Регистратор,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.СрокДоСледующегоРемонта КАК СрокДоСледующегоРемонта,
	|	НЕОПРЕДЕЛЕНО КАК СчетВыбытия,
	|	НЕОПРЕДЕЛЕНО КАК Субконто1
	|ИЗ
	|	Документ.ЗавершениеРемонтаОС.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаРеквизиты(НомераТаблиц)

	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ПодразделениеОрганизации КАК Подразделение,
	|	Реквизиты.ВидРемонта КАК ВидРемонта,
	|	Реквизиты.Склад КАК Склад,
	|	""ОС"" КАК ИмяСписка,
	|	Реквизиты.СобытиеОС КАК СобытиеОС,
	|	&СодержаниеПроводокСписание КАК Содержание
	|ИЗ
	|	Документ.ЗавершениеРемонтаОС КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаМатериалы(НомераТаблиц)
	
	НомераТаблиц.Вставить("Материалы", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаМатериалы.Ссылка КАК Регистратор,
	|	ТаблицаОС.НомерСтроки КАК НомерСтрокиОС,
	|	ТаблицаМатериалы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаМатериалы.Номенклатура КАК Номенклатура,
	|	ТаблицаМатериалы.Количество КАК Количество,
	|	ТаблицаМатериалы.Сумма КАК Сумма,
	|	ТаблицаМатериалы.СчетУчета КАК СчетУчета,
	|	ТаблицаМатериалы.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ТаблицаМатериалы.Ссылка.СчетУчетаДоходов КАК СчетДоходов,
	|	ТаблицаМатериалы.Ссылка.СубконтоДоходов КАК СубконтоДоходов1
	|ИЗ
	|	Документ.ЗавершениеРемонтаОС.Материалы КАК ТаблицаМатериалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗавершениеРемонтаОС.ОС КАК ТаблицаОС
	|		ПО ТаблицаМатериалы.Ссылка = ТаблицаОС.Ссылка
	|			И ТаблицаМатериалы.КлючСтроки = ТаблицаОС.КлючСтроки
	|ГДЕ
	|	ТаблицаМатериалы.Ссылка = &Ссылка
	|	И ТаблицаОС.Ссылка = &Ссылка
	|	И ТаблицаМатериалы.Ссылка.ОсталисьМатериалы
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиОС,
	|	НомерСтроки";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция УстановитьПравилаЗаполненияСчетовУчета(Правила) Экспорт
	
	// Шапка
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "", "СчетУчетаДоходов", "ДоходыОтСписанияОС");
	СчетаУчетаВДокументах.ДобавитьПодчиненноеПравилоЗаполнения(Правила, "СубконтоДоходов", "СубконтоПрочихДоходов1");
	
	// Табличная часть Материалы
	СчетаУчетаВДокументах.ДобавитьПравилоЗаполнения(Правила, "Материалы", "СчетУчета", "ЗапасыКромеЗабалансовых");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхРеквизитОбъекта(Правила, "Номенклатура", "Номенклатура");
	СчетаУчетаВДокументах.ДобавитьВПравилоИсточникДанныхЗаполнения(Правила, "Склад", "Склад");
	
	// Данные заполнения
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Дата");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Организация");
	СчетаУчетаВДокументах.ДобавитьВПравилоОписаниеРеквизитаДокумента(Правила, "Склад");
	
	Возврат Правила;
	
КонецФункции

Функция РеквизитыЗаСсылками() Экспорт
	
	РеквизитыЗаСсылками = Новый Соответствие;
	
	// Прячутся за "Доходы"
	РеквизитыЗаСсылками.Вставить("СчетУчетаДоходов", "ОписаниеДоходов");
	РеквизитыЗаСсылками.Вставить("СубконтоДоходов", "ОписаниеДоходов");
	
	// Прячутся за "ОСОписаниеМатериалов"
	РеквизитыЗаСсылками.Вставить("Материалы.Номенклатура", "Материалы");
	РеквизитыЗаСсылками.Вставить("Материалы.Количество", "Материалы");
	РеквизитыЗаСсылками.Вставить("Материалы.СчетУчета", "Материалы");
	
	Возврат РеквизитыЗаСсылками;
	
КонецФункции

// Функция формирует табличный документ с печатной формой накладной
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьОприходованияМатериалов(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб			= Истина;
	ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_ЗавершениеРемонтаОС_Накладная";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗавершениеРемонтаОС.ПФ_MXL_Накладная");
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если НЕ ЗначениеЗаполнено(ДополнительнаяКолонкаПечатныхФормДокументов) Тогда
		ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	КонецЕсли;
	ВыводитьКоды = ДополнительнаяКолонкаПечатныхФормДокументов <> Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить;
	
	ДанныеДляПечатиНакладной = ДанныеДляПечатиНакладной(МассивОбъектов, ДополнительнаяКолонкаПечатныхФормДокументов);
	
	ПервыйДокумент = Истина;
	
	Для Каждого Шапка Из ДанныеДляПечатиНакладной Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		
		ЗначенияПечатнойФормы = Новый Структура();
		ЗначенияПечатнойФормы.Вставить("ТекстЗаголовка", ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(
			Шапка, НСтр("ru = 'Оприходование материалов от ремонта ОС'")));
		ЗначенияПечатнойФормы.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		ЗначенияПечатнойФормы.Вставить("Организация", Шапка.Организация);
		ЗначенияПечатнойФормы.Вставить("Склад", Шапка.Склад);
		ЗначенияПечатнойФормы.Вставить("ПредставлениеСклада", Шапка.ПредставлениеСклада);
		
		Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
			ЗначенияПечатнойФормы.Вставить("ИмяКодАртикул", "Артикул");
		ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
			ЗначенияПечатнойФормы.Вставить("ИмяКодАртикул", "Код");
		КонецЕсли;
		
		ЗначенияПечатнойФормы.Вставить("Всего", Шапка.Материалы.Итог("Сумма"));
		ЗначенияПечатнойФормы.Вставить("ИтоговаяСтрока",
			СтрШаблон(НСтр("ru = 'Всего наименований %1, на сумму %2'"),
				Шапка.Материалы.Количество(),
				ОбщегоНазначенияБПВызовСервера.ФорматСумм(ЗначенияПечатнойФормы.Всего, Шапка.ВалютаДокумента)));
		ЗначенияПечатнойФормы.Вставить("СуммаПрописью",
			ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ЗначенияПечатнойФормы.Всего, Шапка.ВалютаДокумента));
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(ЗначенияПечатнойФормы);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Организация");
		ОбластьМакета.Параметры.Заполнить(ЗначенияПечатнойФормы);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Справочники.Склады.ИспользуетсяНесколькоСкладов() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Склад");
			ОбластьМакета.Параметры.Заполнить(ЗначенияПечатнойФормы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ИмяОбластиШапки = ?(ВыводитьКоды, "ШапкаСКодом", "ШапкаТаблицы");
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбластиШапки);
		ОбластьМакета.Параметры.Заполнить(ЗначенияПечатнойФормы);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ИмяОбластиСтроки = ?(ВыводитьКоды, "СтрокаСКодом", "Строка");
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбластиСтроки);
		
		Для каждого СтрокаМатериала Из Шапка.Материалы Цикл
			ОбластьМакета.Параметры.Заполнить(СтрокаМатериала);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(ЗначенияПечатнойФормы);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.Заполнить(ЗначенияПечатнойФормы);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеДляПечатиНакладной(МассивОбъектов, ДополнительнаяКолонкаПечатныхФормДокументов)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДополнительнаяКолонкаПечатныхФормДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗавершениеРемонтаОС.Ссылка КАК Ссылка,
	|	ЗавершениеРемонтаОС.Номер КАК Номер,
	|	ЗавершениеРемонтаОС.Дата КАК Дата,
	|	ЗавершениеРемонтаОС.Организация КАК Организация,
	|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
	|	ЗавершениеРемонтаОС.Склад КАК Склад,
	|	ЗавершениеРемонтаОС.Склад.Представление КАК ПредставлениеСклада
	|ИЗ
	|	Документ.ЗавершениеРемонтаОС КАК ЗавершениеРемонтаОС,
	|	Константы КАК Константы
	|ГДЕ
	|	ЗавершениеРемонтаОС.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ОС
	|ИЗ
	|	Документ.ЗавершениеРемонтаОС.ОС КАК ОС
	|ГДЕ
	|	ОС.Ссылка В(&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОС.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ПОМЕСТИТЬ ИнвентарныеНомера
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			,
	|			ОсновноеСредство В
	|				(ВЫБРАТЬ
	|					ОС.ОсновноеСредство
	|				ИЗ
	|					ОС КАК ОС)) КАК ПервоначальныеСведенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Материалы.Ссылка КАК Ссылка,
	|	Материалы.Номенклатура КАК Номенклатура,
	|	Материалы.Номенклатура.НаименованиеПолное КАК НоменклатураНаименование,
	|	ОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ОС.ОсновноеСредство.НаименованиеПолное КАК ОСНаименование,
	|	ЕСТЬNULL(ИнвентарныеНомера.ИнвентарныйНомер, ОС.ОсновноеСредство.Код) КАК ИнвентарныйНомер,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА Материалы.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА Материалы.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК КодАртикул,
	|	Материалы.Номенклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаХранения,
	|	Материалы.Цена КАК Цена,
	|	Материалы.Количество КАК Количество,
	|	Материалы.НомерСтроки КАК НомерСтроки,
	|	ОС.НомерСтроки КАК НомерСтрокиОС,
	|	Материалы.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗавершениеРемонтаОС.ОС КАК ОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗавершениеРемонтаОС.Материалы КАК Материалы
	|		ПО ОС.Ссылка = Материалы.Ссылка
	|			И ОС.КлючСтроки = Материалы.КлючСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИнвентарныеНомера КАК ИнвентарныеНомера
	|		ПО ОС.ОсновноеСредство = ИнвентарныеНомера.ОсновноеСредство
	|ГДЕ
	|	Материалы.Ссылка В(&МассивОбъектов)
	|	И ОС.Ссылка В(&МассивОбъектов)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПечати = РезультатЗапроса[0].Выгрузить();
	ДанныеДляПечати.Колонки.Добавить("Материалы", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ДанныеСтрок = РезультатЗапроса[3].Выгрузить();
	ДанныеСтрок.Индексы.Добавить("Ссылка");
	
	Для каждого СтрокаПечати Из ДанныеДляПечати Цикл
		ОтборСтрок = Новый Структура("Ссылка", СтрокаПечати.Ссылка);
		СтрокаПечати.Материалы = ДанныеСтрок.Скопировать(ОтборСтрок);
		СтрокаПечати.Материалы.Сортировать("НомерСтрокиОС,НомерСтроки");
		// Перенумеруем строки по порядку.
		НомерСтроки = 1;
		Для каждого СтрокаМатериала Из СтрокаПечати.Материалы Цикл
			СтрокаМатериала.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

#КонецОбласти

#КонецЕсли

// Обработчики получения представления должны вызываться вне инструкции препроцессора.

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Дата");
	Поля.Добавить("ВидРемонта");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон(НСтр("ru='Завершение ремонта ОС от %1, %2'"), 
		Формат(Данные.Дата, "ДЛФ=D"), 
		Строка(Данные.ВидРемонта));
	
КонецПроцедуры

#КонецОбласти
