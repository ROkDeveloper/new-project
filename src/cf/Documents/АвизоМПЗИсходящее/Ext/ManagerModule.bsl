#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВремяДокументаПоУмолчанию() Экспорт
	
	Возврат Новый Структура("Часы, Минуты", 14, 0);
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Заполняет счета учета номенклатуры в табличной части документа
//
Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, ИмяТабличнойЧасти) Экспорт

	ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ТабличнаяЧасть, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СчетаУчета);
	КонецЦикла;

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	ИЛИ ЗначениеРазрешено(ОрганизацияПолучатель)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет счета учета номенклатуры в строке табличной части документа
//
// Параметры:
//  ДанныеОбъекта         - структура данных объекта, используемых при заполнении счетов учета (вид операции,
//                          вид договора контрагента, признак комиссионной торговли и т.п.)
//  СтрокаТабличнойЧасти  - строка табличной части документа
//  ИмяТабличнойЧасти     - имя табличной части документа
//  СведенияОНоменклатуре - структура сведений о номенклатуре, либо стуктура счетов учета
//
Процедура ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТабличнойЧасти, СведенияОНоменклатуре) Экспорт

	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СведенияОНоменклатуре.Свойство("СчетаУчета") Тогда
		// СведенияОНоменклатуре - структура сведений номенклатуры
		СчетаУчета = СведенияОНоменклатуре.СчетаУчета;
	ИначеЕсли СведенияОНоменклатуре.Свойство("СчетУчета") Тогда
		// СведенияОНоменклатуре - структура счетов учета номенклатуры
		СчетаУчета = СведенияОНоменклатуре;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" ИЛИ ИмяТабличнойЧасти = "ДанныеПоПартиям" Тогда
		
		Если ЗначениеЗаполнено(СчетаУчета.СчетУчета) Тогда
			СтрокаТабличнойЧасти.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеПоПартиям(ПараметрыЗаполнения, РезультатЗаполнения) Экспорт

	Отказ = Ложь;
	ДанныеЗаполнения = ПодготовитьДанныеЗаполнения(ПараметрыЗаполнения);

	Реквизиты = ДанныеЗаполнения.СписаниеТоваровРеквизиты[0];

	РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период);	
	
	Если ПараметрыЗаполнения.ИспользуетсяОтложенноеПроведение Тогда
		
		ОтборОперативноРассчитываемых = Новый Структура("ОперативныйРасчет", Истина);
		СписаниеТоваровТаблицаТовары = ДанныеЗаполнения.СписаниеТоваровТаблицаТовары.Скопировать(ОтборОперативноРассчитываемых);
		
	Иначе
	
		СписаниеТоваровТаблицаТовары = ДанныеЗаполнения.СписаниеТоваровТаблицаТовары;
			
	КонецЕсли;
		
	ТаблицаСписанныеТовары = УчетТоваров.ПодготовитьТаблицуСписанныеТовары(СписаниеТоваровТаблицаТовары,
		ДанныеЗаполнения.СписаниеТоваровРеквизиты, Отказ);

	СписанныеПартииНДС = УчетНДСПереопределяемый.ПолучитьТаблицуСписанныеПартииНДС(
		СписаниеТоваровТаблицаТовары, 
		ТаблицаСписанныеТовары, 
		Реквизиты, Отказ);
		
	Если ПараметрыЗаполнения.ИспользуетсяОтложенноеПроведение Тогда
		
		ОтборОперативноРассчитываемых.ОперативныйРасчет = Ложь;
		СписаниеТоваровТаблицаТовары = ДанныеЗаполнения.СписаниеТоваровТаблицаТовары.Скопировать(ОтборОперативноРассчитываемых);
		ДополнитьТоварамиСОтложеннымСписаниемСтоимости(ТаблицаСписанныеТовары, СписаниеТоваровТаблицаТовары, Реквизиты);
		
	КонецЕсли;
		
	//// В некоторых случаях значение партии может быть заполнено в таблице СписанныеПартииНДС, но быть пустым в ТаблицаСписанныеТовары,
	//// например: 1. несколько партий списания НДС по одному товару 
	//// 2. учет по средней при сложном учете НДС (НДС 0% и Без НДС). Партия необходима для корректного закрытия по регистрам НДС 
	//// Необходимо брать значения партий из таблицы СписанныеПартииНДС 
	
	Колонки = "Номенклатура, СчетУчета, Количество, СуммаСписания, СуммаСписанияНУ, СуммаСписанияПР, 
			|СуммаСписанияВР, Партия, НомерСтроки";
	КолонкиИндекса = "НомерСтрокиДокумента, Партия, НовыйНомерСтроки";
	Если РаздельныйУчетНДСНаСчете19 Тогда
		Колонки = Колонки + ", АналитикаУчетаЗатрат";
		КолонкиИндекса = КолонкиИндекса + ", АналитикаУчетаЗатрат";
	КонецЕсли;
	
	ТаблицаСписанныеТоварыПоПартиям = ТаблицаСписанныеТовары.СкопироватьКолонки(Колонки);
				
	ТаблицаСписанныеТоварыПоПартиям.Колонки.Добавить("НовыйНомерСтроки",   Новый ОписаниеТипов("Число"));
	ТаблицаСписанныеТоварыПоПартиям.Колонки.Добавить("СтрокаРаспределена", Новый ОписаниеТипов("Булево"));
	
	СписанныеПартииНДС.Колонки.Добавить("НовыйНомерСтроки", Новый ОписаниеТипов("Число"));
	СписанныеПартииНДС.Индексы.Добавить(КолонкиИндекса);
	
	Для Каждого СтрокаСписанныеТовары ИЗ ТаблицаСписанныеТовары Цикл
		
		СтрокаКопируетсяБезОбработки = Истина;
		
		Если НЕ ЗначениеЗаполнено(СтрокаСписанныеТовары.Партия) Тогда
			
			СтруктураОтбора 	= Новый Структура("НомерСтрокиДокумента", СтрокаСписанныеТовары.НомерСтроки);
			ТаблицаСтрокОтбора 	= СписанныеПартииНДС.Скопировать(СписанныеПартииНДС.НайтиСтроки(СтруктураОтбора));
			ТаблицаСтрокОтбора.Свернуть("Партия, НомерСтрокиДокумента", "Количество"); 
			
			МассивПартийОтбора	= Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивПартийОтбора, ТаблицаСтрокОтбора.ВыгрузитьКолонку("Партия"), Истина);

			// Проверим, что есть заполненные значения партий в таблице СписанныеПартииНДС и сумма по количество в отобранных строках
			// совпадает с количеством в строке таблицы ТаблицаСписанныеТовары
			Если ТаблицаСтрокОтбора.Итог("Количество") = СтрокаСписанныеТовары.Количество 
			   И МассивПартийОтбора.Количество() > 0 Тогда
				
				СтрокаКопируетсяБезОбработки = Ложь;
				
				// Распределим суммы в строке таблицы ТаблицаСписанныеТовары по количеству в отобранных строках 
				МассивКоличество = ТаблицаСтрокОтбора.ВыгрузитьКолонку("Количество");

				МассивСуммРаспределенияСписания = 
					ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаСписанныеТовары.СуммаСписания, МассивКоличество);
				МассивСуммРаспределенияСписанияПР = 
					ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаСписанныеТовары.СуммаСписанияПР, МассивКоличество);
				МассивСуммРаспределенияСписанияВР = 
					ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаСписанныеТовары.СуммаСписанияВР, МассивКоличество);

				Для Каждого СтрокаОтбора Из ТаблицаСтрокОтбора Цикл
						
					ИндексСтроки = ТаблицаСтрокОтбора.Индекс(СтрокаОтбора);		
					
					СтрокаТоварыПоПартиям = ТаблицаСписанныеТоварыПоПартиям.Добавить();	
					СтрокаТоварыПоПартиям.Номенклатура 			= СтрокаСписанныеТовары.Номенклатура;
					СтрокаТоварыПоПартиям.СчетУчета 			= СтрокаСписанныеТовары.СчетУчета;
					СтрокаТоварыПоПартиям.Количество 			= СтрокаОтбора.Количество;
					СтрокаТоварыПоПартиям.СуммаСписания 		= 
								?(МассивСуммРаспределенияСписания = Неопределено, 0, МассивСуммРаспределенияСписания[ИндексСтроки]);
					СтрокаТоварыПоПартиям.СуммаСписанияПР 		= 
								?(МассивСуммРаспределенияСписанияПР = Неопределено, 0, МассивСуммРаспределенияСписанияПР[ИндексСтроки]);
					СтрокаТоварыПоПартиям.СуммаСписанияВР 		= 
								?(МассивСуммРаспределенияСписанияВР = Неопределено, 0, МассивСуммРаспределенияСписанияВР[ИндексСтроки]);
					СтрокаТоварыПоПартиям.СуммаСписанияНУ 		= 
						СтрокаТоварыПоПартиям.СуммаСписания - СтрокаТоварыПоПартиям.СуммаСписанияПР - СтрокаТоварыПоПартиям.СуммаСписанияВР;
					СтрокаТоварыПоПартиям.Партия 				= СтрокаОтбора.Партия;
					Если РаздельныйУчетНДСНаСчете19 Тогда
						СтрокаТоварыПоПартиям.АналитикаУчетаЗатрат = СтрокаСписанныеТовары.АналитикаУчетаЗатрат;
					КонецЕсли;
					СтрокаТоварыПоПартиям.НомерСтроки 			= СтрокаОтбора.НомерСтрокиДокумента;
					СтрокаТоварыПоПартиям.НовыйНомерСтроки 		= ТаблицаСписанныеТоварыПоПартиям.Индекс(СтрокаТоварыПоПартиям) + 1;
					СтрокаТоварыПоПартиям.СтрокаРаспределена	= Истина;
					
					// Установим тот же новый номер в строках таблицы СписанныеПартииНДС, которые содержат ту же партию
					СтруктураОтбораОбрабатываемыхСтрок = Новый Структура("НомерСтрокиДокумента, Партия", 
								СтрокаОтбора.НомерСтрокиДокумента, СтрокаОтбора.Партия);
					МассивОбрабатываемыхСтрокСписанныеПартииНДС = СписанныеПартииНДС.НайтиСтроки(СтруктураОтбораОбрабатываемыхСтрок);
					Для Каждого ОбрабатываемаяСтрокаСписанныеПартииНДС ИЗ МассивОбрабатываемыхСтрокСписанныеПартииНДС Цикл
						ОбрабатываемаяСтрокаСписанныеПартииНДС.НовыйНомерСтроки = СтрокаТоварыПоПартиям.НовыйНомерСтроки;	
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаКопируетсяБезОбработки Тогда		
			СтрокаТоварыПоПартиям = ТаблицаСписанныеТоварыПоПартиям.Добавить();	
			ЗаполнитьЗначенияСвойств(СтрокаТоварыПоПартиям, СтрокаСписанныеТовары);
			СтрокаТоварыПоПартиям.СтрокаРаспределена = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДанныеПоПартиям = Документы.АвизоМПЗИсходящее.ПустаяСсылка().ДанныеПоПартиям.ВыгрузитьКолонки();
	ТаблицаДанныеПоСФ = Документы.АвизоМПЗИсходящее.ПустаяСсылка().ДанныеПоСФ.ВыгрузитьКолонки();
	
	Для Каждого СтрокаТоваров Из ТаблицаСписанныеТоварыПоПартиям Цикл
		
		СтрокаТабЧасти = ТаблицаДанныеПоПартиям.Добавить();
		СтрокаТабЧасти.Номенклатура 		= СтрокаТоваров.Номенклатура;
		СтрокаТабЧасти.СчетУчета 			= СтрокаТоваров.СчетУчета;
		СтрокаТабЧасти.Количество 			= СтрокаТоваров.Количество;
		СтрокаТабЧасти.Сумма 				= СтрокаТоваров.СуммаСписания;
		СтрокаТабЧасти.СуммаНУ 				= СтрокаТоваров.СуммаСписанияНУ;
		СтрокаТабЧасти.СуммаПР 				= СтрокаТоваров.СуммаСписанияПР;
		СтрокаТабЧасти.СуммаВР 				= СтрокаТоваров.СуммаСписанияВР;
		СтрокаТабЧасти.ДокументПартии 		= СтрокаТоваров.Партия;
		СтрокаТабЧасти.Ключ					= ТаблицаДанныеПоПартиям.Количество();
		
		ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабЧасти, "ДанныеПоПартиям", ПараметрыЗаполнения.Ссылка.Метаданные());
		
		СтруктураОтбора = Новый Структура("НомерСтрокиДокумента", СтрокаТоваров.НомерСтроки);
		Если СтрокаТоваров.СтрокаРаспределена Тогда
			СтруктураОтбора.Вставить("НовыйНомерСтроки", СтрокаТоваров.НовыйНомерСтроки);
			СтруктураОтбора.Вставить("Партия",           СтрокаТоваров.Партия);	
		КонецЕсли;
		Если НЕ ПараметрыЗаполнения.СпособОценкиМПЗПоСредней Тогда
			Если РаздельныйУчетНДСНаСчете19 Тогда
				СтруктураОтбора.Вставить("АналитикаУчетаЗатрат", СтрокаТоваров.АналитикаУчетаЗатрат);
			Иначе
				СтруктураОтбора.Вставить("Партия", СтрокаТоваров.Партия);
			КонецЕсли;
		КонецЕсли;
		МассивСтрокОтбораСписанныеПартииНДС	= СписанныеПартииНДС.НайтиСтроки(СтруктураОтбора);

		НомерСтрокиТЧ = 0;
		Для Каждого СтрокаПартии Из МассивСтрокОтбораСписанныеПартииНДС Цикл
			
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			
			СтрокаТЧ = ТаблицаДанныеПоСФ.Добавить();
			СтрокаТЧ.ВидЦенности 			= СтрокаПартии.ВидЦенности;
			СтрокаТЧ.СчетФактура 			= СтрокаПартии.СчетФактура;
			СтрокаТЧ.Количество				= СтрокаПартии.Количество;
			Если РаздельныйУчетНДСНаСчете19 Тогда 
				СтрокаТЧ.СуммаБезНДС			= СтрокаПартии.СуммаБезНДС;
			Иначе
				СтрокаТЧ.Стоимость 				= СтрокаПартии.Стоимость;
			КонецЕсли;
			СтрокаТЧ.СчетУчетаНДС 			= СтрокаПартии.СчетУчетаНДС;
			СтрокаТЧ.СтавкаНДС 				= СтрокаПартии.СтавкаНДС;
			СтрокаТЧ.НДС 					= СтрокаПартии.НДС;
			Если РаздельныйУчетНДСНаСчете19 Тогда 
				СтрокаТЧ.СпособУчетаНДС				= СтрокаПартии.СпособУчетаНДС;
				СтрокаТЧ.Поставщик					= СтрокаПартии.Поставщик;
				СтрокаТЧ.ИсправленныйСчетФактура	= СтрокаПартии.ИсправленныйСчетФактура;

			Иначе
				СтрокаТЧ.НДСВключенВСтоимость	= СтрокаПартии.НДСВключенВСтоимость;
			КонецЕсли;
			СтрокаТЧ.Ключ					= СтрокаТабЧасти.Ключ;
			СтрокаТЧ.НомерСтрокиТЧ			= НомерСтрокиТЧ;
					
		КонецЦикла;
		
	КонецЦикла;
	
	РезультатЗаполнения.ТаблицаДанныеПоПартиям = ТаблицаДанныеПоПартиям;
	РезультатЗаполнения.ТаблицаДанныеПоСФ      = ТаблицаДанныеПоСФ;
		
КонецПроцедуры

Функция ПолучитьМаксимальныйКлючСтроки(ДанныеПоПартиям) Экспорт
	
	Если ДанныеПоПартиям.Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	СписокКлючей = Новый СписокЗначений;
	СписокКлючей.ЗагрузитьЗначения(ДанныеПоПартиям.Выгрузить(, "Ключ").ВыгрузитьКолонку("Ключ"));
	СписокКлючей.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Возврат СписокКлючей[0].Значение;
	
КонецФункции

// ПОДГОТОВКА ПАРАМЕТРОВ ПРОВЕДЕНИЯ ДОКУМЕНТА

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт
	
	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.СчетРасчетов
	|ИЗ
	|	Документ.АвизоМПЗИсходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Результат   = Запрос.Выполнить();
	
	Реквизиты   = ОбщегоНазначенияБПВызовСервера.ПолучитьСтруктуруИзРезультатаЗапроса(Результат);
	
	Если НЕ УчетнаяПолитика.Существует(Реквизиты.Организация, Реквизиты.Период, Истина, ДокументСсылка) Тогда
		Отказ = Истина;
		Возврат ПараметрыПроведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СинонимДанныеПоПартиям",     НСтр("ru = 'Данные по партиям'"));
	Запрос.УстановитьПараметр("СодержаниеПередачаМПЗ",  	НСтр("ru = 'Передача МПЗ по авизо'"));
	Запрос.УстановитьПараметр("СчетаУчетаОС", 				УчетНДС.ОпределитьСчетаУчетаЦенностей("ОС", Реквизиты.Период));
	Запрос.УстановитьПараметр("СчетаУчетаОборудования", 	УчетНДС.ОпределитьСчетаУчетаЦенностей("Оборудование", Реквизиты.Период));
	Запрос.УстановитьПараметр("СчетРасчетов",               Реквизиты.СчетРасчетов);
	Запрос.УстановитьПараметр("ВедетсяУчетПоПартиям",  
		УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) <> Перечисления.СпособыОценки.ПоСредней);
	Запрос.УстановитьПараметр("ВедетсяСуммовойУчетПоСкладам", 		
		БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары));
	Запрос.УстановитьПараметр("РаздельныйУчетНДСНаСчете19", 
		УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Реквизиты.Организация, Реквизиты.Период));
	Запрос.УстановитьПараметр("СокращеннаяАналитика", УчетНДСРаздельный.СокращеннаяАналитика(Реквизиты.Период));
		
	НомераТаблиц = Новый Структура;
	
	Запрос.Текст = ТекстЗапросаРеквизитыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицыДокумента(НомераТаблиц)
		+ ТекстЗапросаТаблицаПоПартиям(НомераТаблиц)
		+ ТекстЗапросаТаблицаСписанияПоСчетуГТД(НомераТаблиц)
		+ ТекстЗапросаТаблицаПоСФ(НомераТаблиц)
		+ ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат ПараметрыПроведения;
	
КонецФункции

Функция ТекстЗапросаРеквизитыДокумента(НомераТаблиц = Неопределено)
	
	НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Регистратор,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Номер КАК Номер,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Склад КАК Склад,
	|	Реквизиты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	Реквизиты.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Реквизиты.СчетРасчетов КАК СчетРасчетов,
	|	&СодержаниеПередачаМПЗ КАК СодержаниеПроводки,
	|	&ВедетсяУчетПоПартиям КАК ВедетсяУчетПоПартиям,
	|	&РаздельныйУчетНДСНаСчете19 КАК РаздельныйУчетНДСНаСчете19
	|ИЗ
	|	Документ.АвизоМПЗИсходящее КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицыДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("ВременнаяТаблицаТовары", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДанныеПоПартиям", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВременнаяТаблицаДанныеПоСФ", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Регистратор,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.СчетУчета КАК СчетУчета,
	|	Товары.НомерГТД КАК НомерГТД,
	|	Товары.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.АвизоМПЗИсходящее.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоПартиям.Ссылка КАК Регистратор,
	|	ДанныеПоПартиям.НомерСтроки КАК НомерСтроки,
	|	ДанныеПоПартиям.Номенклатура КАК Номенклатура,
	|	ДанныеПоПартиям.Количество КАК Количество,
	|	ДанныеПоПартиям.СчетУчета КАК СчетУчета,
	|	ДанныеПоПартиям.НомерГТД КАК НомерГТД,
	|	ДанныеПоПартиям.СтранаПроисхождения КАК СтранаПроисхождения,
	|	ДанныеПоПартиям.Сумма КАК Сумма,
	|	ДанныеПоПартиям.СуммаНУ КАК СуммаНУ,
	|	ДанныеПоПартиям.СуммаПР КАК СуммаПР,
	|	ДанныеПоПартиям.СуммаВР КАК СуммаВР,
	|	ДанныеПоПартиям.ДокументПартии КАК ДокументПартии,
	|	ДанныеПоПартиям.Ключ КАК Ключ
	|ПОМЕСТИТЬ ТаблицаДанныеПоПартиям
	|ИЗ
	|	Документ.АвизоМПЗИсходящее.ДанныеПоПартиям КАК ДанныеПоПартиям
	|ГДЕ
	|	ДанныеПоПартиям.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоСФ.Ссылка КАК Регистратор,
	|	ДанныеПоСФ.НомерСтроки КАК НомерСтроки,
	|	ДанныеПоСФ.Ключ КАК Ключ,
	|	ДанныеПоСФ.СчетФактура КАК СчетФактура,
	|	ДанныеПоСФ.ВидЦенности КАК ВидЦенности,
	|	ДанныеПоСФ.Количество КАК Количество,
	|	ДанныеПоСФ.Стоимость КАК Стоимость,
	|	ДанныеПоСФ.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеПоСФ.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ДанныеПоСФ.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеПоСФ.НДС КАК НДС,
	|	ДанныеПоСФ.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ДанныеПоСФ.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ДанныеПоСФ.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	ДанныеПоСФ.Поставщик КАК Поставщик,
	|	ДанныеПоСФ.ИсправленныйСчетФактура КАК ИсправленныйСчетФактура
	|ПОМЕСТИТЬ ТаблицаДанныеПоСФ
	|ИЗ
	|	Документ.АвизоМПЗИсходящее.ДанныеПоСФ КАК ДанныеПоСФ
	|ГДЕ
	|	ДанныеПоСФ.Ссылка = &Ссылка";

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

Функция ТекстЗапросаТаблицаПоПартиям(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПоПартиям", 	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеПоПартиям.Регистратор,
	|	ДанныеПоПартиям.Номенклатура,
	|	ДанныеПоПартиям.Количество,
	|	ДанныеПоПартиям.СчетУчета,
	|	ДанныеПоПартиям.НомерГТД,
	|	ДанныеПоПартиям.СтранаПроисхождения,
	|	ДанныеПоПартиям.Сумма,
	|	ДанныеПоПартиям.СуммаНУ,
	|	ДанныеПоПартиям.СуммаПР,
	|	ДанныеПоПартиям.СуммаВР,
	|	ДанныеПоПартиям.ДокументПартии,
	|	ДанныеПоПартиям.Ключ
	|ИЗ
	|	ТаблицаДанныеПоПартиям КАК ДанныеПоПартиям";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаСписанияПоСчетуГТД(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаСписанияПоСчетуГТД", 	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""ДанныеПоПартиям"" КАК ИмяСписка,
	|	&СинонимДанныеПоПартиям КАК СинонимСписка,
	|	ДанныеПоПартиям.НомерСтроки КАК НомерСтрокиДокумента,
	|	ДанныеПоПартиям.Номенклатура,
	|	ДанныеПоПартиям.Количество,
	|	ДанныеПоПартиям.СчетУчета,
	|	ДанныеПоПартиям.НомерГТД,
	|	ДанныеПоПартиям.СтранаПроисхождения,
	|	&СодержаниеПередачаМПЗ КАК Содержание
	|ИЗ
	|	ТаблицаДанныеПоПартиям КАК ДанныеПоПартиям";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

Функция ТекстЗапросаТаблицаПоСФ(НомераТаблиц)
	
	НомераТаблиц.Вставить("ТаблицаПоСФ", 	НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	ДанныеПоСФ.Регистратор КАК Регистратор,
	|	ДанныеПоСФ.Регистратор.Дата КАК Период,
	|	ДанныеПоСФ.Регистратор.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &ВедетсяСуммовойУчетПоСкладам
	|			ТОГДА ДанныеПоСФ.Регистратор.Склад
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|	ТаблицаДанныеПоПартиям.Номенклатура КАК Номенклатура,
	|	ТаблицаДанныеПоПартиям.СчетУчета КАК СчетУчета,
	|	ТаблицаДанныеПоПартиям.ДокументПартии КАК Партия,
	|	ДанныеПоСФ.СчетФактура КАК СчетФактура,
	|	ДанныеПоСФ.НДСВключенВСтоимость КАК НДСВключенВСтоимость,
	|	ДанныеПоСФ.СпособУчетаНДС КАК СпособУчетаНДС,
	|	ДанныеПоСФ.ВидЦенности КАК ВидЦенности,
	|	ДанныеПоСФ.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ДанныеПоСФ.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеПоСФ.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеПоСФ.Количество КАК Количество,
	|	ДанныеПоСФ.Стоимость КАК Стоимость,
	|	ДанныеПоСФ.НДС КАК НДС,
	|	ДанныеПоСФ.Ключ КАК Ключ,
	|	ДанныеПоСФ.НомерСтрокиТЧ КАК НомерСтрокиТЧ,
	|	ВЫБОР
	|		КОГДА НЕ &СокращеннаяАналитика
	|			ТОГДА ДанныеПоСФ.Поставщик
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Поставщик,
	|	ВЫБОР
	|		КОГДА  НЕ &СокращеннаяАналитика
	|			ТОГДА ДанныеПоСФ.ИсправленныйСчетФактура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.КорректировкаПоступления.ПустаяСсылка)
	|	КОНЕЦ КАК ИсправленныйСчетФактура
	|ИЗ
	|	ТаблицаДанныеПоСФ КАК ДанныеПоСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныеПоПартиям КАК ТаблицаДанныеПоПартиям
	|		ПО ДанныеПоСФ.Ключ = ТаблицаДанныеПоПартиям.Ключ";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции

// ОТЛОЖЕННОЕ ПРОВЕДЕНИЕ

Функция НовыеПараметрыЗаполнения() Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("СпособОценкиМПЗПоСредней", Истина);
	ПараметрыЗаполнения.Вставить("ВыполнитьКорректировкуСтоимости",  Ложь);
	
	// Результат Обработки.ЗакрытиеМесяца.НовыеПараметрыВыполненияОперации()
	ПараметрыЗаполнения.Вставить("ПараметрыКорректировкиСтоимости");
	ПараметрыЗаполнения.Вставить("ИспользуетсяОтложенноеПроведение", Ложь);
	
	ПараметрыЗаполнения.Вставить("Ссылка",                   Документы.АвизоМПЗИсходящее.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Дата",                     '0001-01-01');
	ПараметрыЗаполнения.Вставить("Организация",              Справочники.Организации.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("ПодразделениеОрганизации", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	ПараметрыЗаполнения.Вставить("Склад",                    Справочники.Склады.ПустаяСсылка());
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

Функция НовыйРезультатЗаполнения() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаданиеВыполнено",   Ложь);
	СтруктураПараметров.Вставить("ОткрытьФормуОшибки", Ложь);
	СтруктураПараметров.Вставить("ОперацияКорректировкаСтоимости");
	СтруктураПараметров.Вставить("ТаблицаДанныеПоПартиям");
	СтруктураПараметров.Вставить("ТаблицаДанныеПоСФ");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Получает таблицы остатков для заполнения авизо.
//
// Параметры:
//  ПараметрыЗаполнения - Структура - см. НовыеПараметрыЗаполнения().
//
// Возвращаемое значение:
//   Структура   - см. НовыйРезультатЗаполнения().
//
Функция ЗаполнитьПоОстаткам(ПараметрыЗаполнения) Экспорт
	
	Результат = НовыйРезультатЗаполнения();
	
	Если ПараметрыЗаполнения.ВыполнитьКорректировкуСтоимости Тогда
		
		РезультатКорректировки = Обработки.ЗакрытиеМесяца.АктуализироватьОстатки(ПараметрыЗаполнения.ПараметрыКорректировкиСтоимости);
		
		Если ТипЗнч(РезультатКорректировки) <> Тип("Структура")
		 Или Не РезультатКорректировки.Свойство("Отказ")
		 Или Не РезультатКорректировки.Свойство("Ссылка") Тогда
			Возврат Результат;
		КонецЕсли;
			
		Результат.ОткрытьФормуОшибки = РезультатКорректировки.Отказ;
		Результат.ОперацияКорректировкаСтоимости = РезультатКорректировки.Ссылка;
		
	КонецЕсли;
	
	Если Не Результат.ОткрытьФормуОшибки Тогда
		ЗаполнитьДанныеПоПартиям(ПараметрыЗаполнения, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьДанныеЗаполнения(ПараметрыЗаполнения)
	
	// Создание таблицы параметров списания товаров.
	
	СписаниеТоваровРеквизиты = Новый ТаблицаЗначений;
	Колонки = СписаниеТоваровРеквизиты.Колонки;
	Колонки.Добавить("Регистратор",           Новый ОписаниеТипов("ДокументСсылка.АвизоМПЗИсходящее"));
	Колонки.Добавить("Период",                ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Колонки.Добавить("ТипСписания",           ОбщегоНазначения.ОписаниеТипаСтрока(8));
	Колонки.Добавить("Организация",           Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Колонки.Добавить("Подразделение",         Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Колонки.Добавить("КорПодразделение",      Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Колонки.Добавить("Склад",                 Новый ОписаниеТипов("СправочникСсылка.Склады"));
	Колонки.Добавить("Содержание",            ОбщегоНазначения.ОписаниеТипаСтрока(16));
	Колонки.Добавить("СписыватьНДСнаКорСчетИАналитикуТовара", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("ВидОперации");
	Колонки.Добавить("Контрагент");
	Колонки.Добавить("НДСВСтоимостиТоваров");
	
	Реквизиты = СписаниеТоваровРеквизиты.Добавить();
	Реквизиты.Регистратор      = ПараметрыЗаполнения.Ссылка;
	Реквизиты.Период           = ПараметрыЗаполнения.Дата;
	Реквизиты.Организация      = ПараметрыЗаполнения.Организация;
	Реквизиты.Подразделение    = ПараметрыЗаполнения.ПодразделениеОрганизации;
	Реквизиты.КорПодразделение = ПараметрыЗаполнения.ПодразделениеОрганизации;
	Реквизиты.Склад            = ПараметрыЗаполнения.Склад;
	Реквизиты.ТипСписания      = "Списание";
	Реквизиты.Содержание       = НСтр("ru = 'Списание товаров'");
	Реквизиты.СписыватьНДСнаКорСчетИАналитикуТовара = Истина;
	
	// Создание таблицы номенклатуры с актуальными остатками на дату документа.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                           ПараметрыЗаполнения.Ссылка);
	Запрос.УстановитьПараметр("ИспользуетсяОтложенноеПроведение", ПараметрыЗаполнения.ИспользуетсяОтложенноеПроведение);
	Запрос.УстановитьПараметр("СчетаРассчитываемыеОперативно",    УчетТоваров.СчетаРассчитываемыеОперативно(
		ПараметрыЗаполнения.Организация, ПараметрыЗаполнения.Дата));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка.Дата КАК Период,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтрокиДокумента,
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Ссылка.Склад КАК Склад,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ТаблицаТовары.Ссылка.ПодразделениеОрганизации КАК КорПодразделение,
	|	ВЫБОР
	|		КОГДА &ИспользуетсяОтложенноеПроведение
	|				И НЕ ТаблицаТовары.СчетУчета В (&СчетаРассчитываемыеОперативно)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОперативныйРасчет
	|ИЗ
	|	Документ.АвизоМПЗИсходящее.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТовары.НомерСтроки";
	
	СписаниеТоваровТаблицаТовары = Запрос.Выполнить().Выгрузить();
	
	Колонки = СписаниеТоваровТаблицаТовары.Колонки;
	Колонки.Добавить("ИмяСписка",                ОбщегоНазначения.ОписаниеТипаСтрока(6));
	Колонки.Добавить("СинонимСписка",            ОбщегоНазначения.ОписаниеТипаСтрока(6));
	Колонки.Добавить("Себестоимость",            ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Колонки.Добавить("СуммаРасчетовСКомитентом", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Колонки.Добавить("СчетАвансовСКомитентом",   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Колонки.Добавить("СчетРасчетовСКомитентом",  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Колонки.Добавить("КорСчетСписания",          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Колонки.Добавить("ДокументОприходования");
	Колонки.Добавить("Комитент");
	Колонки.Добавить("ДоговорКомиссии");
	Колонки.Добавить("ВалютаРасчетовСКомитентом");
	Колонки.Добавить("КорСубконто1");
	Колонки.Добавить("КорСубконто2");
	Колонки.Добавить("КорСубконто3");
	Колонки.Добавить("ВидКорСубконто1");
	Колонки.Добавить("ВидКорСубконто2");
	Колонки.Добавить("ВидКорСубконто3");
	
	СписаниеТоваровТаблицаТовары.ЗаполнитьЗначения("Товары", "ИмяСписка");
	СписаниеТоваровТаблицаТовары.ЗаполнитьЗначения(НСтр("ru = 'Товары'"), "СинонимСписка");
	СписаниеТоваровТаблицаТовары.ЗаполнитьЗначения(ПланыСчетов.Хозрасчетный.НедостачиИПотериОтПорчиЦенностей, "КорСчетСписания");
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("СписаниеТоваровРеквизиты",     СписаниеТоваровРеквизиты);
	ДанныеЗаполнения.Вставить("СписаниеТоваровТаблицаТовары", СписаниеТоваровТаблицаТовары);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ДополнитьТоварамиСОтложеннымСписаниемСтоимости(ТаблицаСписанныеТовары, ТаблицаТовары, Реквизиты)
	
	ТекстЗапросаСтоимости =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	СчетУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйЦена.Счет КАК Счет,
	|	ХозрасчетныйЦена.Субконто1 КАК Субконто1,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
	|				ТОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток
	|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
	|				ТОГДА ХозрасчетныйЦена.КоличествоОборотКт
	|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
	|				ТОГДА ХозрасчетныйЦена.КоличествоОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаКонечныйОстаток
	|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаОборотКт
	|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаНУКонечныйОстаток
	|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаНУОборотКт
	|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаНУОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНУ,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаПРКонечныйОстаток
	|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаПРОборотКт
	|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаПРОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПР,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйЦена.КоличествоКонечныйОстаток <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаВРКонечныйОстаток
	|			КОГДА ХозрасчетныйЦена.КоличествоОборотКт <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаВРОборотКт
	|			КОГДА ХозрасчетныйЦена.КоличествоОборотДт <> 0
	|				ТОГДА ХозрасчетныйЦена.СуммаВРОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВР
	|ПОМЕСТИТЬ ХозрасчетныйЦена
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Период,
	|			ДвиженияИГраницыПериода,
	|			,
	|			&ПорядокСубконтоЦена,
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						ТаблицаТовары.Номенклатура
	|					ИЗ
	|						ТаблицаТовары КАК ТаблицаТовары)
	|				И &ТекстУсловияСклад) КАК ХозрасчетныйЦена
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйЦена.Субконто1,
	|	ХозрасчетныйЦена.Счет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Субконто1,
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.СчетУчета КАК СчетУчета,
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ХозрасчетныйЦена.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(ХозрасчетныйЦена.Сумма, 0) КАК Сумма,
	|	ЕСТЬNULL(ХозрасчетныйЦена.СуммаНУ, 0) КАК СуммаНУ,
	|	ЕСТЬNULL(ХозрасчетныйЦена.СуммаПР, 0) КАК СуммаПР,
	|	ЕСТЬNULL(ХозрасчетныйЦена.СуммаВР, 0) КАК СуммаВР
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйЦена КАК ХозрасчетныйЦена
	|		ПО ТаблицаТовары.Номенклатура = ХозрасчетныйЦена.Субконто1
	|			И ТаблицаТовары.СчетУчета = ХозрасчетныйЦена.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	// Определим настройки аналитического учета.
	ВестиСуммовойУчетПоСкладамБУ = БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);
	
	// Определяем условия отборов по аналитикам.
	ТекстУсловияСклад = ?(ВестиСуммовойУчетПоСкладамБУ, "И Субконто2 = &Склад", "");
	ТекстЗапросаСтоимости = СтрЗаменить(ТекстЗапросаСтоимости, "И &ТекстУсловияСклад", ТекстУсловияСклад);
	
	// Определяем наборы субконто.
	ПорядокСубконтоЦена = Новый Массив();
	ПорядокСубконтоЦена.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	Если ВестиСуммовойУчетПоСкладамБУ Тогда
		ПорядокСубконтоЦена.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаСтоимости);
	Запрос.УстановитьПараметр("ТаблицаТовары",       ТаблицаТовары);
	Запрос.УстановитьПараметр("Организация",	     Реквизиты.Организация);
	Запрос.УстановитьПараметр("Склад",               Реквизиты.Склад);
	Запрос.УстановитьПараметр("ПорядокСубконтоЦена", ПорядокСубконтоЦена);
	Запрос.УстановитьПараметр("НачалоМесяца",
		Новый Граница(НачалоМесяца(Реквизиты.Период), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("КонецМесяца",
		Новый Граница(КонецМесяца(Реквизиты.Период), ВидГраницы.Включая)); // нужно рассчитать цену с учётом корректировки стоимости
	
	Выборка = Запрос.Выполнить().Выбрать();
	НомерСтроки = 0;
	Пока Выборка.Следующий() Цикл
		
		СтрокаСписания = ТаблицаСписанныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСписания, ТаблицаТовары[НомерСтроки]);
		
		Если Выборка.Количество <> 0 Тогда
			СписатьПолностью = (СтрокаСписания.Количество = Выборка.Количество);
			СтрокаСписания.СуммаСписания   = ?(СписатьПолностью, Выборка.Сумма, СтрокаСписания.Количество * Выборка.Сумма / Выборка.Количество);
			СтрокаСписания.СуммаСписанияНУ = ?(СписатьПолностью, Выборка.СуммаНУ, СтрокаСписания.Количество * Выборка.СуммаНУ / Выборка.Количество);
			СтрокаСписания.СуммаСписанияПР = ?(СписатьПолностью, Выборка.СуммаПР, СтрокаСписания.Количество * Выборка.СуммаПР / Выборка.Количество);
			СтрокаСписания.СуммаСписанияВР = ?(СписатьПолностью, Выборка.СуммаВР, СтрокаСписания.Количество * Выборка.СуммаВР / Выборка.Количество);
			СтрокаСписания.СуммаКорСписанияНУ = СтрокаСписания.СуммаСписанияНУ;
			СтрокаСписания.СуммаКорСписанияПР = СтрокаСписания.СуммаСписанияПР;
			СтрокаСписания.СуммаКорСписанияВР = СтрокаСписания.СуммаСписанияВР;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ТаблицаСписанныеТовары.Сортировать("НомерСтроки");
	
КонецПроцедуры

Функция ТекстЗапросаРегистрацияОтложенныхРасчетовВПоследовательности(НомераТаблиц, ПараметрыПроведения, Реквизиты)

	Если НЕ ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Реквизиты.Организация, Реквизиты.Период) Тогда
		ПараметрыПроведения.Вставить("ТаблицаРегистрации", Неопределено);
		Возврат "";
	КонецЕсли;
	
	НомераТаблиц.Вставить("ТаблицаРегистрации", НомераТаблиц.Количество());

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанныеПоПартиям.СчетУчета КАК СчетУчета,
	|	&СчетРасчетов КАК КорСчетСписания
	|ИЗ
	|	ТаблицаДанныеПоПартиям КАК ТаблицаДанныеПоПартиям";
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции

// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ

// Процедура формирования движений по регистру бухгалтерии Хозрасчетный
Процедура СформироватьДвиженияДанныеПоПартиям(ТаблицаПоПартиям, ТаблицаРеквизиты, Движения, Отказ) Экспорт

	Проводки 				= Движения.Хозрасчетный;
	
	Параметры = ПодготовитьПараметрыДанныеПоПартиям(ТаблицаПоПартиям, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	
	СвойстваСчетаРасчетов = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Реквизиты.СчетРасчетов);
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();

	Для Каждого СтрокаПартии Из Параметры.ТаблицаПоПартиям Цикл
		
		СвойстваСчетаУчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаПартии.СчетУчета);
		
		Проводка = Проводки.Добавить();
		Проводка.Период      		= Реквизиты.Период;
		Проводка.Организация 		= Реквизиты.Организация;
		Проводка.Содержание 		= Реквизиты.СодержаниеПроводки;
		Проводка.СчетКт 			= СтрокаПартии.СчетУчета;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  СтрокаПартии.Номенклатура);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  		Реквизиты.Склад);
		Если Реквизиты.ВедетсяУчетПоПартиям ИЛИ СвойстваСчетаУчета.Забалансовый Тогда
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  	СтрокаПартии.ДокументПартии);
		КонецЕсли;
		
		// Балансовый счет учета не может корреспондировать с забалансовым
		Если СвойстваСчетаРасчетов.Забалансовый = СвойстваСчетаУчета.Забалансовый Тогда
			Проводка.СчетДт 		= Реквизиты.СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОбособленныеПодразделения", Реквизиты.ОрганизацияПолучатель);			
		КонецЕсли;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, Реквизиты.ПодразделениеОрганизации, "Кт");
			
		Проводка.Сумма 		= СтрокаПартии.Сумма;
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаПартии.СуммаНУ,СтрокаПартии.СуммаНУ,
			СтрокаПартии.СуммаПР,СтрокаПартии.СуммаПР,
			СтрокаПартии.СуммаВР,СтрокаПартии.СуммаВР,
			Проводка);
		
		Если СвойстваСчетаРасчетов.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.Количество;
		КонецЕсли;
		
		Если СвойстваСчетаУчета.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;
		
		Если СвойстваСчетаРасчетов.Валютный Тогда
			Проводка.ВалютаДт 			= ВалютаРегламентированногоУчета;
			Проводка.ВалютнаяСуммаДт 	= СтрокаПартии.Сумма;			
		КонецЕсли;
		
		Проводка.НеКорректироватьСтоимостьАвтоматически = Истина;
		
	КонецЦикла;

	Проводки.Записывать = Истина;
	
КонецПроцедуры

Функция ПодготовитьПараметрыДанныеПоПартиям(ТаблицаПоПартиям, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаПоПартиям
	
	СписокОбязательныхКолонок = ""
	+ "Номенклатура,"       			// <СправочникСсылка.Номенклатура>
	+ "СчетУчета," 						// <План счетов бухгалтерского учета>
	+ "ДокументПартии,"       			// <ДокументСсылка> - документ партии
	+ "Количество,"		        	 	// <Число (15,3)>
	+ "Сумма,"           	 			// <Число (15,2)>
	+ "СуммаНУ,"             			// <Число (15,2)>
	+ "СуммаПР,"             			// <Число (15,2)>
	+ "СуммаВР,"             			// <Число (15,2)>
	;
	
	Параметры.Вставить("ТаблицаПоПартиям",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПоПартиям, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ОрганизацияПолучатель,"       	// <СправочникСсылка.Организации>
	+ "Склад,"                   		// <СправочникСсылка.Склады>
	+ "СчетРасчетов,"                   // <План счетов бухгалтерского учета>
	+ "ПодразделениеОрганизации,"       // <Ссылка на справочник подразделений>
	+ "СодержаниеПроводки,"             // <Строка>
	+ "ВедетсяУчетПоПартиям,"           // <Булево>
	;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Процедура формирования движений по регистру бухгалтерии Хозрасчетный
Процедура СформироватьДвиженияСписанияПоСчетуГТД(ТаблицаСписанияПоСчетуГТД, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыСписанияПоСчетуГТД(ТаблицаСписанияПоСчетуГТД, ТаблицаРеквизиты);
	Реквизиты = Параметры.Реквизиты[0];
	ТаблицаСписанияПоСчетуГТД = Параметры.ТаблицаСписанияПоСчетуГТД;
	
	// Учет товаров по номерам ГТД
	УчетНДСПереопределяемый.СформироватьПроводкиСписаниеГТД(
		Параметры.ТаблицаСписанияПоСчетуГТД, Реквизиты, Движения, Отказ);
	
КонецПроцедуры

Функция ПодготовитьПараметрыСписанияПоСчетуГТД(ТаблицаСписанияПоСчетуГТД, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.ТаблицаСписанияПоСчетуГТД
	
	СписокОбязательныхКолонок = ""
	+ "ИмяСписка,"       			// <Строка>
	+ "СинонимСписка," 				// <Строка>
	+ "НомерСтрокиДокумента,"       // <Число>
	+ "Номенклатура,"		        // <СправочникСсылка.Номенклатура>
	+ "СчетУчета,"           	 	// <План счетов бухгалтерского учета>
	+ "НомерГТД,"             		// <СправочникСсылка.НомераГТД>
	+ "СтранаПроисхождения,"        // <СправочникСсылка.СтраныМира>
	+ "Количество,"             	// <Число (15,3)>
	+ "Содержание,"					// <Строка>
	;
	
	Параметры.Вставить("ТаблицаСписанияПоСчетуГТД",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаСписанияПоСчетуГТД, СписокОбязательныхКолонок));

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// Процедура формирования движений по регистрам НДС
Процедура СформироватьДвиженияПоРегистрамНДС(ТаблицаПоСФ, ТаблицаРеквизиты, Движения, Отказ) Экспорт
	
	Параметры = ПодготовитьПараметрыПроведенияНДС(ТаблицаПоСФ, ТаблицаРеквизиты);
	ТаблицаПоСФ = Параметры.ТаблицаПоСФ;
	Реквизиты 	= Параметры.Реквизиты[0];
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда 
		
		ТаблицаДвижений = ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(Реквизиты, ТаблицаПоСФ);
		
		// Движения по регистру "НДС раздельный учет НДС"
		НаборЗаписейДвижения = Движения.НДСРаздельныйУчет;
		
		Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
			
			НоваяСтрока = НаборЗаписейДвижения.ДобавитьРасход();			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДвижения);
			
		КонецЦикла;
		
		НаборЗаписейДвижения.Записывать = Истина;

	Иначе
		
		// НДС по приобретенным ценностям
		УчетНДСПереопределяемый.СформироватьДвиженияНДСПоПриобретеннымЦенностям(
		ТаблицаПоСФ, Движения, Отказ);
		
	КонецЕсли;

		
КонецПроцедуры

Функция ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(Реквизиты, ТаблицаПоСФ)
	
	ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(Реквизиты.Организация, Реквизиты.Период) = Перечисления.СпособыОценки.ФИФО;
	
	ДанныеДвижений = ТаблицаПоСФ;

	ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";
	
	ДанныеДвижений.Колонки.Добавить("Субконто1");
	ДанныеДвижений.Колонки.Добавить("Субконто2");
	ДанныеДвижений.Колонки.Добавить("Субконто3");
	ДанныеДвижений.Колонки.Добавить("Подразделение");
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаЗатрат",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаНДС",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНДС"));
		
	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
				ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
				СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Склад;
				КонецЕсли;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если ПартионныйУчет Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Партия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТаблицы.Подразделение = Реквизиты.ПодразделениеОрганизации;
		
		СтрокаТаблицы.АналитикаУчетаЗатрат = Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(СтрокаТаблицы);
		СтрокаТаблицы.АналитикаУчетаНДС = Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(СтрокаТаблицы);
		
	КонецЦикла;

	ДанныеДвижений.Колонки.Удалить("Номенклатура");
	ДанныеДвижений.Колонки.Удалить("Склад");

	ДанныеДвижений.Свернуть("
		|Период,Организация,СпособУчетаНДС,
		|Партия,АналитикаУчетаЗатрат,АналитикаУчетаНДС",
		"Количество,СуммаБезНДС,НДС");
		
	Возврат ДанныеДвижений;
	
КонецФункции

Функция ПодготовитьПараметрыПроведенияНДС(ТаблицаПоСФ, ТаблицаРеквизиты)

	Параметры = Новый Структура;

	// Подготовка таблицы Параметры.Реквизиты

	СписокОбязательныхКолонок = ""
	+ "Период,"                         // <Дата> - период движений - дата документа
	+ "Организация,"                    // <СправочникСсылка.Организации>
	+ "ПодразделениеОрганизации,"       // <СправочникСсылка.ПодразделенияОрганизации>
	+ "РаздельныйУчетНДСНаСчете19";     // <Булево>
	;
	
	Параметры.Вставить("Реквизиты",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаРеквизиты, СписокОбязательныхКолонок));
	
	Реквизиты = Параметры.Реквизиты[0];
	
	Если Реквизиты.РаздельныйУчетНДСНаСчете19 Тогда
		
		// Подготовка таблицы Параметры.ТаблицаПоСФ
		
		СписокОбязательныхКолонок = ""
		+ "ВидДвижения,"       		// <ВидДвиженияНакопления>
		+ "Период," 				// <Дата> - период движений - дата документа
		+ "Организация,"       		// <СправочникСсылка.Организации>
		+ "Склад,"		        	// <СправочникСсылка.Склады>
		+ "Номенклатура,"           // <СправочникСсылка.Номенклатура>
		+ "СчетУчета,"             	// <План счетов бухгалтерского учета>
		+ "Партия,"        			// <ДокументСсылка> - документ партии
		+ "СчетФактура,"            // <ДокументСсылка> - документ счета-фактуры
		+ "СпособУчетаНДС,"   		// <Булево>
		+ "ВидЦенности,"            // <ПеречислениеСсылка.ВидыЦенностей>
		+ "СчетУчетаНДС,"           // <ПланСчетовСсылка.Хозрасчетный>
		+ "СтавкаНДС,"             	// <ПеречислениеСсылка.СтавкиНДС>
		+ "Количество,"             // <Число (15,3)>
		+ "СуммаБезНДС,"            // <Число (15,2)>
		+ "НДС,"             		// <Число (15,2)>
		+ "Поставщик,"              // <СправочникСсылка.Контрагенты>
		+ "ИсправленныйСчетФактура,"// <ДокументСсылка.КорректировкаПоступления>
		;
		
	Иначе
		
		// Подготовка таблицы Параметры.ТаблицаПоСФ
		
		СписокОбязательныхКолонок = ""
		+ "ВидДвижения,"       		// <ВидДвиженияНакопления>
		+ "Период," 				// <Дата> - период движений - дата документа
		+ "Организация,"       		// <СправочникСсылка.Организации>
		+ "Склад,"		        	// <СправочникСсылка.Склады>
		+ "Номенклатура,"           // <СправочникСсылка.Номенклатура>
		+ "СчетУчета,"             	// <План счетов бухгалтерского учета>
		+ "Партия,"        			// <ДокументСсылка> - документ партии
		+ "СчетФактура,"            // <ДокументСсылка> - документ счета-фактуры
		+ "НДСВключенВСтоимость,"   // <Булево>
		+ "ВидЦенности,"            // <ПеречислениеСсылка.ВидыЦенностей>
		+ "СчетУчетаНДС,"           // <ПланСчетовСсылка.Хозрасчетный>
		+ "СтавкаНДС,"             	// <ПеречислениеСсылка.СтавкиНДС>
		+ "Количество,"             // <Число (15,3)>
		+ "Стоимость,"             	// <Число (15,2)>
		+ "НДС,"             		// <Число (15,2)>
		;
		
	КонецЕсли;	
	Параметры.Вставить("ТаблицаПоСФ",
		ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(ТаблицаПоСФ, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Исходящее авизо
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Авизо";
	КомандаПечати.Представление = НСтр("ru = 'Авизо'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
		// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("ru = 'Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru = 'Реестр документов ""Авизо по МПЗ исходящее""'");
	КомандаПечати.Обработчик     = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Авизо") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Авизо", "Авизо", 
			ПечатьАвизо(МассивОбъектов, ОбъектыПечати), , "Документ.АвизоМПЗИсходящее.ПФ_MXL_Авизо");
	КонецЕсли;
	
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);	
	
КонецПроцедуры

// Функция формирует табличный документ с печатной формой накладной,
// разработанной методистами
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьАвизо(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб         = Истина;
	ТабДокумент.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АвизоМПЗИсходящее_Авизо";
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Артикул";
		ТекстКодАртикул = "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		ВыводитьКоды    = Истина;
		Колонка         = "Код";
		ТекстКодАртикул = "Код";
	Иначе
		ВыводитьКоды    = Ложь;
		Колонка         = "";
		ТекстКодАртикул = "Код";
	КонецЕсли;

	Если ВыводитьКоды Тогда
		ОбластьШапки  = "ЗаголовокТаблицыМПЗСКодом";
		ОбластьСтроки = "СтрокаТаблицыМПЗСКодом";
	Иначе
		ОбластьШапки  = "ЗаголовокТаблицыМПЗ";
		ОбластьСтроки = "СтрокаТаблицыМПЗ";
	Конецесли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ДополнительнаяКолонкаПечатныхФормДокументов", ДопКолонка);
	СтруктураДат = ПолучитьПериодВыборкиДвиженийССубконто(МассивОбъектов);
	Запрос.УстановитьПараметр("ДатаОТ", 		СтруктураДат.ДатаОТ);
	Запрос.УстановитьПараметр("ДатаДО", 		СтруктураДат.ДатаДО);
	
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыАвизо();
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Шапка 					= Результаты[1].Выбрать();
	ВыборкаСтрок	 		= Результаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
	ВыборкаПроводок 		= Результаты[3].Выбрать();
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.АвизоМПЗИсходящее.ПФ_MXL_Авизо");
	
	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Если НЕ ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		// Выводим основную шапку
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru = 'Извещение (авизо) на передачу МПЗ'"));
		
		СведенияОбОрганизации    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		ПредставлениеОрганизации = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.Организация = ПредставлениеОрганизации;
		
		СведенияОбОтправителе    = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.ОрганизацияОтправитель, Шапка.Дата);
		ПредставлениеОтправителя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОбОтправителе, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.Отправитель = ПредставлениеОтправителя;
		
		СведенияОПолучателе     = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.ОрганизацияПолучатель, Шапка.Дата);
		ПредставлениеПолучателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПолучателе, "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.Получатель = ПредставлениеПолучателя;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим шапку таблицы МПЗ
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.ИмяКодАртикул = Колонка;
		КонецЕсли;
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим строки таблицы МПЗ
		НС = 1;
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		
		ВыборкаСтрок.Сбросить();
		СтруктураПоиска = Новый Структура("Ссылка", Шапка.Ссылка);
		Пока ВыборкаСтрок.НайтиСледующий(СтруктураПоиска) Цикл
			
			ВыборкаСтрокТовары = ВыборкаСтрок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Номенклатура");
			Пока ВыборкаСтрокТовары.Следующий() Цикл
				
				ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
				ОбластьМакета.Параметры.НомерСтроки = НС;
				ОбластьМакета.Параметры.МПЗ = СокрЛП(ВыборкаСтрокТовары.МПЗ);
				ОбластьМакета.Параметры.Количество = ВыборкаСтрокТовары.Количество;
				ОбластьМакета.Параметры.ЕдиницаХранения = ВыборкаСтрокТовары.ЕдиницаХранения;
				ОбластьМакета.Параметры.Сумма = ВыборкаСтрокТовары.Сумма;
				Если ВыводитьКоды Тогда
					ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
				КонецЕсли;
				
				ТабДокумент.Вывести(ОбластьМакета);
				
				НС = НС + 1;
				
				ИтогоКоличество = ИтогоКоличество + ВыборкаСтрокТовары.Количество;
				ИтогоСумма = ИтогоСумма + ВыборкаСтрокТовары.Сумма;
				
			КонецЦикла;
		КонецЦикла;
		
		// Выводим подвал таблицы МПЗ
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыМПЗ");
		ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
		ОбластьМакета.Параметры.ИтогоСумма = ИтогоСумма;
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим шапку таблицы БУ
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицыБУ");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим строки таблицы БУ
		ВыборкаПроводок.Сбросить();
		СтруктураПоиска = Новый Структура("Регистратор", Шапка.Ссылка);
		Пока ВыборкаПроводок.НайтиСледующий(СтруктураПоиска) Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицыБУ");
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаПроводок);
			
			АналитикаДт = 
				?(ЗначениеЗаполнено(ВыборкаПроводок.СубконтоДт1), СокрЛП(ВыборкаПроводок.СубконтоДт1) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаПроводок.СубконтоДт2), Строка(ВыборкаПроводок.СубконтоДт2) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаПроводок.СубконтоДт3), Строка(ВыборкаПроводок.СубконтоДт3), "");
			
			АналитикаКт = 
				?(ЗначениеЗаполнено(ВыборкаПроводок.СубконтоКт1), Строка(ВыборкаПроводок.СубконтоКт1) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаПроводок.СубконтоКт2), Строка(ВыборкаПроводок.СубконтоКт2) + Символы.ПС, "")
				+ ?(ЗначениеЗаполнено(ВыборкаПроводок.СубконтоКт3), Строка(ВыборкаПроводок.СубконтоКт3), "");
			
			ОбластьМакета.Параметры.АналитикаДт = АналитикаДт;
			ОбластьМакета.Параметры.АналитикаКт = АналитикаКт;
			
			ТабДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// Выводим подвал таблицы БУ
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалТаблицыБУ");
		ТабДокумент.Вывести(ОбластьМакета);
		
		// Выводим общий подвал
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.РасшифровкаПодписиИсполнителя = ?(НЕ ЗначениеЗаполнено(Шапка.ОтветственныйПредставление), "", 
																			Шапка.ОтветственныйПредставление);
		ТабДокумент.Вывести(ОбластьМакета);
		
		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;

	Возврат ТабДокумент;

КонецФункции 

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыАвизо()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Авизо.Ссылка,
	|	Авизо.Номер,
	|	Авизо.Дата,
	|	Авизо.Склад,
	|	Авизо.СчетРасчетов,
	|	Авизо.Организация КАК ОрганизацияОтправитель,
	|	ВЫБОР
	|		КОГДА Авизо.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА Авизо.Организация
	|		ИНАЧЕ Авизо.Организация.ГоловнаяОрганизация
	|	КОНЕЦ КАК Организация,
	|	Авизо.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	Авизо.Ответственный,
	|	Авизо.Ответственный.Представление
	|ПОМЕСТИТЬ ТаблицаШапка
	|ИЗ
	|	Документ.АвизоМПЗИсходящее КАК Авизо
	|ГДЕ
	|	Авизо.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаШапка.Ссылка КАК Ссылка,
	|	ТаблицаШапка.Номер КАК Номер,
	|	ТаблицаШапка.Дата КАК Дата,
	|	ТаблицаШапка.Склад,
	|	ТаблицаШапка.СчетРасчетов,
	|	ТаблицаШапка.ОрганизацияОтправитель,
	|	ТаблицаШапка.Организация,
	|	ТаблицаШапка.ОрганизацияПолучатель,
	|	ТаблицаШапка.Ответственный,
	|	ТаблицаШапка.ОтветственныйПредставление
	|ИЗ
	|	ТаблицаШапка КАК ТаблицаШапка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Авизо.Ссылка КАК Ссылка,
	|	Авизо.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Авизо.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК МПЗ,
	|	Авизо.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаХранения,
	|	Авизо.СчетУчета КАК СчетУчета,
	|	Авизо.ДокументПартии КАК ДокументПартии,
	|	СУММА(Авизо.Количество) КАК Количество,
	|	СУММА(Авизо.Сумма) КАК Сумма,
	|	СУММА(Авизо.СуммаНУ) КАК СуммаНУ,
	|	СУММА(Авизо.СуммаПР) КАК СуммаПР,
	|	СУММА(Авизо.СуммаВР) КАК СуммаВР,
	|	МИНИМУМ(Авизо.НомерСтроки) КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА Авизо.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА Авизо.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ КАК КодАртикул
	|ИЗ
	|	Документ.АвизоМПЗИсходящее.ДанныеПоПартиям КАК Авизо
	|ГДЕ
	|	Авизо.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Авизо.Ссылка,
	|	Авизо.Номенклатура,
	|	Авизо.СчетУчета,
	|	Авизо.ДокументПартии,
	|	ВЫРАЗИТЬ(Авизо.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	Авизо.Номенклатура.ЕдиницаИзмерения.Наименование,
	|	ВЫБОР
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул)
	|			ТОГДА Авизо.Номенклатура.Артикул
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.Код)
	|			ТОГДА Авизо.Номенклатура.Код
	|		КОГДА &ДополнительнаяКолонкаПечатныхФормДокументов = ЗНАЧЕНИЕ(Перечисление.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить)
	|			ТОГДА """"
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка,
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	|	ХозрасчетныйДвиженияССубконто.СчетДт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	|	ХозрасчетныйДвиженияССубконто.СчетКт,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	|	ХозрасчетныйДвиженияССубконто.Организация,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВалютаДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.ВалютаКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.ВалютаДт
	|	КОНЕЦ КАК Валюта,
	|	ХозрасчетныйДвиженияССубконто.Сумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт
	|	КОНЕЦ КАК ВалСумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.КоличествоДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.КоличествоКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.КоличествоДт
	|	КОНЕЦ КАК Количество,
	|	ХозрасчетныйДвиженияССубконто.Содержание,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СуммаНУДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СуммаНУКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаНУДт
	|	КОНЕЦ КАК СуммаНУ,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СуммаПРДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СуммаПРКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаПРДт
	|	КОНЕЦ КАК СуммаПР,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйДвиженияССубконто.СуммаВРДт ЕСТЬ NULL 
	|			ТОГДА ХозрасчетныйДвиженияССубконто.СуммаВРКт
	|		ИНАЧЕ ХозрасчетныйДвиженияССубконто.СуммаВРДт
	|	КОНЕЦ КАК СуммаВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&ДатаОТ,
	|			&ДатаДО,
	|			Регистратор В
	|				(ВЫБРАТЬ
	|					ТаблицаШапка.Ссылка
	|				ИЗ
	|					ТаблицаШапка),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки"; 
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьПериодВыборкиДвиженийССубконто(МассивОбъектов)

	СтруктураДат = Новый Структура("ДатаОТ, ДатаДО");
	
	ЗапросПериодОборотов = Новый Запрос;
	ЗапросПериодОборотов.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросПериодОборотов.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(Док.Дата) КАК ДатаОТ,
	|	МАКСИМУМ(Док.Дата) КАК ДатаДО
	|ИЗ
	|	Документ.АвизоМПЗИсходящее КАК Док
	|ГДЕ
	|	Док.Ссылка В(&МассивОбъектов)";
	
	ВыборкаПериодОборотов = ЗапросПериодОборотов.Выполнить().Выбрать();
	ВыборкаПериодОборотов.Следующий();
	
	СтруктураДат.Вставить("ДатаОТ", 	ВыборкаПериодОборотов.ДатаОТ - 1);
	СтруктураДат.Вставить("ДатаДО", 	ВыборкаПериодОборотов.ДатаДО + 1);

	Возврат СтруктураДат;
	
КонецФункции

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ОрганизацияПолучатель");
	
	Возврат Результат;
	
КонецФункции

#КонецЕсли