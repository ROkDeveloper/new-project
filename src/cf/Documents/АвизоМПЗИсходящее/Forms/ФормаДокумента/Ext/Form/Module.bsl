
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИсточникВыбора.ИмяТаблицы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбработанаТабличнаяЧастьТовары" И ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметр);
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;

	// Активизировать первую непустую табличную часть
	АктивизироватьТабличнуюЧасть = ОбщегоНазначенияБПВызовСервера.ПолучитьПервуюНепустуюВидимуюТабличнуюЧасть(
		ЭтаФорма, СписокВидимыхТабличныхЧастей());
	ОбщегоНазначенияБПВызовСервера.АктивизироватьЭлементФормы(ЭтаФорма, АктивизироватьТабличнуюЧасть);
	
	ДатаНачалаВеденияПолныхЗаписейПоРУ = УчетНДСРаздельный.ДатаНачалаВеденияСамодостаточнойАналитики();

	УстановитьУсловноеОформление(); // Вызываем после установки текущей страницы.
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы
	
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;

	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		СкладПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьУсловноеОформление(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары
	
&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|СчетУчета, НомерГТД, СтранаПроисхождения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ТоварыНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТоварыНомерГТДЗавершение", ЭтотОбъект);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Номенклатура",    ТекущиеДанные.Номенклатура);
	СтруктураПараметров.Вставить("Период",          Объект.Дата);
	СтруктураПараметров.Вставить("ВыборПоОстаткам", Истина);
	
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора", 
		СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДанныеПоПартиям

&НаКлиенте
Процедура ДанныеПоПартиямПриАктивизацииСтроки(Элемент)
	
	ДанныеПоСФУстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПартиямПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("Ключ" , ТекущиеДанные.Ключ);
	УдалитьСвязанныеЗаписи(КлючПоиска, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПартиямПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		
		// Инициализируем значение "Ключ" для установки связи данной таблицы с таблицей "ДанныеПоСФ".
		// Значение должно быть уникальным в пределах таблицы ДанныеПоПартиям
		Элементы.ДанныеПоПартиям.ТекущиеДанные.Ключ = ПолучитьНовыйКлючСтроки();
		
		ДанныеПоСФУстановитьОтборСтрок();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПартиямСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаНУ = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПР - СтрокаТабличнойЧасти.СуммаВР;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПартиямДокументПартииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("КонецПериода",   Объект.Дата);
	ПараметрыОбъекта.Вставить("Организация",    Объект.Организация);
	ПараметрыОбъекта.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
	ПараметрыОбъекта.Вставить("СчетУчета",      ТекущиеДанные.СчетУчета);
	ПараметрыОбъекта.Вставить("Склад",      	Объект.Склад);
	ПараметрыОбъекта.Вставить("ТипыДокументов", "Метаданные.Документы.АвизоМПЗИсходящее.ТабличныеЧасти.ДанныеПоПартиям.Реквизиты.ДокументПартии.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.Партия.ФормаВыбора", ПараметрыФормы, Элемент);
 	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПартиямНоменклатураПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, Количество,
		|СчетУчета, НомерГТД, СтранаПроисхождения");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеПоПартиямНоменклатураПриИзмененииНаСервере(ДанныеСтрокиТаблицы, ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыДанныеПоСФ

&НаКлиенте
Процедура ДанныеПоСФПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Элементы.ДанныеПоПартиям.ТекущиеДанные <> Неопределено И НоваяСтрока Тогда
		КлючОтбора = Элементы.ДанныеПоСФ.ОтборСтрок.Ключ;
		Элементы.ДанныеПоСФ.ТекущиеДанные.Ключ = КлючОтбора;
		КлючПоиска = Новый Структура("Ключ" , КлючОтбора);
		Элементы.ДанныеПоСФ.ТекущиеДанные.НомерСтрокиТЧ = ПолучитьНовыйНомерТЧТабличнойЧастиДанныеПоСФ(КлючПоиска);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФПослеУдаления(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	КлючПоиска = Новый Структура("Ключ" , ТекущиеДанные.Ключ);
	ПересчитатьНомераТЧТабличнойЧастиДанныеПоСФ(КлючПоиска);  	
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоСФ.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		
		Если РаздельныйУчетНДСНаСчете19 Тогда
			
			СтрокаТабличнойЧасти.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти.СуммаБезНДС, Ложь,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			
		Иначе
			
			СтрокаТабличнойЧасти.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти.Стоимость,	Истина,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		КонецЕсли;							
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСтоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоСФ.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
									СтрокаТабличнойЧасти.Стоимость,	Истина,
									УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборТовары(Команда)

	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.Форма", ПараметрыПодбора,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьАвизо(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена таблица товаров.'"), , "Товары", "Объект");
		Возврат;
	КонецЕсли;

	Если Объект.Проведен Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросВыполнитьОтменуПроведенияИЗаполнитьДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Заполнить документ можно только после отмены его проведения. Выполнить отмену проведения документа?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		РежимПредварительнойЗаписи = ?(ЭтаФорма.Модифицированность, РежимЗаписиДокумента.Запись, Неопределено);
		ВыполнитьЗаполнениеПоОстаткам(РежимПредварительнойЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТовары(Команда)

	ПараметрыФормы = ПолучитьПараметрыОбработкиТабличнойЧастиТовары();
	
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИзменениеТаблицыТоваров.Форма.Форма", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФунции
	
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаСервере
Процедура УстановитьУсловноеОформление()

	НастройкиУсловногоОформления = Новый Структура();

	УсловноеОформление.Элементы.Очистить();

	// Условное оформление, связанное с видимостью, устанавливаем сразу для всех колонок.
	УстановитьУсловноеОформлениеВидимость();

	// Условное оформление для полей, расположенных на страницах

	ОбновитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьУсловноеОформление(Форма)

	Элементы = Форма.Элементы;

	Если НЕ Форма.НастройкиУсловногоОформления.Свойство("ГлавноеПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаГлавное Тогда

		Форма.УстановитьУсловноеОформлениеГлавное();

	ИначеЕсли НЕ Форма.НастройкиУсловногоОформления.Свойство("АвизоПроинициализировано")
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаАвизо Тогда

		Форма.УстановитьУсловноеОформлениеАвизо();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()

	// ДанныеПоПартиямДокументПартии
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоПартиямДокументПартии");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СпособОценкиМПЗПоСредней", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеГлавное() Экспорт

	НастройкиУсловногоОформления.Вставить("ГлавноеПроинициализировано", Истина);


	// ТоварыНомерГТД
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерГТД");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.НеЗаполнено);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.Товары.СтранаПроисхождения", ВидСравненияКомпоновкиДанных.Равно, Справочники.СтраныМира.Россия);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеАвизо() Экспорт

	НастройкиУсловногоОформления.Вставить("АвизоПроинициализировано", Истина);


	// ДанныеПоСФСчетФактура
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФСчетФактура");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.Стоимость", ВидСравненияКомпоновкиДанных.Равно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.Количество", ВидСравненияКомпоновкиДанных.НеРавно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ДанныеПоСФНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.НДС0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.Равно, Перечисления.СтавкиНДС.БезНДС);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);


	// ДанныеПоСФСчетФактура, ДанныеПоСФСтавкаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФСчетФактура");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.СчетФактура", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.СтавкаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.Количество", ВидСравненияКомпоновкиДанных.НеРавно, 0);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДанныеПоСФ.Стоимость", ВидСравненияКомпоновкиДанных.Равно, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);


	// ДанныеПоСФСпособУчетаНДС
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФСпособУчетаНДС");

	ГруппаОтбора1 = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.НДС", ВидСравненияКомпоновкиДанных.НеРавно, 0);

		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора1,
			"Объект.ДанныеПоСФ.СпособУчетаНДС", ВидСравненияКомпоновкиДанных.НеЗаполнено);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// ДанныеПоСФПоставщик
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФПоставщик");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Дата", ВидСравненияКомпоновкиДанных.Меньше, ДатаНачалаВеденияПолныхЗаписейПоРУ);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ДанныеПоСФИсправленныйСчетФактура
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДанныеПоСФИсправленныйСчетФактура");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"Объект.Дата", ВидСравненияКомпоновкиДанных.Меньше, ДатаНачалаВеденияПолныхЗаписейПоРУ);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента			= Объект.Дата;

	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ЗагрузитьСписокВыбораПодразделений(Истина);
	
	МаксимальныйКлючСтроки = Документы.АвизоМПЗИсходящее.ПолучитьМаксимальныйКлючСтроки(Объект.ДанныеПоПартиям);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);
	
	СпособОценкиМПЗПоСредней = УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата) = Перечисления.СпособыОценки.ПоСредней;
    РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(Объект.Организация, Объект.Дата);
	ИспользуетсяОтложенноеПроведение = ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Объект.Организация, Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Функция СписокВидимыхТабличныхЧастей()

	СписокТабличныхЧастей = Новый СписокЗначений;

	СписокТабличныхЧастей.Добавить("Товары",           "Товары");
	СписокТабличныхЧастей.Добавить("ДанныеПоПартиям",  "ДанныеПоПартиям");
	СписокТабличныхЧастей.Добавить("ДанныеПоСФ",   	   "ДанныеПоСФ");
	
	Возврат СписокТабличныхЧастей;

КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ПараметрыФормы = Новый Структура;

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	ЗаголовокПодбора = НСтр("ru = 'Подбор номенклатуры в %1 (%2)'");

	ПредставлениеТаблицы = НСтр("ru = 'Товары'");

	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);

	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);

	ПараметрыФормы.Вставить("ДатаРасчетов"      , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"            , ВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Организация"       , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение"		, Объект.ПодразделениеОрганизации);	
	ПараметрыФормы.Вставить("Склад"             , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"         , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"        , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"        , ИмяТаблицы);
    ПараметрыФормы.Вставить("Услуги"      		, Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество"    , Истина);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";

	Возврат ВидПодбора;

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТаблицы)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовара.Номенклатура);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
		Иначе
			
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара);
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
			СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
			
			Документы.АвизоМПЗИсходящее.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		УстановитьФункциональныеОпцииФормы();
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
		
		ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();
		
	КонецЕсли;	
	
	ЗагрузитьСписокВыбораПодразделений(Истина);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()

	Объект.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьПодразделение(Объект.Организация, Объект.Склад);
	
	ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаУчетаВТабличнойЧастиНаСервере(ИмяТабличнойЧасти = "")

	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.АвизоМПЗИсходящее.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ДанныеПоПартиям" Тогда
		Документы.АвизоМПЗИсходящее.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ДанныеПоПартиям");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
	
	Документы.АвизоМПЗИсходящее.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);

КонецПроцедуры

&НаСервере
Процедура ДанныеПоПартиямНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, Знач ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НомерГТД				= СведенияОНоменклатуре.НомерГТД;
	СтрокаТабличнойЧасти.СтранаПроисхождения	= СведенияОНоменклатуре.СтранаПроисхождения;
	
	Документы.АвизоМПЗИсходящее.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "ДанныеПоПартиям", СведенияОНоменклатуре);

КонецПроцедуры

 &НаКлиенте
Процедура ДанныеПоСФУстановитьОтборСтрок()
	
	ТекущиеДанные = Элементы.ДанныеПоПартиям.ТекущиеДанные;
	Если НЕ ТекущиеДанные = Неопределено Тогда
		// Включаем отбор по ключу из текущей строки табличной части "ДанныеПоПартиям"
		ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", ТекущиеДанные.Ключ); 
		Элементы.ДанныеПоСФ.ОтборСтрок = ОтборСтрок;
	Иначе
	 	ОтборСтрок = Новый ФиксированнаяСтруктура("Ключ", 0); 
		Элементы.ДанныеПоСФ.ОтборСтрок = ОтборСтрок;
    КонецЕсли;
	
КонецПроцедуры

 &НаСервере
Функция ПолучитьНовыйНомерТЧТабличнойЧастиДанныеПоСФ(КлючПоиска)
	
	МассивСтрокДанныеПоСФ = Объект.ДанныеПоСФ.НайтиСтроки(КлючПоиска);
	РасчетныйНомерСтроки = МассивСтрокДанныеПоСФ.Количество();
	
	Возврат РасчетныйНомерСтроки;
	
КонецФункции

&НаКлиенте
Функция ПолучитьНовыйКлючСтроки()
	
	// Если в табл. части уже присутствуют строки, то новое «свободное» значение ключа
	// рассчитывается от максимального существующего значения.
	Если Объект.ДанныеПоПартиям.Количество() > 1 Тогда
		МаксимальныйКлючСтроки = МаксимальныйКлючСтроки + 1;
	КонецЕсли;

	Возврат МаксимальныйКлючСтроки;
	
КонецФункции

&НаСервере
Процедура УдалитьСвязанныеЗаписи(КлючПоиска, Отказ)

	МассивСтрокДанныеПоСФ = Объект.ДанныеПоСФ.НайтиСтроки(КлючПоиска);
	Для Каждого Строка Из МассивСтрокДанныеПоСФ Цикл
		Объект.ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьНомераТЧТабличнойЧастиДанныеПоСФ(КлючПоиска)

	Счетчик = 0;
	
	МассивСтрокДанныеПоСФ = Объект.ДанныеПоСФ.НайтиСтроки(КлючПоиска);
	Для Каждого Строка Из МассивСтрокДанныеПоСФ Цикл
		Счетчик = Счетчик + 1;
		Строка.НомерСтрокиТЧ = Счетчик;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыОбработкиТабличнойЧастиТовары()

	ПараметрыОбработки = Новый Структура;
	
	ПараметрыОбработки.Вставить("АдресХранилищаТовары", 		ПоместитьТоварыВоВременноеХранилищеНаСервере());
	ПараметрыОбработки.Вставить("ЗаполнятьЦеныПоПокупке", 		Ложь);
	
	ПараметрыОбработки.Вставить("ДокументСсылка", 				Объект.Ссылка);
	ПараметрыОбработки.Вставить("ДокументДата", 				Объект.Дата);
	ПараметрыОбработки.Вставить("ДокументОрганизация", 			Объект.Организация);
	ПараметрыОбработки.Вставить("ДокументСклад", 				Объект.Склад);

	Возврат ПараметрыОбработки;
	
КонецФункции 

&НаСервере
Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТоварыНаСервере(Параметры)

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор = Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки = ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация, Склад");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТабличнойЧасти ИЗ ДобавленныеСтроки Цикл
		
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
		Документы.АвизоМПЗИсходящее.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СчетаУчета);
		
	КонецЦикла;
	
	Объект.Товары.Загрузить(ТаблицаОбработки);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоСФСуммаБезНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ДанныеПоСФ.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.НДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти.СуммаБезНДС, Ложь,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДЗавершение(ВыбранноеЗначение, Дополнительно) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НомераГТД") Тогда
		ВыбранноеЗначение = Новый Структура("НомерГТД", ВыбранноеЗначение);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
КонецПроцедуры

#Область ЗаполнениеПоОстаткам

&НаКлиенте
Процедура ВопросВыполнитьОтменуПроведенияИЗаполнитьДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РежимПредварительнойЗаписи = ?(ЭтаФорма.Модифицированность, РежимЗаписиДокумента.ОтменаПроведения, Неопределено);
		ВыполнитьЗаполнениеПоОстаткам(РежимПредварительнойЗаписи);
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаАвизо;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокВыбораПодразделений(ОтборПоОрганизации = Истина)
	
	УправляющийРеквизит = ?(ОтборПоОрганизации, Объект.Организация, Объект.ОрганизацияПолучатель);
	УправляющийЭлемент	= ?(ОтборПоОрганизации,Элементы.Организация, Элементы.ОрганизацияПолучатель);
	
	УправляемыйРеквизит = ?(ОтборПоОрганизации, Объект.ОрганизацияПолучатель, Объект.Организация);
	УправляемыйЭлемент	= ?(ОтборПоОрганизации, Элементы.ОрганизацияПолучатель, Элементы.Организация);
	
	Если ЗначениеЗаполнено(УправляющийРеквизит) Тогда 
		
		СписокВыбораПодразделений = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(УправляющийРеквизит).ВыгрузитьЗначения();	
		
		УправляемыйЭлемент.РежимВыбораИзСписка = Истина;
		УправляемыйЭлемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбораПодразделений);
			
		Если УправляемыйЭлемент.СписокВыбора.НайтиПоЗначению(УправляющийРеквизит) = Неопределено Тогда
			
			УправляемыйРеквизит = Справочники.Организации.ПустаяСсылка();
			
		ИначеЕсли ЗначениеЗаполнено(УправляемыйРеквизит) Тогда
			
			УправляющийЭлемент.РежимВыбораИзСписка = Истина;
			УправляющийЭлемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбораПодразделений);

		КонецЕсли;                                            	
		           
	Иначе
		
		УправляемыйЭлемент.РежимВыбораИзСписка = Ложь;
		УправляемыйЭлемент.СписокВыбора.Очистить();
		
		Если Не ЗначениеЗаполнено(УправляемыйРеквизит) Тогда 
			
			УправляющийЭлемент.РежимВыбораИзСписка = Ложь;
			УправляющийЭлемент.СписокВыбора.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)
	
	ЗагрузитьСписокВыбораПодразделений(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеПоОстаткам(РежимПредварительнойЗаписи)
	
	Если ИспользуетсяОтложенноеПроведение Тогда
		СтатусКорректировкиСтоимости = СтатусКорректировкиСтоимостиНоменклатуры(Объект.Организация, Объект.Дата);
		ОпределитьНеобходимостьАктуализацииСебестоимости(РежимПредварительнойЗаписи, СтатусКорректировкиСтоимости);
	Иначе
		ЗаполнитьПоАктуальнымОстаткам(РежимПредварительнойЗаписи, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусКорректировкиСтоимостиНоменклатуры(Знач Организация, Знач Период)
	
	Результат = Новый Структура;
	Результат.Вставить("ОперацияВыполненаЗаТекущийМесяц",    Ложь);
	Результат.Вставить("ОперацияВыполненаЗаПредыдущийМесяц", Ложь);

	// Определяем, нужно ли выполнять корректировку себестоимости.
	Результат.ОперацияВыполненаЗаТекущийМесяц = РаботаСПоследовательностями.ЕстьНеустаревшаяОперация(
		Организация,
		Период,
		Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры);
	
	// Если себестоимость была неактуальна ещё в прошлом месяце, то текущий месяц не имеет значения.
	Если Результат.ОперацияВыполненаЗаТекущийМесяц
		ИЛИ ЗакрытиеМесяца.ЭтоПервыйМесяцВеденияУчета(НачалоМесяца(Период), Организация) Тогда
		Результат.ОперацияВыполненаЗаПредыдущийМесяц = Истина;
	Иначе
		Результат.ОперацияВыполненаЗаПредыдущийМесяц = РаботаСПоследовательностями.ЕстьНеустаревшаяОперация(
			Организация,
			ДобавитьМесяц(Период, -1),
			Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьНеобходимостьАктуализацииСебестоимости(РежимПредварительнойЗаписи, СтатусКорректировкиСтоимости)
	
	Если СтатусКорректировкиСтоимости.ОперацияВыполненаЗаТекущийМесяц Тогда
		ЗаполнитьПоАктуальнымОстаткам(РежимПредварительнойЗаписи, Ложь);
	Иначе
		
		Оповещение = Новый ОписаниеОповещения("ВопросОНеобходимостиАктуализацииСебестоимостиЗавершение", ЭтотОбъект, РежимПредварительнойЗаписи);
		ТекстВопроса = НСтр("ru = 'Данные учета неактуальны. Необходимо рассчитать себестоимость номенклатуры.'");
		
		Кнопки = Новый СписокЗначений;
		Если СтатусКорректировкиСтоимости.ОперацияВыполненаЗаПредыдущийМесяц Тогда
			// Предлагаем актуализировать "бесшовно" (в фоновом задании).
			Кнопки.Добавить("ВыполнитьКорректировку",  НСтр("ru = 'Выполнить корректировку стоимости'"));
			Кнопки.Добавить("НеАктуализировать", НСтр("ru = 'Не актуализировать себестоимость'"));
		Иначе
			// Предлагаем перейти в "Закрытие месяца".
			Кнопки.Добавить("ПерейтиВЗакрытие",  НСтр("ru = 'Перейти в ""Закрытие месяца""'"));
			Кнопки.Добавить("НеАктуализировать", НСтр("ru = 'Не актуализировать себестоимость'"));
		КонецЕсли;
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , "НеАктуализировать");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОНеобходимостиАктуализацииСебестоимостиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "ВыполнитьКорректировку" Тогда
		
		ЗаполнитьПоАктуальнымОстаткам(ДополнительныеПараметры, Истина);
		
	ИначеЕсли Результат = "ПерейтиВЗакрытие" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Организация",       Объект.Организация);
		ПараметрыОткрытия.Вставить("ПериодРегистрации", Объект.Дата);
		
		ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма", ПараметрыОткрытия, ЭтотОбъект, Объект.Ссылка);
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаГлавное;
		
	Иначе
		
		ЗаполнитьПоАктуальнымОстаткам(ДополнительныеПараметры, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоАктуальнымОстаткам(РежимПредварительнойЗаписи, ВыполнитьКорректировкуСтоимости)
	
	// Запускаем фоновое задание.
	Если Не ЗапуститьЗаполнениеПоОстаткам(РежимПредварительнойЗаписи, ВыполнитьКорректировкуСтоимости) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗавершенииЗадания = Новый ОписаниеОповещения("СообщитьРезультатЗаполнения", ЭтотОбъект);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);  
	ПараметрыОжидания.Заголовок            = НаименованиеФоновогоЗадания(ВыполнитьКорректировкуСтоимости);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьСообщения    = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ОписаниеФоновогоЗадания, ОповещениеОЗавершенииЗадания, ПараметрыОжидания);
		
КонецПроцедуры

// Заполняет табличную часть данными регистра бухгалтерии, используя фоновое задание.
//
// Параметры:
//  РежимПредварительнойЗаписи - РежимЗаписиДокумента, Неопределено - Режим записи документа перед заполнением.
//		Если указан Неопределено, то запись не выполняется.
//  ВыполнитьКорректировкуСтоимости - Булево - если Истина, то перед заполнением нужно выполнить регламентную операцию.
//
// Возвращаемое значение:
//   Булево      - Истина, фоновое задание запущено; иначе Ложь.
//
&НаСервере
Функция ЗапуститьЗаполнениеПоОстаткам(РежимПредварительнойЗаписи, ВыполнитьКорректировкуСтоимости)
	
	Если РежимПредварительнойЗаписи <> Неопределено Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимПредварительнойЗаписи);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
 	
	Если Объект.ДанныеПоПартиям.Количество() > 0 Тогда
		Объект.ДанныеПоПартиям.Очистить();
		Объект.ДанныеПоСФ.Очистить();
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	Если ОписаниеФоновогоЗадания <> Неопределено
	   И ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ОписаниеФоновогоЗадания.ИдентификаторЗадания) Тогда
		// Надо ждать
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыЗаполнения = Документы.АвизоМПЗИсходящее.НовыеПараметрыЗаполнения();

	ПараметрыЗаполнения.СпособОценкиМПЗПоСредней =
		УчетнаяПолитика.СпособОценкиМПЗ(Объект.Организация, Объект.Дата) = Перечисления.СпособыОценки.ПоСредней;
		
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, Объект);
	
	ПараметрыЗаполнения.ВыполнитьКорректировкуСтоимости  = ВыполнитьКорректировкуСтоимости;
	ПараметрыЗаполнения.ИспользуетсяОтложенноеПроведение = ИспользуетсяОтложенноеПроведение;
	
	Если ВыполнитьКорректировкуСтоимости Тогда
		
		// Ищем ранее созданную операцию.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегламентнаяОперация.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РегламентнаяОперация КАК РегламентнаяОперация
		|ГДЕ
		|	РегламентнаяОперация.Организация = &Организация
		|	И РегламентнаяОперация.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры)
		|	И НАЧАЛОПЕРИОДА(РегламентнаяОперация.Дата, МЕСЯЦ) = &ПериодРегистрации
		|	И НЕ РегламентнаяОперация.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегламентнаяОперация.Проведен УБЫВ,
		|	РегламентнаяОперация.Состояние.Порядок УБЫВ";
		Запрос.УстановитьПараметр("Организация",       Объект.Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(Объект.Дата));
		ВыборкаОперация = Запрос.Выполнить().Выбрать();
		ОперацияКорректировкаСтоимости = ?(ВыборкаОперация.Следующий(),
			ВыборкаОперация.Ссылка,
			Документы.РегламентнаяОперация.ПустаяСсылка());
		
		// Параметры обернем в структуру для их передачи в Обработки.ЗакрытиеМесяца.ВыполнитьРегламентнуюОперацию()
		// через механизм ДлительныеОперации.
		ВидОперации = Перечисления.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры;
		
		ПараметрыКорректировкиСтоимости = Обработки.ЗакрытиеМесяца.НовыеПараметрыВыполненияОперации();
		ПараметрыКорректировкиСтоимости.Вставить("Организация",                         Объект.Организация);
		ПараметрыКорректировкиСтоимости.Вставить("Период",                              НачалоМесяца(Объект.Дата));
		ПараметрыКорректировкиСтоимости.Вставить("ВидОперации",                         ВидОперации);
		ПараметрыКорректировкиСтоимости.Вставить("Ссылка",                              ОперацияКорректировкаСтоимости);
		ПараметрыКорректировкиСтоимости.Вставить("ПропуститьПроверкуСтатусаПредыдущих", Истина);
		
		ПараметрыЗаполнения.ПараметрыКорректировкиСтоимости = ПараметрыКорректировкиСтоимости;
		
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания(ВыполнитьКорректировкуСтоимости);
	// Если на файловой базе уже запущено любое другое фоновое задание, то новое встанет в очередь, а не будет запущено в основном потоке.
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ОписаниеФоновогоЗадания = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения, "Документы.АвизоМПЗИсходящее.ЗаполнитьПоОстаткам", ПараметрыЗаполнения);
	ОписаниеФоновогоЗадания.Вставить("ОперацияКорректировкаСтоимости", ОперацияКорректировкаСтоимости);
		
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СообщитьРезультатЗаполнения(РезультатЗадания, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗадания.Статус = "Ошибка" Тогда
		
		Если Не ПустаяСтрока(РезультатЗадания.ПодробноеПредставлениеОшибки) Тогда
			Сообщить(РезультатЗадания.ПодробноеПредставлениеОшибки);
		КонецЕсли;
		ПоказатьПредупреждение(, РезультатЗадания.КраткоеПредставлениеОшибки, , НСтр("ru = 'Операция не выполнена'"));
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Сообщение Из РезультатЗадания.Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
	
	РезультатЗаполнения = ПрочитатьРезультатЗаполнения(РезультатЗадания.АдресРезультата);
	
	Если Не РезультатЗаполнения.ОткрытьФормуОшибки Тогда
		// ТЧ "Товары" заполнена.
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаАвизо;
		Модифицированность = Истина;
		Возврат;
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(РезультатЗаполнения.ОперацияКорректировкаСтоимости) Тогда
		
		ЗакрытиеМесяцаКлиент.ОткрытьФормуОшибок(РезультатЗаполнения.ОперацияКорректировкаСтоимости);
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Операция не выполнена'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьРезультатЗаполнения(АдресХранилища)
	
	РезультатЗаполнения = Документы.АвизоМПЗИсходящее.НовыйРезультатЗаполнения();
	РезультатЗаполнения.ОперацияКорректировкаСтоимости = ОписаниеФоновогоЗадания.ОперацияКорректировкаСтоимости;
	РезультатЗаполнения.ЗаданиеВыполнено = Истина;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Обработки.ЗакрытиеМесяца.ПрочитатьРезультатЗаполнения(АдресХранилища, РезультатЗаполнения, Объект);
	КонецЕсли;
	
	ОписаниеФоновогоЗадания = Неопределено;
	
	Возврат РезультатЗаполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НаименованиеФоновогоЗадания(ВыполнитьКорректировкуСтоимости)
	
	Если ВыполнитьКорректировкуСтоимости Тогда
		
		НаименованиеЗадания = СтрШаблон(НСтр("ru = 'Формирование регламентной операции ""%1""'"),
			ПредопределенноеЗначение("Перечисление.ВидыРегламентныхОпераций.КорректировкаСтоимостиНоменклатуры"));
		
	Иначе
		
		НаименованиеЗадания = НСтр("ru = 'Заполнить авизо по МПЗ исходящее'");
		
	КонецЕсли;
	
	Возврат НаименованиеЗадания;
	
КонецФункции

#КонецОбласти

#КонецОбласти
