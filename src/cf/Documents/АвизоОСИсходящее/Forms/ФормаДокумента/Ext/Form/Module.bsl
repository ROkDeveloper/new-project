#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборСервер(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.АвизоОСИсходящее.Форма.ФормаРедактированияСтроки" Тогда
		ОбработкаДанныхФормыРедактированияСтроки(ВыбранноеЗначение);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	

	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроведениеСервер.УстановитьПризнакПроверкиРеквизитов(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)

	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ОбщегоНазначенияБПКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, 
		ТекущаяДатаДокумента);

	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)
	
	ЗагрузитьСписокВыбораПодразделений(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ИзменениеСтрокиОС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;

	ИзменениеСтрокиОС(Истина, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;

	ИзменениеСтрокиОС();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДанныеОС(Команда)
	
	Если Объект.ОС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Проведен Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить документ можно только после отмены его проведения. Выполнить отмену проведения документа?'");
		Оповещение = Новый ОписаниеОповещения("ВопросЗаполнитьДанныеОСПослеОтменыПроведенияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьДанныеОСНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОС(Команда)
	
	Если Объект.Проведен Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить документ можно только после отмены его проведения. Выполнить отмену проведения документа?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПодборОСПослеОтменыПроведенияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыФормы = Новый Структура;
		Если Объект.ОС.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
		КонецЕсли;
		ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВопросЗаполнитьДанныеОСПослеОтменыПроведенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
		Записать(ПараметрыЗаписи);
		ЗаполнитьДанныеОСНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПодборОСПослеОтменыПроведенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
		Записать(ПараметрыЗаписи);
		ПараметрыФормы = Новый Структура;
		Если Объект.ОС.Количество() > 0 Тогда
			ПараметрыФормы.Вставить("АдресОСВХранилище", ПоместитьОСВХранилище());
		КонецЕсли;
		ОткрытьФорму("Обработка.ПодборОсновныхСредств.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 
		
		УстановитьФункциональныеОпцииФормы();
		
		ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(Объект, Пользователи.ТекущийПользователь());
		
	КонецЕсли;
	
	ЗагрузитьСписокВыбораПодразделений(Истина);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьОСВХранилище()

	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);

КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборСервер(ВыбранноеЗначение)

	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	ЗаполнитьРеквизитыТЧ();
	ЗаполнитьДанныеОСНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ТекущаяДатаДокумента			= Объект.Дата;

	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьСостояниеДокумента();
	
	ЗагрузитьСписокВыбораПодразделений(Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()

	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОСНаСервере()

	СписокОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");

	ВыборкаОС = Документы.АвизоОСИсходящее.ПолучитьДанныеОС(Объект, СписокОС).Выбрать();

	Пока ВыборкаОС.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("ОсновноеСредство", ВыборкаОС.ОсновноеСредство);
		СтрокиОС = Объект.ОС.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаОС ИЗ СтрокиОС Цикл
			ЗаполнитьЗначенияСвойств(СтрокаОС, ВыборкаОС);
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьРеквизитыТЧ()

	ТаблицаОС = Объект.ОС.Выгрузить();

	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);
		
	//подбор не должен сбивать инвентарные номера, введенные пользователем
	Для Каждого СтрокаНомер ИЗ ТаблицаНомеров Цикл
		СтрокаОС = ТаблицаОС.Найти(СтрокаНомер.ОсновноеСредство, "ОсновноеСредство");	
		Если НЕ СтрокаОС = Неопределено И НЕ ЗначениеЗаполнено(СтрокаОС.ИнвентарныйНомер) Тогда
			СтрокаОС.ИнвентарныйНомер = СтрокаНомер.ИнвентарныйНомер;
		КонецЕсли;
	КонецЦикла;	

	ТаблицаСчетУчета = ПолучитьТаблицуСчетУчетаОС(ТаблицаОС, Объект.Организация, Объект.Дата);
	
	//подбор не должен сбивать счета учета, введенные пользователем
	Для Каждого СтрокаСчетУчета ИЗ ТаблицаСчетУчета Цикл
		СтрокаОС = ТаблицаОС.Найти(СтрокаСчетУчета.ОсновноеСредство, "ОсновноеСредство");	
		Если НЕ СтрокаОС = Неопределено И НЕ ЗначениеЗаполнено(СтрокаОС.СчетУчета) Тогда
			СтрокаОС.СчетУчета = СтрокаСчетУчета.СчетУчета;
		КонецЕсли;
	КонецЦикла;	
 
	Объект.ОС.Загрузить(ТаблицаОС);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуСчетУчетаОС(Знач ТаблицаОС, Знач Организация, Знач Дата) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаОС", ТаблицаОС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаОС
	|ИЗ
	|	&ТаблицаОС КАК ТаблицаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета
	|ПОМЕСТИТЬ ТаблицаСчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						ТаблицаОС.ОсновноеСредство
	|					ИЗ
	|						ТаблицаОС КАК ТаблицаОС)) КАК СчетаБухгалтерскогоУчетаОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(ТаблицаСчетУчета.СчетУчета, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета
	|ИЗ
	|	ТаблицаОС КАК ТаблицаОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТаблицаСчетУчета КАК ТаблицаСчетУчета
	|	ПО
	|		ТаблицаОС.ОсновноеСредство = ТаблицаСчетУчета.ОсновноеСредство
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

&НаКлиенте
Процедура ИзменениеСтрокиОС(ЭтоНовый = Ложь, Копирование = Ложь)

	ДанныеЗаполнения	= ?(Не ЭтоНовый ИЛИ Копирование, ПолучитьСтруктуруТабличнойЧастиОС(), Новый Структура);
	ДанныеЗаполнения.Вставить("Ссылка",						Объект.Ссылка);
	ДанныеЗаполнения.Вставить("Дата",						Объект.Дата);
	ДанныеЗаполнения.Вставить("Организация",				Объект.Организация);

	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("ЭтоНовый",			ЭтоНовый);
	СтруктураПараметров.Вставить("Копирование",			Копирование);
	СтруктураПараметров.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
	СтруктураПараметров.Вставить("ТолькоПросмотр",		ЭтаФорма.ТолькоПросмотр);

	ФормаРедактированияСтроки = ОткрытьФорму("Документ.АвизоОСИсходящее.Форма.ФормаРедактированияСтроки",
		СтруктураПараметров, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруТабличнойЧастиОС()

	СтрокаТаблицы	= Элементы.ОС.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;

	СтруктураТабличнойЧастиОС = Новый Структура(
		"Амортизация, 
		|АмортизацияВР,
		|АмортизацияДо2002НУ,
		|АмортизацияДо2009НУ,
		|АмортизацияНУ,
		|АмортизацияПР,
		|ГрафикАмортизации,
		|ДатаПринятияКУчету,
		|ДатаПриобретенияУСН,
		|ИнвентарныйНомер,
		|КоэффициентАмортизации,
		|КоэффициентУскорения,
		|НачислятьАмортизацию,
		|НачислятьАмортизациюНУ,
		|ОбъемПродукцииРабот,
		|ОбъемПродукцииРаботДляВычисленияАмортизации,
		|ОсновноеСредство,
		|ПараметрВыработки,
		|ПервоначальнаяСтоимость,
		|ПервоначальнаяСтоимостьНУ,
		|ПервоначальнаяСтоимостьУСН,
		|ПодразделениеОрганизации,
		|ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|ПорядокВключенияСтоимостиВСоставРасходовУСН,
		|ПорядокПогашенияСтоимости,
		|ПРДляВычисленияАмортизации,
		|СпециальныйКоэффициентНУ,
		|СпособНачисленияАмортизации,
		|СпособПоступления,
		|СпособыОтраженияРасходовПоАмортизации,
		|СрокИспользованияДляВычисленияАмортизации,
		|СрокПолезногоИспользования,
		|СрокПолезногоИспользованияНУ,
		|СрокПолезногоИспользованияУСН,
		|Стоимость,
		|СтоимостьВР,
		|СтоимостьДляВычисленияАмортизации,
		|СтоимостьДо2002НУ,
		|СтоимостьНУ,
		|СтоимостьПР,
		|СуммаНачисленнойАмортизацииУСН,
		|СчетНачисленияАмортизации,
		|СчетУчета,
		|ФактическийСрокИспользованияДо2009НУ,
		|Контрагент,
		|Обесценение,
		|ДоговорКонтрагента,
		|СпособОтраженияРасходовПоАренднымПлатежам,
		|КорректировкаСтоимостиНУ,
		|ЛиквидационнаяСтоимость");

	ЗаполнитьЗначенияСвойств(СтруктураТабличнойЧастиОС, СтрокаТаблицы);
		
	Возврат СтруктураТабличнойЧастиОС;

КонецФункции

&НаКлиенте
Процедура ОбработкаДанныхФормыРедактированияСтроки(ДанныеФормыРедактированияСтроки)

	Если НЕ ТипЗнч(ДанныеФормыРедактированияСтроки) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеФормыРедактированияСтроки.ЭтоНовый Тогда
		СтрокаТаблицы = Объект.ОС.Добавить();
	Иначе
		СтрокаТаблицы = Объект.ОС.НайтиПоИдентификатору(Элементы.ОС.ТекущаяСтрока);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ДанныеФормыРедактированияСтроки);
	
	Модифицированность	= Истина;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСписокВыбораПодразделений(ОтборПоОрганизации = Истина)
	
	УправляющийРеквизит = ?(ОтборПоОрганизации, Объект.Организация, Объект.ОрганизацияПолучатель);
	УправляющийЭлемент	= ?(ОтборПоОрганизации,Элементы.Организация, Элементы.ОрганизацияПолучатель);
	
	УправляемыйРеквизит = ?(ОтборПоОрганизации, Объект.ОрганизацияПолучатель, Объект.Организация);
	УправляемыйЭлемент	= ?(ОтборПоОрганизации, Элементы.ОрганизацияПолучатель, Элементы.Организация);
	
	Если ЗначениеЗаполнено(УправляющийРеквизит) Тогда 
		
		СписокВыбораПодразделений = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьСписокОбособленныхПодразделений(УправляющийРеквизит).ВыгрузитьЗначения();	
		
		УправляемыйЭлемент.РежимВыбораИзСписка = Истина;
		УправляемыйЭлемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбораПодразделений);
			
		Если УправляемыйЭлемент.СписокВыбора.НайтиПоЗначению(УправляющийРеквизит) = Неопределено Тогда
			
			УправляемыйРеквизит = Справочники.Организации.ПустаяСсылка();
			
		ИначеЕсли ЗначениеЗаполнено(УправляемыйРеквизит) Тогда
			
			УправляющийЭлемент.РежимВыбораИзСписка = Истина;
			УправляющийЭлемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбораПодразделений);

		КонецЕсли;                                            	
		
	Иначе
		
		УправляемыйЭлемент.РежимВыбораИзСписка = Ложь;
		УправляемыйЭлемент.СписокВыбора.Очистить();
		
		Если Не ЗначениеЗаполнено(УправляемыйРеквизит) Тогда 
			
			УправляющийЭлемент.РежимВыбораИзСписка = Ложь;
			УправляющийЭлемент.СписокВыбора.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти